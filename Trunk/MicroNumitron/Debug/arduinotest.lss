
arduinotest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000024fc  00002590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018d  00800154  00800154  000025e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000630  00000000  00000000  00002654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000db3b  00000000  00000000  00002c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000284c  00000000  00000000  000107bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022cd  00000000  00000000  0001300b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001330  00000000  00000000  000152d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002cd9  00000000  00000000  00016608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000070f2  00000000  00000000  000192e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  000203d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__ctors_end>
       4:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__vector_1>
       8:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__vector_2>
       c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      10:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      14:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      18:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      1c:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__vector_7>
      20:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      24:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      28:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      2c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      30:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      34:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      38:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      3c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      40:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__vector_16>
      44:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      48:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__vector_18>
      4c:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__vector_19>
      50:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      54:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      58:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      5c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      60:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__vector_24>
      64:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      68:	81 08       	sbc	r8, r1
      6a:	a2 08       	sbc	r10, r2
      6c:	a2 08       	sbc	r10, r2
      6e:	9f 08       	sbc	r9, r15
      70:	a2 08       	sbc	r10, r2
      72:	7d 08       	sbc	r7, r13
      74:	a2 08       	sbc	r10, r2
      76:	a2 08       	sbc	r10, r2
      78:	a2 08       	sbc	r10, r2
      7a:	6f 08       	sbc	r6, r15
      7c:	a2 08       	sbc	r10, r2
      7e:	a2 08       	sbc	r10, r2
      80:	8a 08       	sbc	r8, r10
      82:	9b 08       	sbc	r9, r11
      84:	97 08       	sbc	r9, r7
      86:	a2 08       	sbc	r10, r2
      88:	a2 08       	sbc	r10, r2
      8a:	a2 08       	sbc	r10, r2
      8c:	93 08       	sbc	r9, r3
      8e:	ff 0c       	add	r15, r15
      90:	03 0d       	add	r16, r3
      92:	03 0d       	add	r16, r3
      94:	03 0d       	add	r16, r3
      96:	03 0d       	add	r16, r3
      98:	03 0d       	add	r16, r3
      9a:	03 0d       	add	r16, r3
      9c:	03 0d       	add	r16, r3
      9e:	11 0c       	add	r1, r1
      a0:	03 0d       	add	r16, r3
      a2:	03 0d       	add	r16, r3
      a4:	03 0d       	add	r16, r3
      a6:	03 0d       	add	r16, r3
      a8:	03 0d       	add	r16, r3
      aa:	03 0d       	add	r16, r3
      ac:	03 0d       	add	r16, r3
      ae:	11 0c       	add	r1, r1
      b0:	03 0d       	add	r16, r3
      b2:	03 0d       	add	r16, r3
      b4:	03 0d       	add	r16, r3
      b6:	03 0d       	add	r16, r3
      b8:	03 0d       	add	r16, r3
      ba:	03 0d       	add	r16, r3
      bc:	03 0d       	add	r16, r3
      be:	19 0c       	add	r1, r9
      c0:	03 0d       	add	r16, r3
      c2:	03 0d       	add	r16, r3
      c4:	03 0d       	add	r16, r3
      c6:	03 0d       	add	r16, r3
      c8:	03 0d       	add	r16, r3
      ca:	03 0d       	add	r16, r3
      cc:	03 0d       	add	r16, r3
      ce:	3f 0c       	add	r3, r15
      d0:	03 0d       	add	r16, r3
      d2:	03 0d       	add	r16, r3
      d4:	03 0d       	add	r16, r3
      d6:	03 0d       	add	r16, r3
      d8:	03 0d       	add	r16, r3
      da:	03 0d       	add	r16, r3
      dc:	03 0d       	add	r16, r3
      de:	19 0c       	add	r1, r9
      e0:	03 0d       	add	r16, r3
      e2:	03 0d       	add	r16, r3
      e4:	03 0d       	add	r16, r3
      e6:	03 0d       	add	r16, r3
      e8:	03 0d       	add	r16, r3
      ea:	03 0d       	add	r16, r3
      ec:	03 0d       	add	r16, r3
      ee:	45 0c       	add	r4, r5
      f0:	03 0d       	add	r16, r3
      f2:	03 0d       	add	r16, r3
      f4:	03 0d       	add	r16, r3
      f6:	03 0d       	add	r16, r3
      f8:	03 0d       	add	r16, r3
      fa:	03 0d       	add	r16, r3
      fc:	03 0d       	add	r16, r3
      fe:	4b 0c       	add	r4, r11
     100:	03 0d       	add	r16, r3
     102:	03 0d       	add	r16, r3
     104:	03 0d       	add	r16, r3
     106:	03 0d       	add	r16, r3
     108:	03 0d       	add	r16, r3
     10a:	03 0d       	add	r16, r3
     10c:	03 0d       	add	r16, r3
     10e:	5d 0c       	add	r5, r13
     110:	03 0d       	add	r16, r3
     112:	03 0d       	add	r16, r3
     114:	03 0d       	add	r16, r3
     116:	03 0d       	add	r16, r3
     118:	03 0d       	add	r16, r3
     11a:	03 0d       	add	r16, r3
     11c:	03 0d       	add	r16, r3
     11e:	87 0c       	add	r8, r7
     120:	03 0d       	add	r16, r3
     122:	03 0d       	add	r16, r3
     124:	03 0d       	add	r16, r3
     126:	03 0d       	add	r16, r3
     128:	03 0d       	add	r16, r3
     12a:	03 0d       	add	r16, r3
     12c:	03 0d       	add	r16, r3
     12e:	51 0c       	add	r5, r1
     130:	03 0d       	add	r16, r3
     132:	03 0d       	add	r16, r3
     134:	03 0d       	add	r16, r3
     136:	03 0d       	add	r16, r3
     138:	03 0d       	add	r16, r3
     13a:	03 0d       	add	r16, r3
     13c:	03 0d       	add	r16, r3
     13e:	6b 0c       	add	r6, r11
     140:	03 0d       	add	r16, r3
     142:	03 0d       	add	r16, r3
     144:	03 0d       	add	r16, r3
     146:	03 0d       	add	r16, r3
     148:	03 0d       	add	r16, r3
     14a:	03 0d       	add	r16, r3
     14c:	03 0d       	add	r16, r3
     14e:	8a 0c       	add	r8, r10
     150:	03 0d       	add	r16, r3
     152:	03 0d       	add	r16, r3
     154:	03 0d       	add	r16, r3
     156:	03 0d       	add	r16, r3
     158:	03 0d       	add	r16, r3
     15a:	03 0d       	add	r16, r3
     15c:	03 0d       	add	r16, r3
     15e:	8a 0c       	add	r8, r10
     160:	03 0d       	add	r16, r3
     162:	03 0d       	add	r16, r3
     164:	03 0d       	add	r16, r3
     166:	03 0d       	add	r16, r3
     168:	03 0d       	add	r16, r3
     16a:	03 0d       	add	r16, r3
     16c:	03 0d       	add	r16, r3
     16e:	8a 0c       	add	r8, r10
     170:	03 0d       	add	r16, r3
     172:	03 0d       	add	r16, r3
     174:	03 0d       	add	r16, r3
     176:	03 0d       	add	r16, r3
     178:	03 0d       	add	r16, r3
     17a:	03 0d       	add	r16, r3
     17c:	03 0d       	add	r16, r3
     17e:	8a 0c       	add	r8, r10
     180:	03 0d       	add	r16, r3
     182:	03 0d       	add	r16, r3
     184:	03 0d       	add	r16, r3
     186:	03 0d       	add	r16, r3
     188:	03 0d       	add	r16, r3
     18a:	03 0d       	add	r16, r3
     18c:	03 0d       	add	r16, r3
     18e:	93 0c       	add	r9, r3
     190:	03 0d       	add	r16, r3
     192:	03 0d       	add	r16, r3
     194:	03 0d       	add	r16, r3
     196:	03 0d       	add	r16, r3
     198:	03 0d       	add	r16, r3
     19a:	03 0d       	add	r16, r3
     19c:	03 0d       	add	r16, r3
     19e:	c6 0c       	add	r12, r6
     1a0:	03 0d       	add	r16, r3
     1a2:	03 0d       	add	r16, r3
     1a4:	03 0d       	add	r16, r3
     1a6:	03 0d       	add	r16, r3
     1a8:	03 0d       	add	r16, r3
     1aa:	03 0d       	add	r16, r3
     1ac:	03 0d       	add	r16, r3
     1ae:	93 0c       	add	r9, r3
     1b0:	03 0d       	add	r16, r3
     1b2:	03 0d       	add	r16, r3
     1b4:	03 0d       	add	r16, r3
     1b6:	03 0d       	add	r16, r3
     1b8:	03 0d       	add	r16, r3
     1ba:	03 0d       	add	r16, r3
     1bc:	03 0d       	add	r16, r3
     1be:	c6 0c       	add	r12, r6
     1c0:	03 0d       	add	r16, r3
     1c2:	03 0d       	add	r16, r3
     1c4:	03 0d       	add	r16, r3
     1c6:	03 0d       	add	r16, r3
     1c8:	03 0d       	add	r16, r3
     1ca:	03 0d       	add	r16, r3
     1cc:	03 0d       	add	r16, r3
     1ce:	ab 0c       	add	r10, r11
     1d0:	03 0d       	add	r16, r3
     1d2:	03 0d       	add	r16, r3
     1d4:	03 0d       	add	r16, r3
     1d6:	03 0d       	add	r16, r3
     1d8:	03 0d       	add	r16, r3
     1da:	03 0d       	add	r16, r3
     1dc:	03 0d       	add	r16, r3
     1de:	ca 0c       	add	r12, r10
     1e0:	03 0d       	add	r16, r3
     1e2:	03 0d       	add	r16, r3
     1e4:	03 0d       	add	r16, r3
     1e6:	03 0d       	add	r16, r3
     1e8:	03 0d       	add	r16, r3
     1ea:	03 0d       	add	r16, r3
     1ec:	03 0d       	add	r16, r3
     1ee:	ca 0c       	add	r12, r10
     1f0:	03 0d       	add	r16, r3
     1f2:	03 0d       	add	r16, r3
     1f4:	03 0d       	add	r16, r3
     1f6:	03 0d       	add	r16, r3
     1f8:	03 0d       	add	r16, r3
     1fa:	03 0d       	add	r16, r3
     1fc:	03 0d       	add	r16, r3
     1fe:	df 0c       	add	r13, r15
     200:	03 0d       	add	r16, r3
     202:	03 0d       	add	r16, r3
     204:	03 0d       	add	r16, r3
     206:	03 0d       	add	r16, r3
     208:	03 0d       	add	r16, r3
     20a:	03 0d       	add	r16, r3
     20c:	03 0d       	add	r16, r3
     20e:	f9 0c       	add	r15, r9
     210:	03 0d       	add	r16, r3
     212:	03 0d       	add	r16, r3
     214:	03 0d       	add	r16, r3
     216:	03 0d       	add	r16, r3
     218:	03 0d       	add	r16, r3
     21a:	03 0d       	add	r16, r3
     21c:	03 0d       	add	r16, r3
     21e:	f9 0c       	add	r15, r9

00000220 <__trampolines_end>:
     220:	52 54       	subi	r21, 0x42	; 66
     222:	43 20       	and	r4, r3
     224:	54 69       	ori	r21, 0x94	; 148
     226:	6d 65       	ori	r22, 0x5D	; 93
     228:	20 73       	andi	r18, 0x30	; 48
     22a:	65 74       	andi	r22, 0x45	; 69
     22c:	21 00       	.word	0x0021	; ????

0000022e <_ZZ4InitvE3__c_0>:
     22e:	4f 63 74 20 32 32 20 32 30 31 35 00                 Oct 22 2015.

0000023a <_ZZ4InitvE3__c_1>:
     23a:	32 32 3a 30 33 3a 35 31 00                          22:03:51.

00000243 <_ZZ4InitvE3__c>:
     243:	52 54 43 20 69 73 20 4e 4f 54 20 72 75 6e 6e 69     RTC is NOT runni
     253:	6e 67 21 2c 20 43 68 65 63 6b 20 77 69 72 69 6e     ng!, Check wirin
     263:	67 20 73 65 74 75 70 2e 0d 0a 00                    g setup....

0000026e <_ZL21tone_pin_to_timer_PGM>:
     26e:	02                                                  .

0000026f <digital_pin_to_timer_PGM>:
     26f:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     27f:	00 00 00 00                                         ....

00000283 <digital_pin_to_bit_mask_PGM>:
     283:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     293:	04 08 10 20                                         ... 

00000297 <digital_pin_to_port_PGM>:
     297:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     2a7:	03 03 03 03                                         ....

000002ab <port_to_input_PGM>:
     2ab:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002b5 <port_to_output_PGM>:
     2b5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002bf <port_to_mode_PGM>:
     2bf:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000002ca <__ctors_start>:
     2ca:	9c 06       	cpc	r9, r28
     2cc:	0c 07       	cpc	r16, r28
     2ce:	81 0e       	add	r8, r17

000002d0 <__ctors_end>:
     2d0:	11 24       	eor	r1, r1
     2d2:	1f be       	out	0x3f, r1	; 63
     2d4:	cf ef       	ldi	r28, 0xFF	; 255
     2d6:	d4 e0       	ldi	r29, 0x04	; 4
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	cd bf       	out	0x3d, r28	; 61

000002dc <__do_copy_data>:
     2dc:	11 e0       	ldi	r17, 0x01	; 1
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b1 e0       	ldi	r27, 0x01	; 1
     2e2:	ec ef       	ldi	r30, 0xFC	; 252
     2e4:	f4 e2       	ldi	r31, 0x24	; 36
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x10>
     2e8:	05 90       	lpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	a4 35       	cpi	r26, 0x54	; 84
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0xc>

000002f2 <__do_clear_bss>:
     2f2:	22 e0       	ldi	r18, 0x02	; 2
     2f4:	a4 e5       	ldi	r26, 0x54	; 84
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	a1 3e       	cpi	r26, 0xE1	; 225
     2fe:	b2 07       	cpc	r27, r18
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>

00000302 <__do_global_ctors>:
     302:	11 e0       	ldi	r17, 0x01	; 1
     304:	c8 e6       	ldi	r28, 0x68	; 104
     306:	d1 e0       	ldi	r29, 0x01	; 1
     308:	04 c0       	rjmp	.+8      	; 0x312 <__do_global_ctors+0x10>
     30a:	21 97       	sbiw	r28, 0x01	; 1
     30c:	fe 01       	movw	r30, r28
     30e:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__tablejump2__>
     312:	c5 36       	cpi	r28, 0x65	; 101
     314:	d1 07       	cpc	r29, r17
     316:	c9 f7       	brne	.-14     	; 0x30a <__do_global_ctors+0x8>
     318:	0e 94 18 07 	call	0xe30	; 0xe30 <main>
     31c:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <_exit>

00000320 <__bad_interrupt>:
     320:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000324 <_Z16Interrupt_Updatev>:
	}

}

void Interrupt_Update()
{
     324:	08 95       	ret

00000326 <_Z4Initv>:
	//foo.
}

void Init()
{
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	00 d0       	rcall	.+0      	; 0x32c <_Z4Initv+0x6>
     32c:	00 d0       	rcall	.+0      	; 0x32e <_Z4Initv+0x8>
     32e:	00 d0       	rcall	.+0      	; 0x330 <_Z4Initv+0xa>
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
	//This is where we initialize everything.
	///////////////////////////////////////////////////////////
	
	//Coms will be setup later.
	
	Wire.begin();
     334:	86 e8       	ldi	r24, 0x86	; 134
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_ZN7TwoWire5beginEv>
	
	rtc.begin();
     33c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_ZN10RTC_DS13075beginEv>
	//pullups on the SDA(), and SCL() pins.
	
	SCL_PORT |= _BV(SCL_BIT);   // enable pull up on TWI clock line
	SDA_PORT |= _BV(SDA_BIT);   // enable pull up on TWI data line
	#else
	SCL_PORT &= _BV(SCL_BIT);   // disable pull up on TWI clock line
     340:	88 b1       	in	r24, 0x08	; 8
     342:	80 72       	andi	r24, 0x20	; 32
     344:	88 b9       	out	0x08, r24	; 8
	SDA_PORT &= _BV(SDA_BIT);   // disable pull up on TWI data line
     346:	88 b1       	in	r24, 0x08	; 8
     348:	80 71       	andi	r24, 0x10	; 16
     34a:	88 b9       	out	0x08, r24	; 8
	///////////////////////////////////////////////////////////
	//Pin Functions
	///////////////////////////////////////////////////////////

	//pinMode(Freq_Adj, INPUT);
	pinMode(INTERUPT_0, INPUT);
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	80 91 29 01 	lds	r24, 0x0129
     352:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <pinMode>
	pinMode(DATA_PIN, OUTPUT);
     356:	61 e0       	ldi	r22, 0x01	; 1
     358:	80 91 23 01 	lds	r24, 0x0123
     35c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <pinMode>
	pinMode(CLOCK, OUTPUT);
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	80 91 1f 01 	lds	r24, 0x011F
     366:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <pinMode>
	pinMode(LATCH, OUTPUT);
     36a:	61 e0       	ldi	r22, 0x01	; 1
     36c:	80 91 21 01 	lds	r24, 0x0121
     370:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <pinMode>
	pinMode(Select_BTN, INPUT);
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	80 91 27 01 	lds	r24, 0x0127
     37a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <pinMode>
	pinMode(Next_BTN, INPUT);
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	80 91 25 01 	lds	r24, 0x0125
     384:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <pinMode>
	//pinMode(FILL, OUTPUT);
	pinMode(LM35, INPUT);
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	80 91 1d 01 	lds	r24, 0x011D
     38e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <pinMode>
	
	///////////////////////////////////////////////////////////
	//If the RTC is not currently set to the correct time set the time
	//based on the time used when compiling this firmware.
	///////////////////////////////////////////////////////////
	if (! rtc.isrunning())
     392:	8e e5       	ldi	r24, 0x5E	; 94
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN10RTC_DS13079isrunningEv>
     39a:	81 11       	cpse	r24, r1
     39c:	1e c0       	rjmp	.+60     	; 0x3da <_Z4Initv+0xb4>
	{
		Serial.println(F("RTC is NOT running!, Check wiring setup.\r\n"));
     39e:	63 e4       	ldi	r22, 0x43	; 67
     3a0:	72 e0       	ldi	r23, 0x02	; 2
     3a2:	8a e6       	ldi	r24, 0x6A	; 106
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 99 07 	call	0xf32	; 0xf32 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(Delay_Time);
     3aa:	68 ec       	ldi	r22, 0xC8	; 200
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <delay>

		rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
     3b6:	4a e3       	ldi	r20, 0x3A	; 58
     3b8:	52 e0       	ldi	r21, 0x02	; 2
     3ba:	6e e2       	ldi	r22, 0x2E	; 46
     3bc:	72 e0       	ldi	r23, 0x02	; 2
     3be:	ce 01       	movw	r24, r28
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
     3c6:	ce 01       	movw	r24, r28
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN10RTC_DS13076adjustERK8DateTime>
		Serial.print(F("RTC Time set!"));
     3ce:	60 e2       	ldi	r22, 0x20	; 32
     3d0:	72 e0       	ldi	r23, 0x02	; 2
     3d2:	8a e6       	ldi	r24, 0x6A	; 106
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPK19__FlashStringHelper>
	
	///////////////////////////////////////////////////////////
	//This is setting the RTC Square wave pin output to 32.7kHz
	//We will be using this as our interrupt to update the time.

	rtc.writeSqwPinMode(modes[0]);
     3da:	80 91 00 01 	lds	r24, 0x0100
     3de:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_ZN10RTC_DS130715writeSqwPinModeE16Ds1307SqwPinMode>
	///////////////////////////////////////////////////////////
}
     3e2:	26 96       	adiw	r28, 0x06	; 6
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <_Z8readTempi>:
		}
	}
}

float readTemp (int internal)
{
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
	//We are oversampling the temp sensor by 100 cycles
	//for better overall average temperature, this gives
	//us a more stable reading.

	Temperature = 0;
     400:	10 92 5f 01 	sts	0x015F, r1
     404:	10 92 60 01 	sts	0x0160, r1
     408:	10 92 61 01 	sts	0x0161, r1
     40c:	10 92 62 01 	sts	0x0162, r1
	if (!internal) //if internal == 0
     410:	89 2b       	or	r24, r25
     412:	c9 f5       	brne	.+114    	; 0x486 <_Z8readTempi+0x92>
     414:	c4 e6       	ldi	r28, 0x64	; 100
     416:	d0 e0       	ldi	r29, 0x00	; 0
	{

		for(int x = 0; x <= 99; x++)
		{
			Temperature += analogRead(LM35);
     418:	0d e1       	ldi	r16, 0x1D	; 29
     41a:	11 e0       	ldi	r17, 0x01	; 1
     41c:	f8 01       	movw	r30, r16
     41e:	80 81       	ld	r24, Z
     420:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <analogRead>
     424:	bc 01       	movw	r22, r24
     426:	99 0f       	add	r25, r25
     428:	88 0b       	sbc	r24, r24
     42a:	99 0b       	sbc	r25, r25
     42c:	0e 94 2a 11 	call	0x2254	; 0x2254 <__floatsisf>
     430:	20 91 5f 01 	lds	r18, 0x015F
     434:	30 91 60 01 	lds	r19, 0x0160
     438:	40 91 61 01 	lds	r20, 0x0161
     43c:	50 91 62 01 	lds	r21, 0x0162
     440:	0e 94 86 10 	call	0x210c	; 0x210c <__addsf3>
     444:	60 93 5f 01 	sts	0x015F, r22
     448:	70 93 60 01 	sts	0x0160, r23
     44c:	80 93 61 01 	sts	0x0161, r24
     450:	90 93 62 01 	sts	0x0162, r25
     454:	21 97       	sbiw	r28, 0x01	; 1

	Temperature = 0;
	if (!internal) //if internal == 0
	{

		for(int x = 0; x <= 99; x++)
     456:	11 f7       	brne	.-60     	; 0x41c <_Z8readTempi+0x28>
		{
			Temperature += analogRead(LM35);
		}
		Temperature_C = Temperature * ((5.0*1000/1024));
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e4       	ldi	r19, 0x40	; 64
     45c:	4c e9       	ldi	r20, 0x9C	; 156
     45e:	50 e4       	ldi	r21, 0x40	; 64
     460:	0e 94 b6 11 	call	0x236c	; 0x236c <__mulsf3>
     464:	06 2f       	mov	r16, r22
     466:	17 2f       	mov	r17, r23
     468:	28 2f       	mov	r18, r24
     46a:	39 2f       	mov	r19, r25
     46c:	00 93 63 01 	sts	0x0163, r16
     470:	10 93 64 01 	sts	0x0164, r17
     474:	20 93 65 01 	sts	0x0165, r18
     478:	30 93 66 01 	sts	0x0166, r19
		return Temperature_C;
     47c:	56 2f       	mov	r21, r22
     47e:	47 2f       	mov	r20, r23
     480:	38 2f       	mov	r19, r24
     482:	29 2f       	mov	r18, r25
     484:	35 c0       	rjmp	.+106    	; 0x4f0 <_Z8readTempi+0xfc>
     486:	c4 e6       	ldi	r28, 0x64	; 100
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	00 e0       	ldi	r16, 0x00	; 0
     48c:	10 e0       	ldi	r17, 0x00	; 0
	{
		int iTemp_C = 0;
		int iTemperature = 0;
		for(int x = 0; x <= 99; x++)
		{
			iTemperature += analogRead(LM35);
     48e:	0f 2e       	mov	r0, r31
     490:	fd e1       	ldi	r31, 0x1D	; 29
     492:	ef 2e       	mov	r14, r31
     494:	f1 e0       	ldi	r31, 0x01	; 1
     496:	ff 2e       	mov	r15, r31
     498:	f0 2d       	mov	r31, r0
     49a:	f7 01       	movw	r30, r14
     49c:	80 81       	ld	r24, Z
     49e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <analogRead>
     4a2:	08 0f       	add	r16, r24
     4a4:	19 1f       	adc	r17, r25
     4a6:	21 97       	sbiw	r28, 0x01	; 1
	}
	else
	{
		int iTemp_C = 0;
		int iTemperature = 0;
		for(int x = 0; x <= 99; x++)
     4a8:	c1 f7       	brne	.-16     	; 0x49a <_Z8readTempi+0xa6>
		{
			iTemperature += analogRead(LM35);
		}
		iTemperature = iTemperature/100;
     4aa:	c8 01       	movw	r24, r16
     4ac:	64 e6       	ldi	r22, 0x64	; 100
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	0e 94 23 12 	call	0x2446	; 0x2446 <__divmodhi4>
		
		//same equation as above but we add 10 to the
		//final calculation since the display only displays
		//ints and not floats, we loose some accuracy, about
		//10degrees C.
		iTemp_C = iTemperature * ((5.0*1000/1024)) + 10;
     4b4:	07 2e       	mov	r0, r23
     4b6:	00 0c       	add	r0, r0
     4b8:	88 0b       	sbc	r24, r24
     4ba:	99 0b       	sbc	r25, r25
     4bc:	0e 94 2a 11 	call	0x2254	; 0x2254 <__floatsisf>
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	30 e4       	ldi	r19, 0x40	; 64
     4c4:	4c e9       	ldi	r20, 0x9C	; 156
     4c6:	50 e4       	ldi	r21, 0x40	; 64
     4c8:	0e 94 b6 11 	call	0x236c	; 0x236c <__mulsf3>
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	40 e2       	ldi	r20, 0x20	; 32
     4d2:	51 e4       	ldi	r21, 0x41	; 65
     4d4:	0e 94 86 10 	call	0x210c	; 0x210c <__addsf3>
     4d8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__fixsfsi>

		return iTemp_C;
     4dc:	07 2e       	mov	r0, r23
     4de:	00 0c       	add	r0, r0
     4e0:	88 0b       	sbc	r24, r24
     4e2:	99 0b       	sbc	r25, r25
     4e4:	0e 94 2a 11 	call	0x2254	; 0x2254 <__floatsisf>
     4e8:	56 2f       	mov	r21, r22
     4ea:	47 2f       	mov	r20, r23
     4ec:	38 2f       	mov	r19, r24
     4ee:	29 2f       	mov	r18, r25
	}
}
     4f0:	65 2f       	mov	r22, r21
     4f2:	74 2f       	mov	r23, r20
     4f4:	83 2f       	mov	r24, r19
     4f6:	92 2f       	mov	r25, r18
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	08 95       	ret

00000506 <_Z11convertTimei>:
{
	//This function is used to convert
	//a time eg a 24hr clock into a 12 hr
	//clock.
	
	if (value > 12)
     506:	8d 30       	cpi	r24, 0x0D	; 13
     508:	91 05       	cpc	r25, r1
     50a:	24 f0       	brlt	.+8      	; 0x514 <_Z11convertTimei+0xe>
	{
		value -= 12;
		return value;
     50c:	9c 01       	movw	r18, r24
     50e:	2c 50       	subi	r18, 0x0C	; 12
     510:	31 09       	sbc	r19, r1
     512:	05 c0       	rjmp	.+10     	; 0x51e <_Z11convertTimei+0x18>
	}
	else if (!value)
     514:	89 2b       	or	r24, r25
     516:	09 f0       	breq	.+2      	; 0x51a <_Z11convertTimei+0x14>
     518:	08 95       	ret
	{
		value = 12;
		return value;
     51a:	2c e0       	ldi	r18, 0x0C	; 12
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	82 2f       	mov	r24, r18
     520:	93 2f       	mov	r25, r19
	}
}
     522:	08 95       	ret

00000524 <_Z12BlankDisplayv>:

void BlankDisplay()
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
	//Blanks the current display being used.
	digitalWrite(LATCH, LOW);
     528:	c1 e2       	ldi	r28, 0x21	; 33
     52a:	d1 e0       	ldi	r29, 0x01	; 1
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	88 81       	ld	r24, Y
     530:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
	shiftOut(DATA_PIN, CLOCK, LSBFIRST, 0b11111111);
     534:	2f ef       	ldi	r18, 0xFF	; 255
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	60 91 1f 01 	lds	r22, 0x011F
     53c:	80 91 23 01 	lds	r24, 0x0123
     540:	0e 94 41 10 	call	0x2082	; 0x2082 <shiftOut>
	digitalWrite(LATCH, HIGH);
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	88 81       	ld	r24, Y
     548:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
	
	delay(TIME_DELAY);
     54c:	60 91 19 01 	lds	r22, 0x0119
     550:	70 91 1a 01 	lds	r23, 0x011A
     554:	07 2e       	mov	r0, r23
     556:	00 0c       	add	r0, r0
     558:	88 0b       	sbc	r24, r24
     55a:	99 0b       	sbc	r25, r25
     55c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <delay>
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <setup>:

void setup()
{
		
	//Initialize the clock
	Init();
     566:	0e 94 93 01 	call	0x326	; 0x326 <_Z4Initv>
	
	//clear display at start up.
	BlankDisplay();
     56a:	0e 94 92 02 	call	0x524	; 0x524 <_Z12BlankDisplayv>

	//allow interrupts
	sei();
     56e:	78 94       	sei
	
	//Interrupts
	attachInterrupt(0, Interrupt_Update, FALLING);
     570:	42 e0       	ldi	r20, 0x02	; 2
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	62 e9       	ldi	r22, 0x92	; 146
     576:	71 e0       	ldi	r23, 0x01	; 1
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <attachInterrupt>
     57e:	08 95       	ret

00000580 <_Z14Update_Displayv>:
	rtc.writeSqwPinMode(modes[0]);
	///////////////////////////////////////////////////////////
}

void Update_Display()
{
     580:	2f 92       	push	r2
     582:	3f 92       	push	r3
     584:	4f 92       	push	r4
     586:	5f 92       	push	r5
     588:	6f 92       	push	r6
     58a:	7f 92       	push	r7
     58c:	8f 92       	push	r8
     58e:	9f 92       	push	r9
     590:	af 92       	push	r10
     592:	bf 92       	push	r11
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	2a 97       	sbiw	r28, 0x0a	; 10
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
	///////////////////////////////////////////////////////////
	//This function updates the display on the VFD Tube.
	///////////////////////////////////////////////////////////
	DateTime now = rtc.now();
     5b4:	ce 01       	movw	r24, r28
     5b6:	01 96       	adiw	r24, 0x01	; 1
     5b8:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN10RTC_DS13073nowEv>
	int HR = 0;
	int MN = 0;

	MN = now.minute();
     5bc:	cd 80       	ldd	r12, Y+5	; 0x05
     5be:	d1 2c       	mov	r13, r1
	HR = now.hour();
     5c0:	8c 81       	ldd	r24, Y+4	; 0x04

	//Converting 24HR time to 12HR format.
	HR = convertTime(HR);
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 83 02 	call	0x506	; 0x506 <_Z11convertTimei>
     5c8:	9c 01       	movw	r18, r24
	//int provided in global variables.
	
	int x = 0;
	if(!pos)	//if pos == 0;
	{
		x = value % 10;
     5ca:	0a e0       	ldi	r16, 0x0A	; 10
     5cc:	10 e0       	ldi	r17, 0x00	; 0
     5ce:	b8 01       	movw	r22, r16
     5d0:	0e 94 23 12 	call	0x2446	; 0x2446 <__divmodhi4>
     5d4:	28 2e       	mov	r2, r24
     5d6:	39 2e       	mov	r3, r25
		Temp_Array[0] = x;
     5d8:	e4 e5       	ldi	r30, 0x54	; 84
     5da:	f1 e0       	ldi	r31, 0x01	; 1
     5dc:	91 83       	std	Z+1, r25	; 0x01
     5de:	80 83       	st	Z, r24
		value = (value - Temp_Array[0]) / 10;
     5e0:	a9 01       	movw	r20, r18
     5e2:	48 1b       	sub	r20, r24
     5e4:	59 0b       	sbc	r21, r25
     5e6:	ca 01       	movw	r24, r20
     5e8:	b8 01       	movw	r22, r16
     5ea:	0e 94 23 12 	call	0x2446	; 0x2446 <__divmodhi4>

	//Converting 24HR time to 12HR format.
	HR = convertTime(HR);
	
	//display hours first tens then one's position.
	Temp_Array[2] = splitInt(0,HR);
     5ee:	75 83       	std	Z+5, r23	; 0x05
     5f0:	64 83       	std	Z+4, r22	; 0x04
	for(int x = 0; x<=1;x++)
     5f2:	00 e0       	ldi	r16, 0x00	; 0
     5f4:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(Temp_Array[2] == splitInt(1,HR)){BlankDisplay();}
     5f6:	7f 01       	movw	r14, r30
		digitalWrite(LATCH, LOW);
     5f8:	0f 2e       	mov	r0, r31
     5fa:	f1 e2       	ldi	r31, 0x21	; 33
     5fc:	af 2e       	mov	r10, r31
     5fe:	f1 e0       	ldi	r31, 0x01	; 1
     600:	bf 2e       	mov	r11, r31
     602:	f0 2d       	mov	r31, r0
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(x,HR)]);
     604:	0f 2e       	mov	r0, r31
     606:	ff e1       	ldi	r31, 0x1F	; 31
     608:	8f 2e       	mov	r8, r31
     60a:	f1 e0       	ldi	r31, 0x01	; 1
     60c:	9f 2e       	mov	r9, r31
     60e:	f0 2d       	mov	r31, r0
     610:	0f 2e       	mov	r0, r31
     612:	f3 e2       	ldi	r31, 0x23	; 35
     614:	6f 2e       	mov	r6, r31
     616:	f1 e0       	ldi	r31, 0x01	; 1
     618:	7f 2e       	mov	r7, r31
     61a:	f0 2d       	mov	r31, r0
     61c:	cb 01       	movw	r24, r22
     61e:	8c 5f       	subi	r24, 0xFC	; 252
     620:	9e 4f       	sbci	r25, 0xFE	; 254
     622:	2c 01       	movw	r4, r24
	
	//display hours first tens then one's position.
	Temp_Array[2] = splitInt(0,HR);
	for(int x = 0; x<=1;x++)
	{
		if(Temp_Array[2] == splitInt(1,HR)){BlankDisplay();}
     624:	d7 01       	movw	r26, r14
     626:	14 96       	adiw	r26, 0x04	; 4
     628:	2d 91       	ld	r18, X+
     62a:	3c 91       	ld	r19, X
     62c:	15 97       	sbiw	r26, 0x05	; 5
     62e:	8d 91       	ld	r24, X+
     630:	9c 91       	ld	r25, X
     632:	28 17       	cp	r18, r24
     634:	39 07       	cpc	r19, r25
     636:	11 f4       	brne	.+4      	; 0x63c <_Z14Update_Displayv+0xbc>
     638:	0e 94 92 02 	call	0x524	; 0x524 <_Z12BlankDisplayv>
		digitalWrite(LATCH, LOW);
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	f5 01       	movw	r30, r10
     640:	80 81       	ld	r24, Z
     642:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
	//a temp_array[] of at least 1 length.
	//this can be substituted for a normal
	//int provided in global variables.
	
	int x = 0;
	if(!pos)	//if pos == 0;
     646:	01 15       	cp	r16, r1
     648:	11 05       	cpc	r17, r1
     64a:	f9 f4       	brne	.+62     	; 0x68a <_Z14Update_Displayv+0x10a>
	{
		x = value % 10;
		Temp_Array[0] = x;
     64c:	d7 01       	movw	r26, r14
     64e:	2c 92       	st	X, r2
     650:	11 96       	adiw	r26, 0x01	; 1
     652:	3c 92       	st	X, r3
	Temp_Array[2] = splitInt(0,HR);
	for(int x = 0; x<=1;x++)
	{
		if(Temp_Array[2] == splitInt(1,HR)){BlankDisplay();}
		digitalWrite(LATCH, LOW);
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(x,HR)]);
     654:	f2 01       	movw	r30, r4
     656:	20 81       	ld	r18, Z
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	d4 01       	movw	r26, r8
     65c:	6c 91       	ld	r22, X
     65e:	f3 01       	movw	r30, r6
     660:	80 81       	ld	r24, Z
     662:	0e 94 41 10 	call	0x2082	; 0x2082 <shiftOut>
		digitalWrite(LATCH, HIGH);
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	d5 01       	movw	r26, r10
     66a:	8c 91       	ld	r24, X
     66c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
		delay(TIME_DELAY);
     670:	60 91 19 01 	lds	r22, 0x0119
     674:	70 91 1a 01 	lds	r23, 0x011A
     678:	07 2e       	mov	r0, r23
     67a:	00 0c       	add	r0, r0
     67c:	88 0b       	sbc	r24, r24
     67e:	99 0b       	sbc	r25, r25
     680:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <delay>
	//Converting 24HR time to 12HR format.
	HR = convertTime(HR);
	
	//display hours first tens then one's position.
	Temp_Array[2] = splitInt(0,HR);
	for(int x = 0; x<=1;x++)
     684:	0f 5f       	subi	r16, 0xFF	; 255
     686:	1f 4f       	sbci	r17, 0xFF	; 255
     688:	cd cf       	rjmp	.-102    	; 0x624 <_Z14Update_Displayv+0xa4>
	{
		if(Temp_Array[2] == splitInt(1,HR)){BlankDisplay();}
		digitalWrite(LATCH, LOW);
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(x,HR)]);
     68a:	d7 01       	movw	r26, r14
     68c:	ed 91       	ld	r30, X+
     68e:	fc 91       	ld	r31, X
     690:	ec 5f       	subi	r30, 0xFC	; 252
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	20 81       	ld	r18, Z
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	f4 01       	movw	r30, r8
     69a:	60 81       	ld	r22, Z
     69c:	d3 01       	movw	r26, r6
     69e:	8c 91       	ld	r24, X
     6a0:	0e 94 41 10 	call	0x2082	; 0x2082 <shiftOut>
		digitalWrite(LATCH, HIGH);
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	f5 01       	movw	r30, r10
     6a8:	80 81       	ld	r24, Z
     6aa:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
		delay(TIME_DELAY);
     6ae:	60 91 19 01 	lds	r22, 0x0119
     6b2:	70 91 1a 01 	lds	r23, 0x011A
     6b6:	07 2e       	mov	r0, r23
     6b8:	00 0c       	add	r0, r0
     6ba:	88 0b       	sbc	r24, r24
     6bc:	99 0b       	sbc	r25, r25
     6be:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <delay>
	//Converting 24HR time to 12HR format.
	HR = convertTime(HR);
	
	//display hours first tens then one's position.
	Temp_Array[2] = splitInt(0,HR);
	for(int x = 0; x<=1;x++)
     6c2:	0f 5f       	subi	r16, 0xFF	; 255
     6c4:	1f 4f       	sbci	r17, 0xFF	; 255
     6c6:	02 30       	cpi	r16, 0x02	; 2
     6c8:	11 05       	cpc	r17, r1
     6ca:	09 f0       	breq	.+2      	; 0x6ce <_Z14Update_Displayv+0x14e>
     6cc:	ab cf       	rjmp	.-170    	; 0x624 <_Z14Update_Displayv+0xa4>
		delay(TIME_DELAY);
		
	}
	
	//Dash between HH:MM to separate Hours and minutes.
	digitalWrite(LATCH, LOW);
     6ce:	01 e2       	ldi	r16, 0x21	; 33
     6d0:	11 e0       	ldi	r17, 0x01	; 1
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	d8 01       	movw	r26, r16
     6d6:	8c 91       	ld	r24, X
     6d8:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
	shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[10]);
     6dc:	20 91 0e 01 	lds	r18, 0x010E
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	60 91 1f 01 	lds	r22, 0x011F
     6e6:	80 91 23 01 	lds	r24, 0x0123
     6ea:	0e 94 41 10 	call	0x2082	; 0x2082 <shiftOut>
	digitalWrite(LATCH, HIGH);
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	f8 01       	movw	r30, r16
     6f2:	80 81       	ld	r24, Z
     6f4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
	delay(TIME_DELAY);
     6f8:	60 91 19 01 	lds	r22, 0x0119
     6fc:	70 91 1a 01 	lds	r23, 0x011A
     700:	07 2e       	mov	r0, r23
     702:	00 0c       	add	r0, r0
     704:	88 0b       	sbc	r24, r24
     706:	99 0b       	sbc	r25, r25
     708:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <delay>
	//int provided in global variables.
	
	int x = 0;
	if(!pos)	//if pos == 0;
	{
		x = value % 10;
     70c:	2a e0       	ldi	r18, 0x0A	; 10
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	c6 01       	movw	r24, r12
     712:	b9 01       	movw	r22, r18
     714:	0e 94 23 12 	call	0x2446	; 0x2446 <__divmodhi4>
     718:	48 2e       	mov	r4, r24
     71a:	59 2e       	mov	r5, r25
		Temp_Array[0] = x;
     71c:	e4 e5       	ldi	r30, 0x54	; 84
     71e:	f1 e0       	ldi	r31, 0x01	; 1
     720:	91 83       	std	Z+1, r25	; 0x01
     722:	80 83       	st	Z, r24
		value = (value - Temp_Array[0]) / 10;
     724:	a6 01       	movw	r20, r12
     726:	48 1b       	sub	r20, r24
     728:	59 0b       	sbc	r21, r25
     72a:	ca 01       	movw	r24, r20
     72c:	b9 01       	movw	r22, r18
     72e:	0e 94 23 12 	call	0x2446	; 0x2446 <__divmodhi4>
	digitalWrite(LATCH, HIGH);
	delay(TIME_DELAY);


	//display minutes first tens then one's position
	Temp_Array[3] = splitInt(0,MN);
     732:	77 83       	std	Z+7, r23	; 0x07
     734:	66 83       	std	Z+6, r22	; 0x06
	for(int y = 0;y<=1;y++)
     736:	00 e0       	ldi	r16, 0x00	; 0
     738:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(Temp_Array[3] == splitInt(1,MN)){BlankDisplay();}
     73a:	7f 01       	movw	r14, r30
		digitalWrite(LATCH, LOW);
     73c:	0f 2e       	mov	r0, r31
     73e:	f1 e2       	ldi	r31, 0x21	; 33
     740:	cf 2e       	mov	r12, r31
     742:	f1 e0       	ldi	r31, 0x01	; 1
     744:	df 2e       	mov	r13, r31
     746:	f0 2d       	mov	r31, r0
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(y,MN)]);
     748:	0f 2e       	mov	r0, r31
     74a:	ff e1       	ldi	r31, 0x1F	; 31
     74c:	8f 2e       	mov	r8, r31
     74e:	f1 e0       	ldi	r31, 0x01	; 1
     750:	9f 2e       	mov	r9, r31
     752:	f0 2d       	mov	r31, r0
     754:	0f 2e       	mov	r0, r31
     756:	f3 e2       	ldi	r31, 0x23	; 35
     758:	af 2e       	mov	r10, r31
     75a:	f1 e0       	ldi	r31, 0x01	; 1
     75c:	bf 2e       	mov	r11, r31
     75e:	f0 2d       	mov	r31, r0
     760:	cb 01       	movw	r24, r22
     762:	8c 5f       	subi	r24, 0xFC	; 252
     764:	9e 4f       	sbci	r25, 0xFE	; 254
     766:	3c 01       	movw	r6, r24

	//display minutes first tens then one's position
	Temp_Array[3] = splitInt(0,MN);
	for(int y = 0;y<=1;y++)
	{
		if(Temp_Array[3] == splitInt(1,MN)){BlankDisplay();}
     768:	d7 01       	movw	r26, r14
     76a:	16 96       	adiw	r26, 0x06	; 6
     76c:	2d 91       	ld	r18, X+
     76e:	3c 91       	ld	r19, X
     770:	17 97       	sbiw	r26, 0x07	; 7
     772:	8d 91       	ld	r24, X+
     774:	9c 91       	ld	r25, X
     776:	28 17       	cp	r18, r24
     778:	39 07       	cpc	r19, r25
     77a:	11 f4       	brne	.+4      	; 0x780 <_Z14Update_Displayv+0x200>
     77c:	0e 94 92 02 	call	0x524	; 0x524 <_Z12BlankDisplayv>
		digitalWrite(LATCH, LOW);
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	f6 01       	movw	r30, r12
     784:	80 81       	ld	r24, Z
     786:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
	//a temp_array[] of at least 1 length.
	//this can be substituted for a normal
	//int provided in global variables.
	
	int x = 0;
	if(!pos)	//if pos == 0;
     78a:	01 15       	cp	r16, r1
     78c:	11 05       	cpc	r17, r1
     78e:	f9 f4       	brne	.+62     	; 0x7ce <_Z14Update_Displayv+0x24e>
	{
		x = value % 10;
		Temp_Array[0] = x;
     790:	d7 01       	movw	r26, r14
     792:	4c 92       	st	X, r4
     794:	11 96       	adiw	r26, 0x01	; 1
     796:	5c 92       	st	X, r5
	Temp_Array[3] = splitInt(0,MN);
	for(int y = 0;y<=1;y++)
	{
		if(Temp_Array[3] == splitInt(1,MN)){BlankDisplay();}
		digitalWrite(LATCH, LOW);
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(y,MN)]);
     798:	f3 01       	movw	r30, r6
     79a:	20 81       	ld	r18, Z
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	d4 01       	movw	r26, r8
     7a0:	6c 91       	ld	r22, X
     7a2:	f5 01       	movw	r30, r10
     7a4:	80 81       	ld	r24, Z
     7a6:	0e 94 41 10 	call	0x2082	; 0x2082 <shiftOut>
		digitalWrite(LATCH, HIGH);
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	d6 01       	movw	r26, r12
     7ae:	8c 91       	ld	r24, X
     7b0:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
		delay(TIME_DELAY);
     7b4:	60 91 19 01 	lds	r22, 0x0119
     7b8:	70 91 1a 01 	lds	r23, 0x011A
     7bc:	07 2e       	mov	r0, r23
     7be:	00 0c       	add	r0, r0
     7c0:	88 0b       	sbc	r24, r24
     7c2:	99 0b       	sbc	r25, r25
     7c4:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <delay>
	delay(TIME_DELAY);


	//display minutes first tens then one's position
	Temp_Array[3] = splitInt(0,MN);
	for(int y = 0;y<=1;y++)
     7c8:	0f 5f       	subi	r16, 0xFF	; 255
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	cd cf       	rjmp	.-102    	; 0x768 <_Z14Update_Displayv+0x1e8>
	{
		if(Temp_Array[3] == splitInt(1,MN)){BlankDisplay();}
		digitalWrite(LATCH, LOW);
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(y,MN)]);
     7ce:	d7 01       	movw	r26, r14
     7d0:	ed 91       	ld	r30, X+
     7d2:	fc 91       	ld	r31, X
     7d4:	ec 5f       	subi	r30, 0xFC	; 252
     7d6:	fe 4f       	sbci	r31, 0xFE	; 254
     7d8:	20 81       	ld	r18, Z
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	f4 01       	movw	r30, r8
     7de:	60 81       	ld	r22, Z
     7e0:	d5 01       	movw	r26, r10
     7e2:	8c 91       	ld	r24, X
     7e4:	0e 94 41 10 	call	0x2082	; 0x2082 <shiftOut>
		digitalWrite(LATCH, HIGH);
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	f6 01       	movw	r30, r12
     7ec:	80 81       	ld	r24, Z
     7ee:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
		delay(TIME_DELAY);
     7f2:	60 91 19 01 	lds	r22, 0x0119
     7f6:	70 91 1a 01 	lds	r23, 0x011A
     7fa:	07 2e       	mov	r0, r23
     7fc:	00 0c       	add	r0, r0
     7fe:	88 0b       	sbc	r24, r24
     800:	99 0b       	sbc	r25, r25
     802:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <delay>
	delay(TIME_DELAY);


	//display minutes first tens then one's position
	Temp_Array[3] = splitInt(0,MN);
	for(int y = 0;y<=1;y++)
     806:	0f 5f       	subi	r16, 0xFF	; 255
     808:	1f 4f       	sbci	r17, 0xFF	; 255
     80a:	02 30       	cpi	r16, 0x02	; 2
     80c:	11 05       	cpc	r17, r1
     80e:	09 f0       	breq	.+2      	; 0x812 <_Z14Update_Displayv+0x292>
     810:	ab cf       	rjmp	.-170    	; 0x768 <_Z14Update_Displayv+0x1e8>
		digitalWrite(LATCH, HIGH);
		delay(TIME_DELAY);
	}

	//Blank display
	BlankDisplay();
     812:	0e 94 92 02 	call	0x524	; 0x524 <_Z12BlankDisplayv>
	
	if(tempDisplay == true)
     816:	80 91 18 01 	lds	r24, 0x0118
     81a:	88 23       	and	r24, r24
     81c:	09 f4       	brne	.+2      	; 0x820 <_Z14Update_Displayv+0x2a0>
     81e:	10 c1       	rjmp	.+544    	; 0xa40 <_Z14Update_Displayv+0x4c0>
	{
		//Display Temperature.
		Temp_Array[4] = splitInt(0,readTemp(1));
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z8readTempi>
     828:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__fixsfsi>
     82c:	8b 01       	movw	r16, r22
     82e:	9c 01       	movw	r18, r24
	//int provided in global variables.
	
	int x = 0;
	if(!pos)	//if pos == 0;
	{
		x = value % 10;
     830:	0f 2e       	mov	r0, r31
     832:	fa e0       	ldi	r31, 0x0A	; 10
     834:	ef 2e       	mov	r14, r31
     836:	f1 2c       	mov	r15, r1
     838:	f0 2d       	mov	r31, r0
     83a:	cb 01       	movw	r24, r22
     83c:	b7 01       	movw	r22, r14
     83e:	0e 94 23 12 	call	0x2446	; 0x2446 <__divmodhi4>
		Temp_Array[0] = x;
     842:	e4 e5       	ldi	r30, 0x54	; 84
     844:	f1 e0       	ldi	r31, 0x01	; 1
     846:	91 83       	std	Z+1, r25	; 0x01
     848:	80 83       	st	Z, r24
		value = (value - Temp_Array[0]) / 10;
     84a:	a8 01       	movw	r20, r16
     84c:	48 1b       	sub	r20, r24
     84e:	59 0b       	sbc	r21, r25
     850:	ca 01       	movw	r24, r20
     852:	b7 01       	movw	r22, r14
     854:	0e 94 23 12 	call	0x2446	; 0x2446 <__divmodhi4>
	BlankDisplay();
	
	if(tempDisplay == true)
	{
		//Display Temperature.
		Temp_Array[4] = splitInt(0,readTemp(1));
     858:	71 87       	std	Z+9, r23	; 0x09
     85a:	60 87       	std	Z+8, r22	; 0x08
		for (int z = 0; z <= 1; z++)
     85c:	00 e0       	ldi	r16, 0x00	; 0
     85e:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(Temp_Array[4] == splitInt(1,readTemp(1))){BlankDisplay();}
     860:	7f 01       	movw	r14, r30
			digitalWrite(LATCH, LOW);
     862:	0f 2e       	mov	r0, r31
     864:	f1 e2       	ldi	r31, 0x21	; 33
     866:	cf 2e       	mov	r12, r31
     868:	f1 e0       	ldi	r31, 0x01	; 1
     86a:	df 2e       	mov	r13, r31
     86c:	f0 2d       	mov	r31, r0
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(z,readTemp(1))]);
     86e:	0f 2e       	mov	r0, r31
     870:	ff e1       	ldi	r31, 0x1F	; 31
     872:	8f 2e       	mov	r8, r31
     874:	f1 e0       	ldi	r31, 0x01	; 1
     876:	9f 2e       	mov	r9, r31
     878:	f0 2d       	mov	r31, r0
     87a:	0f 2e       	mov	r0, r31
     87c:	f3 e2       	ldi	r31, 0x23	; 35
     87e:	6f 2e       	mov	r6, r31
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	7f 2e       	mov	r7, r31
     884:	f0 2d       	mov	r31, r0
	//int provided in global variables.
	
	int x = 0;
	if(!pos)	//if pos == 0;
	{
		x = value % 10;
     886:	0f 2e       	mov	r0, r31
     888:	fa e0       	ldi	r31, 0x0A	; 10
     88a:	4f 2e       	mov	r4, r31
     88c:	51 2c       	mov	r5, r1
     88e:	f0 2d       	mov	r31, r0
	{
		//Display Temperature.
		Temp_Array[4] = splitInt(0,readTemp(1));
		for (int z = 0; z <= 1; z++)
		{
			if(Temp_Array[4] == splitInt(1,readTemp(1))){BlankDisplay();}
     890:	d7 01       	movw	r26, r14
     892:	18 96       	adiw	r26, 0x08	; 8
     894:	ad 90       	ld	r10, X+
     896:	bc 90       	ld	r11, X
     898:	19 97       	sbiw	r26, 0x09	; 9
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z8readTempi>
     8a2:	f7 01       	movw	r30, r14
     8a4:	80 81       	ld	r24, Z
     8a6:	91 81       	ldd	r25, Z+1	; 0x01
     8a8:	a8 16       	cp	r10, r24
     8aa:	b9 06       	cpc	r11, r25
     8ac:	11 f4       	brne	.+4      	; 0x8b2 <_Z14Update_Displayv+0x332>
     8ae:	0e 94 92 02 	call	0x524	; 0x524 <_Z12BlankDisplayv>
			digitalWrite(LATCH, LOW);
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	d6 01       	movw	r26, r12
     8b6:	8c 91       	ld	r24, X
     8b8:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(z,readTemp(1))]);
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z8readTempi>
	//a temp_array[] of at least 1 length.
	//this can be substituted for a normal
	//int provided in global variables.
	
	int x = 0;
	if(!pos)	//if pos == 0;
     8c4:	01 15       	cp	r16, r1
     8c6:	11 05       	cpc	r17, r1
     8c8:	99 f5       	brne	.+102    	; 0x930 <_Z14Update_Displayv+0x3b0>
		Temp_Array[4] = splitInt(0,readTemp(1));
		for (int z = 0; z <= 1; z++)
		{
			if(Temp_Array[4] == splitInt(1,readTemp(1))){BlankDisplay();}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(z,readTemp(1))]);
     8ca:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__fixsfsi>
     8ce:	6f 83       	std	Y+7, r22	; 0x07
     8d0:	78 87       	std	Y+8, r23	; 0x08
     8d2:	89 87       	std	Y+9, r24	; 0x09
     8d4:	9a 87       	std	Y+10, r25	; 0x0a
	//int provided in global variables.
	
	int x = 0;
	if(!pos)	//if pos == 0;
	{
		x = value % 10;
     8d6:	8f 81       	ldd	r24, Y+7	; 0x07
     8d8:	98 85       	ldd	r25, Y+8	; 0x08
     8da:	b2 01       	movw	r22, r4
     8dc:	0e 94 23 12 	call	0x2446	; 0x2446 <__divmodhi4>
		Temp_Array[0] = x;
     8e0:	f7 01       	movw	r30, r14
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	80 83       	st	Z, r24
		value = (value - Temp_Array[0]) / 10;
     8e6:	2f 81       	ldd	r18, Y+7	; 0x07
     8e8:	38 85       	ldd	r19, Y+8	; 0x08
     8ea:	28 1b       	sub	r18, r24
     8ec:	39 0b       	sbc	r19, r25
     8ee:	c9 01       	movw	r24, r18
     8f0:	b2 01       	movw	r22, r4
     8f2:	0e 94 23 12 	call	0x2446	; 0x2446 <__divmodhi4>
		Temp_Array[4] = splitInt(0,readTemp(1));
		for (int z = 0; z <= 1; z++)
		{
			if(Temp_Array[4] == splitInt(1,readTemp(1))){BlankDisplay();}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(z,readTemp(1))]);
     8f6:	fb 01       	movw	r30, r22
     8f8:	ec 5f       	subi	r30, 0xFC	; 252
     8fa:	fe 4f       	sbci	r31, 0xFE	; 254
     8fc:	20 81       	ld	r18, Z
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	d4 01       	movw	r26, r8
     902:	6c 91       	ld	r22, X
     904:	f3 01       	movw	r30, r6
     906:	80 81       	ld	r24, Z
     908:	0e 94 41 10 	call	0x2082	; 0x2082 <shiftOut>
			digitalWrite(LATCH, HIGH);
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	d6 01       	movw	r26, r12
     910:	8c 91       	ld	r24, X
     912:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
			delay(TIME_DELAY);
     916:	60 91 19 01 	lds	r22, 0x0119
     91a:	70 91 1a 01 	lds	r23, 0x011A
     91e:	07 2e       	mov	r0, r23
     920:	00 0c       	add	r0, r0
     922:	88 0b       	sbc	r24, r24
     924:	99 0b       	sbc	r25, r25
     926:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <delay>
	
	if(tempDisplay == true)
	{
		//Display Temperature.
		Temp_Array[4] = splitInt(0,readTemp(1));
		for (int z = 0; z <= 1; z++)
     92a:	0f 5f       	subi	r16, 0xFF	; 255
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	b0 cf       	rjmp	.-160    	; 0x890 <_Z14Update_Displayv+0x310>
		{
			if(Temp_Array[4] == splitInt(1,readTemp(1))){BlankDisplay();}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(z,readTemp(1))]);
     930:	d7 01       	movw	r26, r14
     932:	ed 91       	ld	r30, X+
     934:	fc 91       	ld	r31, X
     936:	ec 5f       	subi	r30, 0xFC	; 252
     938:	fe 4f       	sbci	r31, 0xFE	; 254
     93a:	20 81       	ld	r18, Z
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	f4 01       	movw	r30, r8
     940:	60 81       	ld	r22, Z
     942:	d3 01       	movw	r26, r6
     944:	8c 91       	ld	r24, X
     946:	0e 94 41 10 	call	0x2082	; 0x2082 <shiftOut>
			digitalWrite(LATCH, HIGH);
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	f6 01       	movw	r30, r12
     94e:	80 81       	ld	r24, Z
     950:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
			delay(TIME_DELAY);
     954:	60 91 19 01 	lds	r22, 0x0119
     958:	70 91 1a 01 	lds	r23, 0x011A
     95c:	07 2e       	mov	r0, r23
     95e:	00 0c       	add	r0, r0
     960:	88 0b       	sbc	r24, r24
     962:	99 0b       	sbc	r25, r25
     964:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <delay>
	
	if(tempDisplay == true)
	{
		//Display Temperature.
		Temp_Array[4] = splitInt(0,readTemp(1));
		for (int z = 0; z <= 1; z++)
     968:	0f 5f       	subi	r16, 0xFF	; 255
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	02 30       	cpi	r16, 0x02	; 2
     96e:	11 05       	cpc	r17, r1
     970:	09 f0       	breq	.+2      	; 0x974 <_Z14Update_Displayv+0x3f4>
     972:	8e cf       	rjmp	.-228    	; 0x890 <_Z14Update_Displayv+0x310>
			digitalWrite(LATCH, HIGH);
			delay(TIME_DELAY);
		}

		//display a degree symbol
		digitalWrite(LATCH, LOW);
     974:	01 e2       	ldi	r16, 0x21	; 33
     976:	11 e0       	ldi	r17, 0x01	; 1
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	d8 01       	movw	r26, r16
     97c:	8c 91       	ld	r24, X
     97e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[15]);
     982:	20 91 13 01 	lds	r18, 0x0113
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	60 91 1f 01 	lds	r22, 0x011F
     98c:	80 91 23 01 	lds	r24, 0x0123
     990:	0e 94 41 10 	call	0x2082	; 0x2082 <shiftOut>
		digitalWrite(LATCH, HIGH);
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	f8 01       	movw	r30, r16
     998:	80 81       	ld	r24, Z
     99a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
		delay(TIME_DELAY);
     99e:	60 91 19 01 	lds	r22, 0x0119
     9a2:	70 91 1a 01 	lds	r23, 0x011A
     9a6:	07 2e       	mov	r0, r23
     9a8:	00 0c       	add	r0, r0
     9aa:	88 0b       	sbc	r24, r24
     9ac:	99 0b       	sbc	r25, r25
     9ae:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <delay>
		
		BlankDisplay();
     9b2:	0e 94 92 02 	call	0x524	; 0x524 <_Z12BlankDisplayv>
		if(tempCORF == false)
     9b6:	80 91 67 01 	lds	r24, 0x0167
     9ba:	81 11       	cpse	r24, r1
     9bc:	20 c0       	rjmp	.+64     	; 0x9fe <_Z14Update_Displayv+0x47e>
		{
			//display a Celsius (c) symbol
			digitalWrite(LATCH, LOW);
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	d8 01       	movw	r26, r16
     9c2:	8c 91       	ld	r24, X
     9c4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[16]);
     9c8:	20 91 14 01 	lds	r18, 0x0114
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	60 91 1f 01 	lds	r22, 0x011F
     9d2:	80 91 23 01 	lds	r24, 0x0123
     9d6:	0e 94 41 10 	call	0x2082	; 0x2082 <shiftOut>
			digitalWrite(LATCH, HIGH);
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	f8 01       	movw	r30, r16
     9de:	80 81       	ld	r24, Z
     9e0:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
			delay(TIME_DELAY);
     9e4:	60 91 19 01 	lds	r22, 0x0119
     9e8:	70 91 1a 01 	lds	r23, 0x011A
     9ec:	07 2e       	mov	r0, r23
     9ee:	00 0c       	add	r0, r0
     9f0:	88 0b       	sbc	r24, r24
     9f2:	99 0b       	sbc	r25, r25
     9f4:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <delay>

			BlankDisplay();
     9f8:	0e 94 92 02 	call	0x524	; 0x524 <_Z12BlankDisplayv>
     9fc:	21 c0       	rjmp	.+66     	; 0xa40 <_Z14Update_Displayv+0x4c0>
		}
		else
		{
			//display a Celsius (c) symbol
			digitalWrite(LATCH, LOW);
     9fe:	01 e2       	ldi	r16, 0x21	; 33
     a00:	11 e0       	ldi	r17, 0x01	; 1
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	d8 01       	movw	r26, r16
     a06:	8c 91       	ld	r24, X
     a08:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[16]);
     a0c:	20 91 14 01 	lds	r18, 0x0114
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	60 91 1f 01 	lds	r22, 0x011F
     a16:	80 91 23 01 	lds	r24, 0x0123
     a1a:	0e 94 41 10 	call	0x2082	; 0x2082 <shiftOut>
			digitalWrite(LATCH, HIGH);
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	f8 01       	movw	r30, r16
     a22:	80 81       	ld	r24, Z
     a24:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
			delay(TIME_DELAY);
     a28:	60 91 19 01 	lds	r22, 0x0119
     a2c:	70 91 1a 01 	lds	r23, 0x011A
     a30:	07 2e       	mov	r0, r23
     a32:	00 0c       	add	r0, r0
     a34:	88 0b       	sbc	r24, r24
     a36:	99 0b       	sbc	r25, r25
     a38:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <delay>

			BlankDisplay();
     a3c:	0e 94 92 02 	call	0x524	; 0x524 <_Z12BlankDisplayv>
		}
	}
}
     a40:	2a 96       	adiw	r28, 0x0a	; 10
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	bf 90       	pop	r11
     a5e:	af 90       	pop	r10
     a60:	9f 90       	pop	r9
     a62:	8f 90       	pop	r8
     a64:	7f 90       	pop	r7
     a66:	6f 90       	pop	r6
     a68:	5f 90       	pop	r5
     a6a:	4f 90       	pop	r4
     a6c:	3f 90       	pop	r3
     a6e:	2f 90       	pop	r2
     a70:	08 95       	ret

00000a72 <loop>:

}

void loop()
{
	if (PPS_COUNT == PPS_TIMER)
     a72:	20 91 68 01 	lds	r18, 0x0168
     a76:	30 91 69 01 	lds	r19, 0x0169
     a7a:	80 91 1b 01 	lds	r24, 0x011B
     a7e:	90 91 1c 01 	lds	r25, 0x011C
     a82:	28 17       	cp	r18, r24
     a84:	39 07       	cpc	r19, r25
     a86:	81 f4       	brne	.+32     	; 0xaa8 <loop+0x36>
	{
		detachInterrupt(0);
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <detachInterrupt>
		//Start the internal update
		//Internal_Update();
		
		//Update the VFD display
		Update_Display();
     a8e:	0e 94 c0 02 	call	0x580	; 0x580 <_Z14Update_Displayv>
		PPS_COUNT = 0;
     a92:	10 92 69 01 	sts	0x0169, r1
     a96:	10 92 68 01 	sts	0x0168, r1
		attachInterrupt(0, Interrupt_Update, RISING);
     a9a:	43 e0       	ldi	r20, 0x03	; 3
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	62 e9       	ldi	r22, 0x92	; 146
     aa0:	71 e0       	ldi	r23, 0x01	; 1
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <attachInterrupt>
		
		//Flush the serial buffer for good measure.
		//Serial.flush();
	}
	
	if (digitalRead(Select_BTN)==HIGH)
     aa8:	80 91 27 01 	lds	r24, 0x0127
     aac:	0e 94 18 10 	call	0x2030	; 0x2030 <digitalRead>
	{
		//setTime();
	}
	
	if(digitalRead(Next_BTN)==HIGH)
     ab0:	80 91 25 01 	lds	r24, 0x0125
     ab4:	0e 94 18 10 	call	0x2030	; 0x2030 <digitalRead>
     ab8:	08 95       	ret

00000aba <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     aba:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     abc:	91 8d       	ldd	r25, Z+25	; 0x19
     abe:	22 8d       	ldd	r18, Z+26	; 0x1a
     ac0:	89 2f       	mov	r24, r25
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	80 5c       	subi	r24, 0xC0	; 192
     ac6:	9f 4f       	sbci	r25, 0xFF	; 255
     ac8:	82 1b       	sub	r24, r18
     aca:	91 09       	sbc	r25, r1
}
     acc:	8f 73       	andi	r24, 0x3F	; 63
     ace:	99 27       	eor	r25, r25
     ad0:	08 95       	ret

00000ad2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     ad2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     ad4:	91 8d       	ldd	r25, Z+25	; 0x19
     ad6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ad8:	98 17       	cp	r25, r24
     ada:	31 f0       	breq	.+12     	; 0xae8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     adc:	82 8d       	ldd	r24, Z+26	; 0x1a
     ade:	e8 0f       	add	r30, r24
     ae0:	f1 1d       	adc	r31, r1
     ae2:	85 8d       	ldd	r24, Z+29	; 0x1d
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     aec:	08 95       	ret

00000aee <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     aee:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     af0:	91 8d       	ldd	r25, Z+25	; 0x19
     af2:	82 8d       	ldd	r24, Z+26	; 0x1a
     af4:	98 17       	cp	r25, r24
     af6:	61 f0       	breq	.+24     	; 0xb10 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     af8:	82 8d       	ldd	r24, Z+26	; 0x1a
     afa:	df 01       	movw	r26, r30
     afc:	a8 0f       	add	r26, r24
     afe:	b1 1d       	adc	r27, r1
     b00:	5d 96       	adiw	r26, 0x1d	; 29
     b02:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     b04:	92 8d       	ldd	r25, Z+26	; 0x1a
     b06:	9f 5f       	subi	r25, 0xFF	; 255
     b08:	9f 73       	andi	r25, 0x3F	; 63
     b0a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     b14:	08 95       	ret

00000b16 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     b16:	82 e9       	ldi	r24, 0x92	; 146
     b18:	96 e0       	ldi	r25, 0x06	; 6
     b1a:	89 2b       	or	r24, r25
     b1c:	49 f0       	breq	.+18     	; 0xb30 <_Z14serialEventRunv+0x1a>
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	89 2b       	or	r24, r25
     b24:	29 f0       	breq	.+10     	; 0xb30 <_Z14serialEventRunv+0x1a>
     b26:	0e 94 92 06 	call	0xd24	; 0xd24 <_Z17Serial0_availablev>
     b2a:	81 11       	cpse	r24, r1
     b2c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     b30:	08 95       	ret

00000b32 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     b32:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     b34:	84 8d       	ldd	r24, Z+28	; 0x1c
     b36:	df 01       	movw	r26, r30
     b38:	a8 0f       	add	r26, r24
     b3a:	b1 1d       	adc	r27, r1
     b3c:	a3 5a       	subi	r26, 0xA3	; 163
     b3e:	bf 4f       	sbci	r27, 0xFF	; 255
     b40:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     b42:	24 8d       	ldd	r18, Z+28	; 0x1c
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	3f 4f       	sbci	r19, 0xFF	; 255
     b4a:	2f 73       	andi	r18, 0x3F	; 63
     b4c:	30 78       	andi	r19, 0x80	; 128
     b4e:	33 23       	and	r19, r19
     b50:	34 f4       	brge	.+12     	; 0xb5e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     b52:	21 50       	subi	r18, 0x01	; 1
     b54:	31 09       	sbc	r19, r1
     b56:	20 6c       	ori	r18, 0xC0	; 192
     b58:	3f 6f       	ori	r19, 0xFF	; 255
     b5a:	2f 5f       	subi	r18, 0xFF	; 255
     b5c:	3f 4f       	sbci	r19, 0xFF	; 255
     b5e:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     b60:	a6 89       	ldd	r26, Z+22	; 0x16
     b62:	b7 89       	ldd	r27, Z+23	; 0x17
     b64:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     b66:	a0 89       	ldd	r26, Z+16	; 0x10
     b68:	b1 89       	ldd	r27, Z+17	; 0x11
     b6a:	8c 91       	ld	r24, X
     b6c:	80 64       	ori	r24, 0x40	; 64
     b6e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     b70:	93 8d       	ldd	r25, Z+27	; 0x1b
     b72:	84 8d       	ldd	r24, Z+28	; 0x1c
     b74:	98 13       	cpse	r25, r24
     b76:	06 c0       	rjmp	.+12     	; 0xb84 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     b78:	02 88       	ldd	r0, Z+18	; 0x12
     b7a:	f3 89       	ldd	r31, Z+19	; 0x13
     b7c:	e0 2d       	mov	r30, r0
     b7e:	80 81       	ld	r24, Z
     b80:	8f 7d       	andi	r24, 0xDF	; 223
     b82:	80 83       	st	Z, r24
     b84:	08 95       	ret

00000b86 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     b8c:	88 8d       	ldd	r24, Y+24	; 0x18
     b8e:	81 11       	cpse	r24, r1
     b90:	0f c0       	rjmp	.+30     	; 0xbb0 <_ZN14HardwareSerial5flushEv+0x2a>
     b92:	18 c0       	rjmp	.+48     	; 0xbc4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	07 fc       	sbrc	r0, 7
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <_ZN14HardwareSerial5flushEv+0x2e>
     b9a:	90 81       	ld	r25, Z
     b9c:	95 ff       	sbrs	r25, 5
     b9e:	0a c0       	rjmp	.+20     	; 0xbb4 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     ba0:	a8 89       	ldd	r26, Y+16	; 0x10
     ba2:	b9 89       	ldd	r27, Y+17	; 0x11
     ba4:	8c 91       	ld	r24, X
     ba6:	85 ff       	sbrs	r24, 5
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
     baa:	ce 01       	movw	r24, r28
     bac:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     bb0:	ea 89       	ldd	r30, Y+18	; 0x12
     bb2:	fb 89       	ldd	r31, Y+19	; 0x13
     bb4:	90 81       	ld	r25, Z
     bb6:	95 fd       	sbrc	r25, 5
     bb8:	ed cf       	rjmp	.-38     	; 0xb94 <_ZN14HardwareSerial5flushEv+0xe>
     bba:	a8 89       	ldd	r26, Y+16	; 0x10
     bbc:	b9 89       	ldd	r27, Y+17	; 0x11
     bbe:	8c 91       	ld	r24, X
     bc0:	86 ff       	sbrs	r24, 6
     bc2:	e8 cf       	rjmp	.-48     	; 0xb94 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	fc 01       	movw	r30, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     bd4:	93 8d       	ldd	r25, Z+27	; 0x1b
     bd6:	84 8d       	ldd	r24, Z+28	; 0x1c
     bd8:	98 13       	cpse	r25, r24
     bda:	24 c0       	rjmp	.+72     	; 0xc24 <_ZN14HardwareSerial5writeEh+0x5a>
     bdc:	a0 89       	ldd	r26, Z+16	; 0x10
     bde:	b1 89       	ldd	r27, Z+17	; 0x11
     be0:	8c 91       	ld	r24, X
     be2:	85 fd       	sbrc	r24, 5
     be4:	31 c0       	rjmp	.+98     	; 0xc48 <_ZN14HardwareSerial5writeEh+0x7e>
     be6:	1e c0       	rjmp	.+60     	; 0xc24 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	07 fc       	sbrc	r0, 7
     bec:	08 c0       	rjmp	.+16     	; 0xbfe <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     bee:	e8 89       	ldd	r30, Y+16	; 0x10
     bf0:	f9 89       	ldd	r31, Y+17	; 0x11
     bf2:	80 81       	ld	r24, Z
     bf4:	85 ff       	sbrs	r24, 5
     bf6:	03 c0       	rjmp	.+6      	; 0xbfe <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     bf8:	ce 01       	movw	r24, r28
     bfa:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c00:	09 17       	cp	r16, r25
     c02:	91 f3       	breq	.-28     	; 0xbe8 <_ZN14HardwareSerial5writeEh+0x1e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     c04:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c06:	fe 01       	movw	r30, r28
     c08:	e8 0f       	add	r30, r24
     c0a:	f1 1d       	adc	r31, r1
     c0c:	e3 5a       	subi	r30, 0xA3	; 163
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     c12:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     c14:	ea 89       	ldd	r30, Y+18	; 0x12
     c16:	fb 89       	ldd	r31, Y+19	; 0x13
     c18:	80 81       	ld	r24, Z
     c1a:	80 62       	ori	r24, 0x20	; 32
     c1c:	80 83       	st	Z, r24
  _written = true;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
     c22:	1b c0       	rjmp	.+54     	; 0xc5a <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     c24:	23 8d       	ldd	r18, Z+27	; 0x1b
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	2f 5f       	subi	r18, 0xFF	; 255
     c2a:	3f 4f       	sbci	r19, 0xFF	; 255
     c2c:	2f 73       	andi	r18, 0x3F	; 63
     c2e:	30 78       	andi	r19, 0x80	; 128
     c30:	33 23       	and	r19, r19
     c32:	34 f4       	brge	.+12     	; 0xc40 <_ZN14HardwareSerial5writeEh+0x76>
     c34:	21 50       	subi	r18, 0x01	; 1
     c36:	31 09       	sbc	r19, r1
     c38:	20 6c       	ori	r18, 0xC0	; 192
     c3a:	3f 6f       	ori	r19, 0xFF	; 255
     c3c:	2f 5f       	subi	r18, 0xFF	; 255
     c3e:	3f 4f       	sbci	r19, 0xFF	; 255
     c40:	16 2f       	mov	r17, r22
     c42:	ef 01       	movw	r28, r30
     c44:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     c46:	db cf       	rjmp	.-74     	; 0xbfe <_ZN14HardwareSerial5writeEh+0x34>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     c48:	a6 89       	ldd	r26, Z+22	; 0x16
     c4a:	b7 89       	ldd	r27, Z+23	; 0x17
     c4c:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     c4e:	00 88       	ldd	r0, Z+16	; 0x10
     c50:	f1 89       	ldd	r31, Z+17	; 0x11
     c52:	e0 2d       	mov	r30, r0
     c54:	80 81       	ld	r24, Z
     c56:	80 64       	ori	r24, 0x40	; 64
     c58:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     c68:	1f 92       	push	r1
     c6a:	0f 92       	push	r0
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	0f 92       	push	r0
     c70:	11 24       	eor	r1, r1
     c72:	2f 93       	push	r18
     c74:	8f 93       	push	r24
     c76:	9f 93       	push	r25
     c78:	af 93       	push	r26
     c7a:	bf 93       	push	r27
     c7c:	ef 93       	push	r30
     c7e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     c80:	e0 91 7a 01 	lds	r30, 0x017A
     c84:	f0 91 7b 01 	lds	r31, 0x017B
     c88:	80 81       	ld	r24, Z
     c8a:	82 fd       	sbrc	r24, 2
     c8c:	14 c0       	rjmp	.+40     	; 0xcb6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     c8e:	ea e6       	ldi	r30, 0x6A	; 106
     c90:	f1 e0       	ldi	r31, 0x01	; 1
     c92:	a6 89       	ldd	r26, Z+22	; 0x16
     c94:	b7 89       	ldd	r27, Z+23	; 0x17
     c96:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     c98:	81 8d       	ldd	r24, Z+25	; 0x19
     c9a:	8f 5f       	subi	r24, 0xFF	; 255
     c9c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     c9e:	92 8d       	ldd	r25, Z+26	; 0x1a
     ca0:	89 17       	cp	r24, r25
     ca2:	71 f0       	breq	.+28     	; 0xcc0 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
     ca4:	df 01       	movw	r26, r30
     ca6:	e1 8d       	ldd	r30, Z+25	; 0x19
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	e6 59       	subi	r30, 0x96	; 150
     cac:	fe 4f       	sbci	r31, 0xFE	; 254
     cae:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     cb0:	59 96       	adiw	r26, 0x19	; 25
     cb2:	8c 93       	st	X, r24
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     cb6:	e0 91 80 01 	lds	r30, 0x0180
     cba:	f0 91 81 01 	lds	r31, 0x0181
     cbe:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	2f 91       	pop	r18
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	0f 90       	pop	r0
     cd4:	1f 90       	pop	r1
     cd6:	18 95       	reti

00000cd8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     cd8:	1f 92       	push	r1
     cda:	0f 92       	push	r0
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	0f 92       	push	r0
     ce0:	11 24       	eor	r1, r1
     ce2:	2f 93       	push	r18
     ce4:	3f 93       	push	r19
     ce6:	4f 93       	push	r20
     ce8:	5f 93       	push	r21
     cea:	6f 93       	push	r22
     cec:	7f 93       	push	r23
     cee:	8f 93       	push	r24
     cf0:	9f 93       	push	r25
     cf2:	af 93       	push	r26
     cf4:	bf 93       	push	r27
     cf6:	ef 93       	push	r30
     cf8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     cfa:	8a e6       	ldi	r24, 0x6A	; 106
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     d24:	8a e6       	ldi	r24, 0x6A	; 106
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZN14HardwareSerial9availableEv>
     d2c:	21 e0       	ldi	r18, 0x01	; 1
     d2e:	89 2b       	or	r24, r25
     d30:	09 f4       	brne	.+2      	; 0xd34 <_Z17Serial0_availablev+0x10>
     d32:	20 e0       	ldi	r18, 0x00	; 0
}
     d34:	82 2f       	mov	r24, r18
     d36:	08 95       	ret

00000d38 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     d38:	ea e6       	ldi	r30, 0x6A	; 106
     d3a:	f1 e0       	ldi	r31, 0x01	; 1
     d3c:	13 82       	std	Z+3, r1	; 0x03
     d3e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     d40:	88 ee       	ldi	r24, 0xE8	; 232
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	a0 e0       	ldi	r26, 0x00	; 0
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	84 83       	std	Z+4, r24	; 0x04
     d4a:	95 83       	std	Z+5, r25	; 0x05
     d4c:	a6 83       	std	Z+6, r26	; 0x06
     d4e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     d50:	81 e3       	ldi	r24, 0x31	; 49
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	91 83       	std	Z+1, r25	; 0x01
     d56:	80 83       	st	Z, r24
     d58:	85 ec       	ldi	r24, 0xC5	; 197
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	95 87       	std	Z+13, r25	; 0x0d
     d5e:	84 87       	std	Z+12, r24	; 0x0c
     d60:	84 ec       	ldi	r24, 0xC4	; 196
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	97 87       	std	Z+15, r25	; 0x0f
     d66:	86 87       	std	Z+14, r24	; 0x0e
     d68:	80 ec       	ldi	r24, 0xC0	; 192
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	91 8b       	std	Z+17, r25	; 0x11
     d6e:	80 8b       	std	Z+16, r24	; 0x10
     d70:	81 ec       	ldi	r24, 0xC1	; 193
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	93 8b       	std	Z+19, r25	; 0x13
     d76:	82 8b       	std	Z+18, r24	; 0x12
     d78:	82 ec       	ldi	r24, 0xC2	; 194
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	95 8b       	std	Z+21, r25	; 0x15
     d7e:	84 8b       	std	Z+20, r24	; 0x14
     d80:	86 ec       	ldi	r24, 0xC6	; 198
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	97 8b       	std	Z+23, r25	; 0x17
     d86:	86 8b       	std	Z+22, r24	; 0x16
     d88:	11 8e       	std	Z+25, r1	; 0x19
     d8a:	12 8e       	std	Z+26, r1	; 0x1a
     d8c:	13 8e       	std	Z+27, r1	; 0x1b
     d8e:	14 8e       	std	Z+28, r1	; 0x1c
     d90:	08 95       	ret

00000d92 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     d92:	08 95       	ret

00000d94 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     d94:	8f 92       	push	r8
     d96:	9f 92       	push	r9
     d98:	af 92       	push	r10
     d9a:	bf 92       	push	r11
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	5c 01       	movw	r10, r24
     dae:	7b 01       	movw	r14, r22
     db0:	4c 01       	movw	r8, r24
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	88 0e       	add	r8, r24
     db6:	91 1c       	adc	r9, r1
     db8:	65 01       	movw	r12, r10
     dba:	e5 e0       	ldi	r30, 0x05	; 5
     dbc:	ce 0e       	add	r12, r30
     dbe:	d1 1c       	adc	r13, r1
    size_t n = 0;
     dc0:	00 e0       	ldi	r16, 0x00	; 0
     dc2:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     dc4:	f4 01       	movw	r30, r8
     dc6:	61 91       	ld	r22, Z+
     dc8:	4f 01       	movw	r8, r30
     dca:	4a e0       	ldi	r20, 0x0A	; 10
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	c7 01       	movw	r24, r14
     dd0:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN5Print5printEhi>
     dd4:	ec 01       	movw	r28, r24
        n += p.print('.');
     dd6:	6e e2       	ldi	r22, 0x2E	; 46
     dd8:	c7 01       	movw	r24, r14
     dda:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN5Print5printEc>
     dde:	8c 0f       	add	r24, r28
     de0:	9d 1f       	adc	r25, r29
     de2:	08 0f       	add	r16, r24
     de4:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     de6:	8c 14       	cp	r8, r12
     de8:	9d 04       	cpc	r9, r13
     dea:	61 f7       	brne	.-40     	; 0xdc4 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     dec:	4a e0       	ldi	r20, 0x0A	; 10
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	f5 01       	movw	r30, r10
     df2:	65 81       	ldd	r22, Z+5	; 0x05
     df4:	c7 01       	movw	r24, r14
     df6:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN5Print5printEhi>
    return n;
}
     dfa:	80 0f       	add	r24, r16
     dfc:	91 1f       	adc	r25, r17
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	df 90       	pop	r13
     e0c:	cf 90       	pop	r12
     e0e:	bf 90       	pop	r11
     e10:	af 90       	pop	r10
     e12:	9f 90       	pop	r9
     e14:	8f 90       	pop	r8
     e16:	08 95       	ret

00000e18 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     e18:	e7 e0       	ldi	r30, 0x07	; 7
     e1a:	f2 e0       	ldi	r31, 0x02	; 2
     e1c:	81 e4       	ldi	r24, 0x41	; 65
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     e24:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     e26:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     e28:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     e2a:	15 82       	std	Z+5, r1	; 0x05
     e2c:	08 95       	ret

00000e2e <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     e2e:	08 95       	ret

00000e30 <main>:

int main(void)
{
	init();
     e30:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <init>

	initVariant();
     e34:	0e 94 17 07 	call	0xe2e	; 0xe2e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     e38:	0e 94 b3 02 	call	0x566	; 0x566 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     e3c:	cb e8       	ldi	r28, 0x8B	; 139
     e3e:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     e40:	0e 94 39 05 	call	0xa72	; 0xa72 <loop>
		if (serialEventRun) serialEventRun();
     e44:	20 97       	sbiw	r28, 0x00	; 0
     e46:	e1 f3       	breq	.-8      	; 0xe40 <main+0x10>
     e48:	0e 94 8b 05 	call	0xb16	; 0xb16 <_Z14serialEventRunv>
     e4c:	f9 cf       	rjmp	.-14     	; 0xe40 <main+0x10>

00000e4e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     e4e:	cf 92       	push	r12
     e50:	df 92       	push	r13
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
     e5e:	41 15       	cp	r20, r1
     e60:	51 05       	cpc	r21, r1
     e62:	b1 f0       	breq	.+44     	; 0xe90 <_ZN5Print5writeEPKhj+0x42>
     e64:	8c 01       	movw	r16, r24
     e66:	e6 2e       	mov	r14, r22
     e68:	f7 2e       	mov	r15, r23
     e6a:	ea 01       	movw	r28, r20
     e6c:	c1 2c       	mov	r12, r1
     e6e:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
     e70:	d7 01       	movw	r26, r14
     e72:	6d 91       	ld	r22, X+
     e74:	7d 01       	movw	r14, r26
     e76:	d8 01       	movw	r26, r16
     e78:	ed 91       	ld	r30, X+
     e7a:	fc 91       	ld	r31, X
     e7c:	01 90       	ld	r0, Z+
     e7e:	f0 81       	ld	r31, Z
     e80:	e0 2d       	mov	r30, r0
     e82:	c8 01       	movw	r24, r16
     e84:	09 95       	icall
     e86:	c8 0e       	add	r12, r24
     e88:	d9 1e       	adc	r13, r25
     e8a:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     e8c:	89 f7       	brne	.-30     	; 0xe70 <_ZN5Print5writeEPKhj+0x22>
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
     e90:	c1 2c       	mov	r12, r1
     e92:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
     e94:	c6 01       	movw	r24, r12
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	08 95       	ret

00000ea8 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     eb4:	eb 01       	movw	r28, r22
     eb6:	21 96       	adiw	r28, 0x01	; 1
     eb8:	fb 01       	movw	r30, r22
     eba:	64 91       	lpm	r22, Z
    if (c == 0) break;
     ebc:	66 23       	and	r22, r22
     ebe:	99 f0       	breq	.+38     	; 0xee6 <_ZN5Print5printEPK19__FlashStringHelper+0x3e>
     ec0:	8c 01       	movw	r16, r24
     ec2:	e1 2c       	mov	r14, r1
     ec4:	f1 2c       	mov	r15, r1
    n += write(c);
     ec6:	d8 01       	movw	r26, r16
     ec8:	ed 91       	ld	r30, X+
     eca:	fc 91       	ld	r31, X
     ecc:	01 90       	ld	r0, Z+
     ece:	f0 81       	ld	r31, Z
     ed0:	e0 2d       	mov	r30, r0
     ed2:	c8 01       	movw	r24, r16
     ed4:	09 95       	icall
     ed6:	e8 0e       	add	r14, r24
     ed8:	f9 1e       	adc	r15, r25
size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     eda:	fe 01       	movw	r30, r28
     edc:	64 91       	lpm	r22, Z
     ede:	21 96       	adiw	r28, 0x01	; 1
    if (c == 0) break;
     ee0:	61 11       	cpse	r22, r1
     ee2:	f1 cf       	rjmp	.-30     	; 0xec6 <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <_ZN5Print5printEPK19__FlashStringHelper+0x42>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     ee6:	e1 2c       	mov	r14, r1
     ee8:	f1 2c       	mov	r15, r1
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
     eea:	c7 01       	movw	r24, r14
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	08 95       	ret

00000efa <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     efa:	dc 01       	movw	r26, r24
     efc:	ed 91       	ld	r30, X+
     efe:	fc 91       	ld	r31, X
     f00:	01 90       	ld	r0, Z+
     f02:	f0 81       	ld	r31, Z
     f04:	e0 2d       	mov	r30, r0
     f06:	09 95       	icall
}
     f08:	08 95       	ret

00000f0a <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
  size_t n = print('\r');
     f14:	6d e0       	ldi	r22, 0x0D	; 13
     f16:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN5Print5printEc>
     f1a:	8c 01       	movw	r16, r24
  n += print('\n');
     f1c:	6a e0       	ldi	r22, 0x0A	; 10
     f1e:	ce 01       	movw	r24, r28
     f20:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN5Print5printEc>
  return n;
}
     f24:	80 0f       	add	r24, r16
     f26:	91 1f       	adc	r25, r17
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	08 95       	ret

00000f32 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
     f3c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPK19__FlashStringHelper>
     f40:	8c 01       	movw	r16, r24
  n += println();
     f42:	ce 01       	movw	r24, r28
     f44:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN5Print7printlnEv>
  return n;
}
     f48:	80 0f       	add	r24, r16
     f4a:	91 1f       	adc	r25, r17
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	08 95       	ret

00000f56 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     f56:	4f 92       	push	r4
     f58:	5f 92       	push	r5
     f5a:	6f 92       	push	r6
     f5c:	7f 92       	push	r7
     f5e:	9f 92       	push	r9
     f60:	af 92       	push	r10
     f62:	bf 92       	push	r11
     f64:	cf 92       	push	r12
     f66:	df 92       	push	r13
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	a1 97       	sbiw	r28, 0x21	; 33
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	5c 01       	movw	r10, r24
     f86:	6a 01       	movw	r12, r20
     f88:	7b 01       	movw	r14, r22
     f8a:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     f8c:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	82 17       	cp	r24, r18
     f92:	20 f0       	brcs	.+8      	; 0xf9c <_ZN5Print11printNumberEmh+0x46>
     f94:	0f 2e       	mov	r0, r31
     f96:	fa e0       	ldi	r31, 0x0A	; 10
     f98:	9f 2e       	mov	r9, r31
     f9a:	f0 2d       	mov	r31, r0
     f9c:	8e 01       	movw	r16, r28
     f9e:	0f 5d       	subi	r16, 0xDF	; 223
     fa0:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
     fa2:	49 2c       	mov	r4, r9
     fa4:	51 2c       	mov	r5, r1
     fa6:	61 2c       	mov	r6, r1
     fa8:	71 2c       	mov	r7, r1
     faa:	c7 01       	movw	r24, r14
     fac:	b6 01       	movw	r22, r12
     fae:	a3 01       	movw	r20, r6
     fb0:	92 01       	movw	r18, r4
     fb2:	0e 94 37 12 	call	0x246e	; 0x246e <__udivmodsi4>
    char c = m - base * n;
     fb6:	8c 2d       	mov	r24, r12
     fb8:	92 9e       	mul	r9, r18
     fba:	80 19       	sub	r24, r0
     fbc:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     fbe:	01 50       	subi	r16, 0x01	; 1
     fc0:	11 09       	sbc	r17, r1
     fc2:	8a 30       	cpi	r24, 0x0A	; 10
     fc4:	10 f4       	brcc	.+4      	; 0xfca <_ZN5Print11printNumberEmh+0x74>
     fc6:	80 5d       	subi	r24, 0xD0	; 208
     fc8:	01 c0       	rjmp	.+2      	; 0xfcc <_ZN5Print11printNumberEmh+0x76>
     fca:	89 5c       	subi	r24, 0xC9	; 201
     fcc:	d8 01       	movw	r26, r16
     fce:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     fd0:	c2 2e       	mov	r12, r18
     fd2:	d3 2e       	mov	r13, r19
     fd4:	e4 2e       	mov	r14, r20
     fd6:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     fd8:	c1 14       	cp	r12, r1
     fda:	d1 04       	cpc	r13, r1
     fdc:	e1 04       	cpc	r14, r1
     fde:	f1 04       	cpc	r15, r1
     fe0:	21 f7       	brne	.-56     	; 0xfaa <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     fe2:	01 15       	cp	r16, r1
     fe4:	11 05       	cpc	r17, r1
     fe6:	91 f0       	breq	.+36     	; 0x100c <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
     fe8:	f8 01       	movw	r30, r16
     fea:	01 90       	ld	r0, Z+
     fec:	00 20       	and	r0, r0
     fee:	e9 f7       	brne	.-6      	; 0xfea <_ZN5Print11printNumberEmh+0x94>
     ff0:	31 97       	sbiw	r30, 0x01	; 1
     ff2:	af 01       	movw	r20, r30
     ff4:	40 1b       	sub	r20, r16
     ff6:	51 0b       	sbc	r21, r17
     ff8:	d5 01       	movw	r26, r10
     ffa:	ed 91       	ld	r30, X+
     ffc:	fc 91       	ld	r31, X
     ffe:	02 80       	ldd	r0, Z+2	; 0x02
    1000:	f3 81       	ldd	r31, Z+3	; 0x03
    1002:	e0 2d       	mov	r30, r0
    1004:	b8 01       	movw	r22, r16
    1006:	c5 01       	movw	r24, r10
    1008:	09 95       	icall
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    1010:	a1 96       	adiw	r28, 0x21	; 33
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	bf 90       	pop	r11
    102e:	af 90       	pop	r10
    1030:	9f 90       	pop	r9
    1032:	7f 90       	pop	r7
    1034:	6f 90       	pop	r6
    1036:	5f 90       	pop	r5
    1038:	4f 90       	pop	r4
    103a:	08 95       	ret

0000103c <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    103c:	21 15       	cp	r18, r1
    103e:	31 05       	cpc	r19, r1
    1040:	49 f4       	brne	.+18     	; 0x1054 <_ZN5Print5printEmi+0x18>
    1042:	dc 01       	movw	r26, r24
    1044:	ed 91       	ld	r30, X+
    1046:	fc 91       	ld	r31, X
    1048:	01 90       	ld	r0, Z+
    104a:	f0 81       	ld	r31, Z
    104c:	e0 2d       	mov	r30, r0
    104e:	64 2f       	mov	r22, r20
    1050:	09 95       	icall
    1052:	08 95       	ret
  else return printNumber(n, base);
    1054:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZN5Print11printNumberEmh>
}
    1058:	08 95       	ret

0000105a <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    105a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    105c:	46 2f       	mov	r20, r22
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN5Print5printEmi>
}
    1068:	08 95       	ret

0000106a <_ZL6conv2dPKc>:
  hh(copy.hh),
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    106a:	fc 01       	movw	r30, r24
    uint8_t v = 0;
    if ('0' <= *p && *p <= '9')
    106c:	90 81       	ld	r25, Z
    106e:	90 53       	subi	r25, 0x30	; 48
    1070:	9a 30       	cpi	r25, 0x0A	; 10
    1072:	08 f0       	brcs	.+2      	; 0x1076 <_ZL6conv2dPKc+0xc>
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    uint8_t v = 0;
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	81 81       	ldd	r24, Z+1	; 0x01
    1078:	80 53       	subi	r24, 0x30	; 48
    if ('0' <= *p && *p <= '9')
        v = *p - '0';
    return 10 * v + *++p - '0';
    107a:	99 0f       	add	r25, r25
    107c:	29 2f       	mov	r18, r25
    107e:	22 0f       	add	r18, r18
    1080:	22 0f       	add	r18, r18
    1082:	92 0f       	add	r25, r18
}
    1084:	89 0f       	add	r24, r25
    1086:	08 95       	ret

00001088 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
}

// A convenient constructor for using "the compiler's time":
// This version will save RAM by using PROGMEM to store it by using the F macro.
//   DateTime now (F(__DATE__), F(__TIME__));
DateTime::DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time) {
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	2b 97       	sbiw	r28, 0x0b	; 11
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	7c 01       	movw	r14, r24
    10aa:	6a 01       	movw	r12, r20
    // sample input: date = "Dec 26 2009", time = "12:34:56"
    char buff[11];
    memcpy_P(buff, date, 11);
    10ac:	4b e0       	ldi	r20, 0x0B	; 11
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	ce 01       	movw	r24, r28
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	0e 94 73 12 	call	0x24e6	; 0x24e6 <memcpy_P>
    yOff = conv2d(buff + 9);
    10b8:	ce 01       	movw	r24, r28
    10ba:	0a 96       	adiw	r24, 0x0a	; 10
    10bc:	0e 94 35 08 	call	0x106a	; 0x106a <_ZL6conv2dPKc>
    10c0:	f7 01       	movw	r30, r14
    10c2:	80 83       	st	Z, r24
    // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
    switch (buff[0]) {
    10c4:	e9 81       	ldd	r30, Y+1	; 0x01
    10c6:	0e 2f       	mov	r16, r30
    10c8:	10 e0       	ldi	r17, 0x00	; 0
    10ca:	f8 01       	movw	r30, r16
    10cc:	e1 54       	subi	r30, 0x41	; 65
    10ce:	f1 09       	sbc	r31, r1
    10d0:	e3 31       	cpi	r30, 0x13	; 19
    10d2:	f1 05       	cpc	r31, r1
    10d4:	b8 f5       	brcc	.+110    	; 0x1144 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
    10d6:	ec 5c       	subi	r30, 0xCC	; 204
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__tablejump2__>
        case 'J': m = buff[1] == 'a' ? 1 : m = buff[2] == 'n' ? 6 : 7; break;
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	81 36       	cpi	r24, 0x61	; 97
    10e2:	39 f0       	breq	.+14     	; 0x10f2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6a>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	8e 36       	cpi	r24, 0x6E	; 110
    10e8:	11 f0       	breq	.+4      	; 0x10ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x66>
    10ea:	87 e0       	ldi	r24, 0x07	; 7
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6c>
    10ee:	86 e0       	ldi	r24, 0x06	; 6
    10f0:	01 c0       	rjmp	.+2      	; 0x10f4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6c>
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	f7 01       	movw	r30, r14
    10f6:	81 83       	std	Z+1, r24	; 0x01
    10f8:	25 c0       	rjmp	.+74     	; 0x1144 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'F': m = 2; break;
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	f7 01       	movw	r30, r14
    10fe:	81 83       	std	Z+1, r24	; 0x01
    1100:	21 c0       	rjmp	.+66     	; 0x1144 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'A': m = buff[2] == 'r' ? 4 : 8; break;
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	82 37       	cpi	r24, 0x72	; 114
    1106:	11 f0       	breq	.+4      	; 0x110c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    1108:	88 e0       	ldi	r24, 0x08	; 8
    110a:	01 c0       	rjmp	.+2      	; 0x110e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x86>
    110c:	84 e0       	ldi	r24, 0x04	; 4
    110e:	f7 01       	movw	r30, r14
    1110:	81 83       	std	Z+1, r24	; 0x01
    1112:	18 c0       	rjmp	.+48     	; 0x1144 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'M': m = buff[2] == 'r' ? 3 : 5; break;
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	82 37       	cpi	r24, 0x72	; 114
    1118:	11 f0       	breq	.+4      	; 0x111e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    111a:	85 e0       	ldi	r24, 0x05	; 5
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	f7 01       	movw	r30, r14
    1122:	81 83       	std	Z+1, r24	; 0x01
    1124:	0f c0       	rjmp	.+30     	; 0x1144 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'S': m = 9; break;
    1126:	89 e0       	ldi	r24, 0x09	; 9
    1128:	f7 01       	movw	r30, r14
    112a:	81 83       	std	Z+1, r24	; 0x01
    112c:	0b c0       	rjmp	.+22     	; 0x1144 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'O': m = 10; break;
    112e:	8a e0       	ldi	r24, 0x0A	; 10
    1130:	f7 01       	movw	r30, r14
    1132:	81 83       	std	Z+1, r24	; 0x01
    1134:	07 c0       	rjmp	.+14     	; 0x1144 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'N': m = 11; break;
    1136:	8b e0       	ldi	r24, 0x0B	; 11
    1138:	f7 01       	movw	r30, r14
    113a:	81 83       	std	Z+1, r24	; 0x01
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'D': m = 12; break;
    113e:	8c e0       	ldi	r24, 0x0C	; 12
    1140:	f7 01       	movw	r30, r14
    1142:	81 83       	std	Z+1, r24	; 0x01
    }
    d = conv2d(buff + 4);
    1144:	ce 01       	movw	r24, r28
    1146:	05 96       	adiw	r24, 0x05	; 5
    1148:	0e 94 35 08 	call	0x106a	; 0x106a <_ZL6conv2dPKc>
    114c:	f7 01       	movw	r30, r14
    114e:	82 83       	std	Z+2, r24	; 0x02
    memcpy_P(buff, time, 8);
    1150:	48 e0       	ldi	r20, 0x08	; 8
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	b6 01       	movw	r22, r12
    1156:	ce 01       	movw	r24, r28
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <memcpy_P>
    hh = conv2d(buff);
    115e:	ce 01       	movw	r24, r28
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	0e 94 35 08 	call	0x106a	; 0x106a <_ZL6conv2dPKc>
    1166:	f7 01       	movw	r30, r14
    1168:	83 83       	std	Z+3, r24	; 0x03
    mm = conv2d(buff + 3);
    116a:	ce 01       	movw	r24, r28
    116c:	04 96       	adiw	r24, 0x04	; 4
    116e:	0e 94 35 08 	call	0x106a	; 0x106a <_ZL6conv2dPKc>
    1172:	f7 01       	movw	r30, r14
    1174:	84 83       	std	Z+4, r24	; 0x04
    ss = conv2d(buff + 6);
    1176:	ce 01       	movw	r24, r28
    1178:	07 96       	adiw	r24, 0x07	; 7
    117a:	0e 94 35 08 	call	0x106a	; 0x106a <_ZL6conv2dPKc>
    117e:	f7 01       	movw	r30, r14
    1180:	85 83       	std	Z+5, r24	; 0x05
}
    1182:	2b 96       	adiw	r28, 0x0b	; 11
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	ff 90       	pop	r15
    1198:	ef 90       	pop	r14
    119a:	df 90       	pop	r13
    119c:	cf 90       	pop	r12
    119e:	08 95       	ret

000011a0 <_ZN10RTC_DS13075beginEv>:
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

uint8_t RTC_DS1307::begin(void) {
  return 1;
}
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	08 95       	ret

000011a4 <_ZN10RTC_DS130715writeSqwPinModeE16Ds1307SqwPinMode>:

  mode &= 0x93;
  return static_cast<Ds1307SqwPinMode>(mode);
}

void RTC_DS1307::writeSqwPinMode(Ds1307SqwPinMode mode) {
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	18 2f       	mov	r17, r24
  WIRE.beginTransmission(DS1307_ADDRESS);
    11ac:	68 e6       	ldi	r22, 0x68	; 104
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	86 e8       	ldi	r24, 0x86	; 134
    11b2:	92 e0       	ldi	r25, 0x02	; 2
    11b4:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7TwoWire17beginTransmissionEi>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    11b8:	c6 e8       	ldi	r28, 0x86	; 134
    11ba:	d2 e0       	ldi	r29, 0x02	; 2
    11bc:	e8 81       	ld	r30, Y
    11be:	f9 81       	ldd	r31, Y+1	; 0x01
    11c0:	01 90       	ld	r0, Z+
    11c2:	f0 81       	ld	r31, Z
    11c4:	e0 2d       	mov	r30, r0
    11c6:	67 e0       	ldi	r22, 0x07	; 7
    11c8:	ce 01       	movw	r24, r28
    11ca:	09 95       	icall
    11cc:	e8 81       	ld	r30, Y
    11ce:	f9 81       	ldd	r31, Y+1	; 0x01
    11d0:	01 90       	ld	r0, Z+
    11d2:	f0 81       	ld	r31, Z
    11d4:	e0 2d       	mov	r30, r0
    11d6:	61 2f       	mov	r22, r17
    11d8:	ce 01       	movw	r24, r28
    11da:	09 95       	icall
  WIRE._I2C_WRITE(DS1307_CONTROL);
  WIRE._I2C_WRITE(mode);
  WIRE.endTransmission();
    11dc:	ce 01       	movw	r24, r28
    11de:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN7TwoWire15endTransmissionEv>
}
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	08 95       	ret

000011ea <_ZN10RTC_DS13079isrunningEv>:
uint8_t RTC_DS1307::begin(void) {
  return 1;
}

uint8_t RTC_DS1307::isrunning(void) {
  WIRE.beginTransmission(DS1307_ADDRESS);
    11ea:	68 e6       	ldi	r22, 0x68	; 104
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	86 e8       	ldi	r24, 0x86	; 134
    11f0:	92 e0       	ldi	r25, 0x02	; 2
    11f2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7TwoWire17beginTransmissionEi>
    11f6:	e0 91 86 02 	lds	r30, 0x0286
    11fa:	f0 91 87 02 	lds	r31, 0x0287
    11fe:	01 90       	ld	r0, Z+
    1200:	f0 81       	ld	r31, Z
    1202:	e0 2d       	mov	r30, r0
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	86 e8       	ldi	r24, 0x86	; 134
    1208:	92 e0       	ldi	r25, 0x02	; 2
    120a:	09 95       	icall
  WIRE._I2C_WRITE(0);
  WIRE.endTransmission();
    120c:	86 e8       	ldi	r24, 0x86	; 134
    120e:	92 e0       	ldi	r25, 0x02	; 2
    1210:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN7TwoWire15endTransmissionEv>

  WIRE.requestFrom(DS1307_ADDRESS, 1);
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	68 e6       	ldi	r22, 0x68	; 104
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	86 e8       	ldi	r24, 0x86	; 134
    121e:	92 e0       	ldi	r25, 0x02	; 2
    1220:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_ZN7TwoWire11requestFromEii>
  uint8_t ss = WIRE._I2C_READ();
    1224:	86 e8       	ldi	r24, 0x86	; 134
    1226:	92 e0       	ldi	r25, 0x02	; 2
    1228:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN7TwoWire4readEv>
  return !(ss>>7);
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	87 fd       	sbrc	r24, 7
    1230:	90 e0       	ldi	r25, 0x00	; 0
}
    1232:	89 2f       	mov	r24, r25
    1234:	08 95       	ret

00001236 <_ZN10RTC_DS13073nowEv>:
  WIRE._I2C_WRITE(bin2bcd(dt.year() - 2000));
  WIRE._I2C_WRITE(0);
  WIRE.endTransmission();
}

DateTime RTC_DS1307::now() {
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	ec 01       	movw	r28, r24
  WIRE.beginTransmission(DS1307_ADDRESS);
    1246:	68 e6       	ldi	r22, 0x68	; 104
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	86 e8       	ldi	r24, 0x86	; 134
    124c:	92 e0       	ldi	r25, 0x02	; 2
    124e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7TwoWire17beginTransmissionEi>
    1252:	e0 91 86 02 	lds	r30, 0x0286
    1256:	f0 91 87 02 	lds	r31, 0x0287
    125a:	01 90       	ld	r0, Z+
    125c:	f0 81       	ld	r31, Z
    125e:	e0 2d       	mov	r30, r0
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	86 e8       	ldi	r24, 0x86	; 134
    1264:	92 e0       	ldi	r25, 0x02	; 2
    1266:	09 95       	icall
  WIRE._I2C_WRITE(0);	
  WIRE.endTransmission();
    1268:	86 e8       	ldi	r24, 0x86	; 134
    126a:	92 e0       	ldi	r25, 0x02	; 2
    126c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN7TwoWire15endTransmissionEv>

  WIRE.requestFrom(DS1307_ADDRESS, 7);
    1270:	47 e0       	ldi	r20, 0x07	; 7
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	68 e6       	ldi	r22, 0x68	; 104
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	86 e8       	ldi	r24, 0x86	; 134
    127a:	92 e0       	ldi	r25, 0x02	; 2
    127c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_ZN7TwoWire11requestFromEii>
  uint8_t ss = bcd2bin(WIRE._I2C_READ() & 0x7F);
    1280:	86 e8       	ldi	r24, 0x86	; 134
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN7TwoWire4readEv>
    1288:	8f 77       	andi	r24, 0x7F	; 127
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	35 95       	asr	r19
    1290:	27 95       	ror	r18
    1292:	35 95       	asr	r19
    1294:	27 95       	ror	r18
    1296:	35 95       	asr	r19
    1298:	27 95       	ror	r18
    129a:	35 95       	asr	r19
    129c:	27 95       	ror	r18
    129e:	92 2f       	mov	r25, r18
    12a0:	99 0f       	add	r25, r25
    12a2:	29 0f       	add	r18, r25
    12a4:	22 0f       	add	r18, r18
    12a6:	18 2f       	mov	r17, r24
    12a8:	12 1b       	sub	r17, r18
  WIRE._I2C_WRITE(0);	
  WIRE.endTransmission();

  WIRE.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(WIRE._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(WIRE._I2C_READ());
    12aa:	86 e8       	ldi	r24, 0x86	; 134
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN7TwoWire4readEv>
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    12b2:	9c 01       	movw	r18, r24
    12b4:	33 27       	eor	r19, r19
    12b6:	35 95       	asr	r19
    12b8:	27 95       	ror	r18
    12ba:	35 95       	asr	r19
    12bc:	27 95       	ror	r18
    12be:	35 95       	asr	r19
    12c0:	27 95       	ror	r18
    12c2:	35 95       	asr	r19
    12c4:	27 95       	ror	r18
    12c6:	92 2f       	mov	r25, r18
    12c8:	99 0f       	add	r25, r25
    12ca:	29 0f       	add	r18, r25
    12cc:	22 0f       	add	r18, r18
    12ce:	08 2f       	mov	r16, r24
    12d0:	02 1b       	sub	r16, r18
  WIRE.endTransmission();

  WIRE.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(WIRE._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(WIRE._I2C_READ());
  uint8_t hh = bcd2bin(WIRE._I2C_READ());
    12d2:	86 e8       	ldi	r24, 0x86	; 134
    12d4:	92 e0       	ldi	r25, 0x02	; 2
    12d6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN7TwoWire4readEv>
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    12da:	9c 01       	movw	r18, r24
    12dc:	33 27       	eor	r19, r19
    12de:	35 95       	asr	r19
    12e0:	27 95       	ror	r18
    12e2:	35 95       	asr	r19
    12e4:	27 95       	ror	r18
    12e6:	35 95       	asr	r19
    12e8:	27 95       	ror	r18
    12ea:	35 95       	asr	r19
    12ec:	27 95       	ror	r18
    12ee:	92 2f       	mov	r25, r18
    12f0:	99 0f       	add	r25, r25
    12f2:	29 0f       	add	r18, r25
    12f4:	22 0f       	add	r18, r18
    12f6:	f8 2e       	mov	r15, r24
    12f8:	f2 1a       	sub	r15, r18

  WIRE.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(WIRE._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(WIRE._I2C_READ());
  uint8_t hh = bcd2bin(WIRE._I2C_READ());
  WIRE._I2C_READ();
    12fa:	86 e8       	ldi	r24, 0x86	; 134
    12fc:	92 e0       	ldi	r25, 0x02	; 2
    12fe:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN7TwoWire4readEv>
  uint8_t d = bcd2bin(WIRE._I2C_READ());
    1302:	86 e8       	ldi	r24, 0x86	; 134
    1304:	92 e0       	ldi	r25, 0x02	; 2
    1306:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN7TwoWire4readEv>
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    130a:	9c 01       	movw	r18, r24
    130c:	33 27       	eor	r19, r19
    130e:	35 95       	asr	r19
    1310:	27 95       	ror	r18
    1312:	35 95       	asr	r19
    1314:	27 95       	ror	r18
    1316:	35 95       	asr	r19
    1318:	27 95       	ror	r18
    131a:	35 95       	asr	r19
    131c:	27 95       	ror	r18
    131e:	92 2f       	mov	r25, r18
    1320:	99 0f       	add	r25, r25
    1322:	29 0f       	add	r18, r25
    1324:	22 0f       	add	r18, r18
    1326:	e8 2e       	mov	r14, r24
    1328:	e2 1a       	sub	r14, r18
  uint8_t ss = bcd2bin(WIRE._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(WIRE._I2C_READ());
  uint8_t hh = bcd2bin(WIRE._I2C_READ());
  WIRE._I2C_READ();
  uint8_t d = bcd2bin(WIRE._I2C_READ());
  uint8_t m = bcd2bin(WIRE._I2C_READ());
    132a:	86 e8       	ldi	r24, 0x86	; 134
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN7TwoWire4readEv>
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    1332:	9c 01       	movw	r18, r24
    1334:	33 27       	eor	r19, r19
    1336:	35 95       	asr	r19
    1338:	27 95       	ror	r18
    133a:	35 95       	asr	r19
    133c:	27 95       	ror	r18
    133e:	35 95       	asr	r19
    1340:	27 95       	ror	r18
    1342:	35 95       	asr	r19
    1344:	27 95       	ror	r18
    1346:	92 2f       	mov	r25, r18
    1348:	99 0f       	add	r25, r25
    134a:	29 0f       	add	r18, r25
    134c:	22 0f       	add	r18, r18
    134e:	d8 2e       	mov	r13, r24
    1350:	d2 1a       	sub	r13, r18
  uint8_t mm = bcd2bin(WIRE._I2C_READ());
  uint8_t hh = bcd2bin(WIRE._I2C_READ());
  WIRE._I2C_READ();
  uint8_t d = bcd2bin(WIRE._I2C_READ());
  uint8_t m = bcd2bin(WIRE._I2C_READ());
  uint16_t y = bcd2bin(WIRE._I2C_READ()) + 2000;
    1352:	86 e8       	ldi	r24, 0x86	; 134
    1354:	92 e0       	ldi	r25, 0x02	; 2
    1356:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN7TwoWire4readEv>
    135a:	9c 01       	movw	r18, r24
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    135c:	ac 01       	movw	r20, r24
    135e:	55 27       	eor	r21, r21
    1360:	55 95       	asr	r21
    1362:	47 95       	ror	r20
    1364:	55 95       	asr	r21
    1366:	47 95       	ror	r20
    1368:	55 95       	asr	r21
    136a:	47 95       	ror	r20
    136c:	55 95       	asr	r21
    136e:	47 95       	ror	r20
    1370:	84 2f       	mov	r24, r20
    1372:	88 0f       	add	r24, r24
    1374:	48 0f       	add	r20, r24
    1376:	44 0f       	add	r20, r20
    1378:	24 1b       	sub	r18, r20
  uint8_t mm = bcd2bin(WIRE._I2C_READ());
  uint8_t hh = bcd2bin(WIRE._I2C_READ());
  WIRE._I2C_READ();
  uint8_t d = bcd2bin(WIRE._I2C_READ());
  uint8_t m = bcd2bin(WIRE._I2C_READ());
  uint16_t y = bcd2bin(WIRE._I2C_READ()) + 2000;
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	20 53       	subi	r18, 0x30	; 48
    137e:	38 4f       	sbci	r19, 0xF8	; 248
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    1380:	20 3d       	cpi	r18, 0xD0	; 208
    1382:	87 e0       	ldi	r24, 0x07	; 7
    1384:	38 07       	cpc	r19, r24
    1386:	10 f0       	brcs	.+4      	; 0x138c <_ZN10RTC_DS13073nowEv+0x156>
        year -= 2000;
    1388:	20 5d       	subi	r18, 0xD0	; 208
    138a:	37 40       	sbci	r19, 0x07	; 7
    yOff = year;
    138c:	28 83       	st	Y, r18
    m = month;
    138e:	d9 82       	std	Y+1, r13	; 0x01
    d = day;
    1390:	ea 82       	std	Y+2, r14	; 0x02
    hh = hour;
    1392:	fb 82       	std	Y+3, r15	; 0x03
    mm = min;
    1394:	0c 83       	std	Y+4, r16	; 0x04
    ss = sec;
    1396:	1d 83       	std	Y+5, r17	; 0x05
  uint8_t d = bcd2bin(WIRE._I2C_READ());
  uint8_t m = bcd2bin(WIRE._I2C_READ());
  uint16_t y = bcd2bin(WIRE._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
    1398:	ce 01       	movw	r24, r28
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	1f 91       	pop	r17
    13a0:	0f 91       	pop	r16
    13a2:	ff 90       	pop	r15
    13a4:	ef 90       	pop	r14
    13a6:	df 90       	pop	r13
    13a8:	08 95       	ret

000013aa <_ZN10RTC_DS13076adjustERK8DateTime>:
  WIRE.requestFrom(DS1307_ADDRESS, 1);
  uint8_t ss = WIRE._I2C_READ();
  return !(ss>>7);
}

void RTC_DS1307::adjust(const DateTime& dt) {
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	7c 01       	movw	r14, r24
  WIRE.beginTransmission(DS1307_ADDRESS);
    13b6:	68 e6       	ldi	r22, 0x68	; 104
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	86 e8       	ldi	r24, 0x86	; 134
    13bc:	92 e0       	ldi	r25, 0x02	; 2
    13be:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7TwoWire17beginTransmissionEi>
    13c2:	06 e8       	ldi	r16, 0x86	; 134
    13c4:	12 e0       	ldi	r17, 0x02	; 2
    13c6:	d8 01       	movw	r26, r16
    13c8:	ed 91       	ld	r30, X+
    13ca:	fc 91       	ld	r31, X
    13cc:	01 90       	ld	r0, Z+
    13ce:	f0 81       	ld	r31, Z
    13d0:	e0 2d       	mov	r30, r0
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	c8 01       	movw	r24, r16
    13d6:	09 95       	icall
    uint16_t year() const       { return 2000 + yOff; }
    uint8_t month() const       { return m; }
    uint8_t day() const         { return d; }
    uint8_t hour() const        { return hh; }
    uint8_t minute() const      { return mm; }
    uint8_t second() const      { return ss; }
    13d8:	f7 01       	movw	r30, r14
    13da:	65 81       	ldd	r22, Z+5	; 0x05

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    13dc:	cd ec       	ldi	r28, 0xCD	; 205
    13de:	6c 9f       	mul	r22, r28
    13e0:	81 2d       	mov	r24, r1
    13e2:	11 24       	eor	r1, r1
    13e4:	86 95       	lsr	r24
    13e6:	86 95       	lsr	r24
    13e8:	86 95       	lsr	r24
    13ea:	98 2f       	mov	r25, r24
    13ec:	99 0f       	add	r25, r25
    13ee:	89 0f       	add	r24, r25
    13f0:	88 0f       	add	r24, r24
    13f2:	68 0f       	add	r22, r24
}

void RTC_DS1307::adjust(const DateTime& dt) {
  WIRE.beginTransmission(DS1307_ADDRESS);
  WIRE._I2C_WRITE(0);
  WIRE._I2C_WRITE(bin2bcd(dt.second()));
    13f4:	c8 01       	movw	r24, r16
    13f6:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <_ZN7TwoWire5writeEh>
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    uint8_t month() const       { return m; }
    uint8_t day() const         { return d; }
    uint8_t hour() const        { return hh; }
    uint8_t minute() const      { return mm; }
    13fa:	d7 01       	movw	r26, r14
    13fc:	14 96       	adiw	r26, 0x04	; 4
    13fe:	6c 91       	ld	r22, X

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    1400:	6c 9f       	mul	r22, r28
    1402:	81 2d       	mov	r24, r1
    1404:	11 24       	eor	r1, r1
    1406:	86 95       	lsr	r24
    1408:	86 95       	lsr	r24
    140a:	86 95       	lsr	r24
    140c:	98 2f       	mov	r25, r24
    140e:	99 0f       	add	r25, r25
    1410:	89 0f       	add	r24, r25
    1412:	88 0f       	add	r24, r24
    1414:	68 0f       	add	r22, r24

void RTC_DS1307::adjust(const DateTime& dt) {
  WIRE.beginTransmission(DS1307_ADDRESS);
  WIRE._I2C_WRITE(0);
  WIRE._I2C_WRITE(bin2bcd(dt.second()));
  WIRE._I2C_WRITE(bin2bcd(dt.minute()));
    1416:	c8 01       	movw	r24, r16
    1418:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <_ZN7TwoWire5writeEh>
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    uint8_t month() const       { return m; }
    uint8_t day() const         { return d; }
    uint8_t hour() const        { return hh; }
    141c:	f7 01       	movw	r30, r14
    141e:	63 81       	ldd	r22, Z+3	; 0x03

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    1420:	6c 9f       	mul	r22, r28
    1422:	81 2d       	mov	r24, r1
    1424:	11 24       	eor	r1, r1
    1426:	86 95       	lsr	r24
    1428:	86 95       	lsr	r24
    142a:	86 95       	lsr	r24
    142c:	98 2f       	mov	r25, r24
    142e:	99 0f       	add	r25, r25
    1430:	89 0f       	add	r24, r25
    1432:	88 0f       	add	r24, r24
    1434:	68 0f       	add	r22, r24
void RTC_DS1307::adjust(const DateTime& dt) {
  WIRE.beginTransmission(DS1307_ADDRESS);
  WIRE._I2C_WRITE(0);
  WIRE._I2C_WRITE(bin2bcd(dt.second()));
  WIRE._I2C_WRITE(bin2bcd(dt.minute()));
  WIRE._I2C_WRITE(bin2bcd(dt.hour()));
    1436:	c8 01       	movw	r24, r16
    1438:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <_ZN7TwoWire5writeEh>
  WIRE._I2C_WRITE(bin2bcd(0));
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	c8 01       	movw	r24, r16
    1440:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <_ZN7TwoWire5writeEh>
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    uint8_t month() const       { return m; }
    uint8_t day() const         { return d; }
    1444:	d7 01       	movw	r26, r14
    1446:	12 96       	adiw	r26, 0x02	; 2
    1448:	6c 91       	ld	r22, X

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    144a:	6c 9f       	mul	r22, r28
    144c:	91 2d       	mov	r25, r1
    144e:	11 24       	eor	r1, r1
    1450:	96 95       	lsr	r25
    1452:	96 95       	lsr	r25
    1454:	96 95       	lsr	r25
    1456:	89 2f       	mov	r24, r25
    1458:	88 0f       	add	r24, r24
    145a:	98 0f       	add	r25, r24
    145c:	99 0f       	add	r25, r25
    145e:	69 0f       	add	r22, r25
  WIRE._I2C_WRITE(0);
  WIRE._I2C_WRITE(bin2bcd(dt.second()));
  WIRE._I2C_WRITE(bin2bcd(dt.minute()));
  WIRE._I2C_WRITE(bin2bcd(dt.hour()));
  WIRE._I2C_WRITE(bin2bcd(0));
  WIRE._I2C_WRITE(bin2bcd(dt.day()));
    1460:	c8 01       	movw	r24, r16
    1462:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <_ZN7TwoWire5writeEh>
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    uint8_t month() const       { return m; }
    1466:	f7 01       	movw	r30, r14
    1468:	61 81       	ldd	r22, Z+1	; 0x01

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    146a:	6c 9f       	mul	r22, r28
    146c:	91 2d       	mov	r25, r1
    146e:	11 24       	eor	r1, r1
    1470:	96 95       	lsr	r25
    1472:	96 95       	lsr	r25
    1474:	96 95       	lsr	r25
    1476:	89 2f       	mov	r24, r25
    1478:	88 0f       	add	r24, r24
    147a:	98 0f       	add	r25, r24
    147c:	99 0f       	add	r25, r25
    147e:	69 0f       	add	r22, r25
  WIRE._I2C_WRITE(bin2bcd(dt.second()));
  WIRE._I2C_WRITE(bin2bcd(dt.minute()));
  WIRE._I2C_WRITE(bin2bcd(dt.hour()));
  WIRE._I2C_WRITE(bin2bcd(0));
  WIRE._I2C_WRITE(bin2bcd(dt.day()));
  WIRE._I2C_WRITE(bin2bcd(dt.month()));
    1480:	c8 01       	movw	r24, r16
    1482:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <_ZN7TwoWire5writeEh>
  WIRE._I2C_WRITE(bin2bcd(dt.year() - 2000));
    1486:	d7 01       	movw	r26, r14
    1488:	6c 91       	ld	r22, X

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    148a:	6c 9f       	mul	r22, r28
    148c:	c1 2d       	mov	r28, r1
    148e:	11 24       	eor	r1, r1
    1490:	c6 95       	lsr	r28
    1492:	c6 95       	lsr	r28
    1494:	c6 95       	lsr	r28
    1496:	8c 2f       	mov	r24, r28
    1498:	88 0f       	add	r24, r24
    149a:	c8 0f       	add	r28, r24
    149c:	cc 0f       	add	r28, r28
    149e:	6c 0f       	add	r22, r28
  WIRE._I2C_WRITE(bin2bcd(dt.minute()));
  WIRE._I2C_WRITE(bin2bcd(dt.hour()));
  WIRE._I2C_WRITE(bin2bcd(0));
  WIRE._I2C_WRITE(bin2bcd(dt.day()));
  WIRE._I2C_WRITE(bin2bcd(dt.month()));
  WIRE._I2C_WRITE(bin2bcd(dt.year() - 2000));
    14a0:	c8 01       	movw	r24, r16
    14a2:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <_ZN7TwoWire5writeEh>
    14a6:	d8 01       	movw	r26, r16
    14a8:	ed 91       	ld	r30, X+
    14aa:	fc 91       	ld	r31, X
    14ac:	01 90       	ld	r0, Z+
    14ae:	f0 81       	ld	r31, Z
    14b0:	e0 2d       	mov	r30, r0
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	c8 01       	movw	r24, r16
    14b6:	09 95       	icall
  WIRE._I2C_WRITE(0);
  WIRE.endTransmission();
    14b8:	c8 01       	movw	r24, r16
    14ba:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN7TwoWire15endTransmissionEv>
}
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	08 95       	ret

000014ca <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	39 f0       	breq	.+14     	; 0x14dc <_Z12disableTimerh+0x12>
    14ce:	18 f0       	brcs	.+6      	; 0x14d6 <_Z12disableTimerh+0xc>
    14d0:	82 30       	cpi	r24, 0x02	; 2
    14d2:	51 f0       	breq	.+20     	; 0x14e8 <_Z12disableTimerh+0x1e>
    14d4:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    14d6:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    14da:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    14dc:	ef e6       	ldi	r30, 0x6F	; 111
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8d 7f       	andi	r24, 0xFD	; 253
    14e4:	80 83       	st	Z, r24
      break;
    14e6:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    14e8:	e0 e7       	ldi	r30, 0x70	; 112
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8d 7f       	andi	r24, 0xFD	; 253
    14f0:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    14f8:	e1 eb       	ldi	r30, 0xB1	; 177
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	88 7f       	andi	r24, 0xF8	; 248
    1500:	84 60       	ori	r24, 0x04	; 4
    1502:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    1504:	10 92 b3 00 	sts	0x00B3, r1
    1508:	08 95       	ret

0000150a <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    150a:	cf 93       	push	r28
    150c:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    150e:	80 91 2b 01 	lds	r24, 0x012B
    1512:	8c 13       	cpse	r24, r28
    1514:	08 c0       	rjmp	.+16     	; 0x1526 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1516:	ee e6       	ldi	r30, 0x6E	; 110
    1518:	f2 e0       	ldi	r31, 0x02	; 2
    151a:	e4 91       	lpm	r30, Z
    151c:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    151e:	9f ef       	ldi	r25, 0xFF	; 255
    1520:	90 93 2b 01 	sts	0x012B, r25
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <_Z6noToneh+0x1e>
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    1528:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	8c 2f       	mov	r24, r28
    1530:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
}
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    1538:	1f 92       	push	r1
    153a:	0f 92       	push	r0
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	0f 92       	push	r0
    1540:	11 24       	eor	r1, r1
    1542:	2f 93       	push	r18
    1544:	3f 93       	push	r19
    1546:	4f 93       	push	r20
    1548:	5f 93       	push	r21
    154a:	6f 93       	push	r22
    154c:	7f 93       	push	r23
    154e:	8f 93       	push	r24
    1550:	9f 93       	push	r25
    1552:	af 93       	push	r26
    1554:	bf 93       	push	r27
    1556:	ef 93       	push	r30
    1558:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    155a:	80 91 10 02 	lds	r24, 0x0210
    155e:	90 91 11 02 	lds	r25, 0x0211
    1562:	a0 91 12 02 	lds	r26, 0x0212
    1566:	b0 91 13 02 	lds	r27, 0x0213
    156a:	89 2b       	or	r24, r25
    156c:	8a 2b       	or	r24, r26
    156e:	8b 2b       	or	r24, r27
    1570:	51 f1       	breq	.+84     	; 0x15c6 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    1572:	80 91 0d 02 	lds	r24, 0x020D
    1576:	e0 91 0e 02 	lds	r30, 0x020E
    157a:	f0 91 0f 02 	lds	r31, 0x020F
    157e:	90 81       	ld	r25, Z
    1580:	89 27       	eor	r24, r25
    1582:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    1584:	80 91 10 02 	lds	r24, 0x0210
    1588:	90 91 11 02 	lds	r25, 0x0211
    158c:	a0 91 12 02 	lds	r26, 0x0212
    1590:	b0 91 13 02 	lds	r27, 0x0213
    1594:	18 16       	cp	r1, r24
    1596:	19 06       	cpc	r1, r25
    1598:	1a 06       	cpc	r1, r26
    159a:	1b 06       	cpc	r1, r27
    159c:	c4 f4       	brge	.+48     	; 0x15ce <__vector_7+0x96>
      timer2_toggle_count--;
    159e:	80 91 10 02 	lds	r24, 0x0210
    15a2:	90 91 11 02 	lds	r25, 0x0211
    15a6:	a0 91 12 02 	lds	r26, 0x0212
    15aa:	b0 91 13 02 	lds	r27, 0x0213
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	a1 09       	sbc	r26, r1
    15b2:	b1 09       	sbc	r27, r1
    15b4:	80 93 10 02 	sts	0x0210, r24
    15b8:	90 93 11 02 	sts	0x0211, r25
    15bc:	a0 93 12 02 	sts	0x0212, r26
    15c0:	b0 93 13 02 	sts	0x0213, r27
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    15c6:	80 91 2b 01 	lds	r24, 0x012B
    15ca:	0e 94 85 0a 	call	0x150a	; 0x150a <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    15ce:	ff 91       	pop	r31
    15d0:	ef 91       	pop	r30
    15d2:	bf 91       	pop	r27
    15d4:	af 91       	pop	r26
    15d6:	9f 91       	pop	r25
    15d8:	8f 91       	pop	r24
    15da:	7f 91       	pop	r23
    15dc:	6f 91       	pop	r22
    15de:	5f 91       	pop	r21
    15e0:	4f 91       	pop	r20
    15e2:	3f 91       	pop	r19
    15e4:	2f 91       	pop	r18
    15e6:	0f 90       	pop	r0
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	0f 90       	pop	r0
    15ec:	1f 90       	pop	r1
    15ee:	18 95       	reti

000015f0 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    15f0:	10 92 81 02 	sts	0x0281, r1
  twi_sendStop = true;		// default value
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 93 7f 02 	sts	0x027F, r24
  twi_inRepStart = false;
    15fa:	10 92 7e 02 	sts	0x027E, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	82 e1       	ldi	r24, 0x12	; 18
    1602:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
  digitalWrite(SCL, 1);
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	83 e1       	ldi	r24, 0x13	; 19
    160a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    160e:	e9 eb       	ldi	r30, 0xB9	; 185
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8e 7f       	andi	r24, 0xFE	; 254
    1616:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    1618:	80 81       	ld	r24, Z
    161a:	8d 7f       	andi	r24, 0xFD	; 253
    161c:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    161e:	88 e4       	ldi	r24, 0x48	; 72
    1620:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    1624:	85 e4       	ldi	r24, 0x45	; 69
    1626:	80 93 bc 00 	sts	0x00BC, r24
    162a:	08 95       	ret

0000162c <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    162c:	41 32       	cpi	r20, 0x21	; 33
    162e:	08 f0       	brcs	.+2      	; 0x1632 <twi_readFrom+0x6>
    1630:	46 c0       	rjmp	.+140    	; 0x16be <twi_readFrom+0x92>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    1632:	90 91 81 02 	lds	r25, 0x0281
    1636:	91 11       	cpse	r25, r1
    1638:	fc cf       	rjmp	.-8      	; 0x1632 <twi_readFrom+0x6>
    continue;
  }
  twi_state = TWI_MRX;
    163a:	31 e0       	ldi	r19, 0x01	; 1
    163c:	30 93 81 02 	sts	0x0281, r19
  twi_sendStop = sendStop;
    1640:	20 93 7f 02 	sts	0x027F, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    1644:	2f ef       	ldi	r18, 0xFF	; 255
    1646:	20 93 14 02 	sts	0x0214, r18

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    164a:	10 92 59 02 	sts	0x0259, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    164e:	24 0f       	add	r18, r20
    1650:	20 93 58 02 	sts	0x0258, r18
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    1654:	30 93 80 02 	sts	0x0280, r19
  twi_slarw |= address << 1;
    1658:	20 91 80 02 	lds	r18, 0x0280
    165c:	88 0f       	add	r24, r24
    165e:	82 2b       	or	r24, r18
    1660:	80 93 80 02 	sts	0x0280, r24

  if (true == twi_inRepStart) {
    1664:	80 91 7e 02 	lds	r24, 0x027E
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	51 f4       	brne	.+20     	; 0x1680 <twi_readFrom+0x54>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    166c:	10 92 7e 02 	sts	0x027E, r1
    TWDR = twi_slarw;
    1670:	80 91 80 02 	lds	r24, 0x0280
    1674:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1678:	85 ec       	ldi	r24, 0xC5	; 197
    167a:	80 93 bc 00 	sts	0x00BC, r24
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <twi_readFrom+0x5a>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1680:	85 ee       	ldi	r24, 0xE5	; 229
    1682:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    1686:	80 91 81 02 	lds	r24, 0x0281
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	e1 f3       	breq	.-8      	; 0x1686 <twi_readFrom+0x5a>
    continue;
  }

  if (twi_masterBufferIndex < length)
    168e:	80 91 59 02 	lds	r24, 0x0259
    1692:	84 17       	cp	r24, r20
    1694:	10 f4       	brcc	.+4      	; 0x169a <twi_readFrom+0x6e>
    length = twi_masterBufferIndex;
    1696:	40 91 59 02 	lds	r20, 0x0259

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    169a:	44 23       	and	r20, r20
    169c:	89 f0       	breq	.+34     	; 0x16c0 <twi_readFrom+0x94>
    169e:	aa e5       	ldi	r26, 0x5A	; 90
    16a0:	b2 e0       	ldi	r27, 0x02	; 2
    16a2:	fb 01       	movw	r30, r22
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	84 0f       	add	r24, r20
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	68 0f       	add	r22, r24
    16ae:	79 1f       	adc	r23, r25
    data[i] = twi_masterBuffer[i];
    16b0:	8d 91       	ld	r24, X+
    16b2:	81 93       	st	Z+, r24

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    16b4:	e6 17       	cp	r30, r22
    16b6:	f7 07       	cpc	r31, r23
    16b8:	d9 f7       	brne	.-10     	; 0x16b0 <twi_readFrom+0x84>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    16ba:	94 2f       	mov	r25, r20
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <twi_readFrom+0x94>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
    16be:	90 e0       	ldi	r25, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    16c0:	89 2f       	mov	r24, r25
    16c2:	08 95       	ret

000016c4 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    16c4:	0f 93       	push	r16
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    16c6:	41 32       	cpi	r20, 0x21	; 33
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <twi_writeTo+0x8>
    16ca:	51 c0       	rjmp	.+162    	; 0x176e <twi_writeTo+0xaa>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    16cc:	30 91 81 02 	lds	r19, 0x0281
    16d0:	31 11       	cpse	r19, r1
    16d2:	fc cf       	rjmp	.-8      	; 0x16cc <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
    16d4:	92 e0       	ldi	r25, 0x02	; 2
    16d6:	90 93 81 02 	sts	0x0281, r25
  twi_sendStop = sendStop;
    16da:	00 93 7f 02 	sts	0x027F, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    16de:	9f ef       	ldi	r25, 0xFF	; 255
    16e0:	90 93 14 02 	sts	0x0214, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    16e4:	10 92 59 02 	sts	0x0259, r1
  twi_masterBufferLength = length;
    16e8:	40 93 58 02 	sts	0x0258, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    16ec:	44 23       	and	r20, r20
    16ee:	71 f0       	breq	.+28     	; 0x170c <twi_writeTo+0x48>
    16f0:	fb 01       	movw	r30, r22
    16f2:	aa e5       	ldi	r26, 0x5A	; 90
    16f4:	b2 e0       	ldi	r27, 0x02	; 2
    16f6:	41 50       	subi	r20, 0x01	; 1
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	4f 5f       	subi	r20, 0xFF	; 255
    16fc:	5f 4f       	sbci	r21, 0xFF	; 255
    16fe:	64 0f       	add	r22, r20
    1700:	75 1f       	adc	r23, r21
    twi_masterBuffer[i] = data[i];
    1702:	91 91       	ld	r25, Z+
    1704:	9d 93       	st	X+, r25
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    1706:	e6 17       	cp	r30, r22
    1708:	f7 07       	cpc	r31, r23
    170a:	d9 f7       	brne	.-10     	; 0x1702 <twi_writeTo+0x3e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    170c:	10 92 80 02 	sts	0x0280, r1
  twi_slarw |= address << 1;
    1710:	90 91 80 02 	lds	r25, 0x0280
    1714:	88 0f       	add	r24, r24
    1716:	89 2b       	or	r24, r25
    1718:	80 93 80 02 	sts	0x0280, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    171c:	80 91 7e 02 	lds	r24, 0x027E
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	51 f4       	brne	.+20     	; 0x1738 <twi_writeTo+0x74>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    1724:	10 92 7e 02 	sts	0x027E, r1
    TWDR = twi_slarw;				
    1728:	80 91 80 02 	lds	r24, 0x0280
    172c:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1730:	85 ec       	ldi	r24, 0xC5	; 197
    1732:	80 93 bc 00 	sts	0x00BC, r24
    1736:	03 c0       	rjmp	.+6      	; 0x173e <twi_writeTo+0x7a>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    1738:	85 ee       	ldi	r24, 0xE5	; 229
    173a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    173e:	22 23       	and	r18, r18
    1740:	41 f0       	breq	.+16     	; 0x1752 <twi_writeTo+0x8e>
    1742:	80 91 81 02 	lds	r24, 0x0281
    1746:	82 30       	cpi	r24, 0x02	; 2
    1748:	21 f4       	brne	.+8      	; 0x1752 <twi_writeTo+0x8e>
    174a:	80 91 81 02 	lds	r24, 0x0281
    174e:	82 30       	cpi	r24, 0x02	; 2
    1750:	e1 f3       	breq	.-8      	; 0x174a <twi_writeTo+0x86>
    continue;
  }
  
  if (twi_error == 0xFF)
    1752:	80 91 14 02 	lds	r24, 0x0214
    1756:	8f 3f       	cpi	r24, 0xFF	; 255
    1758:	79 f0       	breq	.+30     	; 0x1778 <twi_writeTo+0xb4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    175a:	80 91 14 02 	lds	r24, 0x0214
    175e:	80 32       	cpi	r24, 0x20	; 32
    1760:	41 f0       	breq	.+16     	; 0x1772 <twi_writeTo+0xae>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    1762:	80 91 14 02 	lds	r24, 0x0214
    1766:	80 33       	cpi	r24, 0x30	; 48
    1768:	31 f0       	breq	.+12     	; 0x1776 <twi_writeTo+0xb2>
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
    176a:	34 e0       	ldi	r19, 0x04	; 4
    176c:	05 c0       	rjmp	.+10     	; 0x1778 <twi_writeTo+0xb4>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    176e:	31 e0       	ldi	r19, 0x01	; 1
    1770:	03 c0       	rjmp	.+6      	; 0x1778 <twi_writeTo+0xb4>
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
    1772:	32 e0       	ldi	r19, 0x02	; 2
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <twi_writeTo+0xb4>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
    1776:	33 e0       	ldi	r19, 0x03	; 3
  else
    return 4;	// other twi error
}
    1778:	83 2f       	mov	r24, r19
    177a:	0f 91       	pop	r16
    177c:	08 95       	ret

0000177e <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    177e:	61 32       	cpi	r22, 0x21	; 33
    1780:	c8 f4       	brcc	.+50     	; 0x17b4 <twi_transmit+0x36>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    1782:	20 91 81 02 	lds	r18, 0x0281
    1786:	24 30       	cpi	r18, 0x04	; 4
    1788:	b9 f4       	brne	.+46     	; 0x17b8 <twi_transmit+0x3a>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    178a:	60 93 36 02 	sts	0x0236, r22
  for(i = 0; i < length; ++i){
    178e:	66 23       	and	r22, r22
    1790:	a9 f0       	breq	.+42     	; 0x17bc <twi_transmit+0x3e>
    1792:	fc 01       	movw	r30, r24
    1794:	a8 e3       	ldi	r26, 0x38	; 56
    1796:	b2 e0       	ldi	r27, 0x02	; 2
    1798:	61 50       	subi	r22, 0x01	; 1
    179a:	26 2f       	mov	r18, r22
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	2f 5f       	subi	r18, 0xFF	; 255
    17a0:	3f 4f       	sbci	r19, 0xFF	; 255
    17a2:	28 0f       	add	r18, r24
    17a4:	39 1f       	adc	r19, r25
    twi_txBuffer[i] = data[i];
    17a6:	91 91       	ld	r25, Z+
    17a8:	9d 93       	st	X+, r25
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    17aa:	e2 17       	cp	r30, r18
    17ac:	f3 07       	cpc	r31, r19
    17ae:	d9 f7       	brne	.-10     	; 0x17a6 <twi_transmit+0x28>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	08 95       	ret
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    17bc:	80 e0       	ldi	r24, 0x00	; 0
}
    17be:	08 95       	ret

000017c0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    17c0:	85 ed       	ldi	r24, 0xD5	; 213
    17c2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    17c6:	ec eb       	ldi	r30, 0xBC	; 188
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	84 fd       	sbrc	r24, 4
    17ce:	fd cf       	rjmp	.-6      	; 0x17ca <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    17d0:	10 92 81 02 	sts	0x0281, r1
    17d4:	08 95       	ret

000017d6 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    17d6:	85 ec       	ldi	r24, 0xC5	; 197
    17d8:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    17dc:	10 92 81 02 	sts	0x0281, r1
    17e0:	08 95       	ret

000017e2 <__vector_24>:
}

ISR(TWI_vect)
{
    17e2:	1f 92       	push	r1
    17e4:	0f 92       	push	r0
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	0f 92       	push	r0
    17ea:	11 24       	eor	r1, r1
    17ec:	2f 93       	push	r18
    17ee:	3f 93       	push	r19
    17f0:	4f 93       	push	r20
    17f2:	5f 93       	push	r21
    17f4:	6f 93       	push	r22
    17f6:	7f 93       	push	r23
    17f8:	8f 93       	push	r24
    17fa:	9f 93       	push	r25
    17fc:	af 93       	push	r26
    17fe:	bf 93       	push	r27
    1800:	ef 93       	push	r30
    1802:	ff 93       	push	r31
  switch(TW_STATUS){
    1804:	80 91 b9 00 	lds	r24, 0x00B9
    1808:	e8 2f       	mov	r30, r24
    180a:	e8 7f       	andi	r30, 0xF8	; 248
    180c:	8e 2f       	mov	r24, r30
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	89 3c       	cpi	r24, 0xC9	; 201
    1812:	91 05       	cpc	r25, r1
    1814:	08 f0       	brcs	.+2      	; 0x1818 <__vector_24+0x36>
    1816:	f7 c0       	rjmp	.+494    	; 0x1a06 <__vector_24+0x224>
    1818:	fc 01       	movw	r30, r24
    181a:	e9 5b       	subi	r30, 0xB9	; 185
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1822:	80 91 80 02 	lds	r24, 0x0280
    1826:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    182a:	85 ec       	ldi	r24, 0xC5	; 197
    182c:	80 93 bc 00 	sts	0x00BC, r24
    1830:	ea c0       	rjmp	.+468    	; 0x1a06 <__vector_24+0x224>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1832:	90 91 59 02 	lds	r25, 0x0259
    1836:	80 91 58 02 	lds	r24, 0x0258
    183a:	98 17       	cp	r25, r24
    183c:	80 f4       	brcc	.+32     	; 0x185e <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    183e:	e0 91 59 02 	lds	r30, 0x0259
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	8e 0f       	add	r24, r30
    1846:	80 93 59 02 	sts	0x0259, r24
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	e6 5a       	subi	r30, 0xA6	; 166
    184e:	fd 4f       	sbci	r31, 0xFD	; 253
    1850:	80 81       	ld	r24, Z
    1852:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1856:	85 ec       	ldi	r24, 0xC5	; 197
    1858:	80 93 bc 00 	sts	0x00BC, r24
    185c:	d4 c0       	rjmp	.+424    	; 0x1a06 <__vector_24+0x224>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    185e:	80 91 7f 02 	lds	r24, 0x027F
    1862:	88 23       	and	r24, r24
    1864:	19 f0       	breq	.+6      	; 0x186c <__vector_24+0x8a>
          twi_stop();
    1866:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <twi_stop>
    186a:	cd c0       	rjmp	.+410    	; 0x1a06 <__vector_24+0x224>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	80 93 7e 02 	sts	0x027E, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1872:	84 ea       	ldi	r24, 0xA4	; 164
    1874:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    1878:	10 92 81 02 	sts	0x0281, r1
    187c:	c4 c0       	rjmp	.+392    	; 0x1a06 <__vector_24+0x224>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    187e:	80 e2       	ldi	r24, 0x20	; 32
    1880:	80 93 14 02 	sts	0x0214, r24
      twi_stop();
    1884:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <twi_stop>
      break;
    1888:	be c0       	rjmp	.+380    	; 0x1a06 <__vector_24+0x224>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    188a:	80 e3       	ldi	r24, 0x30	; 48
    188c:	80 93 14 02 	sts	0x0214, r24
      twi_stop();
    1890:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <twi_stop>
      break;
    1894:	b8 c0       	rjmp	.+368    	; 0x1a06 <__vector_24+0x224>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1896:	88 e3       	ldi	r24, 0x38	; 56
    1898:	80 93 14 02 	sts	0x0214, r24
      twi_releaseBus();
    189c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <twi_releaseBus>
      break;
    18a0:	b2 c0       	rjmp	.+356    	; 0x1a06 <__vector_24+0x224>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    18a2:	e0 91 59 02 	lds	r30, 0x0259
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	8e 0f       	add	r24, r30
    18aa:	80 93 59 02 	sts	0x0259, r24
    18ae:	80 91 bb 00 	lds	r24, 0x00BB
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	e6 5a       	subi	r30, 0xA6	; 166
    18b6:	fd 4f       	sbci	r31, 0xFD	; 253
    18b8:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    18ba:	90 91 59 02 	lds	r25, 0x0259
    18be:	80 91 58 02 	lds	r24, 0x0258
    18c2:	98 17       	cp	r25, r24
    18c4:	20 f4       	brcc	.+8      	; 0x18ce <__vector_24+0xec>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    18c6:	85 ec       	ldi	r24, 0xC5	; 197
    18c8:	80 93 bc 00 	sts	0x00BC, r24
    18cc:	9c c0       	rjmp	.+312    	; 0x1a06 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    18ce:	85 e8       	ldi	r24, 0x85	; 133
    18d0:	80 93 bc 00 	sts	0x00BC, r24
    18d4:	98 c0       	rjmp	.+304    	; 0x1a06 <__vector_24+0x224>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    18d6:	e0 91 59 02 	lds	r30, 0x0259
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	8e 0f       	add	r24, r30
    18de:	80 93 59 02 	sts	0x0259, r24
    18e2:	80 91 bb 00 	lds	r24, 0x00BB
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	e6 5a       	subi	r30, 0xA6	; 166
    18ea:	fd 4f       	sbci	r31, 0xFD	; 253
    18ec:	80 83       	st	Z, r24
	if (twi_sendStop)
    18ee:	80 91 7f 02 	lds	r24, 0x027F
    18f2:	88 23       	and	r24, r24
    18f4:	19 f0       	breq	.+6      	; 0x18fc <__vector_24+0x11a>
          twi_stop();
    18f6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <twi_stop>
    18fa:	85 c0       	rjmp	.+266    	; 0x1a06 <__vector_24+0x224>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	80 93 7e 02 	sts	0x027E, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1902:	84 ea       	ldi	r24, 0xA4	; 164
    1904:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    1908:	10 92 81 02 	sts	0x0281, r1
    190c:	7c c0       	rjmp	.+248    	; 0x1a06 <__vector_24+0x224>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    190e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <twi_stop>
      break;
    1912:	79 c0       	rjmp	.+242    	; 0x1a06 <__vector_24+0x224>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	80 93 81 02 	sts	0x0281, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    191a:	10 92 15 02 	sts	0x0215, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    191e:	85 ec       	ldi	r24, 0xC5	; 197
    1920:	80 93 bc 00 	sts	0x00BC, r24
    1924:	70 c0       	rjmp	.+224    	; 0x1a06 <__vector_24+0x224>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1926:	80 91 15 02 	lds	r24, 0x0215
    192a:	80 32       	cpi	r24, 0x20	; 32
    192c:	80 f4       	brcc	.+32     	; 0x194e <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    192e:	e0 91 15 02 	lds	r30, 0x0215
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	8e 0f       	add	r24, r30
    1936:	80 93 15 02 	sts	0x0215, r24
    193a:	80 91 bb 00 	lds	r24, 0x00BB
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	ea 5e       	subi	r30, 0xEA	; 234
    1942:	fd 4f       	sbci	r31, 0xFD	; 253
    1944:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1946:	85 ec       	ldi	r24, 0xC5	; 197
    1948:	80 93 bc 00 	sts	0x00BC, r24
    194c:	5c c0       	rjmp	.+184    	; 0x1a06 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    194e:	85 e8       	ldi	r24, 0x85	; 133
    1950:	80 93 bc 00 	sts	0x00BC, r24
    1954:	58 c0       	rjmp	.+176    	; 0x1a06 <__vector_24+0x224>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1956:	80 91 15 02 	lds	r24, 0x0215
    195a:	80 32       	cpi	r24, 0x20	; 32
    195c:	30 f4       	brcc	.+12     	; 0x196a <__vector_24+0x188>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    195e:	e0 91 15 02 	lds	r30, 0x0215
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	ea 5e       	subi	r30, 0xEA	; 234
    1966:	fd 4f       	sbci	r31, 0xFD	; 253
    1968:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    196a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    196e:	60 91 15 02 	lds	r22, 0x0215
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	e0 91 7a 02 	lds	r30, 0x027A
    1978:	f0 91 7b 02 	lds	r31, 0x027B
    197c:	86 e1       	ldi	r24, 0x16	; 22
    197e:	92 e0       	ldi	r25, 0x02	; 2
    1980:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1982:	10 92 15 02 	sts	0x0215, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1986:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <twi_releaseBus>
      break;
    198a:	3d c0       	rjmp	.+122    	; 0x1a06 <__vector_24+0x224>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    198c:	85 e8       	ldi	r24, 0x85	; 133
    198e:	80 93 bc 00 	sts	0x00BC, r24
    1992:	39 c0       	rjmp	.+114    	; 0x1a06 <__vector_24+0x224>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1994:	84 e0       	ldi	r24, 0x04	; 4
    1996:	80 93 81 02 	sts	0x0281, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    199a:	10 92 37 02 	sts	0x0237, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    199e:	10 92 36 02 	sts	0x0236, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    19a2:	e0 91 7c 02 	lds	r30, 0x027C
    19a6:	f0 91 7d 02 	lds	r31, 0x027D
    19aa:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    19ac:	80 91 36 02 	lds	r24, 0x0236
    19b0:	81 11       	cpse	r24, r1
    19b2:	05 c0       	rjmp	.+10     	; 0x19be <__vector_24+0x1dc>
        twi_txBufferLength = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	80 93 36 02 	sts	0x0236, r24
        twi_txBuffer[0] = 0x00;
    19ba:	10 92 38 02 	sts	0x0238, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    19be:	e0 91 37 02 	lds	r30, 0x0237
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	8e 0f       	add	r24, r30
    19c6:	80 93 37 02 	sts	0x0237, r24
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	e8 5c       	subi	r30, 0xC8	; 200
    19ce:	fd 4f       	sbci	r31, 0xFD	; 253
    19d0:	80 81       	ld	r24, Z
    19d2:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    19d6:	90 91 37 02 	lds	r25, 0x0237
    19da:	80 91 36 02 	lds	r24, 0x0236
    19de:	98 17       	cp	r25, r24
    19e0:	20 f4       	brcc	.+8      	; 0x19ea <__vector_24+0x208>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    19e2:	85 ec       	ldi	r24, 0xC5	; 197
    19e4:	80 93 bc 00 	sts	0x00BC, r24
    19e8:	0e c0       	rjmp	.+28     	; 0x1a06 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    19ea:	85 e8       	ldi	r24, 0x85	; 133
    19ec:	80 93 bc 00 	sts	0x00BC, r24
    19f0:	0a c0       	rjmp	.+20     	; 0x1a06 <__vector_24+0x224>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    19f2:	85 ec       	ldi	r24, 0xC5	; 197
    19f4:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    19f8:	10 92 81 02 	sts	0x0281, r1
      break;
    19fc:	04 c0       	rjmp	.+8      	; 0x1a06 <__vector_24+0x224>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    19fe:	10 92 14 02 	sts	0x0214, r1
      twi_stop();
    1a02:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <twi_stop>
      break;
  }
}
    1a06:	ff 91       	pop	r31
    1a08:	ef 91       	pop	r30
    1a0a:	bf 91       	pop	r27
    1a0c:	af 91       	pop	r26
    1a0e:	9f 91       	pop	r25
    1a10:	8f 91       	pop	r24
    1a12:	7f 91       	pop	r23
    1a14:	6f 91       	pop	r22
    1a16:	5f 91       	pop	r21
    1a18:	4f 91       	pop	r20
    1a1a:	3f 91       	pop	r19
    1a1c:	2f 91       	pop	r18
    1a1e:	0f 90       	pop	r0
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	0f 90       	pop	r0
    1a24:	1f 90       	pop	r1
    1a26:	18 95       	reti

00001a28 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1a28:	82 30       	cpi	r24, 0x02	; 2
    1a2a:	00 f5       	brcc	.+64     	; 0x1a6c <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    1a2c:	e8 2f       	mov	r30, r24
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	ee 0f       	add	r30, r30
    1a32:	ff 1f       	adc	r31, r31
    1a34:	ee 57       	subi	r30, 0x7E	; 126
    1a36:	fd 4f       	sbci	r31, 0xFD	; 253
    1a38:	71 83       	std	Z+1, r23	; 0x01
    1a3a:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1a3c:	88 23       	and	r24, r24
    1a3e:	19 f0       	breq	.+6      	; 0x1a46 <attachInterrupt+0x1e>
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	49 f0       	breq	.+18     	; 0x1a56 <attachInterrupt+0x2e>
    1a44:	08 95       	ret
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1a46:	e9 e6       	ldi	r30, 0x69	; 105
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8c 7f       	andi	r24, 0xFC	; 252
    1a4e:	48 2b       	or	r20, r24
    1a50:	40 83       	st	Z, r20
      EIMSK |= (1 << INT0);
    1a52:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    1a54:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1a56:	e9 e6       	ldi	r30, 0x69	; 105
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	44 0f       	add	r20, r20
    1a5e:	55 1f       	adc	r21, r21
    1a60:	44 0f       	add	r20, r20
    1a62:	55 1f       	adc	r21, r21
    1a64:	83 7f       	andi	r24, 0xF3	; 243
    1a66:	48 2b       	or	r20, r24
    1a68:	40 83       	st	Z, r20
      EIMSK |= (1 << INT1);
    1a6a:	e9 9a       	sbi	0x1d, 1	; 29
    1a6c:	08 95       	ret

00001a6e <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1a6e:	82 30       	cpi	r24, 0x02	; 2
    1a70:	80 f4       	brcc	.+32     	; 0x1a92 <detachInterrupt+0x24>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    1a72:	88 23       	and	r24, r24
    1a74:	19 f0       	breq	.+6      	; 0x1a7c <detachInterrupt+0xe>
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	19 f0       	breq	.+6      	; 0x1a80 <detachInterrupt+0x12>
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <detachInterrupt+0x14>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    1a7c:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <detachInterrupt+0x14>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    1a80:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    1a82:	e8 2f       	mov	r30, r24
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	ee 0f       	add	r30, r30
    1a88:	ff 1f       	adc	r31, r31
    1a8a:	ee 57       	subi	r30, 0x7E	; 126
    1a8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a8e:	11 82       	std	Z+1, r1	; 0x01
    1a90:	10 82       	st	Z, r1
    1a92:	08 95       	ret

00001a94 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    1a94:	1f 92       	push	r1
    1a96:	0f 92       	push	r0
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	0f 92       	push	r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	2f 93       	push	r18
    1aa0:	3f 93       	push	r19
    1aa2:	4f 93       	push	r20
    1aa4:	5f 93       	push	r21
    1aa6:	6f 93       	push	r22
    1aa8:	7f 93       	push	r23
    1aaa:	8f 93       	push	r24
    1aac:	9f 93       	push	r25
    1aae:	af 93       	push	r26
    1ab0:	bf 93       	push	r27
    1ab2:	ef 93       	push	r30
    1ab4:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    1ab6:	80 91 82 02 	lds	r24, 0x0282
    1aba:	90 91 83 02 	lds	r25, 0x0283
    1abe:	89 2b       	or	r24, r25
    1ac0:	29 f0       	breq	.+10     	; 0x1acc <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    1ac2:	e0 91 82 02 	lds	r30, 0x0282
    1ac6:	f0 91 83 02 	lds	r31, 0x0283
    1aca:	09 95       	icall
}
    1acc:	ff 91       	pop	r31
    1ace:	ef 91       	pop	r30
    1ad0:	bf 91       	pop	r27
    1ad2:	af 91       	pop	r26
    1ad4:	9f 91       	pop	r25
    1ad6:	8f 91       	pop	r24
    1ad8:	7f 91       	pop	r23
    1ada:	6f 91       	pop	r22
    1adc:	5f 91       	pop	r21
    1ade:	4f 91       	pop	r20
    1ae0:	3f 91       	pop	r19
    1ae2:	2f 91       	pop	r18
    1ae4:	0f 90       	pop	r0
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	0f 90       	pop	r0
    1aea:	1f 90       	pop	r1
    1aec:	18 95       	reti

00001aee <__vector_2>:

ISR(INT1_vect) {
    1aee:	1f 92       	push	r1
    1af0:	0f 92       	push	r0
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	2f 93       	push	r18
    1afa:	3f 93       	push	r19
    1afc:	4f 93       	push	r20
    1afe:	5f 93       	push	r21
    1b00:	6f 93       	push	r22
    1b02:	7f 93       	push	r23
    1b04:	8f 93       	push	r24
    1b06:	9f 93       	push	r25
    1b08:	af 93       	push	r26
    1b0a:	bf 93       	push	r27
    1b0c:	ef 93       	push	r30
    1b0e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    1b10:	80 91 84 02 	lds	r24, 0x0284
    1b14:	90 91 85 02 	lds	r25, 0x0285
    1b18:	89 2b       	or	r24, r25
    1b1a:	29 f0       	breq	.+10     	; 0x1b26 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    1b1c:	e0 91 84 02 	lds	r30, 0x0284
    1b20:	f0 91 85 02 	lds	r31, 0x0285
    1b24:	09 95       	icall
}
    1b26:	ff 91       	pop	r31
    1b28:	ef 91       	pop	r30
    1b2a:	bf 91       	pop	r27
    1b2c:	af 91       	pop	r26
    1b2e:	9f 91       	pop	r25
    1b30:	8f 91       	pop	r24
    1b32:	7f 91       	pop	r23
    1b34:	6f 91       	pop	r22
    1b36:	5f 91       	pop	r21
    1b38:	4f 91       	pop	r20
    1b3a:	3f 91       	pop	r19
    1b3c:	2f 91       	pop	r18
    1b3e:	0f 90       	pop	r0
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	0f 90       	pop	r0
    1b44:	1f 90       	pop	r1
    1b46:	18 95       	reti

00001b48 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    1b48:	80 91 b6 02 	lds	r24, 0x02B6
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	20 91 b7 02 	lds	r18, 0x02B7
}
    1b52:	82 1b       	sub	r24, r18
    1b54:	91 09       	sbc	r25, r1
    1b56:	08 95       	ret

00001b58 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1b58:	90 91 b7 02 	lds	r25, 0x02B7
    1b5c:	80 91 b6 02 	lds	r24, 0x02B6
    1b60:	98 17       	cp	r25, r24
    1b62:	50 f4       	brcc	.+20     	; 0x1b78 <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    1b64:	e9 2f       	mov	r30, r25
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	e8 54       	subi	r30, 0x48	; 72
    1b6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b6c:	20 81       	ld	r18, Z
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    1b70:	9f 5f       	subi	r25, 0xFF	; 255
    1b72:	90 93 b7 02 	sts	0x02B7, r25
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    1b78:	2f ef       	ldi	r18, 0xFF	; 255
    1b7a:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    1b7c:	c9 01       	movw	r24, r18
    1b7e:	08 95       	ret

00001b80 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    1b80:	e0 91 b7 02 	lds	r30, 0x02B7
    1b84:	80 91 b6 02 	lds	r24, 0x02B6
    1b88:	e8 17       	cp	r30, r24
    1b8a:	30 f4       	brcc	.+12     	; 0x1b98 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	e8 54       	subi	r30, 0x48	; 72
    1b90:	fd 4f       	sbci	r31, 0xFD	; 253
    1b92:	80 81       	ld	r24, Z
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    1b98:	8f ef       	ldi	r24, 0xFF	; 255
    1b9a:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    1b9c:	08 95       	ret

00001b9e <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    1b9e:	08 95       	ret

00001ba0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	8c 01       	movw	r16, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	6a 01       	movw	r12, r20
  if(transmitting){
    1bb6:	20 91 92 02 	lds	r18, 0x0292
    1bba:	22 23       	and	r18, r18
    1bbc:	a1 f0       	breq	.+40     	; 0x1be6 <_ZN7TwoWire5writeEPKhj+0x46>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1bbe:	41 15       	cp	r20, r1
    1bc0:	51 05       	cpc	r21, r1
    1bc2:	a1 f0       	breq	.+40     	; 0x1bec <_ZN7TwoWire5writeEPKhj+0x4c>
    1bc4:	eb 01       	movw	r28, r22
    1bc6:	7b 01       	movw	r14, r22
    1bc8:	e4 0e       	add	r14, r20
    1bca:	f5 1e       	adc	r15, r21
      write(data[i]);
    1bcc:	69 91       	ld	r22, Y+
    1bce:	d8 01       	movw	r26, r16
    1bd0:	ed 91       	ld	r30, X+
    1bd2:	fc 91       	ld	r31, X
    1bd4:	01 90       	ld	r0, Z+
    1bd6:	f0 81       	ld	r31, Z
    1bd8:	e0 2d       	mov	r30, r0
    1bda:	c8 01       	movw	r24, r16
    1bdc:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1bde:	ce 15       	cp	r28, r14
    1be0:	df 05       	cpc	r29, r15
    1be2:	a1 f7       	brne	.-24     	; 0x1bcc <_ZN7TwoWire5writeEPKhj+0x2c>
    1be4:	03 c0       	rjmp	.+6      	; 0x1bec <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    1be6:	64 2f       	mov	r22, r20
    1be8:	0e 94 bf 0b 	call	0x177e	; 0x177e <twi_transmit>
  }
  return quantity;
}
    1bec:	c6 01       	movw	r24, r12
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	08 95       	ret

00001c00 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	1f 92       	push	r1
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    1c0e:	90 91 92 02 	lds	r25, 0x0292
    1c12:	99 23       	and	r25, r25
    1c14:	d9 f0       	breq	.+54     	; 0x1c4c <_ZN7TwoWire5writeEh+0x4c>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    1c16:	90 91 93 02 	lds	r25, 0x0293
    1c1a:	90 32       	cpi	r25, 0x20	; 32
    1c1c:	38 f0       	brcs	.+14     	; 0x1c2c <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	93 83       	std	Z+3, r25	; 0x03
    1c24:	82 83       	std	Z+2, r24	; 0x02
      setWriteError();
      return 0;
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	17 c0       	rjmp	.+46     	; 0x1c5a <_ZN7TwoWire5writeEh+0x5a>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    1c2c:	80 91 94 02 	lds	r24, 0x0294
    1c30:	e8 2f       	mov	r30, r24
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	eb 56       	subi	r30, 0x6B	; 107
    1c36:	fd 4f       	sbci	r31, 0xFD	; 253
    1c38:	99 81       	ldd	r25, Y+1	; 0x01
    1c3a:	90 83       	st	Z, r25
    ++txBufferIndex;
    1c3c:	8f 5f       	subi	r24, 0xFF	; 255
    1c3e:	80 93 94 02 	sts	0x0294, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    1c42:	80 93 93 02 	sts	0x0293, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	07 c0       	rjmp	.+14     	; 0x1c5a <_ZN7TwoWire5writeEh+0x5a>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	ce 01       	movw	r24, r28
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	0e 94 bf 0b 	call	0x177e	; 0x177e <twi_transmit>
  }
  return 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
}
    1c5a:	0f 90       	pop	r0
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	08 95       	ret

00001c62 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1c62:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    1c64:	13 82       	std	Z+3, r1	; 0x03
    1c66:	12 82       	std	Z+2, r1	; 0x02
    1c68:	88 ee       	ldi	r24, 0xE8	; 232
    1c6a:	93 e0       	ldi	r25, 0x03	; 3
    1c6c:	a0 e0       	ldi	r26, 0x00	; 0
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	84 83       	std	Z+4, r24	; 0x04
    1c72:	95 83       	std	Z+5, r25	; 0x05
    1c74:	a6 83       	std	Z+6, r26	; 0x06
    1c76:	b7 83       	std	Z+7, r27	; 0x07
    1c78:	87 e4       	ldi	r24, 0x47	; 71
    1c7a:	91 e0       	ldi	r25, 0x01	; 1
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	80 83       	st	Z, r24
    1c80:	08 95       	ret

00001c82 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    1c82:	10 92 b7 02 	sts	0x02B7, r1
  rxBufferLength = 0;
    1c86:	10 92 b6 02 	sts	0x02B6, r1

  txBufferIndex = 0;
    1c8a:	10 92 94 02 	sts	0x0294, r1
  txBufferLength = 0;
    1c8e:	10 92 93 02 	sts	0x0293, r1

  twi_init();
    1c92:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <twi_init>
    1c96:	08 95       	ret

00001c98 <_ZN7TwoWire11requestFromEhhh>:
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
    1c98:	86 2f       	mov	r24, r22
    1c9a:	41 32       	cpi	r20, 0x21	; 33
    1c9c:	08 f0       	brcs	.+2      	; 0x1ca0 <_ZN7TwoWire11requestFromEhhh+0x8>
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    1ca0:	68 eb       	ldi	r22, 0xB8	; 184
    1ca2:	72 e0       	ldi	r23, 0x02	; 2
    1ca4:	0e 94 16 0b 	call	0x162c	; 0x162c <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    1ca8:	10 92 b7 02 	sts	0x02B7, r1
  rxBufferLength = read;
    1cac:	80 93 b6 02 	sts	0x02B6, r24

  return read;
}
    1cb0:	08 95       	ret

00001cb2 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    1cb2:	21 e0       	ldi	r18, 0x01	; 1
    1cb4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN7TwoWire11requestFromEhhh>
}
    1cb8:	08 95       	ret

00001cba <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	80 93 92 02 	sts	0x0292, r24
  // set address of targeted slave
  txAddress = address;
    1cc0:	60 93 b5 02 	sts	0x02B5, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1cc4:	10 92 94 02 	sts	0x0294, r1
  txBufferLength = 0;
    1cc8:	10 92 93 02 	sts	0x0293, r1
    1ccc:	08 95       	ret

00001cce <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    1cce:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN7TwoWire17beginTransmissionEh>
    1cd2:	08 95       	ret

00001cd4 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    1cd4:	0f 93       	push	r16
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    1cd6:	06 2f       	mov	r16, r22
    1cd8:	21 e0       	ldi	r18, 0x01	; 1
    1cda:	40 91 93 02 	lds	r20, 0x0293
    1cde:	65 e9       	ldi	r22, 0x95	; 149
    1ce0:	72 e0       	ldi	r23, 0x02	; 2
    1ce2:	80 91 b5 02 	lds	r24, 0x02B5
    1ce6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1cea:	10 92 94 02 	sts	0x0294, r1
  txBufferLength = 0;
    1cee:	10 92 93 02 	sts	0x0293, r1
  // indicate that we are done transmitting
  transmitting = 0;
    1cf2:	10 92 92 02 	sts	0x0292, r1
  return ret;
}
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_ZN7TwoWire15endTransmissionEh>
}
    1d00:	08 95       	ret

00001d02 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1d02:	86 e8       	ldi	r24, 0x86	; 134
    1d04:	92 e0       	ldi	r25, 0x02	; 2
    1d06:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7TwoWireC1Ev>
    1d0a:	08 95       	ret

00001d0c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1d0c:	1f 92       	push	r1
    1d0e:	0f 92       	push	r0
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	0f 92       	push	r0
    1d14:	11 24       	eor	r1, r1
    1d16:	2f 93       	push	r18
    1d18:	3f 93       	push	r19
    1d1a:	8f 93       	push	r24
    1d1c:	9f 93       	push	r25
    1d1e:	af 93       	push	r26
    1d20:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1d22:	80 91 d9 02 	lds	r24, 0x02D9
    1d26:	90 91 da 02 	lds	r25, 0x02DA
    1d2a:	a0 91 db 02 	lds	r26, 0x02DB
    1d2e:	b0 91 dc 02 	lds	r27, 0x02DC
	unsigned char f = timer0_fract;
    1d32:	30 91 d8 02 	lds	r19, 0x02D8

	m += MILLIS_INC;
	f += FRACT_INC;
    1d36:	23 e0       	ldi	r18, 0x03	; 3
    1d38:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1d3a:	2d 37       	cpi	r18, 0x7D	; 125
    1d3c:	20 f4       	brcc	.+8      	; 0x1d46 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	a1 1d       	adc	r26, r1
    1d42:	b1 1d       	adc	r27, r1
    1d44:	05 c0       	rjmp	.+10     	; 0x1d50 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1d46:	26 e8       	ldi	r18, 0x86	; 134
    1d48:	23 0f       	add	r18, r19
		m += 1;
    1d4a:	02 96       	adiw	r24, 0x02	; 2
    1d4c:	a1 1d       	adc	r26, r1
    1d4e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1d50:	20 93 d8 02 	sts	0x02D8, r18
	timer0_millis = m;
    1d54:	80 93 d9 02 	sts	0x02D9, r24
    1d58:	90 93 da 02 	sts	0x02DA, r25
    1d5c:	a0 93 db 02 	sts	0x02DB, r26
    1d60:	b0 93 dc 02 	sts	0x02DC, r27
	timer0_overflow_count++;
    1d64:	80 91 dd 02 	lds	r24, 0x02DD
    1d68:	90 91 de 02 	lds	r25, 0x02DE
    1d6c:	a0 91 df 02 	lds	r26, 0x02DF
    1d70:	b0 91 e0 02 	lds	r27, 0x02E0
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	a1 1d       	adc	r26, r1
    1d78:	b1 1d       	adc	r27, r1
    1d7a:	80 93 dd 02 	sts	0x02DD, r24
    1d7e:	90 93 de 02 	sts	0x02DE, r25
    1d82:	a0 93 df 02 	sts	0x02DF, r26
    1d86:	b0 93 e0 02 	sts	0x02E0, r27
}
    1d8a:	bf 91       	pop	r27
    1d8c:	af 91       	pop	r26
    1d8e:	9f 91       	pop	r25
    1d90:	8f 91       	pop	r24
    1d92:	3f 91       	pop	r19
    1d94:	2f 91       	pop	r18
    1d96:	0f 90       	pop	r0
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	0f 90       	pop	r0
    1d9c:	1f 90       	pop	r1
    1d9e:	18 95       	reti

00001da0 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1da0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1da2:	f8 94       	cli
	m = timer0_overflow_count;
    1da4:	80 91 dd 02 	lds	r24, 0x02DD
    1da8:	90 91 de 02 	lds	r25, 0x02DE
    1dac:	a0 91 df 02 	lds	r26, 0x02DF
    1db0:	b0 91 e0 02 	lds	r27, 0x02E0
#if defined(TCNT0)
	t = TCNT0;
    1db4:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1db6:	a8 9b       	sbis	0x15, 0	; 21
    1db8:	05 c0       	rjmp	.+10     	; 0x1dc4 <micros+0x24>
    1dba:	2f 3f       	cpi	r18, 0xFF	; 255
    1dbc:	19 f0       	breq	.+6      	; 0x1dc4 <micros+0x24>
		m++;
    1dbe:	01 96       	adiw	r24, 0x01	; 1
    1dc0:	a1 1d       	adc	r26, r1
    1dc2:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1dc4:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1dc6:	ba 2f       	mov	r27, r26
    1dc8:	a9 2f       	mov	r26, r25
    1dca:	98 2f       	mov	r25, r24
    1dcc:	88 27       	eor	r24, r24
    1dce:	82 0f       	add	r24, r18
    1dd0:	91 1d       	adc	r25, r1
    1dd2:	a1 1d       	adc	r26, r1
    1dd4:	b1 1d       	adc	r27, r1
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	66 0f       	add	r22, r22
    1ddc:	77 1f       	adc	r23, r23
    1dde:	88 1f       	adc	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	66 0f       	add	r22, r22
    1de4:	77 1f       	adc	r23, r23
    1de6:	88 1f       	adc	r24, r24
    1de8:	99 1f       	adc	r25, r25
}
    1dea:	08 95       	ret

00001dec <delay>:

void delay(unsigned long ms)
{
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	6b 01       	movw	r12, r22
    1dfa:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    1dfc:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <micros>
    1e00:	eb 01       	movw	r28, r22

	while (ms > 0) {
    1e02:	c1 14       	cp	r12, r1
    1e04:	d1 04       	cpc	r13, r1
    1e06:	e1 04       	cpc	r14, r1
    1e08:	f1 04       	cpc	r15, r1
    1e0a:	a9 f0       	breq	.+42     	; 0x1e36 <delay+0x4a>
		yield();
    1e0c:	0e 94 c9 06 	call	0xd92	; 0xd92 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    1e10:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <micros>
    1e14:	6c 1b       	sub	r22, r28
    1e16:	7d 0b       	sbc	r23, r29
    1e18:	68 3e       	cpi	r22, 0xE8	; 232
    1e1a:	73 40       	sbci	r23, 0x03	; 3
    1e1c:	38 f0       	brcs	.+14     	; 0x1e2c <delay+0x40>
			ms--;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	c8 1a       	sub	r12, r24
    1e22:	d1 08       	sbc	r13, r1
    1e24:	e1 08       	sbc	r14, r1
    1e26:	f1 08       	sbc	r15, r1
			start += 1000;
    1e28:	c8 51       	subi	r28, 0x18	; 24
    1e2a:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1e2c:	c1 14       	cp	r12, r1
    1e2e:	d1 04       	cpc	r13, r1
    1e30:	e1 04       	cpc	r14, r1
    1e32:	f1 04       	cpc	r15, r1
    1e34:	59 f7       	brne	.-42     	; 0x1e0c <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	ff 90       	pop	r15
    1e3c:	ef 90       	pop	r14
    1e3e:	df 90       	pop	r13
    1e40:	cf 90       	pop	r12
    1e42:	08 95       	ret

00001e44 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1e44:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1e46:	84 b5       	in	r24, 0x24	; 36
    1e48:	82 60       	ori	r24, 0x02	; 2
    1e4a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1e4c:	84 b5       	in	r24, 0x24	; 36
    1e4e:	81 60       	ori	r24, 0x01	; 1
    1e50:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1e52:	85 b5       	in	r24, 0x25	; 37
    1e54:	82 60       	ori	r24, 0x02	; 2
    1e56:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1e58:	85 b5       	in	r24, 0x25	; 37
    1e5a:	81 60       	ori	r24, 0x01	; 1
    1e5c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1e5e:	ee e6       	ldi	r30, 0x6E	; 110
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	81 60       	ori	r24, 0x01	; 1
    1e66:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1e68:	e1 e8       	ldi	r30, 0x81	; 129
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1e6e:	80 81       	ld	r24, Z
    1e70:	82 60       	ori	r24, 0x02	; 2
    1e72:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1e74:	80 81       	ld	r24, Z
    1e76:	81 60       	ori	r24, 0x01	; 1
    1e78:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1e7a:	e0 e8       	ldi	r30, 0x80	; 128
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	81 60       	ori	r24, 0x01	; 1
    1e82:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1e84:	e1 eb       	ldi	r30, 0xB1	; 177
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	84 60       	ori	r24, 0x04	; 4
    1e8c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1e8e:	e0 eb       	ldi	r30, 0xB0	; 176
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	81 60       	ori	r24, 0x01	; 1
    1e96:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1e98:	ea e7       	ldi	r30, 0x7A	; 122
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	84 60       	ori	r24, 0x04	; 4
    1ea0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1ea2:	80 81       	ld	r24, Z
    1ea4:	82 60       	ori	r24, 0x02	; 2
    1ea6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1ea8:	80 81       	ld	r24, Z
    1eaa:	81 60       	ori	r24, 0x01	; 1
    1eac:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1eae:	80 81       	ld	r24, Z
    1eb0:	80 68       	ori	r24, 0x80	; 128
    1eb2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1eb4:	10 92 c1 00 	sts	0x00C1, r1
    1eb8:	08 95       	ret

00001eba <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1eba:	8e 30       	cpi	r24, 0x0E	; 14
    1ebc:	08 f0       	brcs	.+2      	; 0x1ec0 <analogRead+0x6>
    1ebe:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1ec0:	87 70       	andi	r24, 0x07	; 7
    1ec2:	90 91 2c 01 	lds	r25, 0x012C
    1ec6:	40 e4       	ldi	r20, 0x40	; 64
    1ec8:	94 9f       	mul	r25, r20
    1eca:	90 01       	movw	r18, r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	28 2b       	or	r18, r24
    1ed0:	20 93 7c 00 	sts	0x007C, r18
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1ed4:	ea e7       	ldi	r30, 0x7A	; 122
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 64       	ori	r24, 0x40	; 64
    1edc:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1ede:	80 81       	ld	r24, Z
    1ee0:	86 fd       	sbrc	r24, 6
    1ee2:	fd cf       	rjmp	.-6      	; 0x1ede <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1ee4:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    1ee8:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1eec:	90 e0       	ldi	r25, 0x00	; 0
}
    1eee:	92 2b       	or	r25, r18
    1ef0:	08 95       	ret

00001ef2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1ef2:	83 30       	cpi	r24, 0x03	; 3
    1ef4:	69 f0       	breq	.+26     	; 0x1f10 <turnOffPWM+0x1e>
    1ef6:	28 f4       	brcc	.+10     	; 0x1f02 <turnOffPWM+0x10>
    1ef8:	81 30       	cpi	r24, 0x01	; 1
    1efa:	b1 f0       	breq	.+44     	; 0x1f28 <turnOffPWM+0x36>
    1efc:	82 30       	cpi	r24, 0x02	; 2
    1efe:	c1 f0       	breq	.+48     	; 0x1f30 <turnOffPWM+0x3e>
    1f00:	08 95       	ret
    1f02:	87 30       	cpi	r24, 0x07	; 7
    1f04:	c9 f0       	breq	.+50     	; 0x1f38 <turnOffPWM+0x46>
    1f06:	88 30       	cpi	r24, 0x08	; 8
    1f08:	e9 f0       	breq	.+58     	; 0x1f44 <turnOffPWM+0x52>
    1f0a:	84 30       	cpi	r24, 0x04	; 4
    1f0c:	01 f5       	brne	.+64     	; 0x1f4e <turnOffPWM+0x5c>
    1f0e:	06 c0       	rjmp	.+12     	; 0x1f1c <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1f10:	e0 e8       	ldi	r30, 0x80	; 128
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	8f 77       	andi	r24, 0x7F	; 127
    1f18:	80 83       	st	Z, r24
    1f1a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1f1c:	e0 e8       	ldi	r30, 0x80	; 128
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	8f 7d       	andi	r24, 0xDF	; 223
    1f24:	80 83       	st	Z, r24
    1f26:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1f28:	84 b5       	in	r24, 0x24	; 36
    1f2a:	8f 77       	andi	r24, 0x7F	; 127
    1f2c:	84 bd       	out	0x24, r24	; 36
    1f2e:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1f30:	84 b5       	in	r24, 0x24	; 36
    1f32:	8f 7d       	andi	r24, 0xDF	; 223
    1f34:	84 bd       	out	0x24, r24	; 36
    1f36:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1f38:	e0 eb       	ldi	r30, 0xB0	; 176
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8f 77       	andi	r24, 0x7F	; 127
    1f40:	80 83       	st	Z, r24
    1f42:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1f44:	e0 eb       	ldi	r30, 0xB0	; 176
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	8f 7d       	andi	r24, 0xDF	; 223
    1f4c:	80 83       	st	Z, r24
    1f4e:	08 95       	ret

00001f50 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	fc 01       	movw	r30, r24
    1f58:	ed 57       	subi	r30, 0x7D	; 125
    1f5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f5c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1f5e:	fc 01       	movw	r30, r24
    1f60:	e9 56       	subi	r30, 0x69	; 105
    1f62:	fd 4f       	sbci	r31, 0xFD	; 253
    1f64:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1f66:	88 23       	and	r24, r24
    1f68:	79 f1       	breq	.+94     	; 0x1fc8 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	fc 01       	movw	r30, r24
    1f72:	e1 54       	subi	r30, 0x41	; 65
    1f74:	fd 4f       	sbci	r31, 0xFD	; 253
    1f76:	a5 91       	lpm	r26, Z+
    1f78:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	eb 54       	subi	r30, 0x4B	; 75
    1f7e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f80:	c5 91       	lpm	r28, Z+
    1f82:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    1f84:	61 11       	cpse	r22, r1
    1f86:	0c c0       	rjmp	.+24     	; 0x1fa0 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    1f88:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1f8a:	f8 94       	cli
		*reg &= ~bit;
    1f8c:	8c 91       	ld	r24, X
    1f8e:	e2 2f       	mov	r30, r18
    1f90:	e0 95       	com	r30
    1f92:	8e 23       	and	r24, r30
    1f94:	8c 93       	st	X, r24
		*out &= ~bit;
    1f96:	28 81       	ld	r18, Y
    1f98:	e2 23       	and	r30, r18
    1f9a:	e8 83       	st	Y, r30
		SREG = oldSREG;
    1f9c:	9f bf       	out	0x3f, r25	; 63
    1f9e:	14 c0       	rjmp	.+40     	; 0x1fc8 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    1fa0:	62 30       	cpi	r22, 0x02	; 2
    1fa2:	61 f4       	brne	.+24     	; 0x1fbc <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    1fa4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1fa6:	f8 94       	cli
		*reg &= ~bit;
    1fa8:	3c 91       	ld	r19, X
    1faa:	82 2f       	mov	r24, r18
    1fac:	80 95       	com	r24
    1fae:	83 23       	and	r24, r19
    1fb0:	8c 93       	st	X, r24
		*out |= bit;
    1fb2:	e8 81       	ld	r30, Y
    1fb4:	e2 2b       	or	r30, r18
    1fb6:	e8 83       	st	Y, r30
		SREG = oldSREG;
    1fb8:	9f bf       	out	0x3f, r25	; 63
    1fba:	06 c0       	rjmp	.+12     	; 0x1fc8 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    1fbc:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1fbe:	f8 94       	cli
		*reg |= bit;
    1fc0:	ec 91       	ld	r30, X
    1fc2:	e2 2b       	or	r30, r18
    1fc4:	ec 93       	st	X, r30
		SREG = oldSREG;
    1fc6:	8f bf       	out	0x3f, r24	; 63
	}
}
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	08 95       	ret

00001fce <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1fce:	1f 93       	push	r17
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	f9 01       	movw	r30, r18
    1fda:	e1 59       	subi	r30, 0x91	; 145
    1fdc:	fd 4f       	sbci	r31, 0xFD	; 253
    1fde:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1fe0:	f9 01       	movw	r30, r18
    1fe2:	ed 57       	subi	r30, 0x7D	; 125
    1fe4:	fd 4f       	sbci	r31, 0xFD	; 253
    1fe6:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    1fe8:	f9 01       	movw	r30, r18
    1fea:	e9 56       	subi	r30, 0x69	; 105
    1fec:	fd 4f       	sbci	r31, 0xFD	; 253
    1fee:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1ff0:	cc 23       	and	r28, r28
    1ff2:	d1 f0       	breq	.+52     	; 0x2028 <digitalWrite+0x5a>
    1ff4:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ff6:	81 11       	cpse	r24, r1
    1ff8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <turnOffPWM>

	out = portOutputRegister(port);
    1ffc:	ec 2f       	mov	r30, r28
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	ee 0f       	add	r30, r30
    2002:	ff 1f       	adc	r31, r31
    2004:	eb 54       	subi	r30, 0x4B	; 75
    2006:	fd 4f       	sbci	r31, 0xFD	; 253
    2008:	a5 91       	lpm	r26, Z+
    200a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    200c:	8f b7       	in	r24, 0x3f	; 63
	cli();
    200e:	f8 94       	cli

	if (val == LOW) {
    2010:	d1 11       	cpse	r29, r1
    2012:	06 c0       	rjmp	.+12     	; 0x2020 <digitalWrite+0x52>
		*out &= ~bit;
    2014:	9c 91       	ld	r25, X
    2016:	e1 2f       	mov	r30, r17
    2018:	e0 95       	com	r30
    201a:	e9 23       	and	r30, r25
    201c:	ec 93       	st	X, r30
    201e:	03 c0       	rjmp	.+6      	; 0x2026 <digitalWrite+0x58>
	} else {
		*out |= bit;
    2020:	ec 91       	ld	r30, X
    2022:	e1 2b       	or	r30, r17
    2024:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    2026:	8f bf       	out	0x3f, r24	; 63
}
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	08 95       	ret

00002030 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	f9 01       	movw	r30, r18
    203a:	e1 59       	subi	r30, 0x91	; 145
    203c:	fd 4f       	sbci	r31, 0xFD	; 253
    203e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2040:	f9 01       	movw	r30, r18
    2042:	ed 57       	subi	r30, 0x7D	; 125
    2044:	fd 4f       	sbci	r31, 0xFD	; 253
    2046:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2048:	f9 01       	movw	r30, r18
    204a:	e9 56       	subi	r30, 0x69	; 105
    204c:	fd 4f       	sbci	r31, 0xFD	; 253
    204e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2050:	cc 23       	and	r28, r28
    2052:	91 f0       	breq	.+36     	; 0x2078 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2054:	81 11       	cpse	r24, r1
    2056:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    205a:	ec 2f       	mov	r30, r28
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	ee 0f       	add	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	e5 55       	subi	r30, 0x55	; 85
    2064:	fd 4f       	sbci	r31, 0xFD	; 253
    2066:	a5 91       	lpm	r26, Z+
    2068:	b4 91       	lpm	r27, Z
    206a:	ec 91       	ld	r30, X
    206c:	ed 23       	and	r30, r29
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	21 f4       	brne	.+8      	; 0x207c <digitalRead+0x4c>
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	02 c0       	rjmp	.+4      	; 0x207c <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	08 95       	ret

00002082 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    2082:	bf 92       	push	r11
    2084:	cf 92       	push	r12
    2086:	df 92       	push	r13
    2088:	ef 92       	push	r14
    208a:	ff 92       	push	r15
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	b8 2e       	mov	r11, r24
    2096:	16 2f       	mov	r17, r22
    2098:	04 2f       	mov	r16, r20
    209a:	c7 e0       	ldi	r28, 0x07	; 7
    209c:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    209e:	e2 2e       	mov	r14, r18
    20a0:	f1 2c       	mov	r15, r1
    20a2:	0f 2e       	mov	r0, r31
    20a4:	f7 e0       	ldi	r31, 0x07	; 7
    20a6:	cf 2e       	mov	r12, r31
    20a8:	d1 2c       	mov	r13, r1
    20aa:	f0 2d       	mov	r31, r0
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    20ac:	01 11       	cpse	r16, r1
    20ae:	0e c0       	rjmp	.+28     	; 0x20cc <shiftOut+0x4a>
    20b0:	c6 01       	movw	r24, r12
    20b2:	8c 1b       	sub	r24, r28
    20b4:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
    20b6:	b7 01       	movw	r22, r14
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <shiftOut+0x3c>
    20ba:	75 95       	asr	r23
    20bc:	67 95       	ror	r22
    20be:	8a 95       	dec	r24
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <shiftOut+0x38>
    20c2:	61 70       	andi	r22, 0x01	; 1
    20c4:	8b 2d       	mov	r24, r11
    20c6:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
    20ca:	0b c0       	rjmp	.+22     	; 0x20e2 <shiftOut+0x60>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    20cc:	b7 01       	movw	r22, r14
    20ce:	0c 2e       	mov	r0, r28
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <shiftOut+0x54>
    20d2:	75 95       	asr	r23
    20d4:	67 95       	ror	r22
    20d6:	0a 94       	dec	r0
    20d8:	e2 f7       	brpl	.-8      	; 0x20d2 <shiftOut+0x50>
    20da:	61 70       	andi	r22, 0x01	; 1
    20dc:	8b 2d       	mov	r24, r11
    20de:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    20e2:	61 e0       	ldi	r22, 0x01	; 1
    20e4:	81 2f       	mov	r24, r17
    20e6:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
		digitalWrite(clockPin, LOW);		
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	81 2f       	mov	r24, r17
    20ee:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <digitalWrite>
    20f2:	21 97       	sbiw	r28, 0x01	; 1
    20f4:	d8 f6       	brcc	.-74     	; 0x20ac <shiftOut+0x2a>
	}
}
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	df 90       	pop	r13
    2104:	cf 90       	pop	r12
    2106:	bf 90       	pop	r11
    2108:	08 95       	ret

0000210a <__subsf3>:
    210a:	50 58       	subi	r21, 0x80	; 128

0000210c <__addsf3>:
    210c:	bb 27       	eor	r27, r27
    210e:	aa 27       	eor	r26, r26
    2110:	0e 94 9d 10 	call	0x213a	; 0x213a <__addsf3x>
    2114:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__fp_round>
    2118:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__fp_pscA>
    211c:	38 f0       	brcs	.+14     	; 0x212c <__addsf3+0x20>
    211e:	0e 94 75 11 	call	0x22ea	; 0x22ea <__fp_pscB>
    2122:	20 f0       	brcs	.+8      	; 0x212c <__addsf3+0x20>
    2124:	39 f4       	brne	.+14     	; 0x2134 <__addsf3+0x28>
    2126:	9f 3f       	cpi	r25, 0xFF	; 255
    2128:	19 f4       	brne	.+6      	; 0x2130 <__addsf3+0x24>
    212a:	26 f4       	brtc	.+8      	; 0x2134 <__addsf3+0x28>
    212c:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__fp_nan>
    2130:	0e f4       	brtc	.+2      	; 0x2134 <__addsf3+0x28>
    2132:	e0 95       	com	r30
    2134:	e7 fb       	bst	r30, 7
    2136:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__fp_inf>

0000213a <__addsf3x>:
    213a:	e9 2f       	mov	r30, r25
    213c:	0e 94 8d 11 	call	0x231a	; 0x231a <__fp_split3>
    2140:	58 f3       	brcs	.-42     	; 0x2118 <__addsf3+0xc>
    2142:	ba 17       	cp	r27, r26
    2144:	62 07       	cpc	r22, r18
    2146:	73 07       	cpc	r23, r19
    2148:	84 07       	cpc	r24, r20
    214a:	95 07       	cpc	r25, r21
    214c:	20 f0       	brcs	.+8      	; 0x2156 <__addsf3x+0x1c>
    214e:	79 f4       	brne	.+30     	; 0x216e <__addsf3x+0x34>
    2150:	a6 f5       	brtc	.+104    	; 0x21ba <__addsf3x+0x80>
    2152:	0c 94 af 11 	jmp	0x235e	; 0x235e <__fp_zero>
    2156:	0e f4       	brtc	.+2      	; 0x215a <__addsf3x+0x20>
    2158:	e0 95       	com	r30
    215a:	0b 2e       	mov	r0, r27
    215c:	ba 2f       	mov	r27, r26
    215e:	a0 2d       	mov	r26, r0
    2160:	0b 01       	movw	r0, r22
    2162:	b9 01       	movw	r22, r18
    2164:	90 01       	movw	r18, r0
    2166:	0c 01       	movw	r0, r24
    2168:	ca 01       	movw	r24, r20
    216a:	a0 01       	movw	r20, r0
    216c:	11 24       	eor	r1, r1
    216e:	ff 27       	eor	r31, r31
    2170:	59 1b       	sub	r21, r25
    2172:	99 f0       	breq	.+38     	; 0x219a <__addsf3x+0x60>
    2174:	59 3f       	cpi	r21, 0xF9	; 249
    2176:	50 f4       	brcc	.+20     	; 0x218c <__addsf3x+0x52>
    2178:	50 3e       	cpi	r21, 0xE0	; 224
    217a:	68 f1       	brcs	.+90     	; 0x21d6 <__addsf3x+0x9c>
    217c:	1a 16       	cp	r1, r26
    217e:	f0 40       	sbci	r31, 0x00	; 0
    2180:	a2 2f       	mov	r26, r18
    2182:	23 2f       	mov	r18, r19
    2184:	34 2f       	mov	r19, r20
    2186:	44 27       	eor	r20, r20
    2188:	58 5f       	subi	r21, 0xF8	; 248
    218a:	f3 cf       	rjmp	.-26     	; 0x2172 <__addsf3x+0x38>
    218c:	46 95       	lsr	r20
    218e:	37 95       	ror	r19
    2190:	27 95       	ror	r18
    2192:	a7 95       	ror	r26
    2194:	f0 40       	sbci	r31, 0x00	; 0
    2196:	53 95       	inc	r21
    2198:	c9 f7       	brne	.-14     	; 0x218c <__addsf3x+0x52>
    219a:	7e f4       	brtc	.+30     	; 0x21ba <__addsf3x+0x80>
    219c:	1f 16       	cp	r1, r31
    219e:	ba 0b       	sbc	r27, r26
    21a0:	62 0b       	sbc	r22, r18
    21a2:	73 0b       	sbc	r23, r19
    21a4:	84 0b       	sbc	r24, r20
    21a6:	ba f0       	brmi	.+46     	; 0x21d6 <__addsf3x+0x9c>
    21a8:	91 50       	subi	r25, 0x01	; 1
    21aa:	a1 f0       	breq	.+40     	; 0x21d4 <__addsf3x+0x9a>
    21ac:	ff 0f       	add	r31, r31
    21ae:	bb 1f       	adc	r27, r27
    21b0:	66 1f       	adc	r22, r22
    21b2:	77 1f       	adc	r23, r23
    21b4:	88 1f       	adc	r24, r24
    21b6:	c2 f7       	brpl	.-16     	; 0x21a8 <__addsf3x+0x6e>
    21b8:	0e c0       	rjmp	.+28     	; 0x21d6 <__addsf3x+0x9c>
    21ba:	ba 0f       	add	r27, r26
    21bc:	62 1f       	adc	r22, r18
    21be:	73 1f       	adc	r23, r19
    21c0:	84 1f       	adc	r24, r20
    21c2:	48 f4       	brcc	.+18     	; 0x21d6 <__addsf3x+0x9c>
    21c4:	87 95       	ror	r24
    21c6:	77 95       	ror	r23
    21c8:	67 95       	ror	r22
    21ca:	b7 95       	ror	r27
    21cc:	f7 95       	ror	r31
    21ce:	9e 3f       	cpi	r25, 0xFE	; 254
    21d0:	08 f0       	brcs	.+2      	; 0x21d4 <__addsf3x+0x9a>
    21d2:	b0 cf       	rjmp	.-160    	; 0x2134 <__addsf3+0x28>
    21d4:	93 95       	inc	r25
    21d6:	88 0f       	add	r24, r24
    21d8:	08 f0       	brcs	.+2      	; 0x21dc <__addsf3x+0xa2>
    21da:	99 27       	eor	r25, r25
    21dc:	ee 0f       	add	r30, r30
    21de:	97 95       	ror	r25
    21e0:	87 95       	ror	r24
    21e2:	08 95       	ret

000021e4 <__fixsfsi>:
    21e4:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__fixunssfsi>
    21e8:	68 94       	set
    21ea:	b1 11       	cpse	r27, r1
    21ec:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__fp_szero>
    21f0:	08 95       	ret

000021f2 <__fixunssfsi>:
    21f2:	0e 94 95 11 	call	0x232a	; 0x232a <__fp_splitA>
    21f6:	88 f0       	brcs	.+34     	; 0x221a <__fixunssfsi+0x28>
    21f8:	9f 57       	subi	r25, 0x7F	; 127
    21fa:	98 f0       	brcs	.+38     	; 0x2222 <__fixunssfsi+0x30>
    21fc:	b9 2f       	mov	r27, r25
    21fe:	99 27       	eor	r25, r25
    2200:	b7 51       	subi	r27, 0x17	; 23
    2202:	b0 f0       	brcs	.+44     	; 0x2230 <__fixunssfsi+0x3e>
    2204:	e1 f0       	breq	.+56     	; 0x223e <__fixunssfsi+0x4c>
    2206:	66 0f       	add	r22, r22
    2208:	77 1f       	adc	r23, r23
    220a:	88 1f       	adc	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	1a f0       	brmi	.+6      	; 0x2216 <__fixunssfsi+0x24>
    2210:	ba 95       	dec	r27
    2212:	c9 f7       	brne	.-14     	; 0x2206 <__fixunssfsi+0x14>
    2214:	14 c0       	rjmp	.+40     	; 0x223e <__fixunssfsi+0x4c>
    2216:	b1 30       	cpi	r27, 0x01	; 1
    2218:	91 f0       	breq	.+36     	; 0x223e <__fixunssfsi+0x4c>
    221a:	0e 94 af 11 	call	0x235e	; 0x235e <__fp_zero>
    221e:	b1 e0       	ldi	r27, 0x01	; 1
    2220:	08 95       	ret
    2222:	0c 94 af 11 	jmp	0x235e	; 0x235e <__fp_zero>
    2226:	67 2f       	mov	r22, r23
    2228:	78 2f       	mov	r23, r24
    222a:	88 27       	eor	r24, r24
    222c:	b8 5f       	subi	r27, 0xF8	; 248
    222e:	39 f0       	breq	.+14     	; 0x223e <__fixunssfsi+0x4c>
    2230:	b9 3f       	cpi	r27, 0xF9	; 249
    2232:	cc f3       	brlt	.-14     	; 0x2226 <__fixunssfsi+0x34>
    2234:	86 95       	lsr	r24
    2236:	77 95       	ror	r23
    2238:	67 95       	ror	r22
    223a:	b3 95       	inc	r27
    223c:	d9 f7       	brne	.-10     	; 0x2234 <__fixunssfsi+0x42>
    223e:	3e f4       	brtc	.+14     	; 0x224e <__fixunssfsi+0x5c>
    2240:	90 95       	com	r25
    2242:	80 95       	com	r24
    2244:	70 95       	com	r23
    2246:	61 95       	neg	r22
    2248:	7f 4f       	sbci	r23, 0xFF	; 255
    224a:	8f 4f       	sbci	r24, 0xFF	; 255
    224c:	9f 4f       	sbci	r25, 0xFF	; 255
    224e:	08 95       	ret

00002250 <__floatunsisf>:
    2250:	e8 94       	clt
    2252:	09 c0       	rjmp	.+18     	; 0x2266 <__floatsisf+0x12>

00002254 <__floatsisf>:
    2254:	97 fb       	bst	r25, 7
    2256:	3e f4       	brtc	.+14     	; 0x2266 <__floatsisf+0x12>
    2258:	90 95       	com	r25
    225a:	80 95       	com	r24
    225c:	70 95       	com	r23
    225e:	61 95       	neg	r22
    2260:	7f 4f       	sbci	r23, 0xFF	; 255
    2262:	8f 4f       	sbci	r24, 0xFF	; 255
    2264:	9f 4f       	sbci	r25, 0xFF	; 255
    2266:	99 23       	and	r25, r25
    2268:	a9 f0       	breq	.+42     	; 0x2294 <__floatsisf+0x40>
    226a:	f9 2f       	mov	r31, r25
    226c:	96 e9       	ldi	r25, 0x96	; 150
    226e:	bb 27       	eor	r27, r27
    2270:	93 95       	inc	r25
    2272:	f6 95       	lsr	r31
    2274:	87 95       	ror	r24
    2276:	77 95       	ror	r23
    2278:	67 95       	ror	r22
    227a:	b7 95       	ror	r27
    227c:	f1 11       	cpse	r31, r1
    227e:	f8 cf       	rjmp	.-16     	; 0x2270 <__floatsisf+0x1c>
    2280:	fa f4       	brpl	.+62     	; 0x22c0 <__floatsisf+0x6c>
    2282:	bb 0f       	add	r27, r27
    2284:	11 f4       	brne	.+4      	; 0x228a <__floatsisf+0x36>
    2286:	60 ff       	sbrs	r22, 0
    2288:	1b c0       	rjmp	.+54     	; 0x22c0 <__floatsisf+0x6c>
    228a:	6f 5f       	subi	r22, 0xFF	; 255
    228c:	7f 4f       	sbci	r23, 0xFF	; 255
    228e:	8f 4f       	sbci	r24, 0xFF	; 255
    2290:	9f 4f       	sbci	r25, 0xFF	; 255
    2292:	16 c0       	rjmp	.+44     	; 0x22c0 <__floatsisf+0x6c>
    2294:	88 23       	and	r24, r24
    2296:	11 f0       	breq	.+4      	; 0x229c <__floatsisf+0x48>
    2298:	96 e9       	ldi	r25, 0x96	; 150
    229a:	11 c0       	rjmp	.+34     	; 0x22be <__floatsisf+0x6a>
    229c:	77 23       	and	r23, r23
    229e:	21 f0       	breq	.+8      	; 0x22a8 <__floatsisf+0x54>
    22a0:	9e e8       	ldi	r25, 0x8E	; 142
    22a2:	87 2f       	mov	r24, r23
    22a4:	76 2f       	mov	r23, r22
    22a6:	05 c0       	rjmp	.+10     	; 0x22b2 <__floatsisf+0x5e>
    22a8:	66 23       	and	r22, r22
    22aa:	71 f0       	breq	.+28     	; 0x22c8 <__floatsisf+0x74>
    22ac:	96 e8       	ldi	r25, 0x86	; 134
    22ae:	86 2f       	mov	r24, r22
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	2a f0       	brmi	.+10     	; 0x22c0 <__floatsisf+0x6c>
    22b6:	9a 95       	dec	r25
    22b8:	66 0f       	add	r22, r22
    22ba:	77 1f       	adc	r23, r23
    22bc:	88 1f       	adc	r24, r24
    22be:	da f7       	brpl	.-10     	; 0x22b6 <__floatsisf+0x62>
    22c0:	88 0f       	add	r24, r24
    22c2:	96 95       	lsr	r25
    22c4:	87 95       	ror	r24
    22c6:	97 f9       	bld	r25, 7
    22c8:	08 95       	ret

000022ca <__fp_inf>:
    22ca:	97 f9       	bld	r25, 7
    22cc:	9f 67       	ori	r25, 0x7F	; 127
    22ce:	80 e8       	ldi	r24, 0x80	; 128
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	08 95       	ret

000022d6 <__fp_nan>:
    22d6:	9f ef       	ldi	r25, 0xFF	; 255
    22d8:	80 ec       	ldi	r24, 0xC0	; 192
    22da:	08 95       	ret

000022dc <__fp_pscA>:
    22dc:	00 24       	eor	r0, r0
    22de:	0a 94       	dec	r0
    22e0:	16 16       	cp	r1, r22
    22e2:	17 06       	cpc	r1, r23
    22e4:	18 06       	cpc	r1, r24
    22e6:	09 06       	cpc	r0, r25
    22e8:	08 95       	ret

000022ea <__fp_pscB>:
    22ea:	00 24       	eor	r0, r0
    22ec:	0a 94       	dec	r0
    22ee:	12 16       	cp	r1, r18
    22f0:	13 06       	cpc	r1, r19
    22f2:	14 06       	cpc	r1, r20
    22f4:	05 06       	cpc	r0, r21
    22f6:	08 95       	ret

000022f8 <__fp_round>:
    22f8:	09 2e       	mov	r0, r25
    22fa:	03 94       	inc	r0
    22fc:	00 0c       	add	r0, r0
    22fe:	11 f4       	brne	.+4      	; 0x2304 <__fp_round+0xc>
    2300:	88 23       	and	r24, r24
    2302:	52 f0       	brmi	.+20     	; 0x2318 <__fp_round+0x20>
    2304:	bb 0f       	add	r27, r27
    2306:	40 f4       	brcc	.+16     	; 0x2318 <__fp_round+0x20>
    2308:	bf 2b       	or	r27, r31
    230a:	11 f4       	brne	.+4      	; 0x2310 <__fp_round+0x18>
    230c:	60 ff       	sbrs	r22, 0
    230e:	04 c0       	rjmp	.+8      	; 0x2318 <__fp_round+0x20>
    2310:	6f 5f       	subi	r22, 0xFF	; 255
    2312:	7f 4f       	sbci	r23, 0xFF	; 255
    2314:	8f 4f       	sbci	r24, 0xFF	; 255
    2316:	9f 4f       	sbci	r25, 0xFF	; 255
    2318:	08 95       	ret

0000231a <__fp_split3>:
    231a:	57 fd       	sbrc	r21, 7
    231c:	90 58       	subi	r25, 0x80	; 128
    231e:	44 0f       	add	r20, r20
    2320:	55 1f       	adc	r21, r21
    2322:	59 f0       	breq	.+22     	; 0x233a <__fp_splitA+0x10>
    2324:	5f 3f       	cpi	r21, 0xFF	; 255
    2326:	71 f0       	breq	.+28     	; 0x2344 <__fp_splitA+0x1a>
    2328:	47 95       	ror	r20

0000232a <__fp_splitA>:
    232a:	88 0f       	add	r24, r24
    232c:	97 fb       	bst	r25, 7
    232e:	99 1f       	adc	r25, r25
    2330:	61 f0       	breq	.+24     	; 0x234a <__fp_splitA+0x20>
    2332:	9f 3f       	cpi	r25, 0xFF	; 255
    2334:	79 f0       	breq	.+30     	; 0x2354 <__fp_splitA+0x2a>
    2336:	87 95       	ror	r24
    2338:	08 95       	ret
    233a:	12 16       	cp	r1, r18
    233c:	13 06       	cpc	r1, r19
    233e:	14 06       	cpc	r1, r20
    2340:	55 1f       	adc	r21, r21
    2342:	f2 cf       	rjmp	.-28     	; 0x2328 <__fp_split3+0xe>
    2344:	46 95       	lsr	r20
    2346:	f1 df       	rcall	.-30     	; 0x232a <__fp_splitA>
    2348:	08 c0       	rjmp	.+16     	; 0x235a <__fp_splitA+0x30>
    234a:	16 16       	cp	r1, r22
    234c:	17 06       	cpc	r1, r23
    234e:	18 06       	cpc	r1, r24
    2350:	99 1f       	adc	r25, r25
    2352:	f1 cf       	rjmp	.-30     	; 0x2336 <__fp_splitA+0xc>
    2354:	86 95       	lsr	r24
    2356:	71 05       	cpc	r23, r1
    2358:	61 05       	cpc	r22, r1
    235a:	08 94       	sec
    235c:	08 95       	ret

0000235e <__fp_zero>:
    235e:	e8 94       	clt

00002360 <__fp_szero>:
    2360:	bb 27       	eor	r27, r27
    2362:	66 27       	eor	r22, r22
    2364:	77 27       	eor	r23, r23
    2366:	cb 01       	movw	r24, r22
    2368:	97 f9       	bld	r25, 7
    236a:	08 95       	ret

0000236c <__mulsf3>:
    236c:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3x>
    2370:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__fp_round>
    2374:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__fp_pscA>
    2378:	38 f0       	brcs	.+14     	; 0x2388 <__mulsf3+0x1c>
    237a:	0e 94 75 11 	call	0x22ea	; 0x22ea <__fp_pscB>
    237e:	20 f0       	brcs	.+8      	; 0x2388 <__mulsf3+0x1c>
    2380:	95 23       	and	r25, r21
    2382:	11 f0       	breq	.+4      	; 0x2388 <__mulsf3+0x1c>
    2384:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__fp_inf>
    2388:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__fp_nan>
    238c:	11 24       	eor	r1, r1
    238e:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__fp_szero>

00002392 <__mulsf3x>:
    2392:	0e 94 8d 11 	call	0x231a	; 0x231a <__fp_split3>
    2396:	70 f3       	brcs	.-36     	; 0x2374 <__mulsf3+0x8>

00002398 <__mulsf3_pse>:
    2398:	95 9f       	mul	r25, r21
    239a:	c1 f3       	breq	.-16     	; 0x238c <__mulsf3+0x20>
    239c:	95 0f       	add	r25, r21
    239e:	50 e0       	ldi	r21, 0x00	; 0
    23a0:	55 1f       	adc	r21, r21
    23a2:	62 9f       	mul	r22, r18
    23a4:	f0 01       	movw	r30, r0
    23a6:	72 9f       	mul	r23, r18
    23a8:	bb 27       	eor	r27, r27
    23aa:	f0 0d       	add	r31, r0
    23ac:	b1 1d       	adc	r27, r1
    23ae:	63 9f       	mul	r22, r19
    23b0:	aa 27       	eor	r26, r26
    23b2:	f0 0d       	add	r31, r0
    23b4:	b1 1d       	adc	r27, r1
    23b6:	aa 1f       	adc	r26, r26
    23b8:	64 9f       	mul	r22, r20
    23ba:	66 27       	eor	r22, r22
    23bc:	b0 0d       	add	r27, r0
    23be:	a1 1d       	adc	r26, r1
    23c0:	66 1f       	adc	r22, r22
    23c2:	82 9f       	mul	r24, r18
    23c4:	22 27       	eor	r18, r18
    23c6:	b0 0d       	add	r27, r0
    23c8:	a1 1d       	adc	r26, r1
    23ca:	62 1f       	adc	r22, r18
    23cc:	73 9f       	mul	r23, r19
    23ce:	b0 0d       	add	r27, r0
    23d0:	a1 1d       	adc	r26, r1
    23d2:	62 1f       	adc	r22, r18
    23d4:	83 9f       	mul	r24, r19
    23d6:	a0 0d       	add	r26, r0
    23d8:	61 1d       	adc	r22, r1
    23da:	22 1f       	adc	r18, r18
    23dc:	74 9f       	mul	r23, r20
    23de:	33 27       	eor	r19, r19
    23e0:	a0 0d       	add	r26, r0
    23e2:	61 1d       	adc	r22, r1
    23e4:	23 1f       	adc	r18, r19
    23e6:	84 9f       	mul	r24, r20
    23e8:	60 0d       	add	r22, r0
    23ea:	21 1d       	adc	r18, r1
    23ec:	82 2f       	mov	r24, r18
    23ee:	76 2f       	mov	r23, r22
    23f0:	6a 2f       	mov	r22, r26
    23f2:	11 24       	eor	r1, r1
    23f4:	9f 57       	subi	r25, 0x7F	; 127
    23f6:	50 40       	sbci	r21, 0x00	; 0
    23f8:	9a f0       	brmi	.+38     	; 0x2420 <__mulsf3_pse+0x88>
    23fa:	f1 f0       	breq	.+60     	; 0x2438 <__mulsf3_pse+0xa0>
    23fc:	88 23       	and	r24, r24
    23fe:	4a f0       	brmi	.+18     	; 0x2412 <__mulsf3_pse+0x7a>
    2400:	ee 0f       	add	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	bb 1f       	adc	r27, r27
    2406:	66 1f       	adc	r22, r22
    2408:	77 1f       	adc	r23, r23
    240a:	88 1f       	adc	r24, r24
    240c:	91 50       	subi	r25, 0x01	; 1
    240e:	50 40       	sbci	r21, 0x00	; 0
    2410:	a9 f7       	brne	.-22     	; 0x23fc <__mulsf3_pse+0x64>
    2412:	9e 3f       	cpi	r25, 0xFE	; 254
    2414:	51 05       	cpc	r21, r1
    2416:	80 f0       	brcs	.+32     	; 0x2438 <__mulsf3_pse+0xa0>
    2418:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__fp_inf>
    241c:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__fp_szero>
    2420:	5f 3f       	cpi	r21, 0xFF	; 255
    2422:	e4 f3       	brlt	.-8      	; 0x241c <__mulsf3_pse+0x84>
    2424:	98 3e       	cpi	r25, 0xE8	; 232
    2426:	d4 f3       	brlt	.-12     	; 0x241c <__mulsf3_pse+0x84>
    2428:	86 95       	lsr	r24
    242a:	77 95       	ror	r23
    242c:	67 95       	ror	r22
    242e:	b7 95       	ror	r27
    2430:	f7 95       	ror	r31
    2432:	e7 95       	ror	r30
    2434:	9f 5f       	subi	r25, 0xFF	; 255
    2436:	c1 f7       	brne	.-16     	; 0x2428 <__mulsf3_pse+0x90>
    2438:	fe 2b       	or	r31, r30
    243a:	88 0f       	add	r24, r24
    243c:	91 1d       	adc	r25, r1
    243e:	96 95       	lsr	r25
    2440:	87 95       	ror	r24
    2442:	97 f9       	bld	r25, 7
    2444:	08 95       	ret

00002446 <__divmodhi4>:
    2446:	97 fb       	bst	r25, 7
    2448:	07 2e       	mov	r0, r23
    244a:	16 f4       	brtc	.+4      	; 0x2450 <__divmodhi4+0xa>
    244c:	00 94       	com	r0
    244e:	07 d0       	rcall	.+14     	; 0x245e <__divmodhi4_neg1>
    2450:	77 fd       	sbrc	r23, 7
    2452:	09 d0       	rcall	.+18     	; 0x2466 <__divmodhi4_neg2>
    2454:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    2458:	07 fc       	sbrc	r0, 7
    245a:	05 d0       	rcall	.+10     	; 0x2466 <__divmodhi4_neg2>
    245c:	3e f4       	brtc	.+14     	; 0x246c <__divmodhi4_exit>

0000245e <__divmodhi4_neg1>:
    245e:	90 95       	com	r25
    2460:	81 95       	neg	r24
    2462:	9f 4f       	sbci	r25, 0xFF	; 255
    2464:	08 95       	ret

00002466 <__divmodhi4_neg2>:
    2466:	70 95       	com	r23
    2468:	61 95       	neg	r22
    246a:	7f 4f       	sbci	r23, 0xFF	; 255

0000246c <__divmodhi4_exit>:
    246c:	08 95       	ret

0000246e <__udivmodsi4>:
    246e:	a1 e2       	ldi	r26, 0x21	; 33
    2470:	1a 2e       	mov	r1, r26
    2472:	aa 1b       	sub	r26, r26
    2474:	bb 1b       	sub	r27, r27
    2476:	fd 01       	movw	r30, r26
    2478:	0d c0       	rjmp	.+26     	; 0x2494 <__udivmodsi4_ep>

0000247a <__udivmodsi4_loop>:
    247a:	aa 1f       	adc	r26, r26
    247c:	bb 1f       	adc	r27, r27
    247e:	ee 1f       	adc	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	a2 17       	cp	r26, r18
    2484:	b3 07       	cpc	r27, r19
    2486:	e4 07       	cpc	r30, r20
    2488:	f5 07       	cpc	r31, r21
    248a:	20 f0       	brcs	.+8      	; 0x2494 <__udivmodsi4_ep>
    248c:	a2 1b       	sub	r26, r18
    248e:	b3 0b       	sbc	r27, r19
    2490:	e4 0b       	sbc	r30, r20
    2492:	f5 0b       	sbc	r31, r21

00002494 <__udivmodsi4_ep>:
    2494:	66 1f       	adc	r22, r22
    2496:	77 1f       	adc	r23, r23
    2498:	88 1f       	adc	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	1a 94       	dec	r1
    249e:	69 f7       	brne	.-38     	; 0x247a <__udivmodsi4_loop>
    24a0:	60 95       	com	r22
    24a2:	70 95       	com	r23
    24a4:	80 95       	com	r24
    24a6:	90 95       	com	r25
    24a8:	9b 01       	movw	r18, r22
    24aa:	ac 01       	movw	r20, r24
    24ac:	bd 01       	movw	r22, r26
    24ae:	cf 01       	movw	r24, r30
    24b0:	08 95       	ret

000024b2 <__tablejump2__>:
    24b2:	ee 0f       	add	r30, r30
    24b4:	ff 1f       	adc	r31, r31
    24b6:	05 90       	lpm	r0, Z+
    24b8:	f4 91       	lpm	r31, Z
    24ba:	e0 2d       	mov	r30, r0
    24bc:	09 94       	ijmp

000024be <__udivmodhi4>:
    24be:	aa 1b       	sub	r26, r26
    24c0:	bb 1b       	sub	r27, r27
    24c2:	51 e1       	ldi	r21, 0x11	; 17
    24c4:	07 c0       	rjmp	.+14     	; 0x24d4 <__udivmodhi4_ep>

000024c6 <__udivmodhi4_loop>:
    24c6:	aa 1f       	adc	r26, r26
    24c8:	bb 1f       	adc	r27, r27
    24ca:	a6 17       	cp	r26, r22
    24cc:	b7 07       	cpc	r27, r23
    24ce:	10 f0       	brcs	.+4      	; 0x24d4 <__udivmodhi4_ep>
    24d0:	a6 1b       	sub	r26, r22
    24d2:	b7 0b       	sbc	r27, r23

000024d4 <__udivmodhi4_ep>:
    24d4:	88 1f       	adc	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	5a 95       	dec	r21
    24da:	a9 f7       	brne	.-22     	; 0x24c6 <__udivmodhi4_loop>
    24dc:	80 95       	com	r24
    24de:	90 95       	com	r25
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	08 95       	ret

000024e6 <memcpy_P>:
    24e6:	fb 01       	movw	r30, r22
    24e8:	dc 01       	movw	r26, r24
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <memcpy_P+0xa>
    24ec:	05 90       	lpm	r0, Z+
    24ee:	0d 92       	st	X+, r0
    24f0:	41 50       	subi	r20, 0x01	; 1
    24f2:	50 40       	sbci	r21, 0x00	; 0
    24f4:	d8 f7       	brcc	.-10     	; 0x24ec <memcpy_P+0x6>
    24f6:	08 95       	ret

000024f8 <_exit>:
    24f8:	f8 94       	cli

000024fa <__stop_program>:
    24fa:	ff cf       	rjmp	.-2      	; 0x24fa <__stop_program>
