
MicroNumitron.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  0000395c  000039f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000395c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b7  00800156  00800156  00003a46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003a46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f8  00000000  00000000  00003ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000121a6  00000000  00000000  000042b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d7b  00000000  00000000  00016456  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cd8  00000000  00000000  000191d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a94  00000000  00000000  0001beac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000035b5  00000000  00000000  0001d940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009fb1  00000000  00000000  00020ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f0  00000000  00000000  0002aea6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__ctors_end>
       4:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__vector_1>
       8:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__vector_2>
       c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      10:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      14:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      18:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      1c:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__vector_7>
      20:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      24:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      28:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      2c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      30:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      34:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      38:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      3c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      40:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__vector_16>
      44:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      48:	0c 94 97 11 	jmp	0x232e	; 0x232e <__vector_18>
      4c:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__vector_19>
      50:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      54:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      58:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      5c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      60:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__vector_24>
      64:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      68:	be 13       	cpse	r27, r30
      6a:	df 13       	cpse	r29, r31
      6c:	df 13       	cpse	r29, r31
      6e:	dc 13       	cpse	r29, r28
      70:	df 13       	cpse	r29, r31
      72:	ba 13       	cpse	r27, r26
      74:	df 13       	cpse	r29, r31
      76:	df 13       	cpse	r29, r31
      78:	df 13       	cpse	r29, r31
      7a:	ac 13       	cpse	r26, r28
      7c:	df 13       	cpse	r29, r31
      7e:	df 13       	cpse	r29, r31
      80:	c7 13       	cpse	r28, r23
      82:	d8 13       	cpse	r29, r24
      84:	d4 13       	cpse	r29, r20
      86:	df 13       	cpse	r29, r31
      88:	df 13       	cpse	r29, r31
      8a:	df 13       	cpse	r29, r31
      8c:	d0 13       	cpse	r29, r16
      8e:	a7 16       	cp	r10, r23
      90:	ab 16       	cp	r10, r27
      92:	ab 16       	cp	r10, r27
      94:	ab 16       	cp	r10, r27
      96:	ab 16       	cp	r10, r27
      98:	ab 16       	cp	r10, r27
      9a:	ab 16       	cp	r10, r27
      9c:	ab 16       	cp	r10, r27
      9e:	b9 15       	cp	r27, r9
      a0:	ab 16       	cp	r10, r27
      a2:	ab 16       	cp	r10, r27
      a4:	ab 16       	cp	r10, r27
      a6:	ab 16       	cp	r10, r27
      a8:	ab 16       	cp	r10, r27
      aa:	ab 16       	cp	r10, r27
      ac:	ab 16       	cp	r10, r27
      ae:	b9 15       	cp	r27, r9
      b0:	ab 16       	cp	r10, r27
      b2:	ab 16       	cp	r10, r27
      b4:	ab 16       	cp	r10, r27
      b6:	ab 16       	cp	r10, r27
      b8:	ab 16       	cp	r10, r27
      ba:	ab 16       	cp	r10, r27
      bc:	ab 16       	cp	r10, r27
      be:	c1 15       	cp	r28, r1
      c0:	ab 16       	cp	r10, r27
      c2:	ab 16       	cp	r10, r27
      c4:	ab 16       	cp	r10, r27
      c6:	ab 16       	cp	r10, r27
      c8:	ab 16       	cp	r10, r27
      ca:	ab 16       	cp	r10, r27
      cc:	ab 16       	cp	r10, r27
      ce:	e7 15       	cp	r30, r7
      d0:	ab 16       	cp	r10, r27
      d2:	ab 16       	cp	r10, r27
      d4:	ab 16       	cp	r10, r27
      d6:	ab 16       	cp	r10, r27
      d8:	ab 16       	cp	r10, r27
      da:	ab 16       	cp	r10, r27
      dc:	ab 16       	cp	r10, r27
      de:	c1 15       	cp	r28, r1
      e0:	ab 16       	cp	r10, r27
      e2:	ab 16       	cp	r10, r27
      e4:	ab 16       	cp	r10, r27
      e6:	ab 16       	cp	r10, r27
      e8:	ab 16       	cp	r10, r27
      ea:	ab 16       	cp	r10, r27
      ec:	ab 16       	cp	r10, r27
      ee:	ed 15       	cp	r30, r13
      f0:	ab 16       	cp	r10, r27
      f2:	ab 16       	cp	r10, r27
      f4:	ab 16       	cp	r10, r27
      f6:	ab 16       	cp	r10, r27
      f8:	ab 16       	cp	r10, r27
      fa:	ab 16       	cp	r10, r27
      fc:	ab 16       	cp	r10, r27
      fe:	f3 15       	cp	r31, r3
     100:	ab 16       	cp	r10, r27
     102:	ab 16       	cp	r10, r27
     104:	ab 16       	cp	r10, r27
     106:	ab 16       	cp	r10, r27
     108:	ab 16       	cp	r10, r27
     10a:	ab 16       	cp	r10, r27
     10c:	ab 16       	cp	r10, r27
     10e:	05 16       	cp	r0, r21
     110:	ab 16       	cp	r10, r27
     112:	ab 16       	cp	r10, r27
     114:	ab 16       	cp	r10, r27
     116:	ab 16       	cp	r10, r27
     118:	ab 16       	cp	r10, r27
     11a:	ab 16       	cp	r10, r27
     11c:	ab 16       	cp	r10, r27
     11e:	2f 16       	cp	r2, r31
     120:	ab 16       	cp	r10, r27
     122:	ab 16       	cp	r10, r27
     124:	ab 16       	cp	r10, r27
     126:	ab 16       	cp	r10, r27
     128:	ab 16       	cp	r10, r27
     12a:	ab 16       	cp	r10, r27
     12c:	ab 16       	cp	r10, r27
     12e:	f9 15       	cp	r31, r9
     130:	ab 16       	cp	r10, r27
     132:	ab 16       	cp	r10, r27
     134:	ab 16       	cp	r10, r27
     136:	ab 16       	cp	r10, r27
     138:	ab 16       	cp	r10, r27
     13a:	ab 16       	cp	r10, r27
     13c:	ab 16       	cp	r10, r27
     13e:	13 16       	cp	r1, r19
     140:	ab 16       	cp	r10, r27
     142:	ab 16       	cp	r10, r27
     144:	ab 16       	cp	r10, r27
     146:	ab 16       	cp	r10, r27
     148:	ab 16       	cp	r10, r27
     14a:	ab 16       	cp	r10, r27
     14c:	ab 16       	cp	r10, r27
     14e:	32 16       	cp	r3, r18
     150:	ab 16       	cp	r10, r27
     152:	ab 16       	cp	r10, r27
     154:	ab 16       	cp	r10, r27
     156:	ab 16       	cp	r10, r27
     158:	ab 16       	cp	r10, r27
     15a:	ab 16       	cp	r10, r27
     15c:	ab 16       	cp	r10, r27
     15e:	32 16       	cp	r3, r18
     160:	ab 16       	cp	r10, r27
     162:	ab 16       	cp	r10, r27
     164:	ab 16       	cp	r10, r27
     166:	ab 16       	cp	r10, r27
     168:	ab 16       	cp	r10, r27
     16a:	ab 16       	cp	r10, r27
     16c:	ab 16       	cp	r10, r27
     16e:	32 16       	cp	r3, r18
     170:	ab 16       	cp	r10, r27
     172:	ab 16       	cp	r10, r27
     174:	ab 16       	cp	r10, r27
     176:	ab 16       	cp	r10, r27
     178:	ab 16       	cp	r10, r27
     17a:	ab 16       	cp	r10, r27
     17c:	ab 16       	cp	r10, r27
     17e:	32 16       	cp	r3, r18
     180:	ab 16       	cp	r10, r27
     182:	ab 16       	cp	r10, r27
     184:	ab 16       	cp	r10, r27
     186:	ab 16       	cp	r10, r27
     188:	ab 16       	cp	r10, r27
     18a:	ab 16       	cp	r10, r27
     18c:	ab 16       	cp	r10, r27
     18e:	3b 16       	cp	r3, r27
     190:	ab 16       	cp	r10, r27
     192:	ab 16       	cp	r10, r27
     194:	ab 16       	cp	r10, r27
     196:	ab 16       	cp	r10, r27
     198:	ab 16       	cp	r10, r27
     19a:	ab 16       	cp	r10, r27
     19c:	ab 16       	cp	r10, r27
     19e:	6e 16       	cp	r6, r30
     1a0:	ab 16       	cp	r10, r27
     1a2:	ab 16       	cp	r10, r27
     1a4:	ab 16       	cp	r10, r27
     1a6:	ab 16       	cp	r10, r27
     1a8:	ab 16       	cp	r10, r27
     1aa:	ab 16       	cp	r10, r27
     1ac:	ab 16       	cp	r10, r27
     1ae:	3b 16       	cp	r3, r27
     1b0:	ab 16       	cp	r10, r27
     1b2:	ab 16       	cp	r10, r27
     1b4:	ab 16       	cp	r10, r27
     1b6:	ab 16       	cp	r10, r27
     1b8:	ab 16       	cp	r10, r27
     1ba:	ab 16       	cp	r10, r27
     1bc:	ab 16       	cp	r10, r27
     1be:	6e 16       	cp	r6, r30
     1c0:	ab 16       	cp	r10, r27
     1c2:	ab 16       	cp	r10, r27
     1c4:	ab 16       	cp	r10, r27
     1c6:	ab 16       	cp	r10, r27
     1c8:	ab 16       	cp	r10, r27
     1ca:	ab 16       	cp	r10, r27
     1cc:	ab 16       	cp	r10, r27
     1ce:	53 16       	cp	r5, r19
     1d0:	ab 16       	cp	r10, r27
     1d2:	ab 16       	cp	r10, r27
     1d4:	ab 16       	cp	r10, r27
     1d6:	ab 16       	cp	r10, r27
     1d8:	ab 16       	cp	r10, r27
     1da:	ab 16       	cp	r10, r27
     1dc:	ab 16       	cp	r10, r27
     1de:	72 16       	cp	r7, r18
     1e0:	ab 16       	cp	r10, r27
     1e2:	ab 16       	cp	r10, r27
     1e4:	ab 16       	cp	r10, r27
     1e6:	ab 16       	cp	r10, r27
     1e8:	ab 16       	cp	r10, r27
     1ea:	ab 16       	cp	r10, r27
     1ec:	ab 16       	cp	r10, r27
     1ee:	72 16       	cp	r7, r18
     1f0:	ab 16       	cp	r10, r27
     1f2:	ab 16       	cp	r10, r27
     1f4:	ab 16       	cp	r10, r27
     1f6:	ab 16       	cp	r10, r27
     1f8:	ab 16       	cp	r10, r27
     1fa:	ab 16       	cp	r10, r27
     1fc:	ab 16       	cp	r10, r27
     1fe:	87 16       	cp	r8, r23
     200:	ab 16       	cp	r10, r27
     202:	ab 16       	cp	r10, r27
     204:	ab 16       	cp	r10, r27
     206:	ab 16       	cp	r10, r27
     208:	ab 16       	cp	r10, r27
     20a:	ab 16       	cp	r10, r27
     20c:	ab 16       	cp	r10, r27
     20e:	a1 16       	cp	r10, r17
     210:	ab 16       	cp	r10, r27
     212:	ab 16       	cp	r10, r27
     214:	ab 16       	cp	r10, r27
     216:	ab 16       	cp	r10, r27
     218:	ab 16       	cp	r10, r27
     21a:	ab 16       	cp	r10, r27
     21c:	ab 16       	cp	r10, r27
     21e:	a1 16       	cp	r10, r17

00000220 <__trampolines_end>:
     220:	54 69       	ori	r21, 0x94	; 148
     222:	6d 65       	ori	r22, 0x5D	; 93
     224:	20 73       	andi	r18, 0x30	; 48
     226:	68 6f       	ori	r22, 0xF8	; 248
     228:	75 6c       	ori	r23, 0xC5	; 197
     22a:	64 20       	and	r6, r4
     22c:	62 65       	ori	r22, 0x52	; 82
     22e:	20 73       	andi	r18, 0x30	; 48
     230:	65 74       	andi	r22, 0x45	; 69
     232:	2e 0d       	add	r18, r14
     234:	0a 00       	.word	0x000a	; ????

00000236 <_ZZ4InitvE3__c_1>:
     236:	54 69 6d 65 20 64 69 64 20 6e 6f 74 20 73 65 74     Time did not set
     246:	20 63 6f 72 72 65 63 74 6c 79 2c 20 63 68 65 63      correctly, chec
     256:	6b 20 77 69 72 69 6e 67 2e 0d 0a 00                 k wiring....

00000262 <_ZZ4InitvE3__c>:
     262:	4e 6f 76 20 31 32 20 32 30 31 35 00                 Nov 12 2015.

0000026e <_ZZ4InitvE3__c_0>:
     26e:	30 31 3a 35 34 3a 31 39 00                          01:54:19.

00000277 <_ZL21tone_pin_to_timer_PGM>:
     277:	02                                                  .

00000278 <digital_pin_to_timer_PGM>:
     278:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     288:	00 00 00 00                                         ....

0000028c <digital_pin_to_bit_mask_PGM>:
     28c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     29c:	04 08 10 20                                         ... 

000002a0 <digital_pin_to_port_PGM>:
     2a0:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     2b0:	03 03 03 03                                         ....

000002b4 <port_to_input_PGM>:
     2b4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002be <port_to_output_PGM>:
     2be:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002c8 <port_to_mode_PGM>:
     2c8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002d2 <__ctors_start>:
     2d2:	bd 0f       	add	r27, r29
     2d4:	ff 11       	cpse	r31, r15
     2d6:	6f 12       	cpse	r6, r31
     2d8:	29 18       	sub	r2, r9

000002da <__ctors_end>:
     2da:	11 24       	eor	r1, r1
     2dc:	1f be       	out	0x3f, r1	; 63
     2de:	cf ef       	ldi	r28, 0xFF	; 255
     2e0:	d4 e0       	ldi	r29, 0x04	; 4
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	cd bf       	out	0x3d, r28	; 61

000002e6 <__do_copy_data>:
     2e6:	11 e0       	ldi	r17, 0x01	; 1
     2e8:	a0 e0       	ldi	r26, 0x00	; 0
     2ea:	b1 e0       	ldi	r27, 0x01	; 1
     2ec:	ec e5       	ldi	r30, 0x5C	; 92
     2ee:	f9 e3       	ldi	r31, 0x39	; 57
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <__do_copy_data+0x10>
     2f2:	05 90       	lpm	r0, Z+
     2f4:	0d 92       	st	X+, r0
     2f6:	a6 35       	cpi	r26, 0x56	; 86
     2f8:	b1 07       	cpc	r27, r17
     2fa:	d9 f7       	brne	.-10     	; 0x2f2 <__do_copy_data+0xc>

000002fc <__do_clear_bss>:
     2fc:	23 e0       	ldi	r18, 0x03	; 3
     2fe:	a6 e5       	ldi	r26, 0x56	; 86
     300:	b1 e0       	ldi	r27, 0x01	; 1
     302:	01 c0       	rjmp	.+2      	; 0x306 <.do_clear_bss_start>

00000304 <.do_clear_bss_loop>:
     304:	1d 92       	st	X+, r1

00000306 <.do_clear_bss_start>:
     306:	ad 30       	cpi	r26, 0x0D	; 13
     308:	b2 07       	cpc	r27, r18
     30a:	e1 f7       	brne	.-8      	; 0x304 <.do_clear_bss_loop>

0000030c <__do_global_ctors>:
     30c:	11 e0       	ldi	r17, 0x01	; 1
     30e:	cd e6       	ldi	r28, 0x6D	; 109
     310:	d1 e0       	ldi	r29, 0x01	; 1
     312:	04 c0       	rjmp	.+8      	; 0x31c <__do_global_ctors+0x10>
     314:	21 97       	sbiw	r28, 0x01	; 1
     316:	fe 01       	movw	r30, r28
     318:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__tablejump2__>
     31c:	c9 36       	cpi	r28, 0x69	; 105
     31e:	d1 07       	cpc	r29, r17
     320:	c9 f7       	brne	.-14     	; 0x314 <__do_global_ctors+0x8>
     322:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <main>
     326:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <_exit>

0000032a <__bad_interrupt>:
     32a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000032e <_ZN6DS1337C1Ev>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     32e:	82 eb       	ldi	r24, 0xB2	; 178
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN7TwoWire5beginEv>
     336:	08 95       	ret

00000338 <_ZN6DS133710getSecondsEv>:
     338:	fc 01       	movw	r30, r24
     33a:	92 81       	ldd	r25, Z+2	; 0x02
     33c:	89 2f       	mov	r24, r25
     33e:	86 95       	lsr	r24
     340:	86 95       	lsr	r24
     342:	86 95       	lsr	r24
     344:	8e 71       	andi	r24, 0x1E	; 30
     346:	28 2f       	mov	r18, r24
     348:	22 0f       	add	r18, r18
   rtc_bcd[DS1337_MIN] = bin2bcd(minute);
   rtc_bcd[DS1337_HR] = bin2bcd(hour);
   rtc_bcd[DS1337_DATE] = bin2bcd(day);
   rtc_bcd[DS1337_DOW] = bin2bcd(day_of_week);
   rtc_bcd[DS1337_MTH] = bin2bcd(month);
   rtc_bcd[DS1337_YR] = bin2bcd(year);
     34a:	22 0f       	add	r18, r18
     34c:	82 0f       	add	r24, r18
}
     34e:	9f 70       	andi	r25, 0x0F	; 15
     350:	89 0f       	add	r24, r25
     352:	08 95       	ret

00000354 <_ZN6DS133710getMinutesEv>:
     354:	fc 01       	movw	r30, r24
     356:	93 81       	ldd	r25, Z+3	; 0x03
     358:	89 2f       	mov	r24, r25
     35a:	86 95       	lsr	r24
     35c:	86 95       	lsr	r24
     35e:	86 95       	lsr	r24
     360:	8e 71       	andi	r24, 0x1E	; 30
     362:	28 2f       	mov	r18, r24
     364:	22 0f       	add	r18, r18
     366:	22 0f       	add	r18, r18
     368:	82 0f       	add	r24, r18
     36a:	9f 70       	andi	r25, 0x0F	; 15
     36c:	89 0f       	add	r24, r25
     36e:	08 95       	ret

00000370 <_ZN6DS13378getHoursEv>:
     370:	fc 01       	movw	r30, r24
     372:	94 81       	ldd	r25, Z+4	; 0x04
     374:	89 2f       	mov	r24, r25
     376:	86 95       	lsr	r24
     378:	86 95       	lsr	r24
     37a:	86 95       	lsr	r24
     37c:	8e 71       	andi	r24, 0x1E	; 30

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     37e:	28 2f       	mov	r18, r24
     380:	22 0f       	add	r18, r18
     382:	22 0f       	add	r18, r18
     384:	82 0f       	add	r24, r18
     386:	9f 70       	andi	r25, 0x0F	; 15
    return bcd2bin(rtc_bcd[DS1337_MIN]);
}
unsigned char DS1337::getHours()
{
    return bcd2bin(rtc_bcd[DS1337_HR]);
}
     388:	89 0f       	add	r24, r25
     38a:	08 95       	ret

0000038c <_ZN6DS133710setSecondsEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     38c:	2d ec       	ldi	r18, 0xCD	; 205
     38e:	62 9f       	mul	r22, r18
     390:	21 2d       	mov	r18, r1
     392:	11 24       	eor	r1, r1
     394:	26 95       	lsr	r18
     396:	26 95       	lsr	r18
     398:	26 95       	lsr	r18
     39a:	42 2f       	mov	r20, r18
     39c:	44 0f       	add	r20, r20
     39e:	34 2f       	mov	r19, r20
     3a0:	33 0f       	add	r19, r19
     3a2:	33 0f       	add	r19, r19
     3a4:	34 0f       	add	r19, r20
     3a6:	63 1b       	sub	r22, r19
     3a8:	30 e1       	ldi	r19, 0x10	; 16
     3aa:	23 9f       	mul	r18, r19
     3ac:	60 0d       	add	r22, r0
     3ae:	11 24       	eor	r1, r1
}


void DS1337::setSeconds(unsigned char v)
{
    rtc_bcd[DS1337_SEC] = bin2bcd(v);
     3b0:	fc 01       	movw	r30, r24
     3b2:	62 83       	std	Z+2, r22	; 0x02
     3b4:	08 95       	ret

000003b6 <_ZN6DS133710setMinutesEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     3b6:	2d ec       	ldi	r18, 0xCD	; 205
     3b8:	62 9f       	mul	r22, r18
     3ba:	21 2d       	mov	r18, r1
     3bc:	11 24       	eor	r1, r1
     3be:	26 95       	lsr	r18
     3c0:	26 95       	lsr	r18
     3c2:	26 95       	lsr	r18
     3c4:	42 2f       	mov	r20, r18
     3c6:	44 0f       	add	r20, r20
     3c8:	34 2f       	mov	r19, r20
     3ca:	33 0f       	add	r19, r19
     3cc:	33 0f       	add	r19, r19
     3ce:	34 0f       	add	r19, r20
     3d0:	63 1b       	sub	r22, r19
     3d2:	30 e1       	ldi	r19, 0x10	; 16
     3d4:	23 9f       	mul	r18, r19
     3d6:	60 0d       	add	r22, r0
     3d8:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_SEC] = bin2bcd(v);

}
void DS1337::setMinutes(unsigned char v)
{
    rtc_bcd[DS1337_MIN] = bin2bcd(v);
     3da:	fc 01       	movw	r30, r24
     3dc:	63 83       	std	Z+3, r22	; 0x03
     3de:	08 95       	ret

000003e0 <_ZN6DS13378setHoursEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     3e0:	2d ec       	ldi	r18, 0xCD	; 205
     3e2:	62 9f       	mul	r22, r18
     3e4:	21 2d       	mov	r18, r1
     3e6:	11 24       	eor	r1, r1
     3e8:	26 95       	lsr	r18
     3ea:	26 95       	lsr	r18
     3ec:	26 95       	lsr	r18
     3ee:	42 2f       	mov	r20, r18
     3f0:	44 0f       	add	r20, r20
     3f2:	34 2f       	mov	r19, r20
     3f4:	33 0f       	add	r19, r19
     3f6:	33 0f       	add	r19, r19
     3f8:	34 0f       	add	r19, r20
     3fa:	63 1b       	sub	r22, r19
     3fc:	30 e1       	ldi	r19, 0x10	; 16
     3fe:	23 9f       	mul	r18, r19
     400:	60 0d       	add	r22, r0
     402:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_MIN] = bin2bcd(v);

}
void DS1337::setHours(unsigned char v)
{
    rtc_bcd[DS1337_HR] = bin2bcd(v);
     404:	fc 01       	movw	r30, r24
     406:	64 83       	std	Z+4, r22	; 0x04
     408:	08 95       	ret

0000040a <_ZN6DS13377setDaysEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     40a:	2d ec       	ldi	r18, 0xCD	; 205
     40c:	62 9f       	mul	r22, r18
     40e:	21 2d       	mov	r18, r1
     410:	11 24       	eor	r1, r1
     412:	26 95       	lsr	r18
     414:	26 95       	lsr	r18
     416:	26 95       	lsr	r18
     418:	42 2f       	mov	r20, r18
     41a:	44 0f       	add	r20, r20
     41c:	34 2f       	mov	r19, r20
     41e:	33 0f       	add	r19, r19
     420:	33 0f       	add	r19, r19
     422:	34 0f       	add	r19, r20
     424:	63 1b       	sub	r22, r19
     426:	30 e1       	ldi	r19, 0x10	; 16
     428:	23 9f       	mul	r18, r19
     42a:	60 0d       	add	r22, r0
     42c:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_HR] = bin2bcd(v);

}
void DS1337::setDays(unsigned char v)
{
    rtc_bcd[DS1337_DATE] = bin2bcd(v);
     42e:	fc 01       	movw	r30, r24
     430:	66 83       	std	Z+6, r22	; 0x06
     432:	08 95       	ret

00000434 <_ZN6DS13379setMonthsEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     434:	2d ec       	ldi	r18, 0xCD	; 205
     436:	62 9f       	mul	r22, r18
     438:	21 2d       	mov	r18, r1
     43a:	11 24       	eor	r1, r1
     43c:	26 95       	lsr	r18
     43e:	26 95       	lsr	r18
     440:	26 95       	lsr	r18
     442:	42 2f       	mov	r20, r18
     444:	44 0f       	add	r20, r20
     446:	34 2f       	mov	r19, r20
     448:	33 0f       	add	r19, r19
     44a:	33 0f       	add	r19, r19
     44c:	34 0f       	add	r19, r20
     44e:	63 1b       	sub	r22, r19
     450:	30 e1       	ldi	r19, 0x10	; 16
     452:	23 9f       	mul	r18, r19
     454:	60 0d       	add	r22, r0
     456:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_DOW] = bin2bcd(v);

}
void DS1337::setMonths(unsigned char v)
{
    rtc_bcd[DS1337_MTH] = bin2bcd(v);
     458:	fc 01       	movw	r30, r24
     45a:	67 83       	std	Z+7, r22	; 0x07
     45c:	08 95       	ret

0000045e <_ZN6DS13378setYearsEj>:

}
void DS1337::setYears(unsigned int v)
{
     45e:	fc 01       	movw	r30, r24
    if (v>1999)
     460:	60 3d       	cpi	r22, 0xD0	; 208
     462:	87 e0       	ldi	r24, 0x07	; 7
     464:	78 07       	cpc	r23, r24
     466:	10 f0       	brcs	.+4      	; 0x46c <_ZN6DS13378setYearsEj+0xe>
    {
        v -= 2000;
     468:	60 5d       	subi	r22, 0xD0	; 208
     46a:	77 40       	sbci	r23, 0x07	; 7
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     46c:	9d ec       	ldi	r25, 0xCD	; 205
     46e:	69 9f       	mul	r22, r25
     470:	91 2d       	mov	r25, r1
     472:	11 24       	eor	r1, r1
     474:	96 95       	lsr	r25
     476:	96 95       	lsr	r25
     478:	96 95       	lsr	r25
     47a:	39 2f       	mov	r19, r25
     47c:	33 0f       	add	r19, r19
     47e:	23 2f       	mov	r18, r19
     480:	22 0f       	add	r18, r18
     482:	22 0f       	add	r18, r18
     484:	23 0f       	add	r18, r19
     486:	62 1b       	sub	r22, r18
     488:	80 e1       	ldi	r24, 0x10	; 16
     48a:	98 9f       	mul	r25, r24
     48c:	60 0d       	add	r22, r0
     48e:	11 24       	eor	r1, r1
{
    if (v>1999)
    {
        v -= 2000;
    }
    rtc_bcd[DS1337_YR] = bin2bcd(v);
     490:	60 87       	std	Z+8, r22	; 0x08
     492:	08 95       	ret

00000494 <_ZN6DS13378readTimeEv>:
}

// Aquire data from the RTC chip in BCD format
// refresh the buffer
void DS1337::readTime(void)
{
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	8c 01       	movw	r16, r24
// use the Wire lib to connect to tho rtc
// reset the register pointer to zero
	Wire.beginTransmission(DS1337_CTRL_ID);
     49e:	68 e6       	ldi	r22, 0x68	; 104
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	82 eb       	ldi	r24, 0xB2	; 178
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	0e 94 0f 18 	call	0x301e	; 0x301e <_ZN7TwoWire17beginTransmissionEi>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     4aa:	e0 91 b2 02 	lds	r30, 0x02B2
     4ae:	f0 91 b3 02 	lds	r31, 0x02B3
     4b2:	01 90       	ld	r0, Z+
     4b4:	f0 81       	ld	r31, Z
     4b6:	e0 2d       	mov	r30, r0
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	82 eb       	ldi	r24, 0xB2	; 178
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	09 95       	icall
	Wire.write(0x00);
	Wire.endTransmission();
     4c0:	82 eb       	ldi	r24, 0xB2	; 178
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN7TwoWire15endTransmissionEv>

// request the 7 bytes of data    (secs, min, hr, dow, date. mth, yr)
	Wire.requestFrom(DS1337_CTRL_ID, 7);
     4c8:	47 e0       	ldi	r20, 0x07	; 7
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	68 e6       	ldi	r22, 0x68	; 104
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	82 eb       	ldi	r24, 0xB2	; 178
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN7TwoWire11requestFromEii>
     4d8:	e8 01       	movw	r28, r16
     4da:	22 96       	adiw	r28, 0x02	; 2
     4dc:	07 5f       	subi	r16, 0xF7	; 247
     4de:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int i=0; i<7; i++)
	{
	// store data in raw bcd format
		if (Wire.available())
     4e0:	82 eb       	ldi	r24, 0xB2	; 178
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <_ZN7TwoWire9availableEv>
     4e8:	89 2b       	or	r24, r25
     4ea:	29 f0       	breq	.+10     	; 0x4f6 <_ZN6DS13378readTimeEv+0x62>
			rtc_bcd[i]=Wire.read();
     4ec:	82 eb       	ldi	r24, 0xB2	; 178
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <_ZN7TwoWire4readEv>
     4f4:	88 83       	st	Y, r24
     4f6:	21 96       	adiw	r28, 0x01	; 1
	Wire.write(0x00);
	Wire.endTransmission();

// request the 7 bytes of data    (secs, min, hr, dow, date. mth, yr)
	Wire.requestFrom(DS1337_CTRL_ID, 7);
	for(int i=0; i<7; i++)
     4f8:	c0 17       	cp	r28, r16
     4fa:	d1 07       	cpc	r29, r17
     4fc:	89 f7       	brne	.-30     	; 0x4e0 <_ZN6DS13378readTimeEv+0x4c>
	{
	// store data in raw bcd format
		if (Wire.available())
			rtc_bcd[i]=Wire.read();
	}
}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	08 95       	ret

00000508 <_ZN6DS133711getRegisterEh>:
...
} */


unsigned char DS1337::getRegister(unsigned char registerNumber)
{
     508:	cf 93       	push	r28
     50a:	c6 2f       	mov	r28, r22
	Wire.beginTransmission(DS1337_CTRL_ID);
     50c:	68 e6       	ldi	r22, 0x68	; 104
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	82 eb       	ldi	r24, 0xB2	; 178
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	0e 94 0f 18 	call	0x301e	; 0x301e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(registerNumber);
     518:	6c 2f       	mov	r22, r28
     51a:	82 eb       	ldi	r24, 0xB2	; 178
     51c:	92 e0       	ldi	r25, 0x02	; 2
     51e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     522:	82 eb       	ldi	r24, 0xB2	; 178
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN7TwoWire15endTransmissionEv>

	Wire.requestFrom(DS1337_CTRL_ID, 1);
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	68 e6       	ldi	r22, 0x68	; 104
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	82 eb       	ldi	r24, 0xB2	; 178
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN7TwoWire11requestFromEii>

	return Wire.read();
     53a:	82 eb       	ldi	r24, 0xB2	; 178
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <_ZN7TwoWire4readEv>
}
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <_ZN6DS133711time_is_setEv>:
}

unsigned char DS1337::time_is_set()
{
  // Return TRUE if Oscillator Stop Flag is clear (osc. not stopped since last time setting), FALSE otherwise
  byte asdf = ((getRegister(DS1337_STATUS) & DS1337_STATUS_OSF) == 0);
     546:	6f e0       	ldi	r22, 0x0F	; 15
     548:	0e 94 84 02 	call	0x508	; 0x508 <_ZN6DS133711getRegisterEh>
     54c:	80 95       	com	r24
  return asdf;
}
     54e:	88 1f       	adc	r24, r24
     550:	88 27       	eor	r24, r24
     552:	88 1f       	adc	r24, r24
     554:	08 95       	ret

00000556 <_ZN6DS133711setRegisterEhh>:

	return Wire.read();
}

void DS1337::setRegister(unsigned char registerNumber, unsigned char value)
{
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	d6 2f       	mov	r29, r22
     55c:	c4 2f       	mov	r28, r20
	Wire.beginTransmission(DS1337_CTRL_ID);
     55e:	68 e6       	ldi	r22, 0x68	; 104
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	82 eb       	ldi	r24, 0xB2	; 178
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	0e 94 0f 18 	call	0x301e	; 0x301e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(registerNumber); // set register pointer
     56a:	6d 2f       	mov	r22, r29
     56c:	82 eb       	ldi	r24, 0xB2	; 178
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN7TwoWire5writeEh>

	Wire.write(value);
     574:	6c 2f       	mov	r22, r28
     576:	82 eb       	ldi	r24, 0xB2	; 178
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN7TwoWire5writeEh>

	Wire.endTransmission();
     57e:	82 eb       	ldi	r24, 0xB2	; 178
     580:	92 e0       	ldi	r25, 0x02	; 2
     582:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN7TwoWire15endTransmissionEv>
}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <_ZN6DS13375startEv>:
{
	setRegister(DS1337_SP, getRegister(DS1337_SP) | DS1337_SP_EOSC);
}

void DS1337::start(void)
{
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ec 01       	movw	r28, r24
	setRegister(DS1337_SP, getRegister(DS1337_SP) & !DS1337_SP_EOSC);
     592:	6e e0       	ldi	r22, 0x0E	; 14
     594:	0e 94 84 02 	call	0x508	; 0x508 <_ZN6DS133711getRegisterEh>
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	6e e0       	ldi	r22, 0x0E	; 14
     59c:	ce 01       	movw	r24, r28
     59e:	0e 94 ab 02 	call	0x556	; 0x556 <_ZN6DS133711setRegisterEhh>
}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <_ZN6DS13379writeTimeEv>:
}

// update the data on the IC from the bcd formatted data in the buffer

void DS1337::writeTime(void)
{
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	7c 01       	movw	r14, r24
        //byte temp;
	Wire.beginTransmission(DS1337_CTRL_ID);
     5b6:	68 e6       	ldi	r22, 0x68	; 104
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	82 eb       	ldi	r24, 0xB2	; 178
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	0e 94 0f 18 	call	0x301e	; 0x301e <_ZN7TwoWire17beginTransmissionEi>
     5c2:	e0 91 b2 02 	lds	r30, 0x02B2
     5c6:	f0 91 b3 02 	lds	r31, 0x02B3
     5ca:	01 90       	ld	r0, Z+
     5cc:	f0 81       	ld	r31, Z
     5ce:	e0 2d       	mov	r30, r0
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	82 eb       	ldi	r24, 0xB2	; 178
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	09 95       	icall
     5d8:	e7 01       	movw	r28, r14
     5da:	22 96       	adiw	r28, 0x02	; 2
     5dc:	87 01       	movw	r16, r14
     5de:	07 5f       	subi	r16, 0xF7	; 247
     5e0:	1f 4f       	sbci	r17, 0xFF	; 255
	Wire.write(0x00); // reset register pointer
	for(int i=0; i<7; i++)
	{
		Wire.write(rtc_bcd[i]);
     5e2:	69 91       	ld	r22, Y+
     5e4:	82 eb       	ldi	r24, 0xB2	; 178
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN7TwoWire5writeEh>
void DS1337::writeTime(void)
{
        //byte temp;
	Wire.beginTransmission(DS1337_CTRL_ID);
	Wire.write(0x00); // reset register pointer
	for(int i=0; i<7; i++)
     5ec:	c0 17       	cp	r28, r16
     5ee:	d1 07       	cpc	r29, r17
     5f0:	c1 f7       	brne	.-16     	; 0x5e2 <_ZN6DS13379writeTimeEv+0x3a>
	{
		Wire.write(rtc_bcd[i]);
	}
	Wire.endTransmission();
     5f2:	82 eb       	ldi	r24, 0xB2	; 178
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN7TwoWire15endTransmissionEv>

	// clear the Oscillator Stop Flag
        setRegister(DS1337_STATUS, getRegister(DS1337_STATUS) & !DS1337_STATUS_OSF);
     5fa:	6f e0       	ldi	r22, 0x0F	; 15
     5fc:	c7 01       	movw	r24, r14
     5fe:	0e 94 84 02 	call	0x508	; 0x508 <_ZN6DS133711getRegisterEh>
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	6f e0       	ldi	r22, 0x0F	; 15
     606:	c7 01       	movw	r24, r14
     608:	0e 94 ab 02 	call	0x556	; 0x556 <_ZN6DS133711setRegisterEhh>
        //temp = getRegister(DS1337_STATUS);
        //temp &= (!DS1337_STATUS_OSF);
        //setRegister(DS1337_STATUS, temp);
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	08 95       	ret

0000061a <_Z16Interrupt_Updatev>:
    ADCSRA = adcsraSave;
	delay(_delay);	
}


void Interrupt_Update(){UP_TIME++;} //This is just to attach an interrupt
     61a:	80 91 81 01 	lds	r24, 0x0181
     61e:	90 91 82 01 	lds	r25, 0x0182
     622:	a0 91 83 01 	lds	r26, 0x0183
     626:	b0 91 84 01 	lds	r27, 0x0184
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	a1 1d       	adc	r26, r1
     62e:	b1 1d       	adc	r27, r1
     630:	80 93 81 01 	sts	0x0181, r24
     634:	90 93 82 01 	sts	0x0182, r25
     638:	a0 93 83 01 	sts	0x0183, r26
     63c:	b0 93 84 01 	sts	0x0184, r27
     640:	08 95       	ret

00000642 <_Z9gotoSleepi>:
		UP_TIME = 0;
	}
}

void gotoSleep(int _delay)
{
     642:	bc 01       	movw	r22, r24
	sleep_enable();
     644:	83 b7       	in	r24, 0x33	; 51
     646:	81 60       	ori	r24, 0x01	; 1
     648:	83 bf       	out	0x33, r24	; 51
    byte adcsraSave = ADCSRA;
     64a:	ea e7       	ldi	r30, 0x7A	; 122
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	20 81       	ld	r18, Z
    ADCSRA &= ~ bit(ADEN); // disable the ADC
     650:	80 81       	ld	r24, Z
     652:	8f 77       	andi	r24, 0x7F	; 127
     654:	80 83       	st	Z, r24
    set_sleep_mode(SLEEP_MODE_STANDBY);
     656:	93 b7       	in	r25, 0x33	; 51
     658:	91 7f       	andi	r25, 0xF1	; 241
     65a:	9c 60       	ori	r25, 0x0C	; 12
     65c:	93 bf       	out	0x33, r25	; 51
    sleep_cpu();
     65e:	88 95       	sleep
    sleep_disable();
     660:	83 b7       	in	r24, 0x33	; 51
     662:	8e 7f       	andi	r24, 0xFE	; 254
     664:	83 bf       	out	0x33, r24	; 51
    // re-enable what we disabled
    ADCSRA = adcsraSave;
     666:	20 83       	st	Z, r18
	delay(_delay);	
     668:	07 2e       	mov	r0, r23
     66a:	00 0c       	add	r0, r0
     66c:	88 0b       	sbc	r24, r24
     66e:	99 0b       	sbc	r25, r25
     670:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
     674:	08 95       	ret

00000676 <_Z13clockSettingsv>:
		}
	}
}

void clockSettings()
{
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	02 e6       	ldi	r16, 0x62	; 98
     680:	11 e0       	ldi	r17, 0x01	; 1
	//Display contents of EEPROM (Clock settings, alarm etc.).
	for(int x = 0;x<=6-1;x++)
     682:	c0 e0       	ldi	r28, 0x00	; 0
     684:	d0 e0       	ldi	r29, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     686:	ce 01       	movw	r24, r28
     688:	0e 94 96 1c 	call	0x392c	; 0x392c <eeprom_read_byte>
	{
		EEPROM_ARRAY[x] = EEPROM.read(x);
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	f8 01       	movw	r30, r16
     690:	81 93       	st	Z+, r24
     692:	91 93       	st	Z+, r25
     694:	8f 01       	movw	r16, r30
		delay(1);
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
}

void clockSettings()
{
	//Display contents of EEPROM (Clock settings, alarm etc.).
	for(int x = 0;x<=6-1;x++)
     6a2:	21 96       	adiw	r28, 0x01	; 1
     6a4:	c6 30       	cpi	r28, 0x06	; 6
     6a6:	d1 05       	cpc	r29, r1
     6a8:	71 f7       	brne	.-36     	; 0x686 <_Z13clockSettingsv+0x10>
		EEPROM_ARRAY[x] = EEPROM.read(x);
		delay(1);
	}
	
	//check for AM or PM
	ALARM_ARRAY[4] = EEPROM_ARRAY[4];
     6aa:	80 91 6a 01 	lds	r24, 0x016A
     6ae:	90 91 6b 01 	lds	r25, 0x016B
     6b2:	90 93 5f 01 	sts	0x015F, r25
     6b6:	80 93 5e 01 	sts	0x015E, r24
}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	08 95       	ret

000006c4 <_Z15EEPROMWritelongl>:
	SECONDS_LAST = RTC.getSeconds();
	attachInterrupt(0, Interrupt_Update, RISING);
}

void EEPROMWritelong(long value)
{
     6c4:	cf 92       	push	r12
     6c6:	df 92       	push	r13
     6c8:	ef 92       	push	r14
     6ca:	ff 92       	push	r15
     6cc:	6b 01       	movw	r12, r22
     6ce:	7c 01       	movw	r14, r24
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     6d0:	84 e6       	ldi	r24, 0x64	; 100
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
	//we write to address 100.
	
	//Decomposition from a long to 4 bytes by using bitshift.
	//One = Most significant -> Four = Least significant byte
	byte four = (value & 0xFF);
	byte three = ((value >> 8) & 0xFF);
     6d8:	99 27       	eor	r25, r25
     6da:	f7 fc       	sbrc	r15, 7
     6dc:	9a 95       	dec	r25
     6de:	8f 2d       	mov	r24, r15
     6e0:	7e 2d       	mov	r23, r14
     6e2:	6d 2d       	mov	r22, r13
     6e4:	85 e6       	ldi	r24, 0x65	; 101
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
	byte two = ((value >> 16) & 0xFF);
     6ec:	b7 01       	movw	r22, r14
     6ee:	99 27       	eor	r25, r25
     6f0:	77 fd       	sbrc	r23, 7
     6f2:	90 95       	com	r25
     6f4:	89 2f       	mov	r24, r25
     6f6:	86 e6       	ldi	r24, 0x66	; 102
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
	byte one = ((value >> 24) & 0xFF);
     6fe:	6f 2d       	mov	r22, r15
     700:	77 27       	eor	r23, r23
     702:	88 27       	eor	r24, r24
     704:	99 27       	eor	r25, r25
     706:	87 e6       	ldi	r24, 0x67	; 103
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
	//Write the 4 bytes into the eeprom memory.
	EEPROM.write(100, four);
	EEPROM.write(100 + 1, three);
	EEPROM.write(100 + 2, two);
	EEPROM.write(100 + 3, one);
}
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	08 95       	ret

00000718 <_Z8readTempi>:
	
	EEPROM.put(5,AT);
}

float readTemp (int internal)
{
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
	//We are oversampling the temp sensor by 100 cycles
	//for better overall average temperature, this gives
	//us a more stable reading.

	Temperature = 0;
     720:	10 92 8c 01 	sts	0x018C, r1
     724:	10 92 8d 01 	sts	0x018D, r1
     728:	10 92 8e 01 	sts	0x018E, r1
     72c:	10 92 8f 01 	sts	0x018F, r1
	if (!internal) //if internal == 0
     730:	89 2b       	or	r24, r25
     732:	09 f0       	breq	.+2      	; 0x736 <_Z8readTempi+0x1e>
     734:	4f c0       	rjmp	.+158    	; 0x7d4 <_Z8readTempi+0xbc>
     736:	c4 e6       	ldi	r28, 0x64	; 100
     738:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(int x = 0; x <= 99; x++)
		{
			Temperature += analogRead(LM35);
     73a:	00 e2       	ldi	r16, 0x20	; 32
     73c:	11 e0       	ldi	r17, 0x01	; 1
     73e:	f8 01       	movw	r30, r16
     740:	80 81       	ld	r24, Z
     742:	0e 94 05 19 	call	0x320a	; 0x320a <analogRead>
     746:	bc 01       	movw	r22, r24
     748:	99 0f       	add	r25, r25
     74a:	88 0b       	sbc	r24, r24
     74c:	99 0b       	sbc	r25, r25
     74e:	0e 94 44 1b 	call	0x3688	; 0x3688 <__floatsisf>
     752:	20 91 8c 01 	lds	r18, 0x018C
     756:	30 91 8d 01 	lds	r19, 0x018D
     75a:	40 91 8e 01 	lds	r20, 0x018E
     75e:	50 91 8f 01 	lds	r21, 0x018F
     762:	0e 94 2e 1a 	call	0x345c	; 0x345c <__addsf3>
     766:	60 93 8c 01 	sts	0x018C, r22
     76a:	70 93 8d 01 	sts	0x018D, r23
     76e:	80 93 8e 01 	sts	0x018E, r24
     772:	90 93 8f 01 	sts	0x018F, r25
     776:	21 97       	sbiw	r28, 0x01	; 1
	//us a more stable reading.

	Temperature = 0;
	if (!internal) //if internal == 0
	{
		for(int x = 0; x <= 99; x++)
     778:	11 f7       	brne	.-60     	; 0x73e <_Z8readTempi+0x26>
		// -11.69mv/C
		//The LM20 degree per C is inversely proportional
		//to its output at 1.574V T = 25C @ 303mV T = 130C
		//this equation has been calibrated for my office. Thus the
		//-7.4C.
		Temperature_C = (((11.69/Temperature)*(1024))*100)-7.4;//(1024))*100;
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	6d e3       	ldi	r22, 0x3D	; 61
     780:	7a e0       	ldi	r23, 0x0A	; 10
     782:	8b e3       	ldi	r24, 0x3B	; 59
     784:	91 e4       	ldi	r25, 0x41	; 65
     786:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__divsf3>
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e8       	ldi	r20, 0x80	; 128
     790:	54 e4       	ldi	r21, 0x44	; 68
     792:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__mulsf3>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	48 ec       	ldi	r20, 0xC8	; 200
     79c:	52 e4       	ldi	r21, 0x42	; 66
     79e:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__mulsf3>
     7a2:	2d ec       	ldi	r18, 0xCD	; 205
     7a4:	3c ec       	ldi	r19, 0xCC	; 204
     7a6:	4c ee       	ldi	r20, 0xEC	; 236
     7a8:	50 e4       	ldi	r21, 0x40	; 64
     7aa:	0e 94 2d 1a 	call	0x345a	; 0x345a <__subsf3>
     7ae:	36 2f       	mov	r19, r22
     7b0:	27 2f       	mov	r18, r23
     7b2:	46 2f       	mov	r20, r22
     7b4:	57 2f       	mov	r21, r23
     7b6:	68 2f       	mov	r22, r24
     7b8:	79 2f       	mov	r23, r25
     7ba:	40 93 90 01 	sts	0x0190, r20
     7be:	50 93 91 01 	sts	0x0191, r21
     7c2:	60 93 92 01 	sts	0x0192, r22
     7c6:	70 93 93 01 	sts	0x0193, r23
		return Temperature_C;
     7ca:	53 2f       	mov	r21, r19
     7cc:	42 2f       	mov	r20, r18
     7ce:	38 2f       	mov	r19, r24
     7d0:	29 2f       	mov	r18, r25
     7d2:	1d c0       	rjmp	.+58     	; 0x80e <_Z8readTempi+0xf6>
		{
			iTemperature += analogRead(LM35);
		}
		iTemperature/100;
		*/
		iTemperature = analogRead(LM35);
     7d4:	80 91 20 01 	lds	r24, 0x0120
     7d8:	0e 94 05 19 	call	0x320a	; 0x320a <analogRead>
     7dc:	bc 01       	movw	r22, r24
		//same equation as above but we add 10 to the
		//final calculation since the display only displays
		//ints and not floats, we loose some accuracy, about
		//10degrees C.
		iTemp_C = (((12/iTemperature)*(1024))*100);
     7de:	8c e0       	ldi	r24, 0x0C	; 12
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divmodhi4>
     7e6:	9b 01       	movw	r18, r22
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e9       	ldi	r25, 0x90	; 144
     7ec:	28 9f       	mul	r18, r24
     7ee:	b0 01       	movw	r22, r0
     7f0:	29 9f       	mul	r18, r25
     7f2:	70 0d       	add	r23, r0
     7f4:	38 9f       	mul	r19, r24
     7f6:	70 0d       	add	r23, r0
     7f8:	11 24       	eor	r1, r1

		return iTemp_C;
     7fa:	07 2e       	mov	r0, r23
     7fc:	00 0c       	add	r0, r0
     7fe:	88 0b       	sbc	r24, r24
     800:	99 0b       	sbc	r25, r25
     802:	0e 94 44 1b 	call	0x3688	; 0x3688 <__floatsisf>
     806:	56 2f       	mov	r21, r22
     808:	47 2f       	mov	r20, r23
     80a:	38 2f       	mov	r19, r24
     80c:	29 2f       	mov	r18, r25
	}
}
     80e:	65 2f       	mov	r22, r21
     810:	74 2f       	mov	r23, r20
     812:	83 2f       	mov	r24, r19
     814:	92 2f       	mov	r25, r18
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	08 95       	ret

00000820 <_Z8splitIntii>:

int splitInt(int pos, int value)
{
     820:	9b 01       	movw	r18, r22
	//a temp_array[] of at least 1 length.
	//this can be substituted for a normal
	//int provided in global variables.
	
	int x = 0;
	if(!pos)	//if pos == 0;
     822:	89 2b       	or	r24, r25
     824:	99 f4       	brne	.+38     	; 0x84c <_Z8splitIntii+0x2c>
	{
		x = value % 10;
     826:	ea e0       	ldi	r30, 0x0A	; 10
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	cb 01       	movw	r24, r22
     82c:	bf 01       	movw	r22, r30
     82e:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divmodhi4>
		Temp_Array[0] = x;
     832:	90 93 6f 01 	sts	0x016F, r25
     836:	80 93 6e 01 	sts	0x016E, r24
		value = (value - Temp_Array[0]) / 10;
     83a:	a9 01       	movw	r20, r18
     83c:	48 1b       	sub	r20, r24
     83e:	59 0b       	sbc	r21, r25
     840:	ca 01       	movw	r24, r20
		return value; //tens digit
     842:	bf 01       	movw	r22, r30
     844:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divmodhi4>
     848:	cb 01       	movw	r24, r22
     84a:	08 95       	ret
	}
	else
	{
		return Temp_Array[0]; //ones digit
     84c:	80 91 6e 01 	lds	r24, 0x016E
     850:	90 91 6f 01 	lds	r25, 0x016F
	}
}
     854:	08 95       	ret

00000856 <_Z10checkAlarmii>:
	//get current clock settings.
	clockSettings();
}

int checkAlarm(int HR,int minute)
{
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	7c 01       	movw	r14, r24
     864:	8b 01       	movw	r16, r22
	//load the ALARM array with current time
	//variables.
	for(int x = 0;x<=1;x++)
	{
		ALARM_ARRAY[x] = splitInt(x,HR);
     866:	bc 01       	movw	r22, r24
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     870:	c6 e5       	ldi	r28, 0x56	; 86
     872:	d1 e0       	ldi	r29, 0x01	; 1
     874:	99 83       	std	Y+1, r25	; 0x01
     876:	88 83       	st	Y, r24
     878:	b7 01       	movw	r22, r14
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     882:	9b 83       	std	Y+3, r25	; 0x03
     884:	8a 83       	std	Y+2, r24	; 0x02
	}
	for(int x = 0;x<=1;x++)
	{
		ALARM_ARRAY[x+2] = splitInt(x,minute);
     886:	b8 01       	movw	r22, r16
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     890:	9d 83       	std	Y+5, r25	; 0x05
     892:	8c 83       	std	Y+4, r24	; 0x04
     894:	b8 01       	movw	r22, r16
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     89e:	9f 83       	std	Y+7, r25	; 0x07
     8a0:	8e 83       	std	Y+6, r24	; 0x06
	int same = 0;
	//check our set alarm in ALARM array against
	//EEPROM array to see if we have a match.
	for (int x =0;x<=3;x++)
	{
		if(ALARM_ARRAY[x] == EEPROM_ARRAY[x])
     8a2:	48 81       	ld	r20, Y
     8a4:	59 81       	ldd	r21, Y+1	; 0x01
     8a6:	20 91 62 01 	lds	r18, 0x0162
     8aa:	30 91 63 01 	lds	r19, 0x0163
     8ae:	42 17       	cp	r20, r18
     8b0:	53 07       	cpc	r21, r19
     8b2:	b9 f0       	breq	.+46     	; 0x8e2 <_Z10checkAlarmii+0x8c>
     8b4:	0c c0       	rjmp	.+24     	; 0x8ce <_Z10checkAlarmii+0x78>
		}
		
	}
	//Check to see if we are set to go off at
	//AM or PM.
	if(AM_PM == EEPROM_ARRAY[4])
     8b6:	20 91 6a 01 	lds	r18, 0x016A
     8ba:	30 91 6b 01 	lds	r19, 0x016B
     8be:	80 91 8a 01 	lds	r24, 0x018A
     8c2:	90 91 8b 01 	lds	r25, 0x018B
     8c6:	28 17       	cp	r18, r24
     8c8:	39 07       	cpc	r19, r25
     8ca:	49 f5       	brne	.+82     	; 0x91e <_Z10checkAlarmii+0xc8>
     8cc:	07 c0       	rjmp	.+14     	; 0x8dc <_Z10checkAlarmii+0x86>
			same +=1;
		}
		else
		{
			//Alarm is not the same.
			alarm_Silence = 0;
     8ce:	10 92 86 01 	sts	0x0186, r1
     8d2:	10 92 85 01 	sts	0x0185, r1
			return 0;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	21 c0       	rjmp	.+66     	; 0x91e <_Z10checkAlarmii+0xc8>
	if(AM_PM == EEPROM_ARRAY[4])
	{
		same +=1;
	}
	//Alarm is ready
	if(same == 5){return 1;}
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	1e c0       	rjmp	.+60     	; 0x91e <_Z10checkAlarmii+0xc8>
	int same = 0;
	//check our set alarm in ALARM array against
	//EEPROM array to see if we have a match.
	for (int x =0;x<=3;x++)
	{
		if(ALARM_ARRAY[x] == EEPROM_ARRAY[x])
     8e2:	40 91 58 01 	lds	r20, 0x0158
     8e6:	50 91 59 01 	lds	r21, 0x0159
     8ea:	20 91 64 01 	lds	r18, 0x0164
     8ee:	30 91 65 01 	lds	r19, 0x0165
     8f2:	42 17       	cp	r20, r18
     8f4:	53 07       	cpc	r21, r19
     8f6:	59 f7       	brne	.-42     	; 0x8ce <_Z10checkAlarmii+0x78>
     8f8:	40 91 5a 01 	lds	r20, 0x015A
     8fc:	50 91 5b 01 	lds	r21, 0x015B
     900:	20 91 66 01 	lds	r18, 0x0166
     904:	30 91 67 01 	lds	r19, 0x0167
     908:	42 17       	cp	r20, r18
     90a:	53 07       	cpc	r21, r19
     90c:	01 f7       	brne	.-64     	; 0x8ce <_Z10checkAlarmii+0x78>
     90e:	20 91 68 01 	lds	r18, 0x0168
     912:	30 91 69 01 	lds	r19, 0x0169
     916:	82 17       	cp	r24, r18
     918:	93 07       	cpc	r25, r19
     91a:	69 f2       	breq	.-102    	; 0x8b6 <_Z10checkAlarmii+0x60>
     91c:	d8 cf       	rjmp	.-80     	; 0x8ce <_Z10checkAlarmii+0x78>
	{
		same +=1;
	}
	//Alarm is ready
	if(same == 5){return 1;}
}
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	ff 90       	pop	r15
     928:	ef 90       	pop	r14
     92a:	08 95       	ret

0000092c <_Z11alarmEEPROMhhii>:
	//Return the recomposed long by using bitshift.
	return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
}

void alarmEEPROM(byte hour, byte minute, int AP,int AT)
{
     92c:	4f 92       	push	r4
     92e:	5f 92       	push	r5
     930:	6f 92       	push	r6
     932:	7f 92       	push	r7
     934:	8f 92       	push	r8
     936:	9f 92       	push	r9
     938:	af 92       	push	r10
     93a:	bf 92       	push	r11
     93c:	cf 92       	push	r12
     93e:	df 92       	push	r13
     940:	ef 92       	push	r14
     942:	ff 92       	push	r15
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	2a 97       	sbiw	r28, 0x0a	; 10
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
     95c:	46 2e       	mov	r4, r22
     95e:	3a 01       	movw	r6, r20
     960:	3a 87       	std	Y+10, r19	; 0x0a
     962:	29 87       	std	Y+9, r18	; 0x09
	// store alarm time in eeprom.
	for(int x = 0;x<=1;x++)//0-1 iterates twice.
     964:	c1 2c       	mov	r12, r1
     966:	d1 2c       	mov	r13, r1
	{
		EEPROM.put(x,splitInt(x,hour));
     968:	88 2e       	mov	r8, r24
     96a:	91 2c       	mov	r9, r1
     96c:	5e 01       	movw	r10, r28
     96e:	89 e0       	ldi	r24, 0x09	; 9
     970:	a8 0e       	add	r10, r24
     972:	b1 1c       	adc	r11, r1
     974:	b4 01       	movw	r22, r8
     976:	c6 01       	movw	r24, r12
     978:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     97c:	98 87       	std	Y+8, r25	; 0x08
     97e:	8f 83       	std	Y+7, r24	; 0x07
     980:	fe 01       	movw	r30, r28
     982:	37 96       	adiw	r30, 0x07	; 7
     984:	7f 01       	movw	r14, r30
     986:	86 01       	movw	r16, r12
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     988:	f7 01       	movw	r30, r14
     98a:	51 90       	ld	r5, Z+
     98c:	7f 01       	movw	r14, r30

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     98e:	c8 01       	movw	r24, r16
     990:	0e 94 96 1c 	call	0x392c	; 0x392c <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     994:	58 16       	cp	r5, r24
     996:	21 f0       	breq	.+8      	; 0x9a0 <_Z11alarmEEPROMhhii+0x74>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     998:	65 2d       	mov	r22, r5
     99a:	c8 01       	movw	r24, r16
     99c:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }
    
    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     9a0:	0f 5f       	subi	r16, 0xFF	; 255
     9a2:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     9a4:	ea 14       	cp	r14, r10
     9a6:	fb 04       	cpc	r15, r11
     9a8:	79 f7       	brne	.-34     	; 0x988 <_Z11alarmEEPROMhhii+0x5c>
		delay(1);
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
}

void alarmEEPROM(byte hour, byte minute, int AP,int AT)
{
	// store alarm time in eeprom.
	for(int x = 0;x<=1;x++)//0-1 iterates twice.
     9b6:	ff ef       	ldi	r31, 0xFF	; 255
     9b8:	cf 1a       	sub	r12, r31
     9ba:	df 0a       	sbc	r13, r31
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	c8 16       	cp	r12, r24
     9c0:	d1 04       	cpc	r13, r1
     9c2:	c1 f6       	brne	.-80     	; 0x974 <_Z11alarmEEPROMhhii+0x48>
     9c4:	68 94       	set
     9c6:	cc 24       	eor	r12, r12
     9c8:	c1 f8       	bld	r12, 1
     9ca:	d1 2c       	mov	r13, r1
		delay(1);
	}

	for(int y = 2;y<=3;y++)
	{
		EEPROM.put(y,splitInt(y-2,minute));
     9cc:	84 2c       	mov	r8, r4
     9ce:	91 2c       	mov	r9, r1
     9d0:	5e 01       	movw	r10, r28
     9d2:	97 e0       	ldi	r25, 0x07	; 7
     9d4:	a9 0e       	add	r10, r25
     9d6:	b1 1c       	adc	r11, r1
     9d8:	b4 01       	movw	r22, r8
     9da:	c6 01       	movw	r24, r12
     9dc:	02 97       	sbiw	r24, 0x02	; 2
     9de:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     9e2:	9e 83       	std	Y+6, r25	; 0x06
     9e4:	8d 83       	std	Y+5, r24	; 0x05
     9e6:	fe 01       	movw	r30, r28
     9e8:	35 96       	adiw	r30, 0x05	; 5
     9ea:	7f 01       	movw	r14, r30
     9ec:	86 01       	movw	r16, r12
     9ee:	f7 01       	movw	r30, r14
     9f0:	51 90       	ld	r5, Z+
     9f2:	7f 01       	movw	r14, r30

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     9f4:	c8 01       	movw	r24, r16
     9f6:	0e 94 96 1c 	call	0x392c	; 0x392c <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     9fa:	58 16       	cp	r5, r24
     9fc:	21 f0       	breq	.+8      	; 0xa06 <_Z11alarmEEPROMhhii+0xda>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     9fe:	65 2d       	mov	r22, r5
     a00:	c8 01       	movw	r24, r16
     a02:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }
    
    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     a06:	0f 5f       	subi	r16, 0xFF	; 255
     a08:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     a0a:	ea 14       	cp	r14, r10
     a0c:	fb 04       	cpc	r15, r11
     a0e:	79 f7       	brne	.-34     	; 0x9ee <_Z11alarmEEPROMhhii+0xc2>
		delay(1);
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
	{
		EEPROM.put(x,splitInt(x,hour));
		delay(1);
	}

	for(int y = 2;y<=3;y++)
     a1c:	ff ef       	ldi	r31, 0xFF	; 255
     a1e:	cf 1a       	sub	r12, r31
     a20:	df 0a       	sbc	r13, r31
     a22:	84 e0       	ldi	r24, 0x04	; 4
     a24:	c8 16       	cp	r12, r24
     a26:	d1 04       	cpc	r13, r1
     a28:	b9 f6       	brne	.-82     	; 0x9d8 <_Z11alarmEEPROMhhii+0xac>
		EEPROM.put(y,splitInt(y-2,minute));
		delay(1);
	}

	//store wether AM or PM in EEPROM.
	if(AP == 17)
     a2a:	91 e1       	ldi	r25, 0x11	; 17
     a2c:	69 16       	cp	r6, r25
     a2e:	71 04       	cpc	r7, r1
     a30:	d9 f4       	brne	.+54     	; 0xa68 <_Z11alarmEEPROMhhii+0x13c>
	{
		EEPROM.put(4,0);
     a32:	1c 82       	std	Y+4, r1	; 0x04
     a34:	1b 82       	std	Y+3, r1	; 0x03
     a36:	10 e0       	ldi	r17, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     a38:	84 e0       	ldi	r24, 0x04	; 4
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 96 1c 	call	0x392c	; 0x392c <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     a40:	18 17       	cp	r17, r24
     a42:	29 f0       	breq	.+10     	; 0xa4e <_Z11alarmEEPROMhhii+0x122>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     a44:	61 2f       	mov	r22, r17
     a46:	84 e0       	ldi	r24, 0x04	; 4
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     a4e:	1c 81       	ldd	r17, Y+4	; 0x04

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     a50:	85 e0       	ldi	r24, 0x05	; 5
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 96 1c 	call	0x392c	; 0x392c <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     a58:	18 17       	cp	r17, r24
     a5a:	41 f1       	breq	.+80     	; 0xaac <_Z11alarmEEPROMhhii+0x180>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     a5c:	61 2f       	mov	r22, r17
     a5e:	85 e0       	ldi	r24, 0x05	; 5
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
     a66:	22 c0       	rjmp	.+68     	; 0xaac <_Z11alarmEEPROMhhii+0x180>
	}
	else
	{
		EEPROM.put(4,1);
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	69 83       	std	Y+1, r22	; 0x01
     a6c:	1a 82       	std	Y+2, r1	; 0x02
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     a6e:	16 2f       	mov	r17, r22

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 96 1c 	call	0x392c	; 0x392c <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     a78:	18 17       	cp	r17, r24
     a7a:	29 f0       	breq	.+10     	; 0xa86 <_Z11alarmEEPROMhhii+0x15a>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     a7c:	61 2f       	mov	r22, r17
     a7e:	84 e0       	ldi	r24, 0x04	; 4
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     a86:	1a 81       	ldd	r17, Y+2	; 0x02

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     a88:	85 e0       	ldi	r24, 0x05	; 5
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 96 1c 	call	0x392c	; 0x392c <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     a90:	18 17       	cp	r17, r24
     a92:	61 f0       	breq	.+24     	; 0xaac <_Z11alarmEEPROMhhii+0x180>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     a94:	61 2f       	mov	r22, r17
     a96:	85 e0       	ldi	r24, 0x05	; 5
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
     a9e:	06 c0       	rjmp	.+12     	; 0xaac <_Z11alarmEEPROMhhii+0x180>
     aa0:	61 2f       	mov	r22, r17
     aa2:	86 e0       	ldi	r24, 0x06	; 6
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
     aaa:	13 c0       	rjmp	.+38     	; 0xad2 <_Z11alarmEEPROMhhii+0x1a6>
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     aac:	19 85       	ldd	r17, Y+9	; 0x09

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     aae:	85 e0       	ldi	r24, 0x05	; 5
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 96 1c 	call	0x392c	; 0x392c <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     ab6:	18 17       	cp	r17, r24
     ab8:	29 f0       	breq	.+10     	; 0xac4 <_Z11alarmEEPROMhhii+0x198>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     aba:	61 2f       	mov	r22, r17
     abc:	85 e0       	ldi	r24, 0x05	; 5
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     ac4:	1a 85       	ldd	r17, Y+10	; 0x0a

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     ac6:	86 e0       	ldi	r24, 0x06	; 6
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 96 1c 	call	0x392c	; 0x392c <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     ace:	18 13       	cpse	r17, r24
     ad0:	e7 cf       	rjmp	.-50     	; 0xaa0 <_Z11alarmEEPROMhhii+0x174>
	}
	
	EEPROM.put(5,AT);
}
     ad2:	2a 96       	adiw	r28, 0x0a	; 10
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	bf 90       	pop	r11
     af0:	af 90       	pop	r10
     af2:	9f 90       	pop	r9
     af4:	8f 90       	pop	r8
     af6:	7f 90       	pop	r7
     af8:	6f 90       	pop	r6
     afa:	5f 90       	pop	r5
     afc:	4f 90       	pop	r4
     afe:	08 95       	ret

00000b00 <_Z11convertTimei>:
{
	//This function is used to convert
	//a time eg a 24hr clock into a 12 hr
	//clock.
	
	if (value > 12)
     b00:	8d 30       	cpi	r24, 0x0D	; 13
     b02:	91 05       	cpc	r25, r1
     b04:	24 f0       	brlt	.+8      	; 0xb0e <_Z11convertTimei+0xe>
	{
		value -= 12;
		return value;
     b06:	9c 01       	movw	r18, r24
     b08:	2c 50       	subi	r18, 0x0C	; 12
     b0a:	31 09       	sbc	r19, r1
     b0c:	05 c0       	rjmp	.+10     	; 0xb18 <_Z11convertTimei+0x18>
	}
	else if (!value)
     b0e:	89 2b       	or	r24, r25
     b10:	09 f0       	breq	.+2      	; 0xb14 <_Z11convertTimei+0x14>
     b12:	08 95       	ret
	{
		value = 12;
		return value;
     b14:	2c e0       	ldi	r18, 0x0C	; 12
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	82 2f       	mov	r24, r18
     b1a:	93 2f       	mov	r25, r19
	}
}
     b1c:	08 95       	ret

00000b1e <_Z12BlankDisplayi>:

void BlankDisplay(int nap)
{
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
	if(!nap){
     b22:	89 2b       	or	r24, r25
     b24:	99 f4       	brne	.+38     	; 0xb4c <_Z12BlankDisplayi+0x2e>
		//Blanks the current display being used.
		digitalWrite(LATCH, LOW);
     b26:	c4 e2       	ldi	r28, 0x24	; 36
     b28:	d1 e0       	ldi	r29, 0x01	; 1
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	88 81       	ld	r24, Y
     b2e:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, 0b11111111);
     b32:	2f ef       	ldi	r18, 0xFF	; 255
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	60 91 22 01 	lds	r22, 0x0122
     b3a:	80 91 26 01 	lds	r24, 0x0126
     b3e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	88 81       	ld	r24, Y
     b46:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
     b4a:	16 c0       	rjmp	.+44     	; 0xb78 <_Z12BlankDisplayi+0x5a>
	}
	else
	{
		//Blanks the current display being used.
		digitalWrite(LATCH, LOW);
     b4c:	c4 e2       	ldi	r28, 0x24	; 36
     b4e:	d1 e0       	ldi	r29, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	88 81       	ld	r24, Y
     b54:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, 0b11111111);
     b58:	2f ef       	ldi	r18, 0xFF	; 255
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	60 91 22 01 	lds	r22, 0x0122
     b60:	80 91 26 01 	lds	r24, 0x0126
     b64:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	88 81       	ld	r24, Y
     b6c:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		
		//delay(TIME_DELAY);
		gotoSleep(10);
     b70:	8a e0       	ldi	r24, 0x0A	; 10
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 21 03 	call	0x642	; 0x642 <_Z9gotoSleepi>
	}
	
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <_Z14Update_Displayv>:
	Serial.print("\r\n");
}
#endif

void Update_Display()
{
     b7e:	4f 92       	push	r4
     b80:	5f 92       	push	r5
     b82:	6f 92       	push	r6
     b84:	7f 92       	push	r7
     b86:	8f 92       	push	r8
     b88:	9f 92       	push	r9
     b8a:	af 92       	push	r10
     b8c:	bf 92       	push	r11
     b8e:	cf 92       	push	r12
     b90:	df 92       	push	r13
     b92:	ef 92       	push	r14
     b94:	ff 92       	push	r15
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
	///////////////////////////////////////////////////////////
	//This function updates the display on the VFD Tube.
	///////////////////////////////////////////////////////////
	//DateTime now = rtc.now();
	RTC.readTime();
     b9e:	88 e7       	ldi	r24, 0x78	; 120
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN6DS13378readTimeEv>
	int SLEEP_DELAY = 2;
	int HR = 0;
	int MN = 0;

	//MN = now.minute();
	MN = RTC.getMinutes();
     ba6:	88 e7       	ldi	r24, 0x78	; 120
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN6DS133710getMinutesEv>
     bae:	48 2e       	mov	r4, r24
     bb0:	51 2c       	mov	r5, r1
	//HR = now.hour();
	HR = RTC.getHours();
     bb2:	88 e7       	ldi	r24, 0x78	; 120
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN6DS13378getHoursEv>
	
	//Converting 24HR time to 12HR format.
	HR = convertTime(HR);
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 80 05 	call	0xb00	; 0xb00 <_Z11convertTimei>
     bc0:	3c 01       	movw	r6, r24
	
	//display hours first tens then one's position.
	Temp_Array[2] = splitInt(0,HR);
     bc2:	bc 01       	movw	r22, r24
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     bcc:	90 93 73 01 	sts	0x0173, r25
     bd0:	80 93 72 01 	sts	0x0172, r24
	for(int x = 0; x<=1;x++)
     bd4:	c0 e0       	ldi	r28, 0x00	; 0
     bd6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(Temp_Array[2] == splitInt(1,HR)){BlankDisplay(1);}
     bd8:	0f 2e       	mov	r0, r31
     bda:	fe e6       	ldi	r31, 0x6E	; 110
     bdc:	8f 2e       	mov	r8, r31
     bde:	f1 e0       	ldi	r31, 0x01	; 1
     be0:	9f 2e       	mov	r9, r31
     be2:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, LOW);
     be4:	04 e2       	ldi	r16, 0x24	; 36
     be6:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(x,HR)]);
     be8:	0f 2e       	mov	r0, r31
     bea:	f2 e2       	ldi	r31, 0x22	; 34
     bec:	af 2e       	mov	r10, r31
     bee:	f1 e0       	ldi	r31, 0x01	; 1
     bf0:	bf 2e       	mov	r11, r31
     bf2:	f0 2d       	mov	r31, r0
     bf4:	0f 2e       	mov	r0, r31
     bf6:	f6 e2       	ldi	r31, 0x26	; 38
     bf8:	cf 2e       	mov	r12, r31
     bfa:	f1 e0       	ldi	r31, 0x01	; 1
     bfc:	df 2e       	mov	r13, r31
     bfe:	f0 2d       	mov	r31, r0
	
	//display hours first tens then one's position.
	Temp_Array[2] = splitInt(0,HR);
	for(int x = 0; x<=1;x++)
	{
		if(Temp_Array[2] == splitInt(1,HR)){BlankDisplay(1);}
     c00:	f4 01       	movw	r30, r8
     c02:	e4 80       	ldd	r14, Z+4	; 0x04
     c04:	f5 80       	ldd	r15, Z+5	; 0x05
     c06:	b3 01       	movw	r22, r6
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     c10:	e8 16       	cp	r14, r24
     c12:	f9 06       	cpc	r15, r25
     c14:	21 f4       	brne	.+8      	; 0xc1e <_Z14Update_Displayv+0xa0>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
		digitalWrite(LATCH, LOW);
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	f8 01       	movw	r30, r16
     c22:	80 81       	ld	r24, Z
     c24:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(x,HR)]);
     c28:	b3 01       	movw	r22, r6
     c2a:	ce 01       	movw	r24, r28
     c2c:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     c30:	8c 5f       	subi	r24, 0xFC	; 252
     c32:	9e 4f       	sbci	r25, 0xFE	; 254
     c34:	fc 01       	movw	r30, r24
     c36:	20 81       	ld	r18, Z
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	f5 01       	movw	r30, r10
     c3c:	60 81       	ld	r22, Z
     c3e:	f6 01       	movw	r30, r12
     c40:	80 81       	ld	r24, Z
     c42:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	f8 01       	movw	r30, r16
     c4a:	80 81       	ld	r24, Z
     c4c:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		//delay(TIME_DELAY);
		gotoSleep(SLEEP_DELAY);
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 21 03 	call	0x642	; 0x642 <_Z9gotoSleepi>
	//Converting 24HR time to 12HR format.
	HR = convertTime(HR);
	
	//display hours first tens then one's position.
	Temp_Array[2] = splitInt(0,HR);
	for(int x = 0; x<=1;x++)
     c58:	21 96       	adiw	r28, 0x01	; 1
     c5a:	c2 30       	cpi	r28, 0x02	; 2
     c5c:	d1 05       	cpc	r29, r1
     c5e:	81 f6       	brne	.-96     	; 0xc00 <_Z14Update_Displayv+0x82>
		//delay(TIME_DELAY);
		gotoSleep(SLEEP_DELAY);
	}
	
	//Dash between HH:MM to separate Hours and minutes.
	digitalWrite(LATCH, LOW);
     c60:	c4 e2       	ldi	r28, 0x24	; 36
     c62:	d1 e0       	ldi	r29, 0x01	; 1
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	88 81       	ld	r24, Y
     c68:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
	shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[10]);
     c6c:	20 91 0e 01 	lds	r18, 0x010E
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	60 91 22 01 	lds	r22, 0x0122
     c76:	80 91 26 01 	lds	r24, 0x0126
     c7a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
	digitalWrite(LATCH, HIGH);
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	88 81       	ld	r24, Y
     c82:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
	//delay(TIME_DELAY);
	gotoSleep(SLEEP_DELAY);
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 21 03 	call	0x642	; 0x642 <_Z9gotoSleepi>

	//display minutes first tens then one's position
	Temp_Array[3] = splitInt(0,MN);
     c8e:	b2 01       	movw	r22, r4
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     c98:	90 93 75 01 	sts	0x0175, r25
     c9c:	80 93 74 01 	sts	0x0174, r24
	for(int y = 0;y<=1;y++)
     ca0:	c0 e0       	ldi	r28, 0x00	; 0
     ca2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(Temp_Array[3] == splitInt(1,MN)){BlankDisplay(1);}
     ca4:	0f 2e       	mov	r0, r31
     ca6:	fe e6       	ldi	r31, 0x6E	; 110
     ca8:	8f 2e       	mov	r8, r31
     caa:	f1 e0       	ldi	r31, 0x01	; 1
     cac:	9f 2e       	mov	r9, r31
     cae:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, LOW);
     cb0:	04 e2       	ldi	r16, 0x24	; 36
     cb2:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(y,MN)]);
     cb4:	0f 2e       	mov	r0, r31
     cb6:	f2 e2       	ldi	r31, 0x22	; 34
     cb8:	af 2e       	mov	r10, r31
     cba:	f1 e0       	ldi	r31, 0x01	; 1
     cbc:	bf 2e       	mov	r11, r31
     cbe:	f0 2d       	mov	r31, r0
     cc0:	0f 2e       	mov	r0, r31
     cc2:	f6 e2       	ldi	r31, 0x26	; 38
     cc4:	cf 2e       	mov	r12, r31
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	df 2e       	mov	r13, r31
     cca:	f0 2d       	mov	r31, r0

	//display minutes first tens then one's position
	Temp_Array[3] = splitInt(0,MN);
	for(int y = 0;y<=1;y++)
	{
		if(Temp_Array[3] == splitInt(1,MN)){BlankDisplay(1);}
     ccc:	f4 01       	movw	r30, r8
     cce:	e6 80       	ldd	r14, Z+6	; 0x06
     cd0:	f7 80       	ldd	r15, Z+7	; 0x07
     cd2:	b2 01       	movw	r22, r4
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     cdc:	e8 16       	cp	r14, r24
     cde:	f9 06       	cpc	r15, r25
     ce0:	21 f4       	brne	.+8      	; 0xcea <_Z14Update_Displayv+0x16c>
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
		digitalWrite(LATCH, LOW);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	f8 01       	movw	r30, r16
     cee:	80 81       	ld	r24, Z
     cf0:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(y,MN)]);
     cf4:	b2 01       	movw	r22, r4
     cf6:	ce 01       	movw	r24, r28
     cf8:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     cfc:	8c 5f       	subi	r24, 0xFC	; 252
     cfe:	9e 4f       	sbci	r25, 0xFE	; 254
     d00:	fc 01       	movw	r30, r24
     d02:	20 81       	ld	r18, Z
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	f5 01       	movw	r30, r10
     d08:	60 81       	ld	r22, Z
     d0a:	f6 01       	movw	r30, r12
     d0c:	80 81       	ld	r24, Z
     d0e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	f8 01       	movw	r30, r16
     d16:	80 81       	ld	r24, Z
     d18:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		//delay(TIME_DELAY);
		gotoSleep(SLEEP_DELAY);
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 21 03 	call	0x642	; 0x642 <_Z9gotoSleepi>
	//delay(TIME_DELAY);
	gotoSleep(SLEEP_DELAY);

	//display minutes first tens then one's position
	Temp_Array[3] = splitInt(0,MN);
	for(int y = 0;y<=1;y++)
     d24:	21 96       	adiw	r28, 0x01	; 1
     d26:	c2 30       	cpi	r28, 0x02	; 2
     d28:	d1 05       	cpc	r29, r1
     d2a:	81 f6       	brne	.-96     	; 0xccc <_Z14Update_Displayv+0x14e>
		//delay(TIME_DELAY);
		gotoSleep(SLEEP_DELAY);
	}

	//Blank display
	BlankDisplay(1);
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	
	if(tempDisplay == true)
     d34:	80 91 95 01 	lds	r24, 0x0195
     d38:	88 23       	and	r24, r24
     d3a:	09 f4       	brne	.+2      	; 0xd3e <_Z14Update_Displayv+0x1c0>
     d3c:	b2 c0       	rjmp	.+356    	; 0xea2 <_Z14Update_Displayv+0x324>
	{
		//Display Temperature.
		Temp_Array[4] = splitInt(0,readTemp(1));
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 8c 03 	call	0x718	; 0x718 <_Z8readTempi>
     d46:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__fixsfsi>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     d52:	90 93 77 01 	sts	0x0177, r25
     d56:	80 93 76 01 	sts	0x0176, r24
		for (int z = 0; z <= 1; z++)
     d5a:	c0 e0       	ldi	r28, 0x00	; 0
     d5c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(Temp_Array[4] == splitInt(1,readTemp(1))){BlankDisplay(1);}
     d5e:	0f 2e       	mov	r0, r31
     d60:	fe e6       	ldi	r31, 0x6E	; 110
     d62:	8f 2e       	mov	r8, r31
     d64:	f1 e0       	ldi	r31, 0x01	; 1
     d66:	9f 2e       	mov	r9, r31
     d68:	f0 2d       	mov	r31, r0
			digitalWrite(LATCH, LOW);
     d6a:	04 e2       	ldi	r16, 0x24	; 36
     d6c:	11 e0       	ldi	r17, 0x01	; 1
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(z,readTemp(1))]);
     d6e:	0f 2e       	mov	r0, r31
     d70:	f2 e2       	ldi	r31, 0x22	; 34
     d72:	af 2e       	mov	r10, r31
     d74:	f1 e0       	ldi	r31, 0x01	; 1
     d76:	bf 2e       	mov	r11, r31
     d78:	f0 2d       	mov	r31, r0
     d7a:	0f 2e       	mov	r0, r31
     d7c:	f6 e2       	ldi	r31, 0x26	; 38
     d7e:	cf 2e       	mov	r12, r31
     d80:	f1 e0       	ldi	r31, 0x01	; 1
     d82:	df 2e       	mov	r13, r31
     d84:	f0 2d       	mov	r31, r0
	{
		//Display Temperature.
		Temp_Array[4] = splitInt(0,readTemp(1));
		for (int z = 0; z <= 1; z++)
		{
			if(Temp_Array[4] == splitInt(1,readTemp(1))){BlankDisplay(1);}
     d86:	f4 01       	movw	r30, r8
     d88:	e0 84       	ldd	r14, Z+8	; 0x08
     d8a:	f1 84       	ldd	r15, Z+9	; 0x09
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 8c 03 	call	0x718	; 0x718 <_Z8readTempi>
     d94:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__fixsfsi>
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     da0:	e8 16       	cp	r14, r24
     da2:	f9 06       	cpc	r15, r25
     da4:	21 f4       	brne	.+8      	; 0xdae <_Z14Update_Displayv+0x230>
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
			digitalWrite(LATCH, LOW);
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	f8 01       	movw	r30, r16
     db2:	80 81       	ld	r24, Z
     db4:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(z,readTemp(1))]);
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 8c 03 	call	0x718	; 0x718 <_Z8readTempi>
     dc0:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__fixsfsi>
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 94 10 04 	call	0x820	; 0x820 <_Z8splitIntii>
     dca:	8c 5f       	subi	r24, 0xFC	; 252
     dcc:	9e 4f       	sbci	r25, 0xFE	; 254
     dce:	fc 01       	movw	r30, r24
     dd0:	20 81       	ld	r18, Z
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	f5 01       	movw	r30, r10
     dd6:	60 81       	ld	r22, Z
     dd8:	f6 01       	movw	r30, r12
     dda:	80 81       	ld	r24, Z
     ddc:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	f8 01       	movw	r30, r16
     de4:	80 81       	ld	r24, Z
     de6:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			//delay(TIME_DELAY);
			gotoSleep(SLEEP_DELAY);
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 21 03 	call	0x642	; 0x642 <_Z9gotoSleepi>
	
	if(tempDisplay == true)
	{
		//Display Temperature.
		Temp_Array[4] = splitInt(0,readTemp(1));
		for (int z = 0; z <= 1; z++)
     df2:	21 96       	adiw	r28, 0x01	; 1
     df4:	c2 30       	cpi	r28, 0x02	; 2
     df6:	d1 05       	cpc	r29, r1
     df8:	31 f6       	brne	.-116    	; 0xd86 <_Z14Update_Displayv+0x208>
			//delay(TIME_DELAY);
			gotoSleep(SLEEP_DELAY);
		}

		//display a degree symbol
		digitalWrite(LATCH, LOW);
     dfa:	c4 e2       	ldi	r28, 0x24	; 36
     dfc:	d1 e0       	ldi	r29, 0x01	; 1
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	88 81       	ld	r24, Y
     e02:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[15]);
     e06:	20 91 13 01 	lds	r18, 0x0113
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	60 91 22 01 	lds	r22, 0x0122
     e10:	80 91 26 01 	lds	r24, 0x0126
     e14:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	88 81       	ld	r24, Y
     e1c:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		//delay(TIME_DELAY);
		gotoSleep(SLEEP_DELAY);
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 21 03 	call	0x642	; 0x642 <_Z9gotoSleepi>
		
		BlankDisplay(1);
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
		if(tempCORF == false)
     e30:	80 91 94 01 	lds	r24, 0x0194
     e34:	81 11       	cpse	r24, r1
     e36:	1a c0       	rjmp	.+52     	; 0xe6c <_Z14Update_Displayv+0x2ee>
		{
			//display a Celsius (c) symbol
			digitalWrite(LATCH, LOW);
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	88 81       	ld	r24, Y
     e3c:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[16]);
     e40:	20 91 14 01 	lds	r18, 0x0114
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	60 91 22 01 	lds	r22, 0x0122
     e4a:	80 91 26 01 	lds	r24, 0x0126
     e4e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	88 81       	ld	r24, Y
     e56:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			//delay(TIME_DELAY);
			gotoSleep(SLEEP_DELAY);
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 21 03 	call	0x642	; 0x642 <_Z9gotoSleepi>

			BlankDisplay(1);
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
     e6a:	1b c0       	rjmp	.+54     	; 0xea2 <_Z14Update_Displayv+0x324>
		}
		else
		{
			//display a Celsius (c) symbol
			digitalWrite(LATCH, LOW);
     e6c:	c4 e2       	ldi	r28, 0x24	; 36
     e6e:	d1 e0       	ldi	r29, 0x01	; 1
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	88 81       	ld	r24, Y
     e74:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[16]);
     e78:	20 91 14 01 	lds	r18, 0x0114
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	60 91 22 01 	lds	r22, 0x0122
     e82:	80 91 26 01 	lds	r24, 0x0126
     e86:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	88 81       	ld	r24, Y
     e8e:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			//delay(TIME_DELAY);
			gotoSleep(SLEEP_DELAY);
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 21 03 	call	0x642	; 0x642 <_Z9gotoSleepi>

			BlankDisplay(1);
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
		}
	}
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	bf 90       	pop	r11
     eb4:	af 90       	pop	r10
     eb6:	9f 90       	pop	r9
     eb8:	8f 90       	pop	r8
     eba:	7f 90       	pop	r7
     ebc:	6f 90       	pop	r6
     ebe:	5f 90       	pop	r5
     ec0:	4f 90       	pop	r4
     ec2:	08 95       	ret

00000ec4 <_Z7setTimev>:
	BlankDisplay(0);
	delay(BTN_DELAY);
}

void setTime()
{
     ec4:	2f 92       	push	r2
     ec6:	3f 92       	push	r3
     ec8:	4f 92       	push	r4
     eca:	5f 92       	push	r5
     ecc:	6f 92       	push	r6
     ece:	7f 92       	push	r7
     ed0:	8f 92       	push	r8
     ed2:	9f 92       	push	r9
     ed4:	af 92       	push	r10
     ed6:	bf 92       	push	r11
     ed8:	cf 92       	push	r12
     eda:	df 92       	push	r13
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
	// user presses button A (digital 8) to enter 'set time' mode while time being displayed
	// then user presses A to advance value, B to lock in. Repeat for four digits of time
	
	//mini state machine
	int State = 0;
	detachInterrupt(0);
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <detachInterrupt>
	int h1=0;
	int h2=0;
	int m1=0;
	int m2=0;
	boolean set=false;
	BlankDisplay(0);
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	
	//mini state machine
	int State = 0;
	detachInterrupt(0);
	byte minute, hour;
	int h1=0;
     ef6:	c0 e0       	ldi	r28, 0x00	; 0
     ef8:	d0 e0       	ldi	r29, 0x00	; 0

	do // get first digit of hours from user
	// press digital 8 button to change from 0>1>2>0>1...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
     efa:	04 e2       	ldi	r16, 0x24	; 36
     efc:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
     efe:	0f 2e       	mov	r0, r31
     f00:	f2 e2       	ldi	r31, 0x22	; 34
     f02:	cf 2e       	mov	r12, r31
     f04:	f1 e0       	ldi	r31, 0x01	; 1
     f06:	df 2e       	mov	r13, r31
     f08:	f0 2d       	mov	r31, r0
     f0a:	0f 2e       	mov	r0, r31
     f0c:	f6 e2       	ldi	r31, 0x26	; 38
     f0e:	ef 2e       	mov	r14, r31
     f10:	f1 e0       	ldi	r31, 0x01	; 1
     f12:	ff 2e       	mov	r15, r31
     f14:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
     f16:	0f 2e       	mov	r0, r31
     f18:	fa e2       	ldi	r31, 0x2A	; 42
     f1a:	8f 2e       	mov	r8, r31
     f1c:	f1 e0       	ldi	r31, 0x01	; 1
     f1e:	9f 2e       	mov	r9, r31
     f20:	f0 2d       	mov	r31, r0
		{
			delay(debounce);
			h1++;
			if (h1>2)
			{
				h1=0;
     f22:	61 2c       	mov	r6, r1
     f24:	71 2c       	mov	r7, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
     f26:	0f 2e       	mov	r0, r31
     f28:	f8 e2       	ldi	r31, 0x28	; 40
     f2a:	af 2e       	mov	r10, r31
     f2c:	f1 e0       	ldi	r31, 0x01	; 1
     f2e:	bf 2e       	mov	r11, r31
     f30:	f0 2d       	mov	r31, r0

	do // get first digit of hours from user
	// press digital 8 button to change from 0>1>2>0>1...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	f8 01       	movw	r30, r16
     f36:	80 81       	ld	r24, Z
     f38:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
     f3c:	fe 01       	movw	r30, r28
     f3e:	ec 5f       	subi	r30, 0xFC	; 252
     f40:	fe 4f       	sbci	r31, 0xFE	; 254
     f42:	20 81       	ld	r18, Z
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	f6 01       	movw	r30, r12
     f48:	60 81       	ld	r22, Z
     f4a:	f7 01       	movw	r30, r14
     f4c:	80 81       	ld	r24, Z
     f4e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	f8 01       	movw	r30, r16
     f56:	80 81       	ld	r24, Z
     f58:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
     f5c:	f4 01       	movw	r30, r8
     f5e:	80 81       	ld	r24, Z
     f60:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	29 f5       	brne	.+74     	; 0xfb2 <_Z7setTimev+0xee>
		{
			delay(debounce);
     f68:	60 91 18 01 	lds	r22, 0x0118
     f6c:	70 91 19 01 	lds	r23, 0x0119
     f70:	07 2e       	mov	r0, r23
     f72:	00 0c       	add	r0, r0
     f74:	88 0b       	sbc	r24, r24
     f76:	99 0b       	sbc	r25, r25
     f78:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			h1++;
     f7c:	21 96       	adiw	r28, 0x01	; 1
			if (h1>2)
     f7e:	c3 30       	cpi	r28, 0x03	; 3
     f80:	d1 05       	cpc	r29, r1
     f82:	14 f0       	brlt	.+4      	; 0xf88 <_Z7setTimev+0xc4>
			{
				h1=0;
     f84:	c6 2d       	mov	r28, r6
     f86:	d7 2d       	mov	r29, r7
			}
			digitalWrite(LATCH, LOW);
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	f8 01       	movw	r30, r16
     f8c:	80 81       	ld	r24, Z
     f8e:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
     f92:	fe 01       	movw	r30, r28
     f94:	ec 5f       	subi	r30, 0xFC	; 252
     f96:	fe 4f       	sbci	r31, 0xFE	; 254
     f98:	20 81       	ld	r18, Z
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	f6 01       	movw	r30, r12
     f9e:	60 81       	ld	r22, Z
     fa0:	f7 01       	movw	r30, r14
     fa2:	80 81       	ld	r24, Z
     fa4:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	f8 01       	movw	r30, r16
     fac:	80 81       	ld	r24, Z
     fae:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
     fb2:	f5 01       	movw	r30, r10
     fb4:	80 81       	ld	r24, Z
     fb6:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <_Z7setTimev+0xfc>
     fbe:	b9 cf       	rjmp	.-142    	; 0xf32 <_Z7setTimev+0x6e>
		{
			delay(debounce);
     fc0:	60 91 18 01 	lds	r22, 0x0118
     fc4:	70 91 19 01 	lds	r23, 0x0119
     fc8:	07 2e       	mov	r0, r23
     fca:	00 0c       	add	r0, r0
     fcc:	88 0b       	sbc	r24, r24
     fce:	99 0b       	sbc	r25, r25
     fd0:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			set=true;
		}
	}
	while (set!=true);
	BlankDisplay(0);
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
     fdc:	60 91 1c 01 	lds	r22, 0x011C
     fe0:	70 91 1d 01 	lds	r23, 0x011D
     fe4:	07 2e       	mov	r0, r23
     fe6:	00 0c       	add	r0, r0
     fe8:	88 0b       	sbc	r24, r24
     fea:	99 0b       	sbc	r25, r25
     fec:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
	//mini state machine
	int State = 0;
	detachInterrupt(0);
	byte minute, hour;
	int h1=0;
	int h2=0;
     ff0:	c1 2c       	mov	r12, r1
     ff2:	d1 2c       	mov	r13, r1

	do // get second digit of hours from user
	// press digital 8 button to change from 0>1>2>...9>0...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
     ff4:	04 e2       	ldi	r16, 0x24	; 36
     ff6:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
     ff8:	0f 2e       	mov	r0, r31
     ffa:	f2 e2       	ldi	r31, 0x22	; 34
     ffc:	af 2e       	mov	r10, r31
     ffe:	f1 e0       	ldi	r31, 0x01	; 1
    1000:	bf 2e       	mov	r11, r31
    1002:	f0 2d       	mov	r31, r0
    1004:	0f 2e       	mov	r0, r31
    1006:	f6 e2       	ldi	r31, 0x26	; 38
    1008:	ef 2e       	mov	r14, r31
    100a:	f1 e0       	ldi	r31, 0x01	; 1
    100c:	ff 2e       	mov	r15, r31
    100e:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    1010:	0f 2e       	mov	r0, r31
    1012:	fa e2       	ldi	r31, 0x2A	; 42
    1014:	8f 2e       	mov	r8, r31
    1016:	f1 e0       	ldi	r31, 0x01	; 1
    1018:	9f 2e       	mov	r9, r31
    101a:	f0 2d       	mov	r31, r0
		{
			delay(debounce);
			h2++;
			if (h2>9)
			{
				h2=0;
    101c:	41 2c       	mov	r4, r1
    101e:	51 2c       	mov	r5, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    1020:	0f 2e       	mov	r0, r31
    1022:	f8 e2       	ldi	r31, 0x28	; 40
    1024:	6f 2e       	mov	r6, r31
    1026:	f1 e0       	ldi	r31, 0x01	; 1
    1028:	7f 2e       	mov	r7, r31
    102a:	f0 2d       	mov	r31, r0

	do // get second digit of hours from user
	// press digital 8 button to change from 0>1>2>...9>0...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	f8 01       	movw	r30, r16
    1030:	80 81       	ld	r24, Z
    1032:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
    1036:	f6 01       	movw	r30, r12
    1038:	ec 5f       	subi	r30, 0xFC	; 252
    103a:	fe 4f       	sbci	r31, 0xFE	; 254
    103c:	20 81       	ld	r18, Z
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	f5 01       	movw	r30, r10
    1042:	60 81       	ld	r22, Z
    1044:	f7 01       	movw	r30, r14
    1046:	80 81       	ld	r24, Z
    1048:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	f8 01       	movw	r30, r16
    1050:	80 81       	ld	r24, Z
    1052:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    1056:	f4 01       	movw	r30, r8
    1058:	80 81       	ld	r24, Z
    105a:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	41 f5       	brne	.+80     	; 0x10b2 <_Z7setTimev+0x1ee>
		{
			delay(debounce);
    1062:	60 91 18 01 	lds	r22, 0x0118
    1066:	70 91 19 01 	lds	r23, 0x0119
    106a:	07 2e       	mov	r0, r23
    106c:	00 0c       	add	r0, r0
    106e:	88 0b       	sbc	r24, r24
    1070:	99 0b       	sbc	r25, r25
    1072:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			h2++;
    1076:	ff ef       	ldi	r31, 0xFF	; 255
    1078:	cf 1a       	sub	r12, r31
    107a:	df 0a       	sbc	r13, r31
			if (h2>9)
    107c:	8a e0       	ldi	r24, 0x0A	; 10
    107e:	c8 16       	cp	r12, r24
    1080:	d1 04       	cpc	r13, r1
    1082:	14 f0       	brlt	.+4      	; 0x1088 <_Z7setTimev+0x1c4>
			{
				h2=0;
    1084:	c4 2c       	mov	r12, r4
    1086:	d5 2c       	mov	r13, r5
			}
			digitalWrite(LATCH, LOW);
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	f8 01       	movw	r30, r16
    108c:	80 81       	ld	r24, Z
    108e:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
    1092:	f6 01       	movw	r30, r12
    1094:	ec 5f       	subi	r30, 0xFC	; 252
    1096:	fe 4f       	sbci	r31, 0xFE	; 254
    1098:	20 81       	ld	r18, Z
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	f5 01       	movw	r30, r10
    109e:	60 81       	ld	r22, Z
    10a0:	f7 01       	movw	r30, r14
    10a2:	80 81       	ld	r24, Z
    10a4:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	f8 01       	movw	r30, r16
    10ac:	80 81       	ld	r24, Z
    10ae:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    10b2:	f3 01       	movw	r30, r6
    10b4:	80 81       	ld	r24, Z
    10b6:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <_Z7setTimev+0x1fc>
    10be:	b6 cf       	rjmp	.-148    	; 0x102c <_Z7setTimev+0x168>
		{
			delay(debounce);
    10c0:	60 91 18 01 	lds	r22, 0x0118
    10c4:	70 91 19 01 	lds	r23, 0x0119
    10c8:	07 2e       	mov	r0, r23
    10ca:	00 0c       	add	r0, r0
    10cc:	88 0b       	sbc	r24, r24
    10ce:	99 0b       	sbc	r25, r25
    10d0:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			set=true;
		}
	}
	while (set!=true);
	BlankDisplay(0);
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    10dc:	60 91 1c 01 	lds	r22, 0x011C
    10e0:	70 91 1d 01 	lds	r23, 0x011D
    10e4:	07 2e       	mov	r0, r23
    10e6:	00 0c       	add	r0, r0
    10e8:	88 0b       	sbc	r24, r24
    10ea:	99 0b       	sbc	r25, r25
    10ec:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
	int State = 0;
	detachInterrupt(0);
	byte minute, hour;
	int h1=0;
	int h2=0;
	int m1=0;
    10f0:	e1 2c       	mov	r14, r1
    10f2:	f1 2c       	mov	r15, r1

	do // get first digit of minutes from user
	// press digital 8 button to change from 0>1>..5>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    10f4:	04 e2       	ldi	r16, 0x24	; 36
    10f6:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
    10f8:	0f 2e       	mov	r0, r31
    10fa:	f2 e2       	ldi	r31, 0x22	; 34
    10fc:	8f 2e       	mov	r8, r31
    10fe:	f1 e0       	ldi	r31, 0x01	; 1
    1100:	9f 2e       	mov	r9, r31
    1102:	f0 2d       	mov	r31, r0
    1104:	0f 2e       	mov	r0, r31
    1106:	f6 e2       	ldi	r31, 0x26	; 38
    1108:	af 2e       	mov	r10, r31
    110a:	f1 e0       	ldi	r31, 0x01	; 1
    110c:	bf 2e       	mov	r11, r31
    110e:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    1110:	0f 2e       	mov	r0, r31
    1112:	fa e2       	ldi	r31, 0x2A	; 42
    1114:	6f 2e       	mov	r6, r31
    1116:	f1 e0       	ldi	r31, 0x01	; 1
    1118:	7f 2e       	mov	r7, r31
    111a:	f0 2d       	mov	r31, r0
		{
			delay(debounce);
			m1++;
			if (m1>5)
			{
				m1=0;
    111c:	21 2c       	mov	r2, r1
    111e:	31 2c       	mov	r3, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    1120:	0f 2e       	mov	r0, r31
    1122:	f8 e2       	ldi	r31, 0x28	; 40
    1124:	4f 2e       	mov	r4, r31
    1126:	f1 e0       	ldi	r31, 0x01	; 1
    1128:	5f 2e       	mov	r5, r31
    112a:	f0 2d       	mov	r31, r0

	do // get first digit of minutes from user
	// press digital 8 button to change from 0>1>..5>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	f8 01       	movw	r30, r16
    1130:	80 81       	ld	r24, Z
    1132:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
    1136:	f7 01       	movw	r30, r14
    1138:	ec 5f       	subi	r30, 0xFC	; 252
    113a:	fe 4f       	sbci	r31, 0xFE	; 254
    113c:	20 81       	ld	r18, Z
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	f4 01       	movw	r30, r8
    1142:	60 81       	ld	r22, Z
    1144:	f5 01       	movw	r30, r10
    1146:	80 81       	ld	r24, Z
    1148:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	f8 01       	movw	r30, r16
    1150:	80 81       	ld	r24, Z
    1152:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    1156:	f3 01       	movw	r30, r6
    1158:	80 81       	ld	r24, Z
    115a:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	41 f5       	brne	.+80     	; 0x11b2 <_Z7setTimev+0x2ee>
		{
			delay(debounce);
    1162:	60 91 18 01 	lds	r22, 0x0118
    1166:	70 91 19 01 	lds	r23, 0x0119
    116a:	07 2e       	mov	r0, r23
    116c:	00 0c       	add	r0, r0
    116e:	88 0b       	sbc	r24, r24
    1170:	99 0b       	sbc	r25, r25
    1172:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			m1++;
    1176:	ff ef       	ldi	r31, 0xFF	; 255
    1178:	ef 1a       	sub	r14, r31
    117a:	ff 0a       	sbc	r15, r31
			if (m1>5)
    117c:	86 e0       	ldi	r24, 0x06	; 6
    117e:	e8 16       	cp	r14, r24
    1180:	f1 04       	cpc	r15, r1
    1182:	14 f0       	brlt	.+4      	; 0x1188 <_Z7setTimev+0x2c4>
			{
				m1=0;
    1184:	e2 2c       	mov	r14, r2
    1186:	f3 2c       	mov	r15, r3
			}
			digitalWrite(LATCH, LOW);
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	f8 01       	movw	r30, r16
    118c:	80 81       	ld	r24, Z
    118e:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
    1192:	f7 01       	movw	r30, r14
    1194:	ec 5f       	subi	r30, 0xFC	; 252
    1196:	fe 4f       	sbci	r31, 0xFE	; 254
    1198:	20 81       	ld	r18, Z
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	f4 01       	movw	r30, r8
    119e:	60 81       	ld	r22, Z
    11a0:	f5 01       	movw	r30, r10
    11a2:	80 81       	ld	r24, Z
    11a4:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	f8 01       	movw	r30, r16
    11ac:	80 81       	ld	r24, Z
    11ae:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    11b2:	f2 01       	movw	r30, r4
    11b4:	80 81       	ld	r24, Z
    11b6:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <_Z7setTimev+0x2fc>
    11be:	b6 cf       	rjmp	.-148    	; 0x112c <_Z7setTimev+0x268>
		{
			set=true;
			delay(debounce);
    11c0:	60 91 18 01 	lds	r22, 0x0118
    11c4:	70 91 19 01 	lds	r23, 0x0119
    11c8:	07 2e       	mov	r0, r23
    11ca:	00 0c       	add	r0, r0
    11cc:	88 0b       	sbc	r24, r24
    11ce:	99 0b       	sbc	r25, r25
    11d0:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
		}
	}
	while (set!=true);
	BlankDisplay(0);
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    11dc:	60 91 1c 01 	lds	r22, 0x011C
    11e0:	70 91 1d 01 	lds	r23, 0x011D
    11e4:	07 2e       	mov	r0, r23
    11e6:	00 0c       	add	r0, r0
    11e8:	88 0b       	sbc	r24, r24
    11ea:	99 0b       	sbc	r25, r25
    11ec:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
	detachInterrupt(0);
	byte minute, hour;
	int h1=0;
	int h2=0;
	int m1=0;
	int m2=0;
    11f0:	00 e0       	ldi	r16, 0x00	; 0
    11f2:	10 e0       	ldi	r17, 0x00	; 0

	do // get second digit of minutes from user
	// press digital 8 button to change from 0>1>..9>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    11f4:	0f 2e       	mov	r0, r31
    11f6:	f4 e2       	ldi	r31, 0x24	; 36
    11f8:	af 2e       	mov	r10, r31
    11fa:	f1 e0       	ldi	r31, 0x01	; 1
    11fc:	bf 2e       	mov	r11, r31
    11fe:	f0 2d       	mov	r31, r0
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
    1200:	0f 2e       	mov	r0, r31
    1202:	f2 e2       	ldi	r31, 0x22	; 34
    1204:	8f 2e       	mov	r8, r31
    1206:	f1 e0       	ldi	r31, 0x01	; 1
    1208:	9f 2e       	mov	r9, r31
    120a:	f0 2d       	mov	r31, r0
    120c:	0f 2e       	mov	r0, r31
    120e:	f6 e2       	ldi	r31, 0x26	; 38
    1210:	6f 2e       	mov	r6, r31
    1212:	f1 e0       	ldi	r31, 0x01	; 1
    1214:	7f 2e       	mov	r7, r31
    1216:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    1218:	0f 2e       	mov	r0, r31
    121a:	fa e2       	ldi	r31, 0x2A	; 42
    121c:	4f 2e       	mov	r4, r31
    121e:	f1 e0       	ldi	r31, 0x01	; 1
    1220:	5f 2e       	mov	r5, r31
    1222:	f0 2d       	mov	r31, r0
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    1224:	0f 2e       	mov	r0, r31
    1226:	f8 e2       	ldi	r31, 0x28	; 40
    1228:	2f 2e       	mov	r2, r31
    122a:	f1 e0       	ldi	r31, 0x01	; 1
    122c:	3f 2e       	mov	r3, r31
    122e:	f0 2d       	mov	r31, r0

	do // get second digit of minutes from user
	// press digital 8 button to change from 0>1>..9>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	f5 01       	movw	r30, r10
    1234:	80 81       	ld	r24, Z
    1236:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
    123a:	f8 01       	movw	r30, r16
    123c:	ec 5f       	subi	r30, 0xFC	; 252
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	20 81       	ld	r18, Z
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	f4 01       	movw	r30, r8
    1246:	60 81       	ld	r22, Z
    1248:	f3 01       	movw	r30, r6
    124a:	80 81       	ld	r24, Z
    124c:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	f5 01       	movw	r30, r10
    1254:	80 81       	ld	r24, Z
    1256:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    125a:	f2 01       	movw	r30, r4
    125c:	80 81       	ld	r24, Z
    125e:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	31 f5       	brne	.+76     	; 0x12b2 <_Z7setTimev+0x3ee>
		{
			delay(debounce);
    1266:	60 91 18 01 	lds	r22, 0x0118
    126a:	70 91 19 01 	lds	r23, 0x0119
    126e:	07 2e       	mov	r0, r23
    1270:	00 0c       	add	r0, r0
    1272:	88 0b       	sbc	r24, r24
    1274:	99 0b       	sbc	r25, r25
    1276:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			m2++;
    127a:	0f 5f       	subi	r16, 0xFF	; 255
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
			if (m2>9)
    127e:	0a 30       	cpi	r16, 0x0A	; 10
    1280:	11 05       	cpc	r17, r1
    1282:	14 f0       	brlt	.+4      	; 0x1288 <_Z7setTimev+0x3c4>
			{
				m2=0;
    1284:	00 e0       	ldi	r16, 0x00	; 0
    1286:	10 e0       	ldi	r17, 0x00	; 0
			}
			digitalWrite(LATCH, LOW);
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	f5 01       	movw	r30, r10
    128c:	80 81       	ld	r24, Z
    128e:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
    1292:	f8 01       	movw	r30, r16
    1294:	ec 5f       	subi	r30, 0xFC	; 252
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	20 81       	ld	r18, Z
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	f4 01       	movw	r30, r8
    129e:	60 81       	ld	r22, Z
    12a0:	f3 01       	movw	r30, r6
    12a2:	80 81       	ld	r24, Z
    12a4:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	f5 01       	movw	r30, r10
    12ac:	80 81       	ld	r24, Z
    12ae:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    12b2:	f1 01       	movw	r30, r2
    12b4:	80 81       	ld	r24, Z
    12b6:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <_Z7setTimev+0x3fc>
    12be:	b8 cf       	rjmp	.-144    	; 0x1230 <_Z7setTimev+0x36c>
		{
			set=true;
			delay(debounce);
    12c0:	60 91 18 01 	lds	r22, 0x0118
    12c4:	70 91 19 01 	lds	r23, 0x0119
    12c8:	07 2e       	mov	r0, r23
    12ca:	00 0c       	add	r0, r0
    12cc:	88 0b       	sbc	r24, r24
    12ce:	99 0b       	sbc	r25, r25
    12d0:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
		}
	}
	while (set!=true);
	BlankDisplay(0);
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    12dc:	60 91 1c 01 	lds	r22, 0x011C
    12e0:	70 91 1d 01 	lds	r23, 0x011D
    12e4:	07 2e       	mov	r0, r23
    12e6:	00 0c       	add	r0, r0
    12e8:	88 0b       	sbc	r24, r24
    12ea:	99 0b       	sbc	r25, r25
    12ec:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>

	// now convert the user time data to variables to write to DS1307
	hour = (h1*10)+h2;
    12f0:	cc 0f       	add	r28, r28
    12f2:	8c 2f       	mov	r24, r28
    12f4:	88 0f       	add	r24, r24
    12f6:	88 0f       	add	r24, r24
    12f8:	c8 0f       	add	r28, r24
    12fa:	cc 0d       	add	r28, r12
	minute = (m1*10)+m2;
    12fc:	ee 0c       	add	r14, r14
    12fe:	6e 2d       	mov	r22, r14
    1300:	66 0f       	add	r22, r22
    1302:	66 0f       	add	r22, r22
    1304:	e6 0e       	add	r14, r22
    1306:	6e 2d       	mov	r22, r14
    1308:	60 0f       	add	r22, r16
	if (hour<24 && minute <60) // in case user enters invalid time e.g. 2659h
    130a:	c8 31       	cpi	r28, 0x18	; 24
    130c:	08 f0       	brcs	.+2      	; 0x1310 <_Z7setTimev+0x44c>
    130e:	78 c0       	rjmp	.+240    	; 0x1400 <_Z7setTimev+0x53c>
    1310:	6c 33       	cpi	r22, 0x3C	; 60
    1312:	08 f0       	brcs	.+2      	; 0x1316 <_Z7setTimev+0x452>
    1314:	75 c0       	rjmp	.+234    	; 0x1400 <_Z7setTimev+0x53c>
	{

		RTC.setMinutes(minute);
    1316:	88 e7       	ldi	r24, 0x78	; 120
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6DS133710setMinutesEh>
		RTC.setHours(hour);
    131e:	6c 2f       	mov	r22, r28
    1320:	88 e7       	ldi	r24, 0x78	; 120
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN6DS13378setHoursEh>
		RTC.writeTime();
    1328:	88 e7       	ldi	r24, 0x78	; 120
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN6DS13379writeTimeEv>
		digitalWrite(LATCH, LOW);
    1330:	c4 e2       	ldi	r28, 0x24	; 36
    1332:	d1 e0       	ldi	r29, 0x01	; 1
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	88 81       	ld	r24, Y
    1338:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[10]);
    133c:	0f 2e       	mov	r0, r31
    133e:	f4 e0       	ldi	r31, 0x04	; 4
    1340:	cf 2e       	mov	r12, r31
    1342:	f1 e0       	ldi	r31, 0x01	; 1
    1344:	df 2e       	mov	r13, r31
    1346:	f0 2d       	mov	r31, r0
    1348:	0f 2e       	mov	r0, r31
    134a:	f2 e2       	ldi	r31, 0x22	; 34
    134c:	ef 2e       	mov	r14, r31
    134e:	f1 e0       	ldi	r31, 0x01	; 1
    1350:	ff 2e       	mov	r15, r31
    1352:	f0 2d       	mov	r31, r0
    1354:	06 e2       	ldi	r16, 0x26	; 38
    1356:	11 e0       	ldi	r17, 0x01	; 1
    1358:	f6 01       	movw	r30, r12
    135a:	22 85       	ldd	r18, Z+10	; 0x0a
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	f7 01       	movw	r30, r14
    1360:	60 81       	ld	r22, Z
    1362:	f8 01       	movw	r30, r16
    1364:	80 81       	ld	r24, Z
    1366:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH); // display hyphen
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	88 81       	ld	r24, Y
    136e:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		delay(DIGIT_DELAY);
    1372:	60 91 1a 01 	lds	r22, 0x011A
    1376:	70 91 1b 01 	lds	r23, 0x011B
    137a:	07 2e       	mov	r0, r23
    137c:	00 0c       	add	r0, r0
    137e:	88 0b       	sbc	r24, r24
    1380:	99 0b       	sbc	r25, r25
    1382:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
		BlankDisplay(0);
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
		delay(DIGIT_DELAY);
    138e:	60 91 1a 01 	lds	r22, 0x011A
    1392:	70 91 1b 01 	lds	r23, 0x011B
    1396:	07 2e       	mov	r0, r23
    1398:	00 0c       	add	r0, r0
    139a:	88 0b       	sbc	r24, r24
    139c:	99 0b       	sbc	r25, r25
    139e:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
		digitalWrite(LATCH, LOW);
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	88 81       	ld	r24, Y
    13a6:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[10]);
    13aa:	f6 01       	movw	r30, r12
    13ac:	22 85       	ldd	r18, Z+10	; 0x0a
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	f7 01       	movw	r30, r14
    13b2:	60 81       	ld	r22, Z
    13b4:	f8 01       	movw	r30, r16
    13b6:	80 81       	ld	r24, Z
    13b8:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH); // display hyphen
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	88 81       	ld	r24, Y
    13c0:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		delay(DIGIT_DELAY);
    13c4:	60 91 1a 01 	lds	r22, 0x011A
    13c8:	70 91 1b 01 	lds	r23, 0x011B
    13cc:	07 2e       	mov	r0, r23
    13ce:	00 0c       	add	r0, r0
    13d0:	88 0b       	sbc	r24, r24
    13d2:	99 0b       	sbc	r25, r25
    13d4:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
		BlankDisplay(0);
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
		
		//this needs to happen, cpu will hang
		//without it.
		SECONDS_LAST = RTC.getSeconds();
    13e0:	88 e7       	ldi	r24, 0x78	; 120
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6DS133710getSecondsEv>
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	90 93 89 01 	sts	0x0189, r25
    13ee:	80 93 88 01 	sts	0x0188, r24
		attachInterrupt(0, Interrupt_Update, RISING);
    13f2:	43 e0       	ldi	r20, 0x03	; 3
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	6d e0       	ldi	r22, 0x0D	; 13
    13f8:	73 e0       	ldi	r23, 0x03	; 3
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <attachInterrupt>
	}
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	bf 90       	pop	r11
    1412:	af 90       	pop	r10
    1414:	9f 90       	pop	r9
    1416:	8f 90       	pop	r8
    1418:	7f 90       	pop	r7
    141a:	6f 90       	pop	r6
    141c:	5f 90       	pop	r5
    141e:	4f 90       	pop	r4
    1420:	3f 90       	pop	r3
    1422:	2f 90       	pop	r2
    1424:	08 95       	ret

00001426 <_Z10soundAlarmv>:
	//Alarm is ready
	if(same == 5){return 1;}
}

void soundAlarm()
{
    1426:	6f 92       	push	r6
    1428:	7f 92       	push	r7
    142a:	8f 92       	push	r8
    142c:	9f 92       	push	r9
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
	detachInterrupt(0);
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <detachInterrupt>
	
	RTC.readTime();
    1448:	88 e7       	ldi	r24, 0x78	; 120
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN6DS13378readTimeEv>
	int min = RTC.getMinutes();
    1450:	88 e7       	ldi	r24, 0x78	; 120
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN6DS133710getMinutesEv>
    1458:	c8 2f       	mov	r28, r24
	int min_last = RTC.getMinutes();
    145a:	88 e7       	ldi	r24, 0x78	; 120
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN6DS133710getMinutesEv>
	
	//check to see if alarm is already silenced
	if(!alarm_Silence){
    1462:	20 91 85 01 	lds	r18, 0x0185
    1466:	30 91 86 01 	lds	r19, 0x0186
    146a:	23 2b       	or	r18, r19
    146c:	09 f0       	breq	.+2      	; 0x1470 <_Z10soundAlarmv+0x4a>
    146e:	53 c0       	rjmp	.+166    	; 0x1516 <_Z10soundAlarmv+0xf0>
void soundAlarm()
{
	detachInterrupt(0);
	
	RTC.readTime();
	int min = RTC.getMinutes();
    1470:	d0 e0       	ldi	r29, 0x00	; 0
				digitalWrite(ALARM, LOW);
			}
			else
			{
				*/
				digitalWrite(LATCH, LOW);
    1472:	04 e2       	ldi	r16, 0x24	; 36
    1474:	11 e0       	ldi	r17, 0x01	; 1
				shiftOut(DATA_PIN,CLOCK,LSBFIRST,DATA_ARRAY[17]);
    1476:	0f 2e       	mov	r0, r31
    1478:	f4 e0       	ldi	r31, 0x04	; 4
    147a:	8f 2e       	mov	r8, r31
    147c:	f1 e0       	ldi	r31, 0x01	; 1
    147e:	9f 2e       	mov	r9, r31
    1480:	f0 2d       	mov	r31, r0
    1482:	0f 2e       	mov	r0, r31
    1484:	f2 e2       	ldi	r31, 0x22	; 34
    1486:	af 2e       	mov	r10, r31
    1488:	f1 e0       	ldi	r31, 0x01	; 1
    148a:	bf 2e       	mov	r11, r31
    148c:	f0 2d       	mov	r31, r0
    148e:	0f 2e       	mov	r0, r31
    1490:	f6 e2       	ldi	r31, 0x26	; 38
    1492:	cf 2e       	mov	r12, r31
    1494:	f1 e0       	ldi	r31, 0x01	; 1
    1496:	df 2e       	mov	r13, r31
    1498:	f0 2d       	mov	r31, r0
{
	detachInterrupt(0);
	
	RTC.readTime();
	int min = RTC.getMinutes();
	int min_last = RTC.getMinutes();
    149a:	e8 2e       	mov	r14, r24
    149c:	f1 2c       	mov	r15, r1
			//to silence the alarm.
			if(min_last != min){break;}
			RTC.readTime();
			min = RTC.getMinutes();
			
		} while (digitalRead(Next_BTN) == LOW);
    149e:	0f 2e       	mov	r0, r31
    14a0:	f8 e2       	ldi	r31, 0x28	; 40
    14a2:	6f 2e       	mov	r6, r31
    14a4:	f1 e0       	ldi	r31, 0x01	; 1
    14a6:	7f 2e       	mov	r7, r31
    14a8:	f0 2d       	mov	r31, r0
				digitalWrite(ALARM, LOW);
			}
			else
			{
				*/
				digitalWrite(LATCH, LOW);
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	f8 01       	movw	r30, r16
    14ae:	80 81       	ld	r24, Z
    14b0:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
				shiftOut(DATA_PIN,CLOCK,LSBFIRST,DATA_ARRAY[17]);
    14b4:	f4 01       	movw	r30, r8
    14b6:	21 89       	ldd	r18, Z+17	; 0x11
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	f5 01       	movw	r30, r10
    14bc:	60 81       	ld	r22, Z
    14be:	f6 01       	movw	r30, r12
    14c0:	80 81       	ld	r24, Z
    14c2:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
				digitalWrite(LATCH,HIGH);
    14c6:	61 e0       	ldi	r22, 0x01	; 1
    14c8:	f8 01       	movw	r30, r16
    14ca:	80 81       	ld	r24, Z
    14cc:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
				delay(5);
    14d0:	65 e0       	ldi	r22, 0x05	; 5
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
				
				BlankDisplay(0);
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
			//}
			//keep beeping if next button is not press
			//to silence the alarm.
			if(min_last != min){break;}
    14e4:	ec 16       	cp	r14, r28
    14e6:	fd 06       	cpc	r15, r29
    14e8:	81 f4       	brne	.+32     	; 0x150a <_Z10soundAlarmv+0xe4>
			RTC.readTime();
    14ea:	88 e7       	ldi	r24, 0x78	; 120
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN6DS13378readTimeEv>
			min = RTC.getMinutes();
    14f2:	88 e7       	ldi	r24, 0x78	; 120
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN6DS133710getMinutesEv>
    14fa:	c8 2f       	mov	r28, r24
    14fc:	d0 e0       	ldi	r29, 0x00	; 0
			
		} while (digitalRead(Next_BTN) == LOW);
    14fe:	f3 01       	movw	r30, r6
    1500:	80 81       	ld	r24, Z
    1502:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
	int min = RTC.getMinutes();
	int min_last = RTC.getMinutes();
	
	//check to see if alarm is already silenced
	if(!alarm_Silence){
		do
    1506:	89 2b       	or	r24, r25
    1508:	81 f2       	breq	.-96     	; 0x14aa <_Z10soundAlarmv+0x84>
			min = RTC.getMinutes();
			
		} while (digitalRead(Next_BTN) == LOW);
		//This keeps us from sounding the alarm once
		//the user has silenced it.
		alarm_Silence = 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	90 93 86 01 	sts	0x0186, r25
    1512:	80 93 85 01 	sts	0x0185, r24
	//keep the peizo buzzer pin high so we don't
	//keep sounding.
	//digitalWrite(ALARM, LOW);
	
	//PPS_COUNT = 0;
	SECONDS_LAST = RTC.getSeconds();
    1516:	88 e7       	ldi	r24, 0x78	; 120
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6DS133710getSecondsEv>
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	90 93 89 01 	sts	0x0189, r25
    1524:	80 93 88 01 	sts	0x0188, r24
	attachInterrupt(0, Interrupt_Update, RISING);
    1528:	43 e0       	ldi	r20, 0x03	; 3
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	6d e0       	ldi	r22, 0x0D	; 13
    152e:	73 e0       	ldi	r23, 0x03	; 3
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <attachInterrupt>
}
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	ef 90       	pop	r14
    1542:	df 90       	pop	r13
    1544:	cf 90       	pop	r12
    1546:	bf 90       	pop	r11
    1548:	af 90       	pop	r10
    154a:	9f 90       	pop	r9
    154c:	8f 90       	pop	r8
    154e:	7f 90       	pop	r7
    1550:	6f 90       	pop	r6
    1552:	08 95       	ret

00001554 <_Z8setALARMv>:
}

void setALARM()
// user presses button A (digital 8) to enter 'set time' mode while time being displayed
// then user presses A to advance value, B to lock in. Repeat for four digits of time
{
    1554:	2f 92       	push	r2
    1556:	3f 92       	push	r3
    1558:	4f 92       	push	r4
    155a:	5f 92       	push	r5
    155c:	6f 92       	push	r6
    155e:	7f 92       	push	r7
    1560:	8f 92       	push	r8
    1562:	9f 92       	push	r9
    1564:	af 92       	push	r10
    1566:	bf 92       	push	r11
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
	detachInterrupt(0);
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <detachInterrupt>
	int h2=0;
	int m1=0;
	int m2=0;
	int AP = 17;
	boolean set=false;
	BlankDisplay(0);
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	
	digitalWrite(LATCH, LOW);
    1586:	c4 e2       	ldi	r28, 0x24	; 36
    1588:	d1 e0       	ldi	r29, 0x01	; 1
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	88 81       	ld	r24, Y
    158e:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
	shiftOut(DATA_PIN,CLOCK,LSBFIRST,DATA_ARRAY[17]);
    1592:	0f 2e       	mov	r0, r31
    1594:	f4 e0       	ldi	r31, 0x04	; 4
    1596:	cf 2e       	mov	r12, r31
    1598:	f1 e0       	ldi	r31, 0x01	; 1
    159a:	df 2e       	mov	r13, r31
    159c:	f0 2d       	mov	r31, r0
    159e:	0f 2e       	mov	r0, r31
    15a0:	f2 e2       	ldi	r31, 0x22	; 34
    15a2:	ef 2e       	mov	r14, r31
    15a4:	f1 e0       	ldi	r31, 0x01	; 1
    15a6:	ff 2e       	mov	r15, r31
    15a8:	f0 2d       	mov	r31, r0
    15aa:	06 e2       	ldi	r16, 0x26	; 38
    15ac:	11 e0       	ldi	r17, 0x01	; 1
    15ae:	f6 01       	movw	r30, r12
    15b0:	21 89       	ldd	r18, Z+17	; 0x11
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	f7 01       	movw	r30, r14
    15b6:	60 81       	ld	r22, Z
    15b8:	f8 01       	movw	r30, r16
    15ba:	80 81       	ld	r24, Z
    15bc:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
	digitalWrite(LATCH,HIGH);
    15c0:	61 e0       	ldi	r22, 0x01	; 1
    15c2:	88 81       	ld	r24, Y
    15c4:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
	delay(DIGIT_DELAY);
    15c8:	60 91 1a 01 	lds	r22, 0x011A
    15cc:	70 91 1b 01 	lds	r23, 0x011B
    15d0:	07 2e       	mov	r0, r23
    15d2:	00 0c       	add	r0, r0
    15d4:	88 0b       	sbc	r24, r24
    15d6:	99 0b       	sbc	r25, r25
    15d8:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
	
	BlankDisplay(0);
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	
	digitalWrite(LATCH, LOW);
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	88 81       	ld	r24, Y
    15e8:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
	shiftOut(DATA_PIN,CLOCK,LSBFIRST,DATA_ARRAY[17]);
    15ec:	f6 01       	movw	r30, r12
    15ee:	21 89       	ldd	r18, Z+17	; 0x11
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	f7 01       	movw	r30, r14
    15f4:	60 81       	ld	r22, Z
    15f6:	f8 01       	movw	r30, r16
    15f8:	80 81       	ld	r24, Z
    15fa:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
	digitalWrite(LATCH,HIGH);
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	88 81       	ld	r24, Y
    1602:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
	delay(DIGIT_DELAY);
    1606:	60 91 1a 01 	lds	r22, 0x011A
    160a:	70 91 1b 01 	lds	r23, 0x011B
    160e:	07 2e       	mov	r0, r23
    1610:	00 0c       	add	r0, r0
    1612:	88 0b       	sbc	r24, r24
    1614:	99 0b       	sbc	r25, r25
    1616:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
	
	BlankDisplay(0);
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	
	digitalWrite(LATCH, LOW);
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	88 81       	ld	r24, Y
    1626:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
	shiftOut(DATA_PIN,CLOCK,LSBFIRST,DATA_ARRAY[17]);
    162a:	f6 01       	movw	r30, r12
    162c:	21 89       	ldd	r18, Z+17	; 0x11
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	f7 01       	movw	r30, r14
    1632:	60 81       	ld	r22, Z
    1634:	f8 01       	movw	r30, r16
    1636:	80 81       	ld	r24, Z
    1638:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
	digitalWrite(LATCH,HIGH);
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	88 81       	ld	r24, Y
    1640:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
	delay(DIGIT_DELAY);
    1644:	60 91 1a 01 	lds	r22, 0x011A
    1648:	70 91 1b 01 	lds	r23, 0x011B
    164c:	07 2e       	mov	r0, r23
    164e:	00 0c       	add	r0, r0
    1650:	88 0b       	sbc	r24, r24
    1652:	99 0b       	sbc	r25, r25
    1654:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
	
	BlankDisplay(0);
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
// user presses button A (digital 8) to enter 'set time' mode while time being displayed
// then user presses A to advance value, B to lock in. Repeat for four digits of time
{
	detachInterrupt(0);
	int minute, hour;
	int h1=0;
    1660:	c0 e0       	ldi	r28, 0x00	; 0
    1662:	d0 e0       	ldi	r29, 0x00	; 0

	do // get first digit of hours from user
	// press digital 8 button to change from 0>1>2>0>1...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    1664:	04 e2       	ldi	r16, 0x24	; 36
    1666:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
    1668:	67 01       	movw	r12, r14
    166a:	0f 2e       	mov	r0, r31
    166c:	f6 e2       	ldi	r31, 0x26	; 38
    166e:	ef 2e       	mov	r14, r31
    1670:	f1 e0       	ldi	r31, 0x01	; 1
    1672:	ff 2e       	mov	r15, r31
    1674:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    1676:	0f 2e       	mov	r0, r31
    1678:	fa e2       	ldi	r31, 0x2A	; 42
    167a:	8f 2e       	mov	r8, r31
    167c:	f1 e0       	ldi	r31, 0x01	; 1
    167e:	9f 2e       	mov	r9, r31
    1680:	f0 2d       	mov	r31, r0
		{
			delay(debounce);
			h1++;
			if (h1>1)
			{
				h1=0;
    1682:	61 2c       	mov	r6, r1
    1684:	71 2c       	mov	r7, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    1686:	0f 2e       	mov	r0, r31
    1688:	f8 e2       	ldi	r31, 0x28	; 40
    168a:	af 2e       	mov	r10, r31
    168c:	f1 e0       	ldi	r31, 0x01	; 1
    168e:	bf 2e       	mov	r11, r31
    1690:	f0 2d       	mov	r31, r0

	do // get first digit of hours from user
	// press digital 8 button to change from 0>1>2>0>1...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	f8 01       	movw	r30, r16
    1696:	80 81       	ld	r24, Z
    1698:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
    169c:	fe 01       	movw	r30, r28
    169e:	ec 5f       	subi	r30, 0xFC	; 252
    16a0:	fe 4f       	sbci	r31, 0xFE	; 254
    16a2:	20 81       	ld	r18, Z
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	f6 01       	movw	r30, r12
    16a8:	60 81       	ld	r22, Z
    16aa:	f7 01       	movw	r30, r14
    16ac:	80 81       	ld	r24, Z
    16ae:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	f8 01       	movw	r30, r16
    16b6:	80 81       	ld	r24, Z
    16b8:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    16bc:	f4 01       	movw	r30, r8
    16be:	80 81       	ld	r24, Z
    16c0:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	29 f5       	brne	.+74     	; 0x1712 <_Z8setALARMv+0x1be>
		{
			delay(debounce);
    16c8:	60 91 18 01 	lds	r22, 0x0118
    16cc:	70 91 19 01 	lds	r23, 0x0119
    16d0:	07 2e       	mov	r0, r23
    16d2:	00 0c       	add	r0, r0
    16d4:	88 0b       	sbc	r24, r24
    16d6:	99 0b       	sbc	r25, r25
    16d8:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			h1++;
    16dc:	21 96       	adiw	r28, 0x01	; 1
			if (h1>1)
    16de:	c2 30       	cpi	r28, 0x02	; 2
    16e0:	d1 05       	cpc	r29, r1
    16e2:	14 f0       	brlt	.+4      	; 0x16e8 <_Z8setALARMv+0x194>
			{
				h1=0;
    16e4:	c6 2d       	mov	r28, r6
    16e6:	d7 2d       	mov	r29, r7
			}
			digitalWrite(LATCH, LOW);
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	f8 01       	movw	r30, r16
    16ec:	80 81       	ld	r24, Z
    16ee:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
    16f2:	fe 01       	movw	r30, r28
    16f4:	ec 5f       	subi	r30, 0xFC	; 252
    16f6:	fe 4f       	sbci	r31, 0xFE	; 254
    16f8:	20 81       	ld	r18, Z
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	f6 01       	movw	r30, r12
    16fe:	60 81       	ld	r22, Z
    1700:	f7 01       	movw	r30, r14
    1702:	80 81       	ld	r24, Z
    1704:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
    1708:	61 e0       	ldi	r22, 0x01	; 1
    170a:	f8 01       	movw	r30, r16
    170c:	80 81       	ld	r24, Z
    170e:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    1712:	f5 01       	movw	r30, r10
    1714:	80 81       	ld	r24, Z
    1716:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	09 f0       	breq	.+2      	; 0x1720 <_Z8setALARMv+0x1cc>
    171e:	b9 cf       	rjmp	.-142    	; 0x1692 <_Z8setALARMv+0x13e>
		{
			delay(debounce);
    1720:	60 91 18 01 	lds	r22, 0x0118
    1724:	70 91 19 01 	lds	r23, 0x0119
    1728:	07 2e       	mov	r0, r23
    172a:	00 0c       	add	r0, r0
    172c:	88 0b       	sbc	r24, r24
    172e:	99 0b       	sbc	r25, r25
    1730:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			set=true;
		}
	}
	while (set!=true);
	BlankDisplay(0);
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    173c:	60 91 1c 01 	lds	r22, 0x011C
    1740:	70 91 1d 01 	lds	r23, 0x011D
    1744:	07 2e       	mov	r0, r23
    1746:	00 0c       	add	r0, r0
    1748:	88 0b       	sbc	r24, r24
    174a:	99 0b       	sbc	r25, r25
    174c:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
// then user presses A to advance value, B to lock in. Repeat for four digits of time
{
	detachInterrupt(0);
	int minute, hour;
	int h1=0;
	int h2=0;
    1750:	a1 2c       	mov	r10, r1
    1752:	b1 2c       	mov	r11, r1

	do // get second digit of hours from user
	// press digital 8 button to change from 0>1>2>...9>0...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    1754:	04 e2       	ldi	r16, 0x24	; 36
    1756:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
    1758:	0f 2e       	mov	r0, r31
    175a:	f2 e2       	ldi	r31, 0x22	; 34
    175c:	cf 2e       	mov	r12, r31
    175e:	f1 e0       	ldi	r31, 0x01	; 1
    1760:	df 2e       	mov	r13, r31
    1762:	f0 2d       	mov	r31, r0
    1764:	0f 2e       	mov	r0, r31
    1766:	f6 e2       	ldi	r31, 0x26	; 38
    1768:	ef 2e       	mov	r14, r31
    176a:	f1 e0       	ldi	r31, 0x01	; 1
    176c:	ff 2e       	mov	r15, r31
    176e:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    1770:	0f 2e       	mov	r0, r31
    1772:	fa e2       	ldi	r31, 0x2A	; 42
    1774:	8f 2e       	mov	r8, r31
    1776:	f1 e0       	ldi	r31, 0x01	; 1
    1778:	9f 2e       	mov	r9, r31
    177a:	f0 2d       	mov	r31, r0
			}
			else if(h1 == 1)
			{
				if(h2>=2)
				{
					h2 = 0;
    177c:	41 2c       	mov	r4, r1
    177e:	51 2c       	mov	r5, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    1780:	0f 2e       	mov	r0, r31
    1782:	f8 e2       	ldi	r31, 0x28	; 40
    1784:	6f 2e       	mov	r6, r31
    1786:	f1 e0       	ldi	r31, 0x01	; 1
    1788:	7f 2e       	mov	r7, r31
    178a:	f0 2d       	mov	r31, r0

	do // get second digit of hours from user
	// press digital 8 button to change from 0>1>2>...9>0...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	f8 01       	movw	r30, r16
    1790:	80 81       	ld	r24, Z
    1792:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
    1796:	f5 01       	movw	r30, r10
    1798:	ec 5f       	subi	r30, 0xFC	; 252
    179a:	fe 4f       	sbci	r31, 0xFE	; 254
    179c:	20 81       	ld	r18, Z
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	f6 01       	movw	r30, r12
    17a2:	60 81       	ld	r22, Z
    17a4:	f7 01       	movw	r30, r14
    17a6:	80 81       	ld	r24, Z
    17a8:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	f8 01       	movw	r30, r16
    17b0:	80 81       	ld	r24, Z
    17b2:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    17b6:	f4 01       	movw	r30, r8
    17b8:	80 81       	ld	r24, Z
    17ba:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	c9 f5       	brne	.+114    	; 0x1834 <_Z8setALARMv+0x2e0>
		{
			delay(debounce);
    17c2:	60 91 18 01 	lds	r22, 0x0118
    17c6:	70 91 19 01 	lds	r23, 0x0119
    17ca:	07 2e       	mov	r0, r23
    17cc:	00 0c       	add	r0, r0
    17ce:	88 0b       	sbc	r24, r24
    17d0:	99 0b       	sbc	r25, r25
    17d2:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			if(h1 == 0)
    17d6:	20 97       	sbiw	r28, 0x00	; 0
    17d8:	41 f4       	brne	.+16     	; 0x17ea <_Z8setALARMv+0x296>
			{
				if(h2>=9)
    17da:	f9 e0       	ldi	r31, 0x09	; 9
    17dc:	af 16       	cp	r10, r31
    17de:	b1 04       	cpc	r11, r1
    17e0:	7c f4       	brge	.+30     	; 0x1800 <_Z8setALARMv+0x2ac>
				{
					h2=0;
				}
				else
				{
					h2++;
    17e2:	8f ef       	ldi	r24, 0xFF	; 255
    17e4:	a8 1a       	sub	r10, r24
    17e6:	b8 0a       	sbc	r11, r24
    17e8:	10 c0       	rjmp	.+32     	; 0x180a <_Z8setALARMv+0x2b6>
				}
			}
			else if(h1 == 1)
    17ea:	c1 30       	cpi	r28, 0x01	; 1
    17ec:	d1 05       	cpc	r29, r1
    17ee:	69 f4       	brne	.+26     	; 0x180a <_Z8setALARMv+0x2b6>
			{
				if(h2>=2)
    17f0:	e2 e0       	ldi	r30, 0x02	; 2
    17f2:	ae 16       	cp	r10, r30
    17f4:	b1 04       	cpc	r11, r1
    17f6:	3c f4       	brge	.+14     	; 0x1806 <_Z8setALARMv+0x2b2>
				{
					h2 = 0;
				}
				else
				{
					h2++;
    17f8:	ff ef       	ldi	r31, 0xFF	; 255
    17fa:	af 1a       	sub	r10, r31
    17fc:	bf 0a       	sbc	r11, r31
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <_Z8setALARMv+0x2b6>
			delay(debounce);
			if(h1 == 0)
			{
				if(h2>=9)
				{
					h2=0;
    1800:	a4 2c       	mov	r10, r4
    1802:	b5 2c       	mov	r11, r5
    1804:	02 c0       	rjmp	.+4      	; 0x180a <_Z8setALARMv+0x2b6>
			}
			else if(h1 == 1)
			{
				if(h2>=2)
				{
					h2 = 0;
    1806:	a4 2c       	mov	r10, r4
    1808:	b5 2c       	mov	r11, r5
				else
				{
					h2++;
				}
			}
			digitalWrite(LATCH, LOW);
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	f8 01       	movw	r30, r16
    180e:	80 81       	ld	r24, Z
    1810:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
    1814:	f5 01       	movw	r30, r10
    1816:	ec 5f       	subi	r30, 0xFC	; 252
    1818:	fe 4f       	sbci	r31, 0xFE	; 254
    181a:	20 81       	ld	r18, Z
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	f6 01       	movw	r30, r12
    1820:	60 81       	ld	r22, Z
    1822:	f7 01       	movw	r30, r14
    1824:	80 81       	ld	r24, Z
    1826:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	f8 01       	movw	r30, r16
    182e:	80 81       	ld	r24, Z
    1830:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    1834:	f3 01       	movw	r30, r6
    1836:	80 81       	ld	r24, Z
    1838:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	09 f0       	breq	.+2      	; 0x1842 <_Z8setALARMv+0x2ee>
    1840:	a5 cf       	rjmp	.-182    	; 0x178c <_Z8setALARMv+0x238>
		{
			delay(debounce);
    1842:	60 91 18 01 	lds	r22, 0x0118
    1846:	70 91 19 01 	lds	r23, 0x0119
    184a:	07 2e       	mov	r0, r23
    184c:	00 0c       	add	r0, r0
    184e:	88 0b       	sbc	r24, r24
    1850:	99 0b       	sbc	r25, r25
    1852:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			set=true;
		}
	}
	while (set!=true);
	BlankDisplay(0);
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    185e:	60 91 1c 01 	lds	r22, 0x011C
    1862:	70 91 1d 01 	lds	r23, 0x011D
    1866:	07 2e       	mov	r0, r23
    1868:	00 0c       	add	r0, r0
    186a:	88 0b       	sbc	r24, r24
    186c:	99 0b       	sbc	r25, r25
    186e:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
{
	detachInterrupt(0);
	int minute, hour;
	int h1=0;
	int h2=0;
	int m1=0;
    1872:	00 e0       	ldi	r16, 0x00	; 0
    1874:	10 e0       	ldi	r17, 0x00	; 0

	do // get first digit of minutes from user
	// press digital 8 button to change from 0>1>..5>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    1876:	0f 2e       	mov	r0, r31
    1878:	f4 e2       	ldi	r31, 0x24	; 36
    187a:	ef 2e       	mov	r14, r31
    187c:	f1 e0       	ldi	r31, 0x01	; 1
    187e:	ff 2e       	mov	r15, r31
    1880:	f0 2d       	mov	r31, r0
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
    1882:	0f 2e       	mov	r0, r31
    1884:	f2 e2       	ldi	r31, 0x22	; 34
    1886:	8f 2e       	mov	r8, r31
    1888:	f1 e0       	ldi	r31, 0x01	; 1
    188a:	9f 2e       	mov	r9, r31
    188c:	f0 2d       	mov	r31, r0
    188e:	0f 2e       	mov	r0, r31
    1890:	f6 e2       	ldi	r31, 0x26	; 38
    1892:	cf 2e       	mov	r12, r31
    1894:	f1 e0       	ldi	r31, 0x01	; 1
    1896:	df 2e       	mov	r13, r31
    1898:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    189a:	0f 2e       	mov	r0, r31
    189c:	fa e2       	ldi	r31, 0x2A	; 42
    189e:	6f 2e       	mov	r6, r31
    18a0:	f1 e0       	ldi	r31, 0x01	; 1
    18a2:	7f 2e       	mov	r7, r31
    18a4:	f0 2d       	mov	r31, r0
		{
			delay(debounce);
			m1++;
			if (m1>5)
			{
				m1=0;
    18a6:	21 2c       	mov	r2, r1
    18a8:	31 2c       	mov	r3, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    18aa:	0f 2e       	mov	r0, r31
    18ac:	f8 e2       	ldi	r31, 0x28	; 40
    18ae:	4f 2e       	mov	r4, r31
    18b0:	f1 e0       	ldi	r31, 0x01	; 1
    18b2:	5f 2e       	mov	r5, r31
    18b4:	f0 2d       	mov	r31, r0

	do // get first digit of minutes from user
	// press digital 8 button to change from 0>1>..5>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	f7 01       	movw	r30, r14
    18ba:	80 81       	ld	r24, Z
    18bc:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
    18c0:	f8 01       	movw	r30, r16
    18c2:	ec 5f       	subi	r30, 0xFC	; 252
    18c4:	fe 4f       	sbci	r31, 0xFE	; 254
    18c6:	20 81       	ld	r18, Z
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	f4 01       	movw	r30, r8
    18cc:	60 81       	ld	r22, Z
    18ce:	f6 01       	movw	r30, r12
    18d0:	80 81       	ld	r24, Z
    18d2:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	f7 01       	movw	r30, r14
    18da:	80 81       	ld	r24, Z
    18dc:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    18e0:	f3 01       	movw	r30, r6
    18e2:	80 81       	ld	r24, Z
    18e4:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	31 f5       	brne	.+76     	; 0x1938 <_Z8setALARMv+0x3e4>
		{
			delay(debounce);
    18ec:	60 91 18 01 	lds	r22, 0x0118
    18f0:	70 91 19 01 	lds	r23, 0x0119
    18f4:	07 2e       	mov	r0, r23
    18f6:	00 0c       	add	r0, r0
    18f8:	88 0b       	sbc	r24, r24
    18fa:	99 0b       	sbc	r25, r25
    18fc:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			m1++;
    1900:	0f 5f       	subi	r16, 0xFF	; 255
    1902:	1f 4f       	sbci	r17, 0xFF	; 255
			if (m1>5)
    1904:	06 30       	cpi	r16, 0x06	; 6
    1906:	11 05       	cpc	r17, r1
    1908:	14 f0       	brlt	.+4      	; 0x190e <_Z8setALARMv+0x3ba>
			{
				m1=0;
    190a:	02 2d       	mov	r16, r2
    190c:	13 2d       	mov	r17, r3
			}
			digitalWrite(LATCH, LOW);
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	f7 01       	movw	r30, r14
    1912:	80 81       	ld	r24, Z
    1914:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
    1918:	f8 01       	movw	r30, r16
    191a:	ec 5f       	subi	r30, 0xFC	; 252
    191c:	fe 4f       	sbci	r31, 0xFE	; 254
    191e:	20 81       	ld	r18, Z
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	f4 01       	movw	r30, r8
    1924:	60 81       	ld	r22, Z
    1926:	f6 01       	movw	r30, r12
    1928:	80 81       	ld	r24, Z
    192a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	f7 01       	movw	r30, r14
    1932:	80 81       	ld	r24, Z
    1934:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    1938:	f2 01       	movw	r30, r4
    193a:	80 81       	ld	r24, Z
    193c:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	09 f0       	breq	.+2      	; 0x1946 <_Z8setALARMv+0x3f2>
    1944:	b8 cf       	rjmp	.-144    	; 0x18b6 <_Z8setALARMv+0x362>
		{
			set=true;
			delay(debounce);
    1946:	60 91 18 01 	lds	r22, 0x0118
    194a:	70 91 19 01 	lds	r23, 0x0119
    194e:	07 2e       	mov	r0, r23
    1950:	00 0c       	add	r0, r0
    1952:	88 0b       	sbc	r24, r24
    1954:	99 0b       	sbc	r25, r25
    1956:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
		}
	}
	while (set!=true);
	BlankDisplay(0);
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    1962:	60 91 1c 01 	lds	r22, 0x011C
    1966:	70 91 1d 01 	lds	r23, 0x011D
    196a:	07 2e       	mov	r0, r23
    196c:	00 0c       	add	r0, r0
    196e:	88 0b       	sbc	r24, r24
    1970:	99 0b       	sbc	r25, r25
    1972:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
	detachInterrupt(0);
	int minute, hour;
	int h1=0;
	int h2=0;
	int m1=0;
	int m2=0;
    1976:	e1 2c       	mov	r14, r1
    1978:	f1 2c       	mov	r15, r1

	do // get second digit of minutes from user
	// press digital 8 button to change from 0>1>..9>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    197a:	0f 2e       	mov	r0, r31
    197c:	f4 e2       	ldi	r31, 0x24	; 36
    197e:	cf 2e       	mov	r12, r31
    1980:	f1 e0       	ldi	r31, 0x01	; 1
    1982:	df 2e       	mov	r13, r31
    1984:	f0 2d       	mov	r31, r0
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
    1986:	0f 2e       	mov	r0, r31
    1988:	f2 e2       	ldi	r31, 0x22	; 34
    198a:	8f 2e       	mov	r8, r31
    198c:	f1 e0       	ldi	r31, 0x01	; 1
    198e:	9f 2e       	mov	r9, r31
    1990:	f0 2d       	mov	r31, r0
    1992:	0f 2e       	mov	r0, r31
    1994:	f6 e2       	ldi	r31, 0x26	; 38
    1996:	6f 2e       	mov	r6, r31
    1998:	f1 e0       	ldi	r31, 0x01	; 1
    199a:	7f 2e       	mov	r7, r31
    199c:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    199e:	0f 2e       	mov	r0, r31
    19a0:	fa e2       	ldi	r31, 0x2A	; 42
    19a2:	4f 2e       	mov	r4, r31
    19a4:	f1 e0       	ldi	r31, 0x01	; 1
    19a6:	5f 2e       	mov	r5, r31
    19a8:	f0 2d       	mov	r31, r0
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    19aa:	0f 2e       	mov	r0, r31
    19ac:	f8 e2       	ldi	r31, 0x28	; 40
    19ae:	2f 2e       	mov	r2, r31
    19b0:	f1 e0       	ldi	r31, 0x01	; 1
    19b2:	3f 2e       	mov	r3, r31
    19b4:	f0 2d       	mov	r31, r0

	do // get second digit of minutes from user
	// press digital 8 button to change from 0>1>..9>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	f6 01       	movw	r30, r12
    19ba:	80 81       	ld	r24, Z
    19bc:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
    19c0:	f7 01       	movw	r30, r14
    19c2:	ec 5f       	subi	r30, 0xFC	; 252
    19c4:	fe 4f       	sbci	r31, 0xFE	; 254
    19c6:	20 81       	ld	r18, Z
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	f4 01       	movw	r30, r8
    19cc:	60 81       	ld	r22, Z
    19ce:	f3 01       	movw	r30, r6
    19d0:	80 81       	ld	r24, Z
    19d2:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	f6 01       	movw	r30, r12
    19da:	80 81       	ld	r24, Z
    19dc:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    19e0:	f2 01       	movw	r30, r4
    19e2:	80 81       	ld	r24, Z
    19e4:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	41 f5       	brne	.+80     	; 0x1a3c <_Z8setALARMv+0x4e8>
		{
			delay(debounce);
    19ec:	60 91 18 01 	lds	r22, 0x0118
    19f0:	70 91 19 01 	lds	r23, 0x0119
    19f4:	07 2e       	mov	r0, r23
    19f6:	00 0c       	add	r0, r0
    19f8:	88 0b       	sbc	r24, r24
    19fa:	99 0b       	sbc	r25, r25
    19fc:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			m2++;
    1a00:	ff ef       	ldi	r31, 0xFF	; 255
    1a02:	ef 1a       	sub	r14, r31
    1a04:	ff 0a       	sbc	r15, r31
			if (m2>9)
    1a06:	8a e0       	ldi	r24, 0x0A	; 10
    1a08:	e8 16       	cp	r14, r24
    1a0a:	f1 04       	cpc	r15, r1
    1a0c:	14 f0       	brlt	.+4      	; 0x1a12 <_Z8setALARMv+0x4be>
			{
				m2=0;
    1a0e:	e1 2c       	mov	r14, r1
    1a10:	f1 2c       	mov	r15, r1
			}
			digitalWrite(LATCH, LOW);
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	f6 01       	movw	r30, r12
    1a16:	80 81       	ld	r24, Z
    1a18:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
    1a1c:	f7 01       	movw	r30, r14
    1a1e:	ec 5f       	subi	r30, 0xFC	; 252
    1a20:	fe 4f       	sbci	r31, 0xFE	; 254
    1a22:	20 81       	ld	r18, Z
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	f4 01       	movw	r30, r8
    1a28:	60 81       	ld	r22, Z
    1a2a:	f3 01       	movw	r30, r6
    1a2c:	80 81       	ld	r24, Z
    1a2e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	f6 01       	movw	r30, r12
    1a36:	80 81       	ld	r24, Z
    1a38:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    1a3c:	f1 01       	movw	r30, r2
    1a3e:	80 81       	ld	r24, Z
    1a40:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <_Z8setALARMv+0x4f6>
    1a48:	b6 cf       	rjmp	.-148    	; 0x19b6 <_Z8setALARMv+0x462>
		{
			set=true;
			delay(debounce);
    1a4a:	60 91 18 01 	lds	r22, 0x0118
    1a4e:	70 91 19 01 	lds	r23, 0x0119
    1a52:	07 2e       	mov	r0, r23
    1a54:	00 0c       	add	r0, r0
    1a56:	88 0b       	sbc	r24, r24
    1a58:	99 0b       	sbc	r25, r25
    1a5a:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
		}
	}
	while (set!=true);
	BlankDisplay(0);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    1a66:	60 91 1c 01 	lds	r22, 0x011C
    1a6a:	70 91 1d 01 	lds	r23, 0x011D
    1a6e:	07 2e       	mov	r0, r23
    1a70:	00 0c       	add	r0, r0
    1a72:	88 0b       	sbc	r24, r24
    1a74:	99 0b       	sbc	r25, r25
    1a76:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
	int minute, hour;
	int h1=0;
	int h2=0;
	int m1=0;
	int m2=0;
	int AP = 17;
    1a7a:	0f 2e       	mov	r0, r31
    1a7c:	f1 e1       	ldi	r31, 0x11	; 17
    1a7e:	8f 2e       	mov	r8, r31
    1a80:	91 2c       	mov	r9, r1
    1a82:	f0 2d       	mov	r31, r0
	set=false;
	delay(BTN_DELAY);

	do
	{
		digitalWrite(LATCH, LOW);
    1a84:	0f 2e       	mov	r0, r31
    1a86:	f4 e2       	ldi	r31, 0x24	; 36
    1a88:	cf 2e       	mov	r12, r31
    1a8a:	f1 e0       	ldi	r31, 0x01	; 1
    1a8c:	df 2e       	mov	r13, r31
    1a8e:	f0 2d       	mov	r31, r0
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[AP]);
    1a90:	0f 2e       	mov	r0, r31
    1a92:	f2 e2       	ldi	r31, 0x22	; 34
    1a94:	6f 2e       	mov	r6, r31
    1a96:	f1 e0       	ldi	r31, 0x01	; 1
    1a98:	7f 2e       	mov	r7, r31
    1a9a:	f0 2d       	mov	r31, r0
    1a9c:	0f 2e       	mov	r0, r31
    1a9e:	f6 e2       	ldi	r31, 0x26	; 38
    1aa0:	4f 2e       	mov	r4, r31
    1aa2:	f1 e0       	ldi	r31, 0x01	; 1
    1aa4:	5f 2e       	mov	r5, r31
    1aa6:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    1aa8:	0f 2e       	mov	r0, r31
    1aaa:	fa e2       	ldi	r31, 0x2A	; 42
    1aac:	2f 2e       	mov	r2, r31
    1aae:	f1 e0       	ldi	r31, 0x01	; 1
    1ab0:	3f 2e       	mov	r3, r31
    1ab2:	f0 2d       	mov	r31, r0
	set=false;
	delay(BTN_DELAY);

	do
	{
		digitalWrite(LATCH, LOW);
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	f6 01       	movw	r30, r12
    1ab8:	80 81       	ld	r24, Z
    1aba:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[AP]);
    1abe:	f4 01       	movw	r30, r8
    1ac0:	ec 5f       	subi	r30, 0xFC	; 252
    1ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac4:	20 81       	ld	r18, Z
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	f3 01       	movw	r30, r6
    1aca:	60 81       	ld	r22, Z
    1acc:	f2 01       	movw	r30, r4
    1ace:	80 81       	ld	r24, Z
    1ad0:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
    1ad4:	61 e0       	ldi	r22, 0x01	; 1
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	80 81       	ld	r24, Z
    1ada:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    1ade:	f1 01       	movw	r30, r2
    1ae0:	80 81       	ld	r24, Z
    1ae2:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	59 f5       	brne	.+86     	; 0x1b40 <_Z8setALARMv+0x5ec>
		{
			delay(debounce);
    1aea:	60 91 18 01 	lds	r22, 0x0118
    1aee:	70 91 19 01 	lds	r23, 0x0119
    1af2:	07 2e       	mov	r0, r23
    1af4:	00 0c       	add	r0, r0
    1af6:	88 0b       	sbc	r24, r24
    1af8:	99 0b       	sbc	r25, r25
    1afa:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			AP++;
    1afe:	ff ef       	ldi	r31, 0xFF	; 255
    1b00:	8f 1a       	sub	r8, r31
    1b02:	9f 0a       	sbc	r9, r31
			if (AP>18)
    1b04:	83 e1       	ldi	r24, 0x13	; 19
    1b06:	88 16       	cp	r8, r24
    1b08:	91 04       	cpc	r9, r1
    1b0a:	2c f0       	brlt	.+10     	; 0x1b16 <_Z8setALARMv+0x5c2>
			{
				AP=17;
    1b0c:	0f 2e       	mov	r0, r31
    1b0e:	f1 e1       	ldi	r31, 0x11	; 17
    1b10:	8f 2e       	mov	r8, r31
    1b12:	f0 2d       	mov	r31, r0
    1b14:	91 2c       	mov	r9, r1
			}
			digitalWrite(LATCH, LOW);
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	f6 01       	movw	r30, r12
    1b1a:	80 81       	ld	r24, Z
    1b1c:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[AP]);
    1b20:	f4 01       	movw	r30, r8
    1b22:	ec 5f       	subi	r30, 0xFC	; 252
    1b24:	fe 4f       	sbci	r31, 0xFE	; 254
    1b26:	20 81       	ld	r18, Z
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	f3 01       	movw	r30, r6
    1b2c:	60 81       	ld	r22, Z
    1b2e:	f2 01       	movw	r30, r4
    1b30:	80 81       	ld	r24, Z
    1b32:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	f6 01       	movw	r30, r12
    1b3a:	80 81       	ld	r24, Z
    1b3c:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    1b40:	e8 e2       	ldi	r30, 0x28	; 40
    1b42:	f1 e0       	ldi	r31, 0x01	; 1
    1b44:	80 81       	ld	r24, Z
    1b46:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <_Z8setALARMv+0x5fc>
    1b4e:	b2 cf       	rjmp	.-156    	; 0x1ab4 <_Z8setALARMv+0x560>
		{
			delay(debounce);
    1b50:	60 91 18 01 	lds	r22, 0x0118
    1b54:	70 91 19 01 	lds	r23, 0x0119
    1b58:	07 2e       	mov	r0, r23
    1b5a:	00 0c       	add	r0, r0
    1b5c:	88 0b       	sbc	r24, r24
    1b5e:	99 0b       	sbc	r25, r25
    1b60:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			set=true;
		}
	}
	while (set!=true);
	BlankDisplay(0);
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    1b6c:	60 91 1c 01 	lds	r22, 0x011C
    1b70:	70 91 1d 01 	lds	r23, 0x011D
    1b74:	07 2e       	mov	r0, r23
    1b76:	00 0c       	add	r0, r0
    1b78:	88 0b       	sbc	r24, r24
    1b7a:	99 0b       	sbc	r25, r25
    1b7c:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>

	//This portion is experimental.
	hour = (h1*10)+h2;
    1b80:	ce 01       	movw	r24, r28
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	cc 0f       	add	r28, r28
    1b88:	dd 1f       	adc	r29, r29
    1b8a:	cc 0f       	add	r28, r28
    1b8c:	dd 1f       	adc	r29, r29
    1b8e:	cc 0f       	add	r28, r28
    1b90:	dd 1f       	adc	r29, r29
    1b92:	c8 0f       	add	r28, r24
    1b94:	d9 1f       	adc	r29, r25
    1b96:	ce 01       	movw	r24, r28
    1b98:	8a 0d       	add	r24, r10
    1b9a:	9b 1d       	adc	r25, r11
	//terminal_Display("Hour :",hour);
	minute = (m1*10)+m2;
    1b9c:	b8 01       	movw	r22, r16
    1b9e:	66 0f       	add	r22, r22
    1ba0:	77 1f       	adc	r23, r23
    1ba2:	00 0f       	add	r16, r16
    1ba4:	11 1f       	adc	r17, r17
    1ba6:	00 0f       	add	r16, r16
    1ba8:	11 1f       	adc	r17, r17
    1baa:	00 0f       	add	r16, r16
    1bac:	11 1f       	adc	r17, r17
    1bae:	06 0f       	add	r16, r22
    1bb0:	17 1f       	adc	r17, r23
    1bb2:	b8 01       	movw	r22, r16
    1bb4:	6e 0d       	add	r22, r14
    1bb6:	7f 1d       	adc	r23, r15
	//terminal_Display("Minute :",minute);
	
	if (hour<=12 && minute <60) // in case user enters invalid time e.g. 2659h
    1bb8:	8d 30       	cpi	r24, 0x0D	; 13
    1bba:	91 05       	cpc	r25, r1
    1bbc:	0c f0       	brlt	.+2      	; 0x1bc0 <_Z8setALARMv+0x66c>
    1bbe:	71 c0       	rjmp	.+226    	; 0x1ca2 <_Z8setALARMv+0x74e>
    1bc0:	6c 33       	cpi	r22, 0x3C	; 60
    1bc2:	71 05       	cpc	r23, r1
    1bc4:	0c f0       	brlt	.+2      	; 0x1bc8 <_Z8setALARMv+0x674>
    1bc6:	6d c0       	rjmp	.+218    	; 0x1ca2 <_Z8setALARMv+0x74e>
	{
		alarmEEPROM(hour, minute,AP,1);
    1bc8:	21 e0       	ldi	r18, 0x01	; 1
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	a4 01       	movw	r20, r8
    1bce:	0e 94 96 04 	call	0x92c	; 0x92c <_Z11alarmEEPROMhhii>
		
		digitalWrite(LATCH, LOW);
    1bd2:	c4 e2       	ldi	r28, 0x24	; 36
    1bd4:	d1 e0       	ldi	r29, 0x01	; 1
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	88 81       	ld	r24, Y
    1bda:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[10]);
    1bde:	0f 2e       	mov	r0, r31
    1be0:	f4 e0       	ldi	r31, 0x04	; 4
    1be2:	cf 2e       	mov	r12, r31
    1be4:	f1 e0       	ldi	r31, 0x01	; 1
    1be6:	df 2e       	mov	r13, r31
    1be8:	f0 2d       	mov	r31, r0
    1bea:	0f 2e       	mov	r0, r31
    1bec:	f2 e2       	ldi	r31, 0x22	; 34
    1bee:	ef 2e       	mov	r14, r31
    1bf0:	f1 e0       	ldi	r31, 0x01	; 1
    1bf2:	ff 2e       	mov	r15, r31
    1bf4:	f0 2d       	mov	r31, r0
    1bf6:	06 e2       	ldi	r16, 0x26	; 38
    1bf8:	11 e0       	ldi	r17, 0x01	; 1
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	22 85       	ldd	r18, Z+10	; 0x0a
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	f7 01       	movw	r30, r14
    1c02:	60 81       	ld	r22, Z
    1c04:	f8 01       	movw	r30, r16
    1c06:	80 81       	ld	r24, Z
    1c08:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH); // display hyphen
    1c0c:	61 e0       	ldi	r22, 0x01	; 1
    1c0e:	88 81       	ld	r24, Y
    1c10:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		delay(DIGIT_DELAY);
    1c14:	60 91 1a 01 	lds	r22, 0x011A
    1c18:	70 91 1b 01 	lds	r23, 0x011B
    1c1c:	07 2e       	mov	r0, r23
    1c1e:	00 0c       	add	r0, r0
    1c20:	88 0b       	sbc	r24, r24
    1c22:	99 0b       	sbc	r25, r25
    1c24:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
		BlankDisplay(0);
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
		delay(DIGIT_DELAY);
    1c30:	60 91 1a 01 	lds	r22, 0x011A
    1c34:	70 91 1b 01 	lds	r23, 0x011B
    1c38:	07 2e       	mov	r0, r23
    1c3a:	00 0c       	add	r0, r0
    1c3c:	88 0b       	sbc	r24, r24
    1c3e:	99 0b       	sbc	r25, r25
    1c40:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
		digitalWrite(LATCH, LOW);
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	88 81       	ld	r24, Y
    1c48:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[10]);
    1c4c:	f6 01       	movw	r30, r12
    1c4e:	22 85       	ldd	r18, Z+10	; 0x0a
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	f7 01       	movw	r30, r14
    1c54:	60 81       	ld	r22, Z
    1c56:	f8 01       	movw	r30, r16
    1c58:	80 81       	ld	r24, Z
    1c5a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH); // display hyphen
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	88 81       	ld	r24, Y
    1c62:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		delay(DIGIT_DELAY);
    1c66:	60 91 1a 01 	lds	r22, 0x011A
    1c6a:	70 91 1b 01 	lds	r23, 0x011B
    1c6e:	07 2e       	mov	r0, r23
    1c70:	00 0c       	add	r0, r0
    1c72:	88 0b       	sbc	r24, r24
    1c74:	99 0b       	sbc	r25, r25
    1c76:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
		BlankDisplay(0);
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
		
		//this needs to happen, cpu will hang
		//without it.
		//PPS_COUNT = 0;
		SECONDS_LAST = RTC.getSeconds();
    1c82:	88 e7       	ldi	r24, 0x78	; 120
    1c84:	91 e0       	ldi	r25, 0x01	; 1
    1c86:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6DS133710getSecondsEv>
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	90 93 89 01 	sts	0x0189, r25
    1c90:	80 93 88 01 	sts	0x0188, r24
		attachInterrupt(0, Interrupt_Update, RISING);
    1c94:	43 e0       	ldi	r20, 0x03	; 3
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	6d e0       	ldi	r22, 0x0D	; 13
    1c9a:	73 e0       	ldi	r23, 0x03	; 3
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <attachInterrupt>
	}
	//get current clock settings.
	clockSettings();
    1ca2:	0e 94 3b 03 	call	0x676	; 0x676 <_Z13clockSettingsv>
}
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	bf 90       	pop	r11
    1cb8:	af 90       	pop	r10
    1cba:	9f 90       	pop	r9
    1cbc:	8f 90       	pop	r8
    1cbe:	7f 90       	pop	r7
    1cc0:	6f 90       	pop	r6
    1cc2:	5f 90       	pop	r5
    1cc4:	4f 90       	pop	r4
    1cc6:	3f 90       	pop	r3
    1cc8:	2f 90       	pop	r2
    1cca:	08 95       	ret

00001ccc <_Z4menuv>:
	//check for AM or PM
	ALARM_ARRAY[4] = EEPROM_ARRAY[4];
}

void menu()
{
    1ccc:	6f 92       	push	r6
    1cce:	7f 92       	push	r7
    1cd0:	8f 92       	push	r8
    1cd2:	9f 92       	push	r9
    1cd4:	af 92       	push	r10
    1cd6:	bf 92       	push	r11
    1cd8:	cf 92       	push	r12
    1cda:	df 92       	push	r13
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
						  0b00001000,//A = Set Alarm
					      0b00011100,//Degree symbol, Show temp?
						  0b01110010//Display time only when a butten is pressed?}
	*/
	bool set = false;
	int opt = 0;
    1ce8:	00 e0       	ldi	r16, 0x00	; 0
    1cea:	10 e0       	ldi	r17, 0x00	; 0
	do
	{
		digitalWrite(LATCH, LOW);
    1cec:	c4 e2       	ldi	r28, 0x24	; 36
    1cee:	d1 e0       	ldi	r29, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, MENU_ARRAY[opt]);
    1cf0:	0f 2e       	mov	r0, r31
    1cf2:	f2 e2       	ldi	r31, 0x22	; 34
    1cf4:	cf 2e       	mov	r12, r31
    1cf6:	f1 e0       	ldi	r31, 0x01	; 1
    1cf8:	df 2e       	mov	r13, r31
    1cfa:	f0 2d       	mov	r31, r0
    1cfc:	0f 2e       	mov	r0, r31
    1cfe:	f6 e2       	ldi	r31, 0x26	; 38
    1d00:	ef 2e       	mov	r14, r31
    1d02:	f1 e0       	ldi	r31, 0x01	; 1
    1d04:	ff 2e       	mov	r15, r31
    1d06:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    1d08:	0f 2e       	mov	r0, r31
    1d0a:	fa e2       	ldi	r31, 0x2A	; 42
    1d0c:	8f 2e       	mov	r8, r31
    1d0e:	f1 e0       	ldi	r31, 0x01	; 1
    1d10:	9f 2e       	mov	r9, r31
    1d12:	f0 2d       	mov	r31, r0
		{
			delay(debounce);
			opt++;
			if (opt>3)
			{
				opt=0;
    1d14:	61 2c       	mov	r6, r1
    1d16:	71 2c       	mov	r7, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[opt]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    1d18:	0f 2e       	mov	r0, r31
    1d1a:	f8 e2       	ldi	r31, 0x28	; 40
    1d1c:	af 2e       	mov	r10, r31
    1d1e:	f1 e0       	ldi	r31, 0x01	; 1
    1d20:	bf 2e       	mov	r11, r31
    1d22:	f0 2d       	mov	r31, r0
	*/
	bool set = false;
	int opt = 0;
	do
	{
		digitalWrite(LATCH, LOW);
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	88 81       	ld	r24, Y
    1d28:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, MENU_ARRAY[opt]);
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	e0 50       	subi	r30, 0x00	; 0
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	20 81       	ld	r18, Z
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	f6 01       	movw	r30, r12
    1d38:	60 81       	ld	r22, Z
    1d3a:	f7 01       	movw	r30, r14
    1d3c:	80 81       	ld	r24, Z
    1d3e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
		digitalWrite(LATCH, HIGH);
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	88 81       	ld	r24, Y
    1d46:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    1d4a:	f4 01       	movw	r30, r8
    1d4c:	80 81       	ld	r24, Z
    1d4e:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	21 f5       	brne	.+72     	; 0x1d9e <_Z4menuv+0xd2>
		{
			delay(debounce);
    1d56:	60 91 18 01 	lds	r22, 0x0118
    1d5a:	70 91 19 01 	lds	r23, 0x0119
    1d5e:	07 2e       	mov	r0, r23
    1d60:	00 0c       	add	r0, r0
    1d62:	88 0b       	sbc	r24, r24
    1d64:	99 0b       	sbc	r25, r25
    1d66:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			opt++;
    1d6a:	0f 5f       	subi	r16, 0xFF	; 255
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
			if (opt>3)
    1d6e:	04 30       	cpi	r16, 0x04	; 4
    1d70:	11 05       	cpc	r17, r1
    1d72:	14 f0       	brlt	.+4      	; 0x1d78 <_Z4menuv+0xac>
			{
				opt=0;
    1d74:	06 2d       	mov	r16, r6
    1d76:	17 2d       	mov	r17, r7
			}
			digitalWrite(LATCH, LOW);
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	88 81       	ld	r24, Y
    1d7c:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[opt]);
    1d80:	f8 01       	movw	r30, r16
    1d82:	ec 5f       	subi	r30, 0xFC	; 252
    1d84:	fe 4f       	sbci	r31, 0xFE	; 254
    1d86:	20 81       	ld	r18, Z
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	f6 01       	movw	r30, r12
    1d8c:	60 81       	ld	r22, Z
    1d8e:	f7 01       	movw	r30, r14
    1d90:	80 81       	ld	r24, Z
    1d92:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <shiftOut>
			digitalWrite(LATCH, HIGH);
    1d96:	61 e0       	ldi	r22, 0x01	; 1
    1d98:	88 81       	ld	r24, Y
    1d9a:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    1d9e:	f5 01       	movw	r30, r10
    1da0:	80 81       	ld	r24, Z
    1da2:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	09 f0       	breq	.+2      	; 0x1dac <_Z4menuv+0xe0>
    1daa:	bc cf       	rjmp	.-136    	; 0x1d24 <_Z4menuv+0x58>
		{
			delay(debounce);
    1dac:	60 91 18 01 	lds	r22, 0x0118
    1db0:	70 91 19 01 	lds	r23, 0x0119
    1db4:	07 2e       	mov	r0, r23
    1db6:	00 0c       	add	r0, r0
    1db8:	88 0b       	sbc	r24, r24
    1dba:	99 0b       	sbc	r25, r25
    1dbc:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
			set=true;
		}
	}
	while (set!=true);
	delay(BTN_DELAY);
    1dc0:	60 91 1c 01 	lds	r22, 0x011C
    1dc4:	70 91 1d 01 	lds	r23, 0x011D
    1dc8:	07 2e       	mov	r0, r23
    1dca:	00 0c       	add	r0, r0
    1dcc:	88 0b       	sbc	r24, r24
    1dce:	99 0b       	sbc	r25, r25
    1dd0:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
	
	switch(opt)
    1dd4:	01 30       	cpi	r16, 0x01	; 1
    1dd6:	11 05       	cpc	r17, r1
    1dd8:	71 f0       	breq	.+28     	; 0x1df6 <_Z4menuv+0x12a>
    1dda:	1c f4       	brge	.+6      	; 0x1de2 <_Z4menuv+0x116>
    1ddc:	01 2b       	or	r16, r17
    1dde:	41 f0       	breq	.+16     	; 0x1df0 <_Z4menuv+0x124>
    1de0:	2e c0       	rjmp	.+92     	; 0x1e3e <_Z4menuv+0x172>
    1de2:	02 30       	cpi	r16, 0x02	; 2
    1de4:	11 05       	cpc	r17, r1
    1de6:	51 f0       	breq	.+20     	; 0x1dfc <_Z4menuv+0x130>
    1de8:	03 30       	cpi	r16, 0x03	; 3
    1dea:	11 05       	cpc	r17, r1
    1dec:	f1 f0       	breq	.+60     	; 0x1e2a <_Z4menuv+0x15e>
    1dee:	27 c0       	rjmp	.+78     	; 0x1e3e <_Z4menuv+0x172>
	{
		case 0:
			setTime();
    1df0:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z7setTimev>
			break;
    1df4:	24 c0       	rjmp	.+72     	; 0x1e3e <_Z4menuv+0x172>
		case 1:
			setALARM();
    1df6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <_Z8setALARMv>
			break;
    1dfa:	21 c0       	rjmp	.+66     	; 0x1e3e <_Z4menuv+0x172>
		case 2:
			if(tempDisplay == false){tempDisplay = true; PPS_TIMER = 20;}
    1dfc:	80 91 95 01 	lds	r24, 0x0195
    1e00:	81 11       	cpse	r24, r1
    1e02:	0a c0       	rjmp	.+20     	; 0x1e18 <_Z4menuv+0x14c>
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	80 93 95 01 	sts	0x0195, r24
    1e0a:	84 e1       	ldi	r24, 0x14	; 20
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	90 93 1f 01 	sts	0x011F, r25
    1e12:	80 93 1e 01 	sts	0x011E, r24
    1e16:	13 c0       	rjmp	.+38     	; 0x1e3e <_Z4menuv+0x172>
			else{tempDisplay = false; PPS_TIMER = 15;}
    1e18:	10 92 95 01 	sts	0x0195, r1
    1e1c:	8f e0       	ldi	r24, 0x0F	; 15
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	90 93 1f 01 	sts	0x011F, r25
    1e24:	80 93 1e 01 	sts	0x011E, r24
    1e28:	0a c0       	rjmp	.+20     	; 0x1e3e <_Z4menuv+0x172>
			break;
		case 3:
			if(BTN_TIME == false){BTN_TIME = true;}
    1e2a:	80 91 87 01 	lds	r24, 0x0187
    1e2e:	81 11       	cpse	r24, r1
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <_Z4menuv+0x16e>
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	80 93 87 01 	sts	0x0187, r24
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <_Z4menuv+0x172>
			else{BTN_TIME = false;}
    1e3a:	10 92 87 01 	sts	0x0187, r1
			break;
		default:
			break;	
	}
	set = false;
	BlankDisplay(0);
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
	delay(BTN_DELAY);
    1e46:	60 91 1c 01 	lds	r22, 0x011C
    1e4a:	70 91 1d 01 	lds	r23, 0x011D
    1e4e:	07 2e       	mov	r0, r23
    1e50:	00 0c       	add	r0, r0
    1e52:	88 0b       	sbc	r24, r24
    1e54:	99 0b       	sbc	r25, r25
    1e56:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
}
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	ff 90       	pop	r15
    1e64:	ef 90       	pop	r14
    1e66:	df 90       	pop	r13
    1e68:	cf 90       	pop	r12
    1e6a:	bf 90       	pop	r11
    1e6c:	af 90       	pop	r10
    1e6e:	9f 90       	pop	r9
    1e70:	8f 90       	pop	r8
    1e72:	7f 90       	pop	r7
    1e74:	6f 90       	pop	r6
    1e76:	08 95       	ret

00001e78 <loop>:
	//clear display at start up.
	BlankDisplay(1);
}

void loop()
{
    1e78:	cf 93       	push	r28
	RTC.readTime();
    1e7a:	88 e7       	ldi	r24, 0x78	; 120
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN6DS13378readTimeEv>
	if(RTC.getSeconds() < PPS_TIMER){SECONDS_LAST = 0;}
    1e82:	88 e7       	ldi	r24, 0x78	; 120
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6DS133710getSecondsEv>
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	20 91 1e 01 	lds	r18, 0x011E
    1e90:	30 91 1f 01 	lds	r19, 0x011F
    1e94:	82 17       	cp	r24, r18
    1e96:	93 07       	cpc	r25, r19
    1e98:	24 f4       	brge	.+8      	; 0x1ea2 <loop+0x2a>
    1e9a:	10 92 89 01 	sts	0x0189, r1
    1e9e:	10 92 88 01 	sts	0x0188, r1
	
	//checking if the alarm has been
	//triggered.
	int HR = RTC.getHours();
    1ea2:	88 e7       	ldi	r24, 0x78	; 120
    1ea4:	91 e0       	ldi	r25, 0x01	; 1
    1ea6:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN6DS13378getHoursEv>
    1eaa:	c8 2f       	mov	r28, r24
	int MIN = RTC.getMinutes();
    1eac:	88 e7       	ldi	r24, 0x78	; 120
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN6DS133710getMinutesEv>
    1eb4:	68 2f       	mov	r22, r24
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
	convertTime(HR);
	
	if(checkAlarm(HR,MIN) == 1)
    1eb8:	8c 2f       	mov	r24, r28
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 2b 04 	call	0x856	; 0x856 <_Z10checkAlarmii>
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	11 f4       	brne	.+4      	; 0x1ec8 <loop+0x50>
	{
		soundAlarm();
    1ec4:	0e 94 13 0a 	call	0x1426	; 0x1426 <_Z10soundAlarmv>
	}
	
	if (digitalRead(Select_BTN)==HIGH)
    1ec8:	80 91 2a 01 	lds	r24, 0x012A
    1ecc:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	11 f4       	brne	.+4      	; 0x1ed8 <loop+0x60>
	{
		//setTime();
		menu();
    1ed4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_Z4menuv>
	}
	
	if(BTN_TIME == true)
    1ed8:	80 91 87 01 	lds	r24, 0x0187
    1edc:	88 23       	and	r24, r24
    1ede:	49 f0       	breq	.+18     	; 0x1ef2 <loop+0x7a>
	{
		if(digitalRead(Next_BTN) == HIGH){
    1ee0:	80 91 28 01 	lds	r24, 0x0128
    1ee4:	0e 94 c0 19 	call	0x3380	; 0x3380 <digitalRead>
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	01 f5       	brne	.+64     	; 0x1f2c <loop+0xb4>
			Update_Display();
    1eec:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_Z14Update_Displayv>
    1ef0:	1d c0       	rjmp	.+58     	; 0x1f2c <loop+0xb4>
		}
	}
	else
	{	
		//update the RTC buffers
		if(RTC.getSeconds() - SECONDS_LAST >= PPS_TIMER)
    1ef2:	88 e7       	ldi	r24, 0x78	; 120
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6DS133710getSecondsEv>
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	20 91 88 01 	lds	r18, 0x0188
    1f00:	30 91 89 01 	lds	r19, 0x0189
    1f04:	82 1b       	sub	r24, r18
    1f06:	93 0b       	sbc	r25, r19
    1f08:	20 91 1e 01 	lds	r18, 0x011E
    1f0c:	30 91 1f 01 	lds	r19, 0x011F
    1f10:	82 17       	cp	r24, r18
    1f12:	93 07       	cpc	r25, r19
    1f14:	5c f0       	brlt	.+22     	; 0x1f2c <loop+0xb4>
		{
			//Internal_Update();
		
			//Update the VFD display
			Update_Display();
    1f16:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_Z14Update_Displayv>
			SECONDS_LAST = RTC.getSeconds();
    1f1a:	88 e7       	ldi	r24, 0x78	; 120
    1f1c:	91 e0       	ldi	r25, 0x01	; 1
    1f1e:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6DS133710getSecondsEv>
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	90 93 89 01 	sts	0x0189, r25
    1f28:	80 93 88 01 	sts	0x0188, r24
		}
	}
	if(UP_TIME >= 59)
    1f2c:	80 91 81 01 	lds	r24, 0x0181
    1f30:	90 91 82 01 	lds	r25, 0x0182
    1f34:	a0 91 83 01 	lds	r26, 0x0183
    1f38:	b0 91 84 01 	lds	r27, 0x0184
    1f3c:	8b 33       	cpi	r24, 0x3B	; 59
    1f3e:	91 05       	cpc	r25, r1
    1f40:	a1 05       	cpc	r26, r1
    1f42:	b1 05       	cpc	r27, r1
    1f44:	c4 f0       	brlt	.+48     	; 0x1f76 <loop+0xfe>
	{
		UP_TIME++;
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	6f 5f       	subi	r22, 0xFF	; 255
    1f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f50:	9f 4f       	sbci	r25, 0xFF	; 255
    1f52:	60 93 81 01 	sts	0x0181, r22
    1f56:	70 93 82 01 	sts	0x0182, r23
    1f5a:	80 93 83 01 	sts	0x0183, r24
    1f5e:	90 93 84 01 	sts	0x0184, r25
		EEPROMWritelong(UP_TIME);
    1f62:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z15EEPROMWritelongl>
		UP_TIME = 0;
    1f66:	10 92 81 01 	sts	0x0181, r1
    1f6a:	10 92 82 01 	sts	0x0182, r1
    1f6e:	10 92 83 01 	sts	0x0183, r1
    1f72:	10 92 84 01 	sts	0x0184, r1
	}
}
    1f76:	cf 91       	pop	r28
    1f78:	08 95       	ret

00001f7a <_GLOBAL__sub_I_INTERUPT_0>:
int alarm_Silence = 0;
int long UP_TIME = 0;			//used for battery testing.
int MINUTS_LAST = 0;

//RTC_DS1307 rtc;             //Creating a new RTC object.
DS1337 RTC = DS1337();
    1f7a:	88 e7       	ldi	r24, 0x78	; 120
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	0e 94 97 01 	call	0x32e	; 0x32e <_ZN6DS1337C1Ev>
    1f82:	08 95       	ret

00001f84 <_Z9i2c_writehPhh>:
 * \param buf A pointer to a buffer from which to read the data. 
 * \param num The number of bytes to write. 
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t i2c_write(uint8_t addr, uint8_t* buf, uint8_t num) {
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	7b 01       	movw	r14, r22
    1f92:	14 2f       	mov	r17, r20
  Wire.beginTransmission(addr);
    1f94:	68 2f       	mov	r22, r24
    1f96:	82 eb       	ldi	r24, 0xB2	; 178
    1f98:	92 e0       	ldi	r25, 0x02	; 2
    1f9a:	0e 94 05 18 	call	0x300a	; 0x300a <_ZN7TwoWire17beginTransmissionEh>
  for (uint8_t i = 0; i < num; i++) {
    1f9e:	11 23       	and	r17, r17
    1fa0:	81 f0       	breq	.+32     	; 0x1fc2 <_Z9i2c_writehPhh+0x3e>
    1fa2:	e7 01       	movw	r28, r14
    1fa4:	11 50       	subi	r17, 0x01	; 1
    1fa6:	01 2f       	mov	r16, r17
    1fa8:	10 e0       	ldi	r17, 0x00	; 0
    1faa:	0f 5f       	subi	r16, 0xFF	; 255
    1fac:	1f 4f       	sbci	r17, 0xFF	; 255
    1fae:	0e 0d       	add	r16, r14
    1fb0:	1f 1d       	adc	r17, r15
    Wire.write(buf[i]);
    1fb2:	69 91       	ld	r22, Y+
    1fb4:	82 eb       	ldi	r24, 0xB2	; 178
    1fb6:	92 e0       	ldi	r25, 0x02	; 2
    1fb8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN7TwoWire5writeEh>
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t i2c_write(uint8_t addr, uint8_t* buf, uint8_t num) {
  Wire.beginTransmission(addr);
  for (uint8_t i = 0; i < num; i++) {
    1fbc:	c0 17       	cp	r28, r16
    1fbe:	d1 07       	cpc	r29, r17
    1fc0:	c1 f7       	brne	.-16     	; 0x1fb2 <_Z9i2c_writehPhh+0x2e>
    Wire.write(buf[i]);
  }
  return Wire.endTransmission();
    1fc2:	82 eb       	ldi	r24, 0xB2	; 178
    1fc4:	92 e0       	ldi	r25, 0x02	; 2
    1fc6:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN7TwoWire15endTransmissionEv>
}
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	ff 90       	pop	r15
    1fd4:	ef 90       	pop	r14
    1fd6:	08 95       	ret

00001fd8 <_Z18ds1337_set_controlh>:
 *
 * \param ctrl The value to set. 
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t ds1337_set_control(uint8_t ctrl) {
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <_Z18ds1337_set_controlh+0x6>
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
   uint8_t buf[2];
   buf[0] = DS1337_REG_CONTROL;
    1fe2:	9e e0       	ldi	r25, 0x0E	; 14
    1fe4:	99 83       	std	Y+1, r25	; 0x01
   buf[1] = ctrl;
    1fe6:	8a 83       	std	Y+2, r24	; 0x02
   return i2c_write(DS1337_ADDR, buf, 2);
    1fe8:	42 e0       	ldi	r20, 0x02	; 2
    1fea:	be 01       	movw	r22, r28
    1fec:	6f 5f       	subi	r22, 0xFF	; 255
    1fee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff0:	88 e6       	ldi	r24, 0x68	; 104
    1ff2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <_Z9i2c_writehPhh>
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	08 95       	ret

00002000 <_Z25ds1337_clear_control_bitsh>:
 * \param mask A mask specifying which bits to clear. (High bits will be cleared.) 
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t ds1337_clear_control_bits(uint8_t mask) {
	return ds1337_set_control(~mask);
    2000:	80 95       	com	r24
    2002:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_Z18ds1337_set_controlh>
}
    2006:	08 95       	ret

00002008 <_Z4Initv>:


void Interrupt_Update(){UP_TIME++;} //This is just to attach an interrupt

void Init()
{
    2008:	cf 93       	push	r28
    200a:	df 93       	push	r29
    200c:	00 d0       	rcall	.+0      	; 0x200e <_Z4Initv+0x6>
    200e:	00 d0       	rcall	.+0      	; 0x2010 <_Z4Initv+0x8>
    2010:	00 d0       	rcall	.+0      	; 0x2012 <_Z4Initv+0xa>
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
	//This is where we initialize everything.
	///////////////////////////////////////////////////////////
	
	//Coms are not enabled on this clock.
	
	Wire.begin();
    2016:	82 eb       	ldi	r24, 0xB2	; 178
    2018:	92 e0       	ldi	r25, 0x02	; 2
    201a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN7TwoWire5beginEv>
	//pullups on the SDA(), and SCL() pins.
	
	SCL_PORT |= _BV(SCL_BIT);   // enable pull up on TWI clock line
	SDA_PORT |= _BV(SDA_BIT);   // enable pull up on TWI data line
	#else
	SCL_PORT &= _BV(SCL_BIT);   // disable pull up on TWI clock line
    201e:	88 b1       	in	r24, 0x08	; 8
    2020:	80 72       	andi	r24, 0x20	; 32
    2022:	88 b9       	out	0x08, r24	; 8
	SDA_PORT &= _BV(SDA_BIT);   // disable pull up on TWI data line
    2024:	88 b1       	in	r24, 0x08	; 8
    2026:	80 71       	andi	r24, 0x10	; 16
    2028:	88 b9       	out	0x08, r24	; 8
	#endif
	
	RTC.start(); //starts the DS1337
    202a:	88 e7       	ldi	r24, 0x78	; 120
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN6DS13375startEv>
	///////////////////////////////////////////////////////////
	//Pin Functions
	///////////////////////////////////////////////////////////

	//pinMode(Freq_Adj, INPUT);
	pinMode(INTERUPT_0, INPUT);
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	80 91 2c 01 	lds	r24, 0x012C
    2038:	0e 94 50 19 	call	0x32a0	; 0x32a0 <pinMode>
	pinMode(DATA_PIN, OUTPUT);
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	80 91 26 01 	lds	r24, 0x0126
    2042:	0e 94 50 19 	call	0x32a0	; 0x32a0 <pinMode>
	pinMode(CLOCK, OUTPUT);
    2046:	61 e0       	ldi	r22, 0x01	; 1
    2048:	80 91 22 01 	lds	r24, 0x0122
    204c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <pinMode>
	pinMode(LATCH, OUTPUT);
    2050:	61 e0       	ldi	r22, 0x01	; 1
    2052:	80 91 24 01 	lds	r24, 0x0124
    2056:	0e 94 50 19 	call	0x32a0	; 0x32a0 <pinMode>
	pinMode(Select_BTN, INPUT);
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	80 91 2a 01 	lds	r24, 0x012A
    2060:	0e 94 50 19 	call	0x32a0	; 0x32a0 <pinMode>
	//digitalWrite(Select_BTN, LOW);
	pinMode(Next_BTN, INPUT);
    2064:	60 e0       	ldi	r22, 0x00	; 0
    2066:	80 91 28 01 	lds	r24, 0x0128
    206a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <pinMode>
	//digitalWrite(Next_BTN, LOW);
	pinMode(LM35, INPUT);
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	80 91 20 01 	lds	r24, 0x0120
    2074:	0e 94 50 19 	call	0x32a0	; 0x32a0 <pinMode>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    2078:	8a e0       	ldi	r24, 0x0A	; 10
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0e 94 96 1c 	call	0x392c	; 0x392c <eeprom_read_byte>
	///////////////////////////////////////////////////////////
	//If the RTC is not currently set to the correct time set the time
	//based on the time used when compiling this firmware.
	///////////////////////////////////////////////////////////
	
	if(EEPROM.read(10) == 0){
    2080:	81 11       	cpse	r24, r1
    2082:	33 c0       	rjmp	.+102    	; 0x20ea <_Z4Initv+0xe2>
		if(!RTC.time_is_set())
    2084:	88 e7       	ldi	r24, 0x78	; 120
    2086:	91 e0       	ldi	r25, 0x01	; 1
    2088:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN6DS133711time_is_setEv>
    208c:	81 11       	cpse	r24, r1
    208e:	2d c0       	rjmp	.+90     	; 0x20ea <_Z4Initv+0xe2>
		{
			DateTime now = DateTime(F(__DATE__),F(__TIME__));
    2090:	4e e6       	ldi	r20, 0x6E	; 110
    2092:	52 e0       	ldi	r21, 0x02	; 2
    2094:	62 e6       	ldi	r22, 0x62	; 98
    2096:	72 e0       	ldi	r23, 0x02	; 2
    2098:	ce 01       	movw	r24, r28
    209a:	01 96       	adiw	r24, 0x01	; 1
    209c:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
			Serial.print(":");
			Serial.print(now.second(),DEC);
			Serial.print("\r\n");
			*/
			//setting to build header time.
			RTC.setSeconds(now.second());
    20a0:	6e 81       	ldd	r22, Y+6	; 0x06
    20a2:	88 e7       	ldi	r24, 0x78	; 120
    20a4:	91 e0       	ldi	r25, 0x01	; 1
    20a6:	0e 94 c6 01 	call	0x38c	; 0x38c <_ZN6DS133710setSecondsEh>
			RTC.setMinutes(now.minute());
    20aa:	6d 81       	ldd	r22, Y+5	; 0x05
    20ac:	88 e7       	ldi	r24, 0x78	; 120
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6DS133710setMinutesEh>
			RTC.setHours(now.hour());
    20b4:	6c 81       	ldd	r22, Y+4	; 0x04
    20b6:	88 e7       	ldi	r24, 0x78	; 120
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN6DS13378setHoursEh>
			RTC.setDays(now.day());
    20be:	6b 81       	ldd	r22, Y+3	; 0x03
    20c0:	88 e7       	ldi	r24, 0x78	; 120
    20c2:	91 e0       	ldi	r25, 0x01	; 1
    20c4:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN6DS13377setDaysEh>
			RTC.setMonths(now.month());
    20c8:	6a 81       	ldd	r22, Y+2	; 0x02
    20ca:	88 e7       	ldi	r24, 0x78	; 120
    20cc:	91 e0       	ldi	r25, 0x01	; 1
    20ce:	0e 94 1a 02 	call	0x434	; 0x434 <_ZN6DS13379setMonthsEh>
    DateTime (uint16_t year, uint8_t month, uint8_t day,
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    20d2:	69 81       	ldd	r22, Y+1	; 0x01
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	60 53       	subi	r22, 0x30	; 48
    20d8:	78 4f       	sbci	r23, 0xF8	; 248
			RTC.setYears(now.year());
    20da:	88 e7       	ldi	r24, 0x78	; 120
    20dc:	91 e0       	ldi	r25, 0x01	; 1
    20de:	0e 94 2f 02 	call	0x45e	; 0x45e <_ZN6DS13378setYearsEj>
			RTC.writeTime();
    20e2:	88 e7       	ldi	r24, 0x78	; 120
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN6DS13379writeTimeEv>
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	8a e0       	ldi	r24, 0x0A	; 10
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	0e 94 9e 1c 	call	0x393c	; 0x393c <eeprom_write_byte>
		}
	}
	
	EEPROM.write(10,1);
	
	delay(10);
    20f4:	6a e0       	ldi	r22, 0x0A	; 10
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
	
	if(!RTC.time_is_set())
    2100:	88 e7       	ldi	r24, 0x78	; 120
    2102:	91 e0       	ldi	r25, 0x01	; 1
    2104:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN6DS133711time_is_setEv>
    2108:	81 11       	cpse	r24, r1
    210a:	07 c0       	rjmp	.+14     	; 0x211a <_Z4Initv+0x112>
	{
		Serial.print(F("Time did not set correctly, check wiring.\r\n"));
    210c:	66 e3       	ldi	r22, 0x36	; 54
    210e:	72 e0       	ldi	r23, 0x02	; 2
    2110:	86 e9       	ldi	r24, 0x96	; 150
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	0e 94 b7 12 	call	0x256e	; 0x256e <_ZN5Print5printEPK19__FlashStringHelper>
    2118:	06 c0       	rjmp	.+12     	; 0x2126 <_Z4Initv+0x11e>
	}
	else
	{
		Serial.print(F("Time should be set.\r\n"));
    211a:	60 e2       	ldi	r22, 0x20	; 32
    211c:	72 e0       	ldi	r23, 0x02	; 2
    211e:	86 e9       	ldi	r24, 0x96	; 150
    2120:	91 e0       	ldi	r25, 0x01	; 1
    2122:	0e 94 b7 12 	call	0x256e	; 0x256e <_ZN5Print5printEPK19__FlashStringHelper>
	//We will be using this as our interrupt to update the time.

	//INTA alarm 1 will be set to 500ms cycles to set the delay
	//between display digits.
	
	ds1337_clear_control_bits(DS1337_SQW_MASK);
    2126:	8c e0       	ldi	r24, 0x0C	; 12
    2128:	0e 94 00 10 	call	0x2000	; 0x2000 <_Z25ds1337_clear_control_bitsh>
	ds1337_set_control(DS1337_SQW_1HZ);
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_Z18ds1337_set_controlh>
	delay(10);
    2132:	6a e0       	ldi	r22, 0x0A	; 10
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 9e 18 	call	0x313c	; 0x313c <delay>
	///////////////////////////////////////////////////////////
	
	// Setting up sleep mode.
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    213e:	83 b7       	in	r24, 0x33	; 51
    2140:	81 7f       	andi	r24, 0xF1	; 241
    2142:	84 60       	ori	r24, 0x04	; 4
    2144:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    2146:	83 b7       	in	r24, 0x33	; 51
    2148:	81 60       	ori	r24, 0x01	; 1
    214a:	83 bf       	out	0x33, r24	; 51
	
	//allow interrupts
	sei();
    214c:	78 94       	sei
	
	//Interrupts
	attachInterrupt(0, Interrupt_Update, RISING);
    214e:	43 e0       	ldi	r20, 0x03	; 3
    2150:	50 e0       	ldi	r21, 0x00	; 0
    2152:	6d e0       	ldi	r22, 0x0D	; 13
    2154:	73 e0       	ldi	r23, 0x03	; 3
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <attachInterrupt>
	
	//load clock settings from eeprom.
	clockSettings();
    215c:	0e 94 3b 03 	call	0x676	; 0x676 <_Z13clockSettingsv>
}
    2160:	26 96       	adiw	r28, 0x06	; 6
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	08 95       	ret

00002172 <setup>:

void setup()
{
		
	//Initialize the clock
	Init();
    2172:	0e 94 04 10 	call	0x2008	; 0x2008 <_Z4Initv>
	
	//clear display at start up.
	BlankDisplay(1);
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z12BlankDisplayi>
    217e:	08 95       	ret

00002180 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2180:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2182:	91 8d       	ldd	r25, Z+25	; 0x19
    2184:	22 8d       	ldd	r18, Z+26	; 0x1a
    2186:	89 2f       	mov	r24, r25
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	80 5c       	subi	r24, 0xC0	; 192
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	82 1b       	sub	r24, r18
    2190:	91 09       	sbc	r25, r1
}
    2192:	8f 73       	andi	r24, 0x3F	; 63
    2194:	99 27       	eor	r25, r25
    2196:	08 95       	ret

00002198 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2198:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    219a:	91 8d       	ldd	r25, Z+25	; 0x19
    219c:	82 8d       	ldd	r24, Z+26	; 0x1a
    219e:	98 17       	cp	r25, r24
    21a0:	31 f0       	breq	.+12     	; 0x21ae <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    21a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    21a4:	e8 0f       	add	r30, r24
    21a6:	f1 1d       	adc	r31, r1
    21a8:	85 8d       	ldd	r24, Z+29	; 0x1d
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    21ae:	8f ef       	ldi	r24, 0xFF	; 255
    21b0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    21b2:	08 95       	ret

000021b4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    21b4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    21b6:	91 8d       	ldd	r25, Z+25	; 0x19
    21b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    21ba:	98 17       	cp	r25, r24
    21bc:	61 f0       	breq	.+24     	; 0x21d6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    21be:	82 8d       	ldd	r24, Z+26	; 0x1a
    21c0:	df 01       	movw	r26, r30
    21c2:	a8 0f       	add	r26, r24
    21c4:	b1 1d       	adc	r27, r1
    21c6:	5d 96       	adiw	r26, 0x1d	; 29
    21c8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    21ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    21cc:	9f 5f       	subi	r25, 0xFF	; 255
    21ce:	9f 73       	andi	r25, 0x3F	; 63
    21d0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    21d6:	8f ef       	ldi	r24, 0xFF	; 255
    21d8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    21da:	08 95       	ret

000021dc <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    21dc:	85 ef       	ldi	r24, 0xF5	; 245
    21de:	91 e1       	ldi	r25, 0x11	; 17
    21e0:	89 2b       	or	r24, r25
    21e2:	49 f0       	breq	.+18     	; 0x21f6 <_Z14serialEventRunv+0x1a>
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	89 2b       	or	r24, r25
    21ea:	29 f0       	breq	.+10     	; 0x21f6 <_Z14serialEventRunv+0x1a>
    21ec:	0e 94 f5 11 	call	0x23ea	; 0x23ea <_Z17Serial0_availablev>
    21f0:	81 11       	cpse	r24, r1
    21f2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    21f6:	08 95       	ret

000021f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    21f8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    21fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    21fc:	df 01       	movw	r26, r30
    21fe:	a8 0f       	add	r26, r24
    2200:	b1 1d       	adc	r27, r1
    2202:	a3 5a       	subi	r26, 0xA3	; 163
    2204:	bf 4f       	sbci	r27, 0xFF	; 255
    2206:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2208:	24 8d       	ldd	r18, Z+28	; 0x1c
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	2f 5f       	subi	r18, 0xFF	; 255
    220e:	3f 4f       	sbci	r19, 0xFF	; 255
    2210:	2f 73       	andi	r18, 0x3F	; 63
    2212:	30 78       	andi	r19, 0x80	; 128
    2214:	33 23       	and	r19, r19
    2216:	34 f4       	brge	.+12     	; 0x2224 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    2218:	21 50       	subi	r18, 0x01	; 1
    221a:	31 09       	sbc	r19, r1
    221c:	20 6c       	ori	r18, 0xC0	; 192
    221e:	3f 6f       	ori	r19, 0xFF	; 255
    2220:	2f 5f       	subi	r18, 0xFF	; 255
    2222:	3f 4f       	sbci	r19, 0xFF	; 255
    2224:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    2226:	a6 89       	ldd	r26, Z+22	; 0x16
    2228:	b7 89       	ldd	r27, Z+23	; 0x17
    222a:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    222c:	a0 89       	ldd	r26, Z+16	; 0x10
    222e:	b1 89       	ldd	r27, Z+17	; 0x11
    2230:	8c 91       	ld	r24, X
    2232:	80 64       	ori	r24, 0x40	; 64
    2234:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2236:	93 8d       	ldd	r25, Z+27	; 0x1b
    2238:	84 8d       	ldd	r24, Z+28	; 0x1c
    223a:	98 13       	cpse	r25, r24
    223c:	06 c0       	rjmp	.+12     	; 0x224a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    223e:	02 88       	ldd	r0, Z+18	; 0x12
    2240:	f3 89       	ldd	r31, Z+19	; 0x13
    2242:	e0 2d       	mov	r30, r0
    2244:	80 81       	ld	r24, Z
    2246:	8f 7d       	andi	r24, 0xDF	; 223
    2248:	80 83       	st	Z, r24
    224a:	08 95       	ret

0000224c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2252:	88 8d       	ldd	r24, Y+24	; 0x18
    2254:	81 11       	cpse	r24, r1
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <_ZN14HardwareSerial5flushEv+0x2a>
    2258:	18 c0       	rjmp	.+48     	; 0x228a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	07 fc       	sbrc	r0, 7
    225e:	0d c0       	rjmp	.+26     	; 0x227a <_ZN14HardwareSerial5flushEv+0x2e>
    2260:	90 81       	ld	r25, Z
    2262:	95 ff       	sbrs	r25, 5
    2264:	0a c0       	rjmp	.+20     	; 0x227a <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2266:	a8 89       	ldd	r26, Y+16	; 0x10
    2268:	b9 89       	ldd	r27, Y+17	; 0x11
    226a:	8c 91       	ld	r24, X
    226c:	85 ff       	sbrs	r24, 5
    226e:	05 c0       	rjmp	.+10     	; 0x227a <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
    2270:	ce 01       	movw	r24, r28
    2272:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2276:	ea 89       	ldd	r30, Y+18	; 0x12
    2278:	fb 89       	ldd	r31, Y+19	; 0x13
    227a:	90 81       	ld	r25, Z
    227c:	95 fd       	sbrc	r25, 5
    227e:	ed cf       	rjmp	.-38     	; 0x225a <_ZN14HardwareSerial5flushEv+0xe>
    2280:	a8 89       	ldd	r26, Y+16	; 0x10
    2282:	b9 89       	ldd	r27, Y+17	; 0x11
    2284:	8c 91       	ld	r24, X
    2286:	86 ff       	sbrs	r24, 6
    2288:	e8 cf       	rjmp	.-48     	; 0x225a <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	08 95       	ret

00002290 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	fc 01       	movw	r30, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    229a:	93 8d       	ldd	r25, Z+27	; 0x1b
    229c:	84 8d       	ldd	r24, Z+28	; 0x1c
    229e:	98 13       	cpse	r25, r24
    22a0:	24 c0       	rjmp	.+72     	; 0x22ea <_ZN14HardwareSerial5writeEh+0x5a>
    22a2:	a0 89       	ldd	r26, Z+16	; 0x10
    22a4:	b1 89       	ldd	r27, Z+17	; 0x11
    22a6:	8c 91       	ld	r24, X
    22a8:	85 fd       	sbrc	r24, 5
    22aa:	31 c0       	rjmp	.+98     	; 0x230e <_ZN14HardwareSerial5writeEh+0x7e>
    22ac:	1e c0       	rjmp	.+60     	; 0x22ea <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	07 fc       	sbrc	r0, 7
    22b2:	08 c0       	rjmp	.+16     	; 0x22c4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    22b4:	e8 89       	ldd	r30, Y+16	; 0x10
    22b6:	f9 89       	ldd	r31, Y+17	; 0x11
    22b8:	80 81       	ld	r24, Z
    22ba:	85 ff       	sbrs	r24, 5
    22bc:	03 c0       	rjmp	.+6      	; 0x22c4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    22be:	ce 01       	movw	r24, r28
    22c0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    22c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c6:	09 17       	cp	r16, r25
    22c8:	91 f3       	breq	.-28     	; 0x22ae <_ZN14HardwareSerial5writeEh+0x1e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    22ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22cc:	fe 01       	movw	r30, r28
    22ce:	e8 0f       	add	r30, r24
    22d0:	f1 1d       	adc	r31, r1
    22d2:	e3 5a       	subi	r30, 0xA3	; 163
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    22d8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    22da:	ea 89       	ldd	r30, Y+18	; 0x12
    22dc:	fb 89       	ldd	r31, Y+19	; 0x13
    22de:	80 81       	ld	r24, Z
    22e0:	80 62       	ori	r24, 0x20	; 32
    22e2:	80 83       	st	Z, r24
  _written = true;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
    22e8:	1b c0       	rjmp	.+54     	; 0x2320 <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    22ea:	23 8d       	ldd	r18, Z+27	; 0x1b
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	2f 5f       	subi	r18, 0xFF	; 255
    22f0:	3f 4f       	sbci	r19, 0xFF	; 255
    22f2:	2f 73       	andi	r18, 0x3F	; 63
    22f4:	30 78       	andi	r19, 0x80	; 128
    22f6:	33 23       	and	r19, r19
    22f8:	34 f4       	brge	.+12     	; 0x2306 <_ZN14HardwareSerial5writeEh+0x76>
    22fa:	21 50       	subi	r18, 0x01	; 1
    22fc:	31 09       	sbc	r19, r1
    22fe:	20 6c       	ori	r18, 0xC0	; 192
    2300:	3f 6f       	ori	r19, 0xFF	; 255
    2302:	2f 5f       	subi	r18, 0xFF	; 255
    2304:	3f 4f       	sbci	r19, 0xFF	; 255
    2306:	16 2f       	mov	r17, r22
    2308:	ef 01       	movw	r28, r30
    230a:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    230c:	db cf       	rjmp	.-74     	; 0x22c4 <_ZN14HardwareSerial5writeEh+0x34>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    230e:	a6 89       	ldd	r26, Z+22	; 0x16
    2310:	b7 89       	ldd	r27, Z+23	; 0x17
    2312:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    2314:	00 88       	ldd	r0, Z+16	; 0x10
    2316:	f1 89       	ldd	r31, Z+17	; 0x11
    2318:	e0 2d       	mov	r30, r0
    231a:	80 81       	ld	r24, Z
    231c:	80 64       	ori	r24, 0x40	; 64
    231e:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	1f 91       	pop	r17
    232a:	0f 91       	pop	r16
    232c:	08 95       	ret

0000232e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    232e:	1f 92       	push	r1
    2330:	0f 92       	push	r0
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	0f 92       	push	r0
    2336:	11 24       	eor	r1, r1
    2338:	2f 93       	push	r18
    233a:	8f 93       	push	r24
    233c:	9f 93       	push	r25
    233e:	af 93       	push	r26
    2340:	bf 93       	push	r27
    2342:	ef 93       	push	r30
    2344:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2346:	e0 91 a6 01 	lds	r30, 0x01A6
    234a:	f0 91 a7 01 	lds	r31, 0x01A7
    234e:	80 81       	ld	r24, Z
    2350:	82 fd       	sbrc	r24, 2
    2352:	14 c0       	rjmp	.+40     	; 0x237c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2354:	e6 e9       	ldi	r30, 0x96	; 150
    2356:	f1 e0       	ldi	r31, 0x01	; 1
    2358:	a6 89       	ldd	r26, Z+22	; 0x16
    235a:	b7 89       	ldd	r27, Z+23	; 0x17
    235c:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    235e:	81 8d       	ldd	r24, Z+25	; 0x19
    2360:	8f 5f       	subi	r24, 0xFF	; 255
    2362:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2364:	92 8d       	ldd	r25, Z+26	; 0x1a
    2366:	89 17       	cp	r24, r25
    2368:	71 f0       	breq	.+28     	; 0x2386 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    236a:	df 01       	movw	r26, r30
    236c:	e1 8d       	ldd	r30, Z+25	; 0x19
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	ea 56       	subi	r30, 0x6A	; 106
    2372:	fe 4f       	sbci	r31, 0xFE	; 254
    2374:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    2376:	59 96       	adiw	r26, 0x19	; 25
    2378:	8c 93       	st	X, r24
    237a:	05 c0       	rjmp	.+10     	; 0x2386 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    237c:	e0 91 ac 01 	lds	r30, 0x01AC
    2380:	f0 91 ad 01 	lds	r31, 0x01AD
    2384:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2386:	ff 91       	pop	r31
    2388:	ef 91       	pop	r30
    238a:	bf 91       	pop	r27
    238c:	af 91       	pop	r26
    238e:	9f 91       	pop	r25
    2390:	8f 91       	pop	r24
    2392:	2f 91       	pop	r18
    2394:	0f 90       	pop	r0
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	0f 90       	pop	r0
    239a:	1f 90       	pop	r1
    239c:	18 95       	reti

0000239e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    239e:	1f 92       	push	r1
    23a0:	0f 92       	push	r0
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	0f 92       	push	r0
    23a6:	11 24       	eor	r1, r1
    23a8:	2f 93       	push	r18
    23aa:	3f 93       	push	r19
    23ac:	4f 93       	push	r20
    23ae:	5f 93       	push	r21
    23b0:	6f 93       	push	r22
    23b2:	7f 93       	push	r23
    23b4:	8f 93       	push	r24
    23b6:	9f 93       	push	r25
    23b8:	af 93       	push	r26
    23ba:	bf 93       	push	r27
    23bc:	ef 93       	push	r30
    23be:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    23c0:	86 e9       	ldi	r24, 0x96	; 150
    23c2:	91 e0       	ldi	r25, 0x01	; 1
    23c4:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    23c8:	ff 91       	pop	r31
    23ca:	ef 91       	pop	r30
    23cc:	bf 91       	pop	r27
    23ce:	af 91       	pop	r26
    23d0:	9f 91       	pop	r25
    23d2:	8f 91       	pop	r24
    23d4:	7f 91       	pop	r23
    23d6:	6f 91       	pop	r22
    23d8:	5f 91       	pop	r21
    23da:	4f 91       	pop	r20
    23dc:	3f 91       	pop	r19
    23de:	2f 91       	pop	r18
    23e0:	0f 90       	pop	r0
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	0f 90       	pop	r0
    23e6:	1f 90       	pop	r1
    23e8:	18 95       	reti

000023ea <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    23ea:	86 e9       	ldi	r24, 0x96	; 150
    23ec:	91 e0       	ldi	r25, 0x01	; 1
    23ee:	0e 94 c0 10 	call	0x2180	; 0x2180 <_ZN14HardwareSerial9availableEv>
    23f2:	21 e0       	ldi	r18, 0x01	; 1
    23f4:	89 2b       	or	r24, r25
    23f6:	09 f4       	brne	.+2      	; 0x23fa <_Z17Serial0_availablev+0x10>
    23f8:	20 e0       	ldi	r18, 0x00	; 0
}
    23fa:	82 2f       	mov	r24, r18
    23fc:	08 95       	ret

000023fe <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    23fe:	e6 e9       	ldi	r30, 0x96	; 150
    2400:	f1 e0       	ldi	r31, 0x01	; 1
    2402:	13 82       	std	Z+3, r1	; 0x03
    2404:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2406:	88 ee       	ldi	r24, 0xE8	; 232
    2408:	93 e0       	ldi	r25, 0x03	; 3
    240a:	a0 e0       	ldi	r26, 0x00	; 0
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	84 83       	std	Z+4, r24	; 0x04
    2410:	95 83       	std	Z+5, r25	; 0x05
    2412:	a6 83       	std	Z+6, r26	; 0x06
    2414:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2416:	84 e3       	ldi	r24, 0x34	; 52
    2418:	91 e0       	ldi	r25, 0x01	; 1
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	80 83       	st	Z, r24
    241e:	85 ec       	ldi	r24, 0xC5	; 197
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	95 87       	std	Z+13, r25	; 0x0d
    2424:	84 87       	std	Z+12, r24	; 0x0c
    2426:	84 ec       	ldi	r24, 0xC4	; 196
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	97 87       	std	Z+15, r25	; 0x0f
    242c:	86 87       	std	Z+14, r24	; 0x0e
    242e:	80 ec       	ldi	r24, 0xC0	; 192
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	91 8b       	std	Z+17, r25	; 0x11
    2434:	80 8b       	std	Z+16, r24	; 0x10
    2436:	81 ec       	ldi	r24, 0xC1	; 193
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	93 8b       	std	Z+19, r25	; 0x13
    243c:	82 8b       	std	Z+18, r24	; 0x12
    243e:	82 ec       	ldi	r24, 0xC2	; 194
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	95 8b       	std	Z+21, r25	; 0x15
    2444:	84 8b       	std	Z+20, r24	; 0x14
    2446:	86 ec       	ldi	r24, 0xC6	; 198
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	97 8b       	std	Z+23, r25	; 0x17
    244c:	86 8b       	std	Z+22, r24	; 0x16
    244e:	11 8e       	std	Z+25, r1	; 0x19
    2450:	12 8e       	std	Z+26, r1	; 0x1a
    2452:	13 8e       	std	Z+27, r1	; 0x1b
    2454:	14 8e       	std	Z+28, r1	; 0x1c
    2456:	08 95       	ret

00002458 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2458:	08 95       	ret

0000245a <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    245a:	8f 92       	push	r8
    245c:	9f 92       	push	r9
    245e:	af 92       	push	r10
    2460:	bf 92       	push	r11
    2462:	cf 92       	push	r12
    2464:	df 92       	push	r13
    2466:	ef 92       	push	r14
    2468:	ff 92       	push	r15
    246a:	0f 93       	push	r16
    246c:	1f 93       	push	r17
    246e:	cf 93       	push	r28
    2470:	df 93       	push	r29
    2472:	5c 01       	movw	r10, r24
    2474:	7b 01       	movw	r14, r22
    2476:	4c 01       	movw	r8, r24
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	88 0e       	add	r8, r24
    247c:	91 1c       	adc	r9, r1
    247e:	65 01       	movw	r12, r10
    2480:	e5 e0       	ldi	r30, 0x05	; 5
    2482:	ce 0e       	add	r12, r30
    2484:	d1 1c       	adc	r13, r1
    size_t n = 0;
    2486:	00 e0       	ldi	r16, 0x00	; 0
    2488:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    248a:	f4 01       	movw	r30, r8
    248c:	61 91       	ld	r22, Z+
    248e:	4f 01       	movw	r8, r30
    2490:	4a e0       	ldi	r20, 0x0A	; 10
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	c7 01       	movw	r24, r14
    2496:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN5Print5printEhi>
    249a:	ec 01       	movw	r28, r24
        n += p.print('.');
    249c:	6e e2       	ldi	r22, 0x2E	; 46
    249e:	c7 01       	movw	r24, r14
    24a0:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <_ZN5Print5printEc>
    24a4:	8c 0f       	add	r24, r28
    24a6:	9d 1f       	adc	r25, r29
    24a8:	08 0f       	add	r16, r24
    24aa:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    24ac:	8c 14       	cp	r8, r12
    24ae:	9d 04       	cpc	r9, r13
    24b0:	61 f7       	brne	.-40     	; 0x248a <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    24b2:	4a e0       	ldi	r20, 0x0A	; 10
    24b4:	50 e0       	ldi	r21, 0x00	; 0
    24b6:	f5 01       	movw	r30, r10
    24b8:	65 81       	ldd	r22, Z+5	; 0x05
    24ba:	c7 01       	movw	r24, r14
    24bc:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN5Print5printEhi>
    return n;
}
    24c0:	80 0f       	add	r24, r16
    24c2:	91 1f       	adc	r25, r17
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	df 90       	pop	r13
    24d2:	cf 90       	pop	r12
    24d4:	bf 90       	pop	r11
    24d6:	af 90       	pop	r10
    24d8:	9f 90       	pop	r9
    24da:	8f 90       	pop	r8
    24dc:	08 95       	ret

000024de <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    24de:	e3 e3       	ldi	r30, 0x33	; 51
    24e0:	f2 e0       	ldi	r31, 0x02	; 2
    24e2:	84 e4       	ldi	r24, 0x44	; 68
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    24ea:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    24ec:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    24ee:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    24f0:	15 82       	std	Z+5, r1	; 0x05
    24f2:	08 95       	ret

000024f4 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    24f4:	08 95       	ret

000024f6 <main>:

int main(void)
{
	init();
    24f6:	0e 94 ca 18 	call	0x3194	; 0x3194 <init>

	initVariant();
    24fa:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    24fe:	0e 94 b9 10 	call	0x2172	; 0x2172 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2502:	ce ee       	ldi	r28, 0xEE	; 238
    2504:	d0 e1       	ldi	r29, 0x10	; 16
#endif
	
	setup();
    
	for (;;) {
		loop();
    2506:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <loop>
		if (serialEventRun) serialEventRun();
    250a:	20 97       	sbiw	r28, 0x00	; 0
    250c:	e1 f3       	breq	.-8      	; 0x2506 <main+0x10>
    250e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <_Z14serialEventRunv>
    2512:	f9 cf       	rjmp	.-14     	; 0x2506 <main+0x10>

00002514 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2514:	cf 92       	push	r12
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
    2524:	41 15       	cp	r20, r1
    2526:	51 05       	cpc	r21, r1
    2528:	b1 f0       	breq	.+44     	; 0x2556 <_ZN5Print5writeEPKhj+0x42>
    252a:	8c 01       	movw	r16, r24
    252c:	e6 2e       	mov	r14, r22
    252e:	f7 2e       	mov	r15, r23
    2530:	ea 01       	movw	r28, r20
    2532:	c1 2c       	mov	r12, r1
    2534:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
    2536:	d7 01       	movw	r26, r14
    2538:	6d 91       	ld	r22, X+
    253a:	7d 01       	movw	r14, r26
    253c:	d8 01       	movw	r26, r16
    253e:	ed 91       	ld	r30, X+
    2540:	fc 91       	ld	r31, X
    2542:	01 90       	ld	r0, Z+
    2544:	f0 81       	ld	r31, Z
    2546:	e0 2d       	mov	r30, r0
    2548:	c8 01       	movw	r24, r16
    254a:	09 95       	icall
    254c:	c8 0e       	add	r12, r24
    254e:	d9 1e       	adc	r13, r25
    2550:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    2552:	89 f7       	brne	.-30     	; 0x2536 <_ZN5Print5writeEPKhj+0x22>
    2554:	02 c0       	rjmp	.+4      	; 0x255a <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    2556:	c1 2c       	mov	r12, r1
    2558:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    255a:	c6 01       	movw	r24, r12
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	ff 90       	pop	r15
    2566:	ef 90       	pop	r14
    2568:	df 90       	pop	r13
    256a:	cf 90       	pop	r12
    256c:	08 95       	ret

0000256e <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    256e:	ef 92       	push	r14
    2570:	ff 92       	push	r15
    2572:	0f 93       	push	r16
    2574:	1f 93       	push	r17
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    257a:	eb 01       	movw	r28, r22
    257c:	21 96       	adiw	r28, 0x01	; 1
    257e:	fb 01       	movw	r30, r22
    2580:	64 91       	lpm	r22, Z
    if (c == 0) break;
    2582:	66 23       	and	r22, r22
    2584:	99 f0       	breq	.+38     	; 0x25ac <_ZN5Print5printEPK19__FlashStringHelper+0x3e>
    2586:	8c 01       	movw	r16, r24
    2588:	e1 2c       	mov	r14, r1
    258a:	f1 2c       	mov	r15, r1
    n += write(c);
    258c:	d8 01       	movw	r26, r16
    258e:	ed 91       	ld	r30, X+
    2590:	fc 91       	ld	r31, X
    2592:	01 90       	ld	r0, Z+
    2594:	f0 81       	ld	r31, Z
    2596:	e0 2d       	mov	r30, r0
    2598:	c8 01       	movw	r24, r16
    259a:	09 95       	icall
    259c:	e8 0e       	add	r14, r24
    259e:	f9 1e       	adc	r15, r25
size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    25a0:	fe 01       	movw	r30, r28
    25a2:	64 91       	lpm	r22, Z
    25a4:	21 96       	adiw	r28, 0x01	; 1
    if (c == 0) break;
    25a6:	61 11       	cpse	r22, r1
    25a8:	f1 cf       	rjmp	.-30     	; 0x258c <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <_ZN5Print5printEPK19__FlashStringHelper+0x42>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    25ac:	e1 2c       	mov	r14, r1
    25ae:	f1 2c       	mov	r15, r1
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    25b0:	c7 01       	movw	r24, r14
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	1f 91       	pop	r17
    25b8:	0f 91       	pop	r16
    25ba:	ff 90       	pop	r15
    25bc:	ef 90       	pop	r14
    25be:	08 95       	ret

000025c0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    25c0:	dc 01       	movw	r26, r24
    25c2:	ed 91       	ld	r30, X+
    25c4:	fc 91       	ld	r31, X
    25c6:	01 90       	ld	r0, Z+
    25c8:	f0 81       	ld	r31, Z
    25ca:	e0 2d       	mov	r30, r0
    25cc:	09 95       	icall
}
    25ce:	08 95       	ret

000025d0 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    25d0:	4f 92       	push	r4
    25d2:	5f 92       	push	r5
    25d4:	6f 92       	push	r6
    25d6:	7f 92       	push	r7
    25d8:	9f 92       	push	r9
    25da:	af 92       	push	r10
    25dc:	bf 92       	push	r11
    25de:	cf 92       	push	r12
    25e0:	df 92       	push	r13
    25e2:	ef 92       	push	r14
    25e4:	ff 92       	push	r15
    25e6:	0f 93       	push	r16
    25e8:	1f 93       	push	r17
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	a1 97       	sbiw	r28, 0x21	; 33
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	5c 01       	movw	r10, r24
    2600:	6a 01       	movw	r12, r20
    2602:	7b 01       	movw	r14, r22
    2604:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2606:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	82 17       	cp	r24, r18
    260c:	20 f0       	brcs	.+8      	; 0x2616 <_ZN5Print11printNumberEmh+0x46>
    260e:	0f 2e       	mov	r0, r31
    2610:	fa e0       	ldi	r31, 0x0A	; 10
    2612:	9f 2e       	mov	r9, r31
    2614:	f0 2d       	mov	r31, r0
    2616:	8e 01       	movw	r16, r28
    2618:	0f 5d       	subi	r16, 0xDF	; 223
    261a:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
    261c:	49 2c       	mov	r4, r9
    261e:	51 2c       	mov	r5, r1
    2620:	61 2c       	mov	r6, r1
    2622:	71 2c       	mov	r7, r1
    2624:	c7 01       	movw	r24, r14
    2626:	b6 01       	movw	r22, r12
    2628:	a3 01       	movw	r20, r6
    262a:	92 01       	movw	r18, r4
    262c:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <__udivmodsi4>
    char c = m - base * n;
    2630:	8c 2d       	mov	r24, r12
    2632:	92 9e       	mul	r9, r18
    2634:	80 19       	sub	r24, r0
    2636:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2638:	01 50       	subi	r16, 0x01	; 1
    263a:	11 09       	sbc	r17, r1
    263c:	8a 30       	cpi	r24, 0x0A	; 10
    263e:	10 f4       	brcc	.+4      	; 0x2644 <_ZN5Print11printNumberEmh+0x74>
    2640:	80 5d       	subi	r24, 0xD0	; 208
    2642:	01 c0       	rjmp	.+2      	; 0x2646 <_ZN5Print11printNumberEmh+0x76>
    2644:	89 5c       	subi	r24, 0xC9	; 201
    2646:	d8 01       	movw	r26, r16
    2648:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    264a:	c2 2e       	mov	r12, r18
    264c:	d3 2e       	mov	r13, r19
    264e:	e4 2e       	mov	r14, r20
    2650:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    2652:	c1 14       	cp	r12, r1
    2654:	d1 04       	cpc	r13, r1
    2656:	e1 04       	cpc	r14, r1
    2658:	f1 04       	cpc	r15, r1
    265a:	21 f7       	brne	.-56     	; 0x2624 <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    265c:	01 15       	cp	r16, r1
    265e:	11 05       	cpc	r17, r1
    2660:	91 f0       	breq	.+36     	; 0x2686 <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
    2662:	f8 01       	movw	r30, r16
    2664:	01 90       	ld	r0, Z+
    2666:	00 20       	and	r0, r0
    2668:	e9 f7       	brne	.-6      	; 0x2664 <_ZN5Print11printNumberEmh+0x94>
    266a:	31 97       	sbiw	r30, 0x01	; 1
    266c:	af 01       	movw	r20, r30
    266e:	40 1b       	sub	r20, r16
    2670:	51 0b       	sbc	r21, r17
    2672:	d5 01       	movw	r26, r10
    2674:	ed 91       	ld	r30, X+
    2676:	fc 91       	ld	r31, X
    2678:	02 80       	ldd	r0, Z+2	; 0x02
    267a:	f3 81       	ldd	r31, Z+3	; 0x03
    267c:	e0 2d       	mov	r30, r0
    267e:	b8 01       	movw	r22, r16
    2680:	c5 01       	movw	r24, r10
    2682:	09 95       	icall
    2684:	02 c0       	rjmp	.+4      	; 0x268a <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    268a:	a1 96       	adiw	r28, 0x21	; 33
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	ff 90       	pop	r15
    26a0:	ef 90       	pop	r14
    26a2:	df 90       	pop	r13
    26a4:	cf 90       	pop	r12
    26a6:	bf 90       	pop	r11
    26a8:	af 90       	pop	r10
    26aa:	9f 90       	pop	r9
    26ac:	7f 90       	pop	r7
    26ae:	6f 90       	pop	r6
    26b0:	5f 90       	pop	r5
    26b2:	4f 90       	pop	r4
    26b4:	08 95       	ret

000026b6 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    26b6:	21 15       	cp	r18, r1
    26b8:	31 05       	cpc	r19, r1
    26ba:	49 f4       	brne	.+18     	; 0x26ce <_ZN5Print5printEmi+0x18>
    26bc:	dc 01       	movw	r26, r24
    26be:	ed 91       	ld	r30, X+
    26c0:	fc 91       	ld	r31, X
    26c2:	01 90       	ld	r0, Z+
    26c4:	f0 81       	ld	r31, Z
    26c6:	e0 2d       	mov	r30, r0
    26c8:	64 2f       	mov	r22, r20
    26ca:	09 95       	icall
    26cc:	08 95       	ret
  else return printNumber(n, base);
    26ce:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <_ZN5Print11printNumberEmh>
}
    26d2:	08 95       	ret

000026d4 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    26d4:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    26d6:	46 2f       	mov	r20, r22
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	60 e0       	ldi	r22, 0x00	; 0
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <_ZN5Print5printEmi>
}
    26e2:	08 95       	ret

000026e4 <_ZL6conv2dPKc>:
  hh(copy.hh),
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    26e4:	fc 01       	movw	r30, r24
    uint8_t v = 0;
    if ('0' <= *p && *p <= '9')
    26e6:	90 81       	ld	r25, Z
    26e8:	90 53       	subi	r25, 0x30	; 48
    26ea:	9a 30       	cpi	r25, 0x0A	; 10
    26ec:	08 f0       	brcs	.+2      	; 0x26f0 <_ZL6conv2dPKc+0xc>
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    uint8_t v = 0;
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	81 81       	ldd	r24, Z+1	; 0x01
    26f2:	80 53       	subi	r24, 0x30	; 48
    if ('0' <= *p && *p <= '9')
        v = *p - '0';
    return 10 * v + *++p - '0';
    26f4:	99 0f       	add	r25, r25
    26f6:	29 2f       	mov	r18, r25
    26f8:	22 0f       	add	r18, r18
    26fa:	22 0f       	add	r18, r18
    26fc:	92 0f       	add	r25, r18
}
    26fe:	89 0f       	add	r24, r25
    2700:	08 95       	ret

00002702 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
}

// A convenient constructor for using "the compiler's time":
// This version will save RAM by using PROGMEM to store it by using the F macro.
//   DateTime now (F(__DATE__), F(__TIME__));
DateTime::DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time) {
    2702:	cf 92       	push	r12
    2704:	df 92       	push	r13
    2706:	ef 92       	push	r14
    2708:	ff 92       	push	r15
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	2b 97       	sbiw	r28, 0x0b	; 11
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	7c 01       	movw	r14, r24
    2724:	6a 01       	movw	r12, r20
    // sample input: date = "Dec 26 2009", time = "12:34:56"
    char buff[11];
    memcpy_P(buff, date, 11);
    2726:	4b e0       	ldi	r20, 0x0B	; 11
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	ce 01       	movw	r24, r28
    272c:	01 96       	adiw	r24, 0x01	; 1
    272e:	0e 94 8d 1c 	call	0x391a	; 0x391a <memcpy_P>
    yOff = conv2d(buff + 9);
    2732:	ce 01       	movw	r24, r28
    2734:	0a 96       	adiw	r24, 0x0a	; 10
    2736:	0e 94 72 13 	call	0x26e4	; 0x26e4 <_ZL6conv2dPKc>
    273a:	f7 01       	movw	r30, r14
    273c:	80 83       	st	Z, r24
    // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
    switch (buff[0]) {
    273e:	e9 81       	ldd	r30, Y+1	; 0x01
    2740:	0e 2f       	mov	r16, r30
    2742:	10 e0       	ldi	r17, 0x00	; 0
    2744:	f8 01       	movw	r30, r16
    2746:	e1 54       	subi	r30, 0x41	; 65
    2748:	f1 09       	sbc	r31, r1
    274a:	e3 31       	cpi	r30, 0x13	; 19
    274c:	f1 05       	cpc	r31, r1
    274e:	b8 f5       	brcc	.+110    	; 0x27be <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
    2750:	ec 5c       	subi	r30, 0xCC	; 204
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	0c 94 73 1c 	jmp	0x38e6	; 0x38e6 <__tablejump2__>
        case 'J': m = buff[1] == 'a' ? 1 : m = buff[2] == 'n' ? 6 : 7; break;
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	81 36       	cpi	r24, 0x61	; 97
    275c:	39 f0       	breq	.+14     	; 0x276c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6a>
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	8e 36       	cpi	r24, 0x6E	; 110
    2762:	11 f0       	breq	.+4      	; 0x2768 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x66>
    2764:	87 e0       	ldi	r24, 0x07	; 7
    2766:	03 c0       	rjmp	.+6      	; 0x276e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6c>
    2768:	86 e0       	ldi	r24, 0x06	; 6
    276a:	01 c0       	rjmp	.+2      	; 0x276e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6c>
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	f7 01       	movw	r30, r14
    2770:	81 83       	std	Z+1, r24	; 0x01
    2772:	25 c0       	rjmp	.+74     	; 0x27be <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'F': m = 2; break;
    2774:	82 e0       	ldi	r24, 0x02	; 2
    2776:	f7 01       	movw	r30, r14
    2778:	81 83       	std	Z+1, r24	; 0x01
    277a:	21 c0       	rjmp	.+66     	; 0x27be <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'A': m = buff[2] == 'r' ? 4 : 8; break;
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	82 37       	cpi	r24, 0x72	; 114
    2780:	11 f0       	breq	.+4      	; 0x2786 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    2782:	88 e0       	ldi	r24, 0x08	; 8
    2784:	01 c0       	rjmp	.+2      	; 0x2788 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x86>
    2786:	84 e0       	ldi	r24, 0x04	; 4
    2788:	f7 01       	movw	r30, r14
    278a:	81 83       	std	Z+1, r24	; 0x01
    278c:	18 c0       	rjmp	.+48     	; 0x27be <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'M': m = buff[2] == 'r' ? 3 : 5; break;
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	82 37       	cpi	r24, 0x72	; 114
    2792:	11 f0       	breq	.+4      	; 0x2798 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2794:	85 e0       	ldi	r24, 0x05	; 5
    2796:	01 c0       	rjmp	.+2      	; 0x279a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    2798:	83 e0       	ldi	r24, 0x03	; 3
    279a:	f7 01       	movw	r30, r14
    279c:	81 83       	std	Z+1, r24	; 0x01
    279e:	0f c0       	rjmp	.+30     	; 0x27be <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'S': m = 9; break;
    27a0:	89 e0       	ldi	r24, 0x09	; 9
    27a2:	f7 01       	movw	r30, r14
    27a4:	81 83       	std	Z+1, r24	; 0x01
    27a6:	0b c0       	rjmp	.+22     	; 0x27be <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'O': m = 10; break;
    27a8:	8a e0       	ldi	r24, 0x0A	; 10
    27aa:	f7 01       	movw	r30, r14
    27ac:	81 83       	std	Z+1, r24	; 0x01
    27ae:	07 c0       	rjmp	.+14     	; 0x27be <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'N': m = 11; break;
    27b0:	8b e0       	ldi	r24, 0x0B	; 11
    27b2:	f7 01       	movw	r30, r14
    27b4:	81 83       	std	Z+1, r24	; 0x01
    27b6:	03 c0       	rjmp	.+6      	; 0x27be <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'D': m = 12; break;
    27b8:	8c e0       	ldi	r24, 0x0C	; 12
    27ba:	f7 01       	movw	r30, r14
    27bc:	81 83       	std	Z+1, r24	; 0x01
    }
    d = conv2d(buff + 4);
    27be:	ce 01       	movw	r24, r28
    27c0:	05 96       	adiw	r24, 0x05	; 5
    27c2:	0e 94 72 13 	call	0x26e4	; 0x26e4 <_ZL6conv2dPKc>
    27c6:	f7 01       	movw	r30, r14
    27c8:	82 83       	std	Z+2, r24	; 0x02
    memcpy_P(buff, time, 8);
    27ca:	48 e0       	ldi	r20, 0x08	; 8
    27cc:	50 e0       	ldi	r21, 0x00	; 0
    27ce:	b6 01       	movw	r22, r12
    27d0:	ce 01       	movw	r24, r28
    27d2:	01 96       	adiw	r24, 0x01	; 1
    27d4:	0e 94 8d 1c 	call	0x391a	; 0x391a <memcpy_P>
    hh = conv2d(buff);
    27d8:	ce 01       	movw	r24, r28
    27da:	01 96       	adiw	r24, 0x01	; 1
    27dc:	0e 94 72 13 	call	0x26e4	; 0x26e4 <_ZL6conv2dPKc>
    27e0:	f7 01       	movw	r30, r14
    27e2:	83 83       	std	Z+3, r24	; 0x03
    mm = conv2d(buff + 3);
    27e4:	ce 01       	movw	r24, r28
    27e6:	04 96       	adiw	r24, 0x04	; 4
    27e8:	0e 94 72 13 	call	0x26e4	; 0x26e4 <_ZL6conv2dPKc>
    27ec:	f7 01       	movw	r30, r14
    27ee:	84 83       	std	Z+4, r24	; 0x04
    ss = conv2d(buff + 6);
    27f0:	ce 01       	movw	r24, r28
    27f2:	07 96       	adiw	r24, 0x07	; 7
    27f4:	0e 94 72 13 	call	0x26e4	; 0x26e4 <_ZL6conv2dPKc>
    27f8:	f7 01       	movw	r30, r14
    27fa:	85 83       	std	Z+5, r24	; 0x05
}
    27fc:	2b 96       	adiw	r28, 0x0b	; 11
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	ff 90       	pop	r15
    2812:	ef 90       	pop	r14
    2814:	df 90       	pop	r13
    2816:	cf 90       	pop	r12
    2818:	08 95       	ret

0000281a <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    281a:	81 30       	cpi	r24, 0x01	; 1
    281c:	39 f0       	breq	.+14     	; 0x282c <_Z12disableTimerh+0x12>
    281e:	18 f0       	brcs	.+6      	; 0x2826 <_Z12disableTimerh+0xc>
    2820:	82 30       	cpi	r24, 0x02	; 2
    2822:	51 f0       	breq	.+20     	; 0x2838 <_Z12disableTimerh+0x1e>
    2824:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    2826:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    282a:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    282c:	ef e6       	ldi	r30, 0x6F	; 111
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	8d 7f       	andi	r24, 0xFD	; 253
    2834:	80 83       	st	Z, r24
      break;
    2836:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    2838:	e0 e7       	ldi	r30, 0x70	; 112
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	8d 7f       	andi	r24, 0xFD	; 253
    2840:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    2848:	e1 eb       	ldi	r30, 0xB1	; 177
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	88 7f       	andi	r24, 0xF8	; 248
    2850:	84 60       	ori	r24, 0x04	; 4
    2852:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    2854:	10 92 b3 00 	sts	0x00B3, r1
    2858:	08 95       	ret

0000285a <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    285a:	cf 93       	push	r28
    285c:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    285e:	80 91 2e 01 	lds	r24, 0x012E
    2862:	8c 13       	cpse	r24, r28
    2864:	08 c0       	rjmp	.+16     	; 0x2876 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    2866:	e7 e7       	ldi	r30, 0x77	; 119
    2868:	f2 e0       	ldi	r31, 0x02	; 2
    286a:	e4 91       	lpm	r30, Z
    286c:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    286e:	9f ef       	ldi	r25, 0xFF	; 255
    2870:	90 93 2e 01 	sts	0x012E, r25
    2874:	01 c0       	rjmp	.+2      	; 0x2878 <_Z6noToneh+0x1e>
    2876:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    2878:	0e 94 0d 14 	call	0x281a	; 0x281a <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    287c:	60 e0       	ldi	r22, 0x00	; 0
    287e:	8c 2f       	mov	r24, r28
    2880:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
}
    2884:	cf 91       	pop	r28
    2886:	08 95       	ret

00002888 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    2888:	1f 92       	push	r1
    288a:	0f 92       	push	r0
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	0f 92       	push	r0
    2890:	11 24       	eor	r1, r1
    2892:	2f 93       	push	r18
    2894:	3f 93       	push	r19
    2896:	4f 93       	push	r20
    2898:	5f 93       	push	r21
    289a:	6f 93       	push	r22
    289c:	7f 93       	push	r23
    289e:	8f 93       	push	r24
    28a0:	9f 93       	push	r25
    28a2:	af 93       	push	r26
    28a4:	bf 93       	push	r27
    28a6:	ef 93       	push	r30
    28a8:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    28aa:	80 91 3c 02 	lds	r24, 0x023C
    28ae:	90 91 3d 02 	lds	r25, 0x023D
    28b2:	a0 91 3e 02 	lds	r26, 0x023E
    28b6:	b0 91 3f 02 	lds	r27, 0x023F
    28ba:	89 2b       	or	r24, r25
    28bc:	8a 2b       	or	r24, r26
    28be:	8b 2b       	or	r24, r27
    28c0:	51 f1       	breq	.+84     	; 0x2916 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    28c2:	80 91 39 02 	lds	r24, 0x0239
    28c6:	e0 91 3a 02 	lds	r30, 0x023A
    28ca:	f0 91 3b 02 	lds	r31, 0x023B
    28ce:	90 81       	ld	r25, Z
    28d0:	89 27       	eor	r24, r25
    28d2:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    28d4:	80 91 3c 02 	lds	r24, 0x023C
    28d8:	90 91 3d 02 	lds	r25, 0x023D
    28dc:	a0 91 3e 02 	lds	r26, 0x023E
    28e0:	b0 91 3f 02 	lds	r27, 0x023F
    28e4:	18 16       	cp	r1, r24
    28e6:	19 06       	cpc	r1, r25
    28e8:	1a 06       	cpc	r1, r26
    28ea:	1b 06       	cpc	r1, r27
    28ec:	c4 f4       	brge	.+48     	; 0x291e <__vector_7+0x96>
      timer2_toggle_count--;
    28ee:	80 91 3c 02 	lds	r24, 0x023C
    28f2:	90 91 3d 02 	lds	r25, 0x023D
    28f6:	a0 91 3e 02 	lds	r26, 0x023E
    28fa:	b0 91 3f 02 	lds	r27, 0x023F
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	a1 09       	sbc	r26, r1
    2902:	b1 09       	sbc	r27, r1
    2904:	80 93 3c 02 	sts	0x023C, r24
    2908:	90 93 3d 02 	sts	0x023D, r25
    290c:	a0 93 3e 02 	sts	0x023E, r26
    2910:	b0 93 3f 02 	sts	0x023F, r27
    2914:	04 c0       	rjmp	.+8      	; 0x291e <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    2916:	80 91 2e 01 	lds	r24, 0x012E
    291a:	0e 94 2d 14 	call	0x285a	; 0x285a <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    291e:	ff 91       	pop	r31
    2920:	ef 91       	pop	r30
    2922:	bf 91       	pop	r27
    2924:	af 91       	pop	r26
    2926:	9f 91       	pop	r25
    2928:	8f 91       	pop	r24
    292a:	7f 91       	pop	r23
    292c:	6f 91       	pop	r22
    292e:	5f 91       	pop	r21
    2930:	4f 91       	pop	r20
    2932:	3f 91       	pop	r19
    2934:	2f 91       	pop	r18
    2936:	0f 90       	pop	r0
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	0f 90       	pop	r0
    293c:	1f 90       	pop	r1
    293e:	18 95       	reti

00002940 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    2940:	10 92 ad 02 	sts	0x02AD, r1
  twi_sendStop = true;		// default value
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	80 93 ab 02 	sts	0x02AB, r24
  twi_inRepStart = false;
    294a:	10 92 aa 02 	sts	0x02AA, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    294e:	61 e0       	ldi	r22, 0x01	; 1
    2950:	82 e1       	ldi	r24, 0x12	; 18
    2952:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
  digitalWrite(SCL, 1);
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	83 e1       	ldi	r24, 0x13	; 19
    295a:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    295e:	e9 eb       	ldi	r30, 0xB9	; 185
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	8e 7f       	andi	r24, 0xFE	; 254
    2966:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    2968:	80 81       	ld	r24, Z
    296a:	8d 7f       	andi	r24, 0xFD	; 253
    296c:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    296e:	88 e4       	ldi	r24, 0x48	; 72
    2970:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    2974:	85 e4       	ldi	r24, 0x45	; 69
    2976:	80 93 bc 00 	sts	0x00BC, r24
    297a:	08 95       	ret

0000297c <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    297c:	41 32       	cpi	r20, 0x21	; 33
    297e:	08 f0       	brcs	.+2      	; 0x2982 <twi_readFrom+0x6>
    2980:	46 c0       	rjmp	.+140    	; 0x2a0e <twi_readFrom+0x92>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    2982:	90 91 ad 02 	lds	r25, 0x02AD
    2986:	91 11       	cpse	r25, r1
    2988:	fc cf       	rjmp	.-8      	; 0x2982 <twi_readFrom+0x6>
    continue;
  }
  twi_state = TWI_MRX;
    298a:	31 e0       	ldi	r19, 0x01	; 1
    298c:	30 93 ad 02 	sts	0x02AD, r19
  twi_sendStop = sendStop;
    2990:	20 93 ab 02 	sts	0x02AB, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    2994:	2f ef       	ldi	r18, 0xFF	; 255
    2996:	20 93 40 02 	sts	0x0240, r18

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    299a:	10 92 85 02 	sts	0x0285, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    299e:	24 0f       	add	r18, r20
    29a0:	20 93 84 02 	sts	0x0284, r18
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    29a4:	30 93 ac 02 	sts	0x02AC, r19
  twi_slarw |= address << 1;
    29a8:	20 91 ac 02 	lds	r18, 0x02AC
    29ac:	88 0f       	add	r24, r24
    29ae:	82 2b       	or	r24, r18
    29b0:	80 93 ac 02 	sts	0x02AC, r24

  if (true == twi_inRepStart) {
    29b4:	80 91 aa 02 	lds	r24, 0x02AA
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	51 f4       	brne	.+20     	; 0x29d0 <twi_readFrom+0x54>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    29bc:	10 92 aa 02 	sts	0x02AA, r1
    TWDR = twi_slarw;
    29c0:	80 91 ac 02 	lds	r24, 0x02AC
    29c4:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    29c8:	85 ec       	ldi	r24, 0xC5	; 197
    29ca:	80 93 bc 00 	sts	0x00BC, r24
    29ce:	03 c0       	rjmp	.+6      	; 0x29d6 <twi_readFrom+0x5a>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    29d0:	85 ee       	ldi	r24, 0xE5	; 229
    29d2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    29d6:	80 91 ad 02 	lds	r24, 0x02AD
    29da:	81 30       	cpi	r24, 0x01	; 1
    29dc:	e1 f3       	breq	.-8      	; 0x29d6 <twi_readFrom+0x5a>
    continue;
  }

  if (twi_masterBufferIndex < length)
    29de:	80 91 85 02 	lds	r24, 0x0285
    29e2:	84 17       	cp	r24, r20
    29e4:	10 f4       	brcc	.+4      	; 0x29ea <twi_readFrom+0x6e>
    length = twi_masterBufferIndex;
    29e6:	40 91 85 02 	lds	r20, 0x0285

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    29ea:	44 23       	and	r20, r20
    29ec:	89 f0       	breq	.+34     	; 0x2a10 <twi_readFrom+0x94>
    29ee:	a6 e8       	ldi	r26, 0x86	; 134
    29f0:	b2 e0       	ldi	r27, 0x02	; 2
    29f2:	fb 01       	movw	r30, r22
    29f4:	8f ef       	ldi	r24, 0xFF	; 255
    29f6:	84 0f       	add	r24, r20
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	01 96       	adiw	r24, 0x01	; 1
    29fc:	68 0f       	add	r22, r24
    29fe:	79 1f       	adc	r23, r25
    data[i] = twi_masterBuffer[i];
    2a00:	8d 91       	ld	r24, X+
    2a02:	81 93       	st	Z+, r24

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2a04:	e6 17       	cp	r30, r22
    2a06:	f7 07       	cpc	r31, r23
    2a08:	d9 f7       	brne	.-10     	; 0x2a00 <twi_readFrom+0x84>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    2a0a:	94 2f       	mov	r25, r20
    2a0c:	01 c0       	rjmp	.+2      	; 0x2a10 <twi_readFrom+0x94>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    2a10:	89 2f       	mov	r24, r25
    2a12:	08 95       	ret

00002a14 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    2a14:	0f 93       	push	r16
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2a16:	41 32       	cpi	r20, 0x21	; 33
    2a18:	08 f0       	brcs	.+2      	; 0x2a1c <twi_writeTo+0x8>
    2a1a:	51 c0       	rjmp	.+162    	; 0x2abe <twi_writeTo+0xaa>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    2a1c:	30 91 ad 02 	lds	r19, 0x02AD
    2a20:	31 11       	cpse	r19, r1
    2a22:	fc cf       	rjmp	.-8      	; 0x2a1c <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
    2a24:	92 e0       	ldi	r25, 0x02	; 2
    2a26:	90 93 ad 02 	sts	0x02AD, r25
  twi_sendStop = sendStop;
    2a2a:	00 93 ab 02 	sts	0x02AB, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    2a2e:	9f ef       	ldi	r25, 0xFF	; 255
    2a30:	90 93 40 02 	sts	0x0240, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    2a34:	10 92 85 02 	sts	0x0285, r1
  twi_masterBufferLength = length;
    2a38:	40 93 84 02 	sts	0x0284, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2a3c:	44 23       	and	r20, r20
    2a3e:	71 f0       	breq	.+28     	; 0x2a5c <twi_writeTo+0x48>
    2a40:	fb 01       	movw	r30, r22
    2a42:	a6 e8       	ldi	r26, 0x86	; 134
    2a44:	b2 e0       	ldi	r27, 0x02	; 2
    2a46:	41 50       	subi	r20, 0x01	; 1
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	4f 5f       	subi	r20, 0xFF	; 255
    2a4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4e:	64 0f       	add	r22, r20
    2a50:	75 1f       	adc	r23, r21
    twi_masterBuffer[i] = data[i];
    2a52:	91 91       	ld	r25, Z+
    2a54:	9d 93       	st	X+, r25
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2a56:	e6 17       	cp	r30, r22
    2a58:	f7 07       	cpc	r31, r23
    2a5a:	d9 f7       	brne	.-10     	; 0x2a52 <twi_writeTo+0x3e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    2a5c:	10 92 ac 02 	sts	0x02AC, r1
  twi_slarw |= address << 1;
    2a60:	90 91 ac 02 	lds	r25, 0x02AC
    2a64:	88 0f       	add	r24, r24
    2a66:	89 2b       	or	r24, r25
    2a68:	80 93 ac 02 	sts	0x02AC, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    2a6c:	80 91 aa 02 	lds	r24, 0x02AA
    2a70:	81 30       	cpi	r24, 0x01	; 1
    2a72:	51 f4       	brne	.+20     	; 0x2a88 <twi_writeTo+0x74>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    2a74:	10 92 aa 02 	sts	0x02AA, r1
    TWDR = twi_slarw;				
    2a78:	80 91 ac 02 	lds	r24, 0x02AC
    2a7c:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2a80:	85 ec       	ldi	r24, 0xC5	; 197
    2a82:	80 93 bc 00 	sts	0x00BC, r24
    2a86:	03 c0       	rjmp	.+6      	; 0x2a8e <twi_writeTo+0x7a>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    2a88:	85 ee       	ldi	r24, 0xE5	; 229
    2a8a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    2a8e:	22 23       	and	r18, r18
    2a90:	41 f0       	breq	.+16     	; 0x2aa2 <twi_writeTo+0x8e>
    2a92:	80 91 ad 02 	lds	r24, 0x02AD
    2a96:	82 30       	cpi	r24, 0x02	; 2
    2a98:	21 f4       	brne	.+8      	; 0x2aa2 <twi_writeTo+0x8e>
    2a9a:	80 91 ad 02 	lds	r24, 0x02AD
    2a9e:	82 30       	cpi	r24, 0x02	; 2
    2aa0:	e1 f3       	breq	.-8      	; 0x2a9a <twi_writeTo+0x86>
    continue;
  }
  
  if (twi_error == 0xFF)
    2aa2:	80 91 40 02 	lds	r24, 0x0240
    2aa6:	8f 3f       	cpi	r24, 0xFF	; 255
    2aa8:	79 f0       	breq	.+30     	; 0x2ac8 <twi_writeTo+0xb4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    2aaa:	80 91 40 02 	lds	r24, 0x0240
    2aae:	80 32       	cpi	r24, 0x20	; 32
    2ab0:	41 f0       	breq	.+16     	; 0x2ac2 <twi_writeTo+0xae>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    2ab2:	80 91 40 02 	lds	r24, 0x0240
    2ab6:	80 33       	cpi	r24, 0x30	; 48
    2ab8:	31 f0       	breq	.+12     	; 0x2ac6 <twi_writeTo+0xb2>
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
    2aba:	34 e0       	ldi	r19, 0x04	; 4
    2abc:	05 c0       	rjmp	.+10     	; 0x2ac8 <twi_writeTo+0xb4>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    2abe:	31 e0       	ldi	r19, 0x01	; 1
    2ac0:	03 c0       	rjmp	.+6      	; 0x2ac8 <twi_writeTo+0xb4>
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
    2ac2:	32 e0       	ldi	r19, 0x02	; 2
    2ac4:	01 c0       	rjmp	.+2      	; 0x2ac8 <twi_writeTo+0xb4>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
    2ac6:	33 e0       	ldi	r19, 0x03	; 3
  else
    return 4;	// other twi error
}
    2ac8:	83 2f       	mov	r24, r19
    2aca:	0f 91       	pop	r16
    2acc:	08 95       	ret

00002ace <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2ace:	61 32       	cpi	r22, 0x21	; 33
    2ad0:	c8 f4       	brcc	.+50     	; 0x2b04 <twi_transmit+0x36>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    2ad2:	20 91 ad 02 	lds	r18, 0x02AD
    2ad6:	24 30       	cpi	r18, 0x04	; 4
    2ad8:	b9 f4       	brne	.+46     	; 0x2b08 <twi_transmit+0x3a>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    2ada:	60 93 62 02 	sts	0x0262, r22
  for(i = 0; i < length; ++i){
    2ade:	66 23       	and	r22, r22
    2ae0:	a9 f0       	breq	.+42     	; 0x2b0c <twi_transmit+0x3e>
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	a4 e6       	ldi	r26, 0x64	; 100
    2ae6:	b2 e0       	ldi	r27, 0x02	; 2
    2ae8:	61 50       	subi	r22, 0x01	; 1
    2aea:	26 2f       	mov	r18, r22
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	2f 5f       	subi	r18, 0xFF	; 255
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	28 0f       	add	r18, r24
    2af4:	39 1f       	adc	r19, r25
    twi_txBuffer[i] = data[i];
    2af6:	91 91       	ld	r25, Z+
    2af8:	9d 93       	st	X+, r25
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    2afa:	e2 17       	cp	r30, r18
    2afc:	f3 07       	cpc	r31, r19
    2afe:	d9 f7       	brne	.-10     	; 0x2af6 <twi_transmit+0x28>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	08 95       	ret
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
}
    2b0e:	08 95       	ret

00002b10 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2b10:	85 ed       	ldi	r24, 0xD5	; 213
    2b12:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2b16:	ec eb       	ldi	r30, 0xBC	; 188
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	84 fd       	sbrc	r24, 4
    2b1e:	fd cf       	rjmp	.-6      	; 0x2b1a <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2b20:	10 92 ad 02 	sts	0x02AD, r1
    2b24:	08 95       	ret

00002b26 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2b26:	85 ec       	ldi	r24, 0xC5	; 197
    2b28:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    2b2c:	10 92 ad 02 	sts	0x02AD, r1
    2b30:	08 95       	ret

00002b32 <__vector_24>:
}

ISR(TWI_vect)
{
    2b32:	1f 92       	push	r1
    2b34:	0f 92       	push	r0
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	0f 92       	push	r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	2f 93       	push	r18
    2b3e:	3f 93       	push	r19
    2b40:	4f 93       	push	r20
    2b42:	5f 93       	push	r21
    2b44:	6f 93       	push	r22
    2b46:	7f 93       	push	r23
    2b48:	8f 93       	push	r24
    2b4a:	9f 93       	push	r25
    2b4c:	af 93       	push	r26
    2b4e:	bf 93       	push	r27
    2b50:	ef 93       	push	r30
    2b52:	ff 93       	push	r31
  switch(TW_STATUS){
    2b54:	80 91 b9 00 	lds	r24, 0x00B9
    2b58:	e8 2f       	mov	r30, r24
    2b5a:	e8 7f       	andi	r30, 0xF8	; 248
    2b5c:	8e 2f       	mov	r24, r30
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	89 3c       	cpi	r24, 0xC9	; 201
    2b62:	91 05       	cpc	r25, r1
    2b64:	08 f0       	brcs	.+2      	; 0x2b68 <__vector_24+0x36>
    2b66:	f7 c0       	rjmp	.+494    	; 0x2d56 <__vector_24+0x224>
    2b68:	fc 01       	movw	r30, r24
    2b6a:	e9 5b       	subi	r30, 0xB9	; 185
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	0c 94 73 1c 	jmp	0x38e6	; 0x38e6 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2b72:	80 91 ac 02 	lds	r24, 0x02AC
    2b76:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2b7a:	85 ec       	ldi	r24, 0xC5	; 197
    2b7c:	80 93 bc 00 	sts	0x00BC, r24
    2b80:	ea c0       	rjmp	.+468    	; 0x2d56 <__vector_24+0x224>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2b82:	90 91 85 02 	lds	r25, 0x0285
    2b86:	80 91 84 02 	lds	r24, 0x0284
    2b8a:	98 17       	cp	r25, r24
    2b8c:	80 f4       	brcc	.+32     	; 0x2bae <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2b8e:	e0 91 85 02 	lds	r30, 0x0285
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	8e 0f       	add	r24, r30
    2b96:	80 93 85 02 	sts	0x0285, r24
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	ea 57       	subi	r30, 0x7A	; 122
    2b9e:	fd 4f       	sbci	r31, 0xFD	; 253
    2ba0:	80 81       	ld	r24, Z
    2ba2:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2ba6:	85 ec       	ldi	r24, 0xC5	; 197
    2ba8:	80 93 bc 00 	sts	0x00BC, r24
    2bac:	d4 c0       	rjmp	.+424    	; 0x2d56 <__vector_24+0x224>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2bae:	80 91 ab 02 	lds	r24, 0x02AB
    2bb2:	88 23       	and	r24, r24
    2bb4:	19 f0       	breq	.+6      	; 0x2bbc <__vector_24+0x8a>
          twi_stop();
    2bb6:	0e 94 88 15 	call	0x2b10	; 0x2b10 <twi_stop>
    2bba:	cd c0       	rjmp	.+410    	; 0x2d56 <__vector_24+0x224>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	80 93 aa 02 	sts	0x02AA, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2bc2:	84 ea       	ldi	r24, 0xA4	; 164
    2bc4:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    2bc8:	10 92 ad 02 	sts	0x02AD, r1
    2bcc:	c4 c0       	rjmp	.+392    	; 0x2d56 <__vector_24+0x224>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    2bce:	80 e2       	ldi	r24, 0x20	; 32
    2bd0:	80 93 40 02 	sts	0x0240, r24
      twi_stop();
    2bd4:	0e 94 88 15 	call	0x2b10	; 0x2b10 <twi_stop>
      break;
    2bd8:	be c0       	rjmp	.+380    	; 0x2d56 <__vector_24+0x224>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2bda:	80 e3       	ldi	r24, 0x30	; 48
    2bdc:	80 93 40 02 	sts	0x0240, r24
      twi_stop();
    2be0:	0e 94 88 15 	call	0x2b10	; 0x2b10 <twi_stop>
      break;
    2be4:	b8 c0       	rjmp	.+368    	; 0x2d56 <__vector_24+0x224>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2be6:	88 e3       	ldi	r24, 0x38	; 56
    2be8:	80 93 40 02 	sts	0x0240, r24
      twi_releaseBus();
    2bec:	0e 94 93 15 	call	0x2b26	; 0x2b26 <twi_releaseBus>
      break;
    2bf0:	b2 c0       	rjmp	.+356    	; 0x2d56 <__vector_24+0x224>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2bf2:	e0 91 85 02 	lds	r30, 0x0285
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	8e 0f       	add	r24, r30
    2bfa:	80 93 85 02 	sts	0x0285, r24
    2bfe:	80 91 bb 00 	lds	r24, 0x00BB
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	ea 57       	subi	r30, 0x7A	; 122
    2c06:	fd 4f       	sbci	r31, 0xFD	; 253
    2c08:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c0a:	90 91 85 02 	lds	r25, 0x0285
    2c0e:	80 91 84 02 	lds	r24, 0x0284
    2c12:	98 17       	cp	r25, r24
    2c14:	20 f4       	brcc	.+8      	; 0x2c1e <__vector_24+0xec>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c16:	85 ec       	ldi	r24, 0xC5	; 197
    2c18:	80 93 bc 00 	sts	0x00BC, r24
    2c1c:	9c c0       	rjmp	.+312    	; 0x2d56 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2c1e:	85 e8       	ldi	r24, 0x85	; 133
    2c20:	80 93 bc 00 	sts	0x00BC, r24
    2c24:	98 c0       	rjmp	.+304    	; 0x2d56 <__vector_24+0x224>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c26:	e0 91 85 02 	lds	r30, 0x0285
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	8e 0f       	add	r24, r30
    2c2e:	80 93 85 02 	sts	0x0285, r24
    2c32:	80 91 bb 00 	lds	r24, 0x00BB
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	ea 57       	subi	r30, 0x7A	; 122
    2c3a:	fd 4f       	sbci	r31, 0xFD	; 253
    2c3c:	80 83       	st	Z, r24
	if (twi_sendStop)
    2c3e:	80 91 ab 02 	lds	r24, 0x02AB
    2c42:	88 23       	and	r24, r24
    2c44:	19 f0       	breq	.+6      	; 0x2c4c <__vector_24+0x11a>
          twi_stop();
    2c46:	0e 94 88 15 	call	0x2b10	; 0x2b10 <twi_stop>
    2c4a:	85 c0       	rjmp	.+266    	; 0x2d56 <__vector_24+0x224>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	80 93 aa 02 	sts	0x02AA, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2c52:	84 ea       	ldi	r24, 0xA4	; 164
    2c54:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    2c58:	10 92 ad 02 	sts	0x02AD, r1
    2c5c:	7c c0       	rjmp	.+248    	; 0x2d56 <__vector_24+0x224>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2c5e:	0e 94 88 15 	call	0x2b10	; 0x2b10 <twi_stop>
      break;
    2c62:	79 c0       	rjmp	.+242    	; 0x2d56 <__vector_24+0x224>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2c64:	83 e0       	ldi	r24, 0x03	; 3
    2c66:	80 93 ad 02 	sts	0x02AD, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2c6a:	10 92 41 02 	sts	0x0241, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c6e:	85 ec       	ldi	r24, 0xC5	; 197
    2c70:	80 93 bc 00 	sts	0x00BC, r24
    2c74:	70 c0       	rjmp	.+224    	; 0x2d56 <__vector_24+0x224>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2c76:	80 91 41 02 	lds	r24, 0x0241
    2c7a:	80 32       	cpi	r24, 0x20	; 32
    2c7c:	80 f4       	brcc	.+32     	; 0x2c9e <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2c7e:	e0 91 41 02 	lds	r30, 0x0241
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	8e 0f       	add	r24, r30
    2c86:	80 93 41 02 	sts	0x0241, r24
    2c8a:	80 91 bb 00 	lds	r24, 0x00BB
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	ee 5b       	subi	r30, 0xBE	; 190
    2c92:	fd 4f       	sbci	r31, 0xFD	; 253
    2c94:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c96:	85 ec       	ldi	r24, 0xC5	; 197
    2c98:	80 93 bc 00 	sts	0x00BC, r24
    2c9c:	5c c0       	rjmp	.+184    	; 0x2d56 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2c9e:	85 e8       	ldi	r24, 0x85	; 133
    2ca0:	80 93 bc 00 	sts	0x00BC, r24
    2ca4:	58 c0       	rjmp	.+176    	; 0x2d56 <__vector_24+0x224>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2ca6:	80 91 41 02 	lds	r24, 0x0241
    2caa:	80 32       	cpi	r24, 0x20	; 32
    2cac:	30 f4       	brcc	.+12     	; 0x2cba <__vector_24+0x188>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2cae:	e0 91 41 02 	lds	r30, 0x0241
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	ee 5b       	subi	r30, 0xBE	; 190
    2cb6:	fd 4f       	sbci	r31, 0xFD	; 253
    2cb8:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    2cba:	0e 94 88 15 	call	0x2b10	; 0x2b10 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2cbe:	60 91 41 02 	lds	r22, 0x0241
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	e0 91 a6 02 	lds	r30, 0x02A6
    2cc8:	f0 91 a7 02 	lds	r31, 0x02A7
    2ccc:	82 e4       	ldi	r24, 0x42	; 66
    2cce:	92 e0       	ldi	r25, 0x02	; 2
    2cd0:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2cd2:	10 92 41 02 	sts	0x0241, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2cd6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <twi_releaseBus>
      break;
    2cda:	3d c0       	rjmp	.+122    	; 0x2d56 <__vector_24+0x224>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2cdc:	85 e8       	ldi	r24, 0x85	; 133
    2cde:	80 93 bc 00 	sts	0x00BC, r24
    2ce2:	39 c0       	rjmp	.+114    	; 0x2d56 <__vector_24+0x224>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2ce4:	84 e0       	ldi	r24, 0x04	; 4
    2ce6:	80 93 ad 02 	sts	0x02AD, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2cea:	10 92 63 02 	sts	0x0263, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2cee:	10 92 62 02 	sts	0x0262, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2cf2:	e0 91 a8 02 	lds	r30, 0x02A8
    2cf6:	f0 91 a9 02 	lds	r31, 0x02A9
    2cfa:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2cfc:	80 91 62 02 	lds	r24, 0x0262
    2d00:	81 11       	cpse	r24, r1
    2d02:	05 c0       	rjmp	.+10     	; 0x2d0e <__vector_24+0x1dc>
        twi_txBufferLength = 1;
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	80 93 62 02 	sts	0x0262, r24
        twi_txBuffer[0] = 0x00;
    2d0a:	10 92 64 02 	sts	0x0264, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2d0e:	e0 91 63 02 	lds	r30, 0x0263
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	8e 0f       	add	r24, r30
    2d16:	80 93 63 02 	sts	0x0263, r24
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	ec 59       	subi	r30, 0x9C	; 156
    2d1e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d20:	80 81       	ld	r24, Z
    2d22:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2d26:	90 91 63 02 	lds	r25, 0x0263
    2d2a:	80 91 62 02 	lds	r24, 0x0262
    2d2e:	98 17       	cp	r25, r24
    2d30:	20 f4       	brcc	.+8      	; 0x2d3a <__vector_24+0x208>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2d32:	85 ec       	ldi	r24, 0xC5	; 197
    2d34:	80 93 bc 00 	sts	0x00BC, r24
    2d38:	0e c0       	rjmp	.+28     	; 0x2d56 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d3a:	85 e8       	ldi	r24, 0x85	; 133
    2d3c:	80 93 bc 00 	sts	0x00BC, r24
    2d40:	0a c0       	rjmp	.+20     	; 0x2d56 <__vector_24+0x224>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2d42:	85 ec       	ldi	r24, 0xC5	; 197
    2d44:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2d48:	10 92 ad 02 	sts	0x02AD, r1
      break;
    2d4c:	04 c0       	rjmp	.+8      	; 0x2d56 <__vector_24+0x224>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2d4e:	10 92 40 02 	sts	0x0240, r1
      twi_stop();
    2d52:	0e 94 88 15 	call	0x2b10	; 0x2b10 <twi_stop>
      break;
  }
}
    2d56:	ff 91       	pop	r31
    2d58:	ef 91       	pop	r30
    2d5a:	bf 91       	pop	r27
    2d5c:	af 91       	pop	r26
    2d5e:	9f 91       	pop	r25
    2d60:	8f 91       	pop	r24
    2d62:	7f 91       	pop	r23
    2d64:	6f 91       	pop	r22
    2d66:	5f 91       	pop	r21
    2d68:	4f 91       	pop	r20
    2d6a:	3f 91       	pop	r19
    2d6c:	2f 91       	pop	r18
    2d6e:	0f 90       	pop	r0
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	0f 90       	pop	r0
    2d74:	1f 90       	pop	r1
    2d76:	18 95       	reti

00002d78 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    2d78:	82 30       	cpi	r24, 0x02	; 2
    2d7a:	00 f5       	brcc	.+64     	; 0x2dbc <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    2d7c:	e8 2f       	mov	r30, r24
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	ee 0f       	add	r30, r30
    2d82:	ff 1f       	adc	r31, r31
    2d84:	e2 55       	subi	r30, 0x52	; 82
    2d86:	fd 4f       	sbci	r31, 0xFD	; 253
    2d88:	71 83       	std	Z+1, r23	; 0x01
    2d8a:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    2d8c:	88 23       	and	r24, r24
    2d8e:	19 f0       	breq	.+6      	; 0x2d96 <attachInterrupt+0x1e>
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	49 f0       	breq	.+18     	; 0x2da6 <attachInterrupt+0x2e>
    2d94:	08 95       	ret
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    2d96:	e9 e6       	ldi	r30, 0x69	; 105
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	8c 7f       	andi	r24, 0xFC	; 252
    2d9e:	48 2b       	or	r20, r24
    2da0:	40 83       	st	Z, r20
      EIMSK |= (1 << INT0);
    2da2:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    2da4:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    2da6:	e9 e6       	ldi	r30, 0x69	; 105
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	44 0f       	add	r20, r20
    2dae:	55 1f       	adc	r21, r21
    2db0:	44 0f       	add	r20, r20
    2db2:	55 1f       	adc	r21, r21
    2db4:	83 7f       	andi	r24, 0xF3	; 243
    2db6:	48 2b       	or	r20, r24
    2db8:	40 83       	st	Z, r20
      EIMSK |= (1 << INT1);
    2dba:	e9 9a       	sbi	0x1d, 1	; 29
    2dbc:	08 95       	ret

00002dbe <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    2dbe:	82 30       	cpi	r24, 0x02	; 2
    2dc0:	80 f4       	brcc	.+32     	; 0x2de2 <detachInterrupt+0x24>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    2dc2:	88 23       	and	r24, r24
    2dc4:	19 f0       	breq	.+6      	; 0x2dcc <detachInterrupt+0xe>
    2dc6:	81 30       	cpi	r24, 0x01	; 1
    2dc8:	19 f0       	breq	.+6      	; 0x2dd0 <detachInterrupt+0x12>
    2dca:	03 c0       	rjmp	.+6      	; 0x2dd2 <detachInterrupt+0x14>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    2dcc:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    2dce:	01 c0       	rjmp	.+2      	; 0x2dd2 <detachInterrupt+0x14>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    2dd0:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    2dd2:	e8 2f       	mov	r30, r24
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	ee 0f       	add	r30, r30
    2dd8:	ff 1f       	adc	r31, r31
    2dda:	e2 55       	subi	r30, 0x52	; 82
    2ddc:	fd 4f       	sbci	r31, 0xFD	; 253
    2dde:	11 82       	std	Z+1, r1	; 0x01
    2de0:	10 82       	st	Z, r1
    2de2:	08 95       	ret

00002de4 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    2de4:	1f 92       	push	r1
    2de6:	0f 92       	push	r0
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	0f 92       	push	r0
    2dec:	11 24       	eor	r1, r1
    2dee:	2f 93       	push	r18
    2df0:	3f 93       	push	r19
    2df2:	4f 93       	push	r20
    2df4:	5f 93       	push	r21
    2df6:	6f 93       	push	r22
    2df8:	7f 93       	push	r23
    2dfa:	8f 93       	push	r24
    2dfc:	9f 93       	push	r25
    2dfe:	af 93       	push	r26
    2e00:	bf 93       	push	r27
    2e02:	ef 93       	push	r30
    2e04:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    2e06:	80 91 ae 02 	lds	r24, 0x02AE
    2e0a:	90 91 af 02 	lds	r25, 0x02AF
    2e0e:	89 2b       	or	r24, r25
    2e10:	29 f0       	breq	.+10     	; 0x2e1c <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    2e12:	e0 91 ae 02 	lds	r30, 0x02AE
    2e16:	f0 91 af 02 	lds	r31, 0x02AF
    2e1a:	09 95       	icall
}
    2e1c:	ff 91       	pop	r31
    2e1e:	ef 91       	pop	r30
    2e20:	bf 91       	pop	r27
    2e22:	af 91       	pop	r26
    2e24:	9f 91       	pop	r25
    2e26:	8f 91       	pop	r24
    2e28:	7f 91       	pop	r23
    2e2a:	6f 91       	pop	r22
    2e2c:	5f 91       	pop	r21
    2e2e:	4f 91       	pop	r20
    2e30:	3f 91       	pop	r19
    2e32:	2f 91       	pop	r18
    2e34:	0f 90       	pop	r0
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	0f 90       	pop	r0
    2e3a:	1f 90       	pop	r1
    2e3c:	18 95       	reti

00002e3e <__vector_2>:

ISR(INT1_vect) {
    2e3e:	1f 92       	push	r1
    2e40:	0f 92       	push	r0
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	0f 92       	push	r0
    2e46:	11 24       	eor	r1, r1
    2e48:	2f 93       	push	r18
    2e4a:	3f 93       	push	r19
    2e4c:	4f 93       	push	r20
    2e4e:	5f 93       	push	r21
    2e50:	6f 93       	push	r22
    2e52:	7f 93       	push	r23
    2e54:	8f 93       	push	r24
    2e56:	9f 93       	push	r25
    2e58:	af 93       	push	r26
    2e5a:	bf 93       	push	r27
    2e5c:	ef 93       	push	r30
    2e5e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    2e60:	80 91 b0 02 	lds	r24, 0x02B0
    2e64:	90 91 b1 02 	lds	r25, 0x02B1
    2e68:	89 2b       	or	r24, r25
    2e6a:	29 f0       	breq	.+10     	; 0x2e76 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    2e6c:	e0 91 b0 02 	lds	r30, 0x02B0
    2e70:	f0 91 b1 02 	lds	r31, 0x02B1
    2e74:	09 95       	icall
}
    2e76:	ff 91       	pop	r31
    2e78:	ef 91       	pop	r30
    2e7a:	bf 91       	pop	r27
    2e7c:	af 91       	pop	r26
    2e7e:	9f 91       	pop	r25
    2e80:	8f 91       	pop	r24
    2e82:	7f 91       	pop	r23
    2e84:	6f 91       	pop	r22
    2e86:	5f 91       	pop	r21
    2e88:	4f 91       	pop	r20
    2e8a:	3f 91       	pop	r19
    2e8c:	2f 91       	pop	r18
    2e8e:	0f 90       	pop	r0
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	0f 90       	pop	r0
    2e94:	1f 90       	pop	r1
    2e96:	18 95       	reti

00002e98 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    2e98:	80 91 e2 02 	lds	r24, 0x02E2
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	20 91 e3 02 	lds	r18, 0x02E3
}
    2ea2:	82 1b       	sub	r24, r18
    2ea4:	91 09       	sbc	r25, r1
    2ea6:	08 95       	ret

00002ea8 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2ea8:	90 91 e3 02 	lds	r25, 0x02E3
    2eac:	80 91 e2 02 	lds	r24, 0x02E2
    2eb0:	98 17       	cp	r25, r24
    2eb2:	50 f4       	brcc	.+20     	; 0x2ec8 <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    2eb4:	e9 2f       	mov	r30, r25
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	ec 51       	subi	r30, 0x1C	; 28
    2eba:	fd 4f       	sbci	r31, 0xFD	; 253
    2ebc:	20 81       	ld	r18, Z
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    2ec0:	9f 5f       	subi	r25, 0xFF	; 255
    2ec2:	90 93 e3 02 	sts	0x02E3, r25
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    2ec8:	2f ef       	ldi	r18, 0xFF	; 255
    2eca:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    2ecc:	c9 01       	movw	r24, r18
    2ece:	08 95       	ret

00002ed0 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    2ed0:	e0 91 e3 02 	lds	r30, 0x02E3
    2ed4:	80 91 e2 02 	lds	r24, 0x02E2
    2ed8:	e8 17       	cp	r30, r24
    2eda:	30 f4       	brcc	.+12     	; 0x2ee8 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	ec 51       	subi	r30, 0x1C	; 28
    2ee0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ee2:	80 81       	ld	r24, Z
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    2ee8:	8f ef       	ldi	r24, 0xFF	; 255
    2eea:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    2eec:	08 95       	ret

00002eee <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    2eee:	08 95       	ret

00002ef0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2ef0:	cf 92       	push	r12
    2ef2:	df 92       	push	r13
    2ef4:	ef 92       	push	r14
    2ef6:	ff 92       	push	r15
    2ef8:	0f 93       	push	r16
    2efa:	1f 93       	push	r17
    2efc:	cf 93       	push	r28
    2efe:	df 93       	push	r29
    2f00:	8c 01       	movw	r16, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	6a 01       	movw	r12, r20
  if(transmitting){
    2f06:	20 91 be 02 	lds	r18, 0x02BE
    2f0a:	22 23       	and	r18, r18
    2f0c:	a1 f0       	breq	.+40     	; 0x2f36 <_ZN7TwoWire5writeEPKhj+0x46>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2f0e:	41 15       	cp	r20, r1
    2f10:	51 05       	cpc	r21, r1
    2f12:	a1 f0       	breq	.+40     	; 0x2f3c <_ZN7TwoWire5writeEPKhj+0x4c>
    2f14:	eb 01       	movw	r28, r22
    2f16:	7b 01       	movw	r14, r22
    2f18:	e4 0e       	add	r14, r20
    2f1a:	f5 1e       	adc	r15, r21
      write(data[i]);
    2f1c:	69 91       	ld	r22, Y+
    2f1e:	d8 01       	movw	r26, r16
    2f20:	ed 91       	ld	r30, X+
    2f22:	fc 91       	ld	r31, X
    2f24:	01 90       	ld	r0, Z+
    2f26:	f0 81       	ld	r31, Z
    2f28:	e0 2d       	mov	r30, r0
    2f2a:	c8 01       	movw	r24, r16
    2f2c:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2f2e:	ce 15       	cp	r28, r14
    2f30:	df 05       	cpc	r29, r15
    2f32:	a1 f7       	brne	.-24     	; 0x2f1c <_ZN7TwoWire5writeEPKhj+0x2c>
    2f34:	03 c0       	rjmp	.+6      	; 0x2f3c <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2f36:	64 2f       	mov	r22, r20
    2f38:	0e 94 67 15 	call	0x2ace	; 0x2ace <twi_transmit>
  }
  return quantity;
}
    2f3c:	c6 01       	movw	r24, r12
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	1f 91       	pop	r17
    2f44:	0f 91       	pop	r16
    2f46:	ff 90       	pop	r15
    2f48:	ef 90       	pop	r14
    2f4a:	df 90       	pop	r13
    2f4c:	cf 90       	pop	r12
    2f4e:	08 95       	ret

00002f50 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    2f50:	cf 93       	push	r28
    2f52:	df 93       	push	r29
    2f54:	1f 92       	push	r1
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    2f5a:	fc 01       	movw	r30, r24
    2f5c:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    2f5e:	90 91 be 02 	lds	r25, 0x02BE
    2f62:	99 23       	and	r25, r25
    2f64:	d9 f0       	breq	.+54     	; 0x2f9c <_ZN7TwoWire5writeEh+0x4c>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2f66:	90 91 bf 02 	lds	r25, 0x02BF
    2f6a:	90 32       	cpi	r25, 0x20	; 32
    2f6c:	38 f0       	brcs	.+14     	; 0x2f7c <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	93 83       	std	Z+3, r25	; 0x03
    2f74:	82 83       	std	Z+2, r24	; 0x02
      setWriteError();
      return 0;
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	17 c0       	rjmp	.+46     	; 0x2faa <_ZN7TwoWire5writeEh+0x5a>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2f7c:	80 91 c0 02 	lds	r24, 0x02C0
    2f80:	e8 2f       	mov	r30, r24
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	ef 53       	subi	r30, 0x3F	; 63
    2f86:	fd 4f       	sbci	r31, 0xFD	; 253
    2f88:	99 81       	ldd	r25, Y+1	; 0x01
    2f8a:	90 83       	st	Z, r25
    ++txBufferIndex;
    2f8c:	8f 5f       	subi	r24, 0xFF	; 255
    2f8e:	80 93 c0 02 	sts	0x02C0, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    2f92:	80 93 bf 02 	sts	0x02BF, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	07 c0       	rjmp	.+14     	; 0x2faa <_ZN7TwoWire5writeEh+0x5a>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2f9c:	61 e0       	ldi	r22, 0x01	; 1
    2f9e:	ce 01       	movw	r24, r28
    2fa0:	01 96       	adiw	r24, 0x01	; 1
    2fa2:	0e 94 67 15 	call	0x2ace	; 0x2ace <twi_transmit>
  }
  return 1;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
}
    2faa:	0f 90       	pop	r0
    2fac:	df 91       	pop	r29
    2fae:	cf 91       	pop	r28
    2fb0:	08 95       	ret

00002fb2 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2fb2:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    2fb4:	13 82       	std	Z+3, r1	; 0x03
    2fb6:	12 82       	std	Z+2, r1	; 0x02
    2fb8:	88 ee       	ldi	r24, 0xE8	; 232
    2fba:	93 e0       	ldi	r25, 0x03	; 3
    2fbc:	a0 e0       	ldi	r26, 0x00	; 0
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	84 83       	std	Z+4, r24	; 0x04
    2fc2:	95 83       	std	Z+5, r25	; 0x05
    2fc4:	a6 83       	std	Z+6, r26	; 0x06
    2fc6:	b7 83       	std	Z+7, r27	; 0x07
    2fc8:	8a e4       	ldi	r24, 0x4A	; 74
    2fca:	91 e0       	ldi	r25, 0x01	; 1
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	80 83       	st	Z, r24
    2fd0:	08 95       	ret

00002fd2 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    2fd2:	10 92 e3 02 	sts	0x02E3, r1
  rxBufferLength = 0;
    2fd6:	10 92 e2 02 	sts	0x02E2, r1

  txBufferIndex = 0;
    2fda:	10 92 c0 02 	sts	0x02C0, r1
  txBufferLength = 0;
    2fde:	10 92 bf 02 	sts	0x02BF, r1

  twi_init();
    2fe2:	0e 94 a0 14 	call	0x2940	; 0x2940 <twi_init>
    2fe6:	08 95       	ret

00002fe8 <_ZN7TwoWire11requestFromEhhh>:
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
    2fe8:	86 2f       	mov	r24, r22
    2fea:	41 32       	cpi	r20, 0x21	; 33
    2fec:	08 f0       	brcs	.+2      	; 0x2ff0 <_ZN7TwoWire11requestFromEhhh+0x8>
    2fee:	40 e2       	ldi	r20, 0x20	; 32
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    2ff0:	64 ee       	ldi	r22, 0xE4	; 228
    2ff2:	72 e0       	ldi	r23, 0x02	; 2
    2ff4:	0e 94 be 14 	call	0x297c	; 0x297c <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2ff8:	10 92 e3 02 	sts	0x02E3, r1
  rxBufferLength = read;
    2ffc:	80 93 e2 02 	sts	0x02E2, r24

  return read;
}
    3000:	08 95       	ret

00003002 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    3002:	21 e0       	ldi	r18, 0x01	; 1
    3004:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <_ZN7TwoWire11requestFromEhhh>
}
    3008:	08 95       	ret

0000300a <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	80 93 be 02 	sts	0x02BE, r24
  // set address of targeted slave
  txAddress = address;
    3010:	60 93 e1 02 	sts	0x02E1, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    3014:	10 92 c0 02 	sts	0x02C0, r1
  txBufferLength = 0;
    3018:	10 92 bf 02 	sts	0x02BF, r1
    301c:	08 95       	ret

0000301e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    301e:	0e 94 05 18 	call	0x300a	; 0x300a <_ZN7TwoWire17beginTransmissionEh>
    3022:	08 95       	ret

00003024 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    3024:	0f 93       	push	r16
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    3026:	06 2f       	mov	r16, r22
    3028:	21 e0       	ldi	r18, 0x01	; 1
    302a:	40 91 bf 02 	lds	r20, 0x02BF
    302e:	61 ec       	ldi	r22, 0xC1	; 193
    3030:	72 e0       	ldi	r23, 0x02	; 2
    3032:	80 91 e1 02 	lds	r24, 0x02E1
    3036:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    303a:	10 92 c0 02 	sts	0x02C0, r1
  txBufferLength = 0;
    303e:	10 92 bf 02 	sts	0x02BF, r1
  // indicate that we are done transmitting
  transmitting = 0;
    3042:	10 92 be 02 	sts	0x02BE, r1
  return ret;
}
    3046:	0f 91       	pop	r16
    3048:	08 95       	ret

0000304a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    304a:	61 e0       	ldi	r22, 0x01	; 1
    304c:	0e 94 12 18 	call	0x3024	; 0x3024 <_ZN7TwoWire15endTransmissionEh>
}
    3050:	08 95       	ret

00003052 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3052:	82 eb       	ldi	r24, 0xB2	; 178
    3054:	92 e0       	ldi	r25, 0x02	; 2
    3056:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <_ZN7TwoWireC1Ev>
    305a:	08 95       	ret

0000305c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    305c:	1f 92       	push	r1
    305e:	0f 92       	push	r0
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	0f 92       	push	r0
    3064:	11 24       	eor	r1, r1
    3066:	2f 93       	push	r18
    3068:	3f 93       	push	r19
    306a:	8f 93       	push	r24
    306c:	9f 93       	push	r25
    306e:	af 93       	push	r26
    3070:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3072:	80 91 05 03 	lds	r24, 0x0305
    3076:	90 91 06 03 	lds	r25, 0x0306
    307a:	a0 91 07 03 	lds	r26, 0x0307
    307e:	b0 91 08 03 	lds	r27, 0x0308
	unsigned char f = timer0_fract;
    3082:	30 91 04 03 	lds	r19, 0x0304

	m += MILLIS_INC;
	f += FRACT_INC;
    3086:	23 e0       	ldi	r18, 0x03	; 3
    3088:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    308a:	2d 37       	cpi	r18, 0x7D	; 125
    308c:	20 f4       	brcc	.+8      	; 0x3096 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    308e:	01 96       	adiw	r24, 0x01	; 1
    3090:	a1 1d       	adc	r26, r1
    3092:	b1 1d       	adc	r27, r1
    3094:	05 c0       	rjmp	.+10     	; 0x30a0 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3096:	26 e8       	ldi	r18, 0x86	; 134
    3098:	23 0f       	add	r18, r19
		m += 1;
    309a:	02 96       	adiw	r24, 0x02	; 2
    309c:	a1 1d       	adc	r26, r1
    309e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    30a0:	20 93 04 03 	sts	0x0304, r18
	timer0_millis = m;
    30a4:	80 93 05 03 	sts	0x0305, r24
    30a8:	90 93 06 03 	sts	0x0306, r25
    30ac:	a0 93 07 03 	sts	0x0307, r26
    30b0:	b0 93 08 03 	sts	0x0308, r27
	timer0_overflow_count++;
    30b4:	80 91 09 03 	lds	r24, 0x0309
    30b8:	90 91 0a 03 	lds	r25, 0x030A
    30bc:	a0 91 0b 03 	lds	r26, 0x030B
    30c0:	b0 91 0c 03 	lds	r27, 0x030C
    30c4:	01 96       	adiw	r24, 0x01	; 1
    30c6:	a1 1d       	adc	r26, r1
    30c8:	b1 1d       	adc	r27, r1
    30ca:	80 93 09 03 	sts	0x0309, r24
    30ce:	90 93 0a 03 	sts	0x030A, r25
    30d2:	a0 93 0b 03 	sts	0x030B, r26
    30d6:	b0 93 0c 03 	sts	0x030C, r27
}
    30da:	bf 91       	pop	r27
    30dc:	af 91       	pop	r26
    30de:	9f 91       	pop	r25
    30e0:	8f 91       	pop	r24
    30e2:	3f 91       	pop	r19
    30e4:	2f 91       	pop	r18
    30e6:	0f 90       	pop	r0
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	0f 90       	pop	r0
    30ec:	1f 90       	pop	r1
    30ee:	18 95       	reti

000030f0 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    30f0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    30f2:	f8 94       	cli
	m = timer0_overflow_count;
    30f4:	80 91 09 03 	lds	r24, 0x0309
    30f8:	90 91 0a 03 	lds	r25, 0x030A
    30fc:	a0 91 0b 03 	lds	r26, 0x030B
    3100:	b0 91 0c 03 	lds	r27, 0x030C
#if defined(TCNT0)
	t = TCNT0;
    3104:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3106:	a8 9b       	sbis	0x15, 0	; 21
    3108:	05 c0       	rjmp	.+10     	; 0x3114 <micros+0x24>
    310a:	2f 3f       	cpi	r18, 0xFF	; 255
    310c:	19 f0       	breq	.+6      	; 0x3114 <micros+0x24>
		m++;
    310e:	01 96       	adiw	r24, 0x01	; 1
    3110:	a1 1d       	adc	r26, r1
    3112:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3114:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3116:	ba 2f       	mov	r27, r26
    3118:	a9 2f       	mov	r26, r25
    311a:	98 2f       	mov	r25, r24
    311c:	88 27       	eor	r24, r24
    311e:	82 0f       	add	r24, r18
    3120:	91 1d       	adc	r25, r1
    3122:	a1 1d       	adc	r26, r1
    3124:	b1 1d       	adc	r27, r1
    3126:	bc 01       	movw	r22, r24
    3128:	cd 01       	movw	r24, r26
    312a:	66 0f       	add	r22, r22
    312c:	77 1f       	adc	r23, r23
    312e:	88 1f       	adc	r24, r24
    3130:	99 1f       	adc	r25, r25
    3132:	66 0f       	add	r22, r22
    3134:	77 1f       	adc	r23, r23
    3136:	88 1f       	adc	r24, r24
    3138:	99 1f       	adc	r25, r25
}
    313a:	08 95       	ret

0000313c <delay>:

void delay(unsigned long ms)
{
    313c:	cf 92       	push	r12
    313e:	df 92       	push	r13
    3140:	ef 92       	push	r14
    3142:	ff 92       	push	r15
    3144:	cf 93       	push	r28
    3146:	df 93       	push	r29
    3148:	6b 01       	movw	r12, r22
    314a:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    314c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <micros>
    3150:	eb 01       	movw	r28, r22

	while (ms > 0) {
    3152:	c1 14       	cp	r12, r1
    3154:	d1 04       	cpc	r13, r1
    3156:	e1 04       	cpc	r14, r1
    3158:	f1 04       	cpc	r15, r1
    315a:	a9 f0       	breq	.+42     	; 0x3186 <delay+0x4a>
		yield();
    315c:	0e 94 2c 12 	call	0x2458	; 0x2458 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    3160:	0e 94 78 18 	call	0x30f0	; 0x30f0 <micros>
    3164:	6c 1b       	sub	r22, r28
    3166:	7d 0b       	sbc	r23, r29
    3168:	68 3e       	cpi	r22, 0xE8	; 232
    316a:	73 40       	sbci	r23, 0x03	; 3
    316c:	38 f0       	brcs	.+14     	; 0x317c <delay+0x40>
			ms--;
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	c8 1a       	sub	r12, r24
    3172:	d1 08       	sbc	r13, r1
    3174:	e1 08       	sbc	r14, r1
    3176:	f1 08       	sbc	r15, r1
			start += 1000;
    3178:	c8 51       	subi	r28, 0x18	; 24
    317a:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    317c:	c1 14       	cp	r12, r1
    317e:	d1 04       	cpc	r13, r1
    3180:	e1 04       	cpc	r14, r1
    3182:	f1 04       	cpc	r15, r1
    3184:	59 f7       	brne	.-42     	; 0x315c <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    3186:	df 91       	pop	r29
    3188:	cf 91       	pop	r28
    318a:	ff 90       	pop	r15
    318c:	ef 90       	pop	r14
    318e:	df 90       	pop	r13
    3190:	cf 90       	pop	r12
    3192:	08 95       	ret

00003194 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3194:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3196:	84 b5       	in	r24, 0x24	; 36
    3198:	82 60       	ori	r24, 0x02	; 2
    319a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    319c:	84 b5       	in	r24, 0x24	; 36
    319e:	81 60       	ori	r24, 0x01	; 1
    31a0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    31a2:	85 b5       	in	r24, 0x25	; 37
    31a4:	82 60       	ori	r24, 0x02	; 2
    31a6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    31a8:	85 b5       	in	r24, 0x25	; 37
    31aa:	81 60       	ori	r24, 0x01	; 1
    31ac:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    31ae:	ee e6       	ldi	r30, 0x6E	; 110
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	81 60       	ori	r24, 0x01	; 1
    31b6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    31b8:	e1 e8       	ldi	r30, 0x81	; 129
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    31be:	80 81       	ld	r24, Z
    31c0:	82 60       	ori	r24, 0x02	; 2
    31c2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    31c4:	80 81       	ld	r24, Z
    31c6:	81 60       	ori	r24, 0x01	; 1
    31c8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    31ca:	e0 e8       	ldi	r30, 0x80	; 128
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	80 81       	ld	r24, Z
    31d0:	81 60       	ori	r24, 0x01	; 1
    31d2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    31d4:	e1 eb       	ldi	r30, 0xB1	; 177
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	80 81       	ld	r24, Z
    31da:	84 60       	ori	r24, 0x04	; 4
    31dc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    31de:	e0 eb       	ldi	r30, 0xB0	; 176
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	81 60       	ori	r24, 0x01	; 1
    31e6:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    31e8:	ea e7       	ldi	r30, 0x7A	; 122
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	84 60       	ori	r24, 0x04	; 4
    31f0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    31f2:	80 81       	ld	r24, Z
    31f4:	82 60       	ori	r24, 0x02	; 2
    31f6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    31f8:	80 81       	ld	r24, Z
    31fa:	81 60       	ori	r24, 0x01	; 1
    31fc:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    31fe:	80 81       	ld	r24, Z
    3200:	80 68       	ori	r24, 0x80	; 128
    3202:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3204:	10 92 c1 00 	sts	0x00C1, r1
    3208:	08 95       	ret

0000320a <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    320a:	8e 30       	cpi	r24, 0x0E	; 14
    320c:	08 f0       	brcs	.+2      	; 0x3210 <analogRead+0x6>
    320e:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3210:	87 70       	andi	r24, 0x07	; 7
    3212:	90 91 2f 01 	lds	r25, 0x012F
    3216:	40 e4       	ldi	r20, 0x40	; 64
    3218:	94 9f       	mul	r25, r20
    321a:	90 01       	movw	r18, r0
    321c:	11 24       	eor	r1, r1
    321e:	28 2b       	or	r18, r24
    3220:	20 93 7c 00 	sts	0x007C, r18
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3224:	ea e7       	ldi	r30, 0x7A	; 122
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	80 64       	ori	r24, 0x40	; 64
    322c:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    322e:	80 81       	ld	r24, Z
    3230:	86 fd       	sbrc	r24, 6
    3232:	fd cf       	rjmp	.-6      	; 0x322e <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3234:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    3238:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    323c:	90 e0       	ldi	r25, 0x00	; 0
}
    323e:	92 2b       	or	r25, r18
    3240:	08 95       	ret

00003242 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3242:	83 30       	cpi	r24, 0x03	; 3
    3244:	69 f0       	breq	.+26     	; 0x3260 <turnOffPWM+0x1e>
    3246:	28 f4       	brcc	.+10     	; 0x3252 <turnOffPWM+0x10>
    3248:	81 30       	cpi	r24, 0x01	; 1
    324a:	b1 f0       	breq	.+44     	; 0x3278 <turnOffPWM+0x36>
    324c:	82 30       	cpi	r24, 0x02	; 2
    324e:	c1 f0       	breq	.+48     	; 0x3280 <turnOffPWM+0x3e>
    3250:	08 95       	ret
    3252:	87 30       	cpi	r24, 0x07	; 7
    3254:	c9 f0       	breq	.+50     	; 0x3288 <turnOffPWM+0x46>
    3256:	88 30       	cpi	r24, 0x08	; 8
    3258:	e9 f0       	breq	.+58     	; 0x3294 <turnOffPWM+0x52>
    325a:	84 30       	cpi	r24, 0x04	; 4
    325c:	01 f5       	brne	.+64     	; 0x329e <turnOffPWM+0x5c>
    325e:	06 c0       	rjmp	.+12     	; 0x326c <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3260:	e0 e8       	ldi	r30, 0x80	; 128
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	8f 77       	andi	r24, 0x7F	; 127
    3268:	80 83       	st	Z, r24
    326a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    326c:	e0 e8       	ldi	r30, 0x80	; 128
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	8f 7d       	andi	r24, 0xDF	; 223
    3274:	80 83       	st	Z, r24
    3276:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3278:	84 b5       	in	r24, 0x24	; 36
    327a:	8f 77       	andi	r24, 0x7F	; 127
    327c:	84 bd       	out	0x24, r24	; 36
    327e:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3280:	84 b5       	in	r24, 0x24	; 36
    3282:	8f 7d       	andi	r24, 0xDF	; 223
    3284:	84 bd       	out	0x24, r24	; 36
    3286:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3288:	e0 eb       	ldi	r30, 0xB0	; 176
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	8f 77       	andi	r24, 0x7F	; 127
    3290:	80 83       	st	Z, r24
    3292:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3294:	e0 eb       	ldi	r30, 0xB0	; 176
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	8f 7d       	andi	r24, 0xDF	; 223
    329c:	80 83       	st	Z, r24
    329e:	08 95       	ret

000032a0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	fc 01       	movw	r30, r24
    32a8:	e4 57       	subi	r30, 0x74	; 116
    32aa:	fd 4f       	sbci	r31, 0xFD	; 253
    32ac:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    32ae:	fc 01       	movw	r30, r24
    32b0:	e0 56       	subi	r30, 0x60	; 96
    32b2:	fd 4f       	sbci	r31, 0xFD	; 253
    32b4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    32b6:	88 23       	and	r24, r24
    32b8:	79 f1       	breq	.+94     	; 0x3318 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	88 0f       	add	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	fc 01       	movw	r30, r24
    32c2:	e8 53       	subi	r30, 0x38	; 56
    32c4:	fd 4f       	sbci	r31, 0xFD	; 253
    32c6:	a5 91       	lpm	r26, Z+
    32c8:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    32ca:	fc 01       	movw	r30, r24
    32cc:	e2 54       	subi	r30, 0x42	; 66
    32ce:	fd 4f       	sbci	r31, 0xFD	; 253
    32d0:	c5 91       	lpm	r28, Z+
    32d2:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    32d4:	61 11       	cpse	r22, r1
    32d6:	0c c0       	rjmp	.+24     	; 0x32f0 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    32d8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    32da:	f8 94       	cli
		*reg &= ~bit;
    32dc:	8c 91       	ld	r24, X
    32de:	e2 2f       	mov	r30, r18
    32e0:	e0 95       	com	r30
    32e2:	8e 23       	and	r24, r30
    32e4:	8c 93       	st	X, r24
		*out &= ~bit;
    32e6:	28 81       	ld	r18, Y
    32e8:	e2 23       	and	r30, r18
    32ea:	e8 83       	st	Y, r30
		SREG = oldSREG;
    32ec:	9f bf       	out	0x3f, r25	; 63
    32ee:	14 c0       	rjmp	.+40     	; 0x3318 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    32f0:	62 30       	cpi	r22, 0x02	; 2
    32f2:	61 f4       	brne	.+24     	; 0x330c <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    32f4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    32f6:	f8 94       	cli
		*reg &= ~bit;
    32f8:	3c 91       	ld	r19, X
    32fa:	82 2f       	mov	r24, r18
    32fc:	80 95       	com	r24
    32fe:	83 23       	and	r24, r19
    3300:	8c 93       	st	X, r24
		*out |= bit;
    3302:	e8 81       	ld	r30, Y
    3304:	e2 2b       	or	r30, r18
    3306:	e8 83       	st	Y, r30
		SREG = oldSREG;
    3308:	9f bf       	out	0x3f, r25	; 63
    330a:	06 c0       	rjmp	.+12     	; 0x3318 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    330c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    330e:	f8 94       	cli
		*reg |= bit;
    3310:	ec 91       	ld	r30, X
    3312:	e2 2b       	or	r30, r18
    3314:	ec 93       	st	X, r30
		SREG = oldSREG;
    3316:	8f bf       	out	0x3f, r24	; 63
	}
}
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	08 95       	ret

0000331e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    331e:	1f 93       	push	r17
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3324:	28 2f       	mov	r18, r24
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	f9 01       	movw	r30, r18
    332a:	e8 58       	subi	r30, 0x88	; 136
    332c:	fd 4f       	sbci	r31, 0xFD	; 253
    332e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3330:	f9 01       	movw	r30, r18
    3332:	e4 57       	subi	r30, 0x74	; 116
    3334:	fd 4f       	sbci	r31, 0xFD	; 253
    3336:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    3338:	f9 01       	movw	r30, r18
    333a:	e0 56       	subi	r30, 0x60	; 96
    333c:	fd 4f       	sbci	r31, 0xFD	; 253
    333e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3340:	cc 23       	and	r28, r28
    3342:	d1 f0       	breq	.+52     	; 0x3378 <digitalWrite+0x5a>
    3344:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3346:	81 11       	cpse	r24, r1
    3348:	0e 94 21 19 	call	0x3242	; 0x3242 <turnOffPWM>

	out = portOutputRegister(port);
    334c:	ec 2f       	mov	r30, r28
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	ee 0f       	add	r30, r30
    3352:	ff 1f       	adc	r31, r31
    3354:	e2 54       	subi	r30, 0x42	; 66
    3356:	fd 4f       	sbci	r31, 0xFD	; 253
    3358:	a5 91       	lpm	r26, Z+
    335a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    335c:	8f b7       	in	r24, 0x3f	; 63
	cli();
    335e:	f8 94       	cli

	if (val == LOW) {
    3360:	d1 11       	cpse	r29, r1
    3362:	06 c0       	rjmp	.+12     	; 0x3370 <digitalWrite+0x52>
		*out &= ~bit;
    3364:	9c 91       	ld	r25, X
    3366:	e1 2f       	mov	r30, r17
    3368:	e0 95       	com	r30
    336a:	e9 23       	and	r30, r25
    336c:	ec 93       	st	X, r30
    336e:	03 c0       	rjmp	.+6      	; 0x3376 <digitalWrite+0x58>
	} else {
		*out |= bit;
    3370:	ec 91       	ld	r30, X
    3372:	e1 2b       	or	r30, r17
    3374:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    3376:	8f bf       	out	0x3f, r24	; 63
}
    3378:	df 91       	pop	r29
    337a:	cf 91       	pop	r28
    337c:	1f 91       	pop	r17
    337e:	08 95       	ret

00003380 <digitalRead>:

int digitalRead(uint8_t pin)
{
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3384:	28 2f       	mov	r18, r24
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	f9 01       	movw	r30, r18
    338a:	e8 58       	subi	r30, 0x88	; 136
    338c:	fd 4f       	sbci	r31, 0xFD	; 253
    338e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3390:	f9 01       	movw	r30, r18
    3392:	e4 57       	subi	r30, 0x74	; 116
    3394:	fd 4f       	sbci	r31, 0xFD	; 253
    3396:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3398:	f9 01       	movw	r30, r18
    339a:	e0 56       	subi	r30, 0x60	; 96
    339c:	fd 4f       	sbci	r31, 0xFD	; 253
    339e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    33a0:	cc 23       	and	r28, r28
    33a2:	91 f0       	breq	.+36     	; 0x33c8 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    33a4:	81 11       	cpse	r24, r1
    33a6:	0e 94 21 19 	call	0x3242	; 0x3242 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    33aa:	ec 2f       	mov	r30, r28
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	ee 0f       	add	r30, r30
    33b0:	ff 1f       	adc	r31, r31
    33b2:	ec 54       	subi	r30, 0x4C	; 76
    33b4:	fd 4f       	sbci	r31, 0xFD	; 253
    33b6:	a5 91       	lpm	r26, Z+
    33b8:	b4 91       	lpm	r27, Z
    33ba:	ec 91       	ld	r30, X
    33bc:	ed 23       	and	r30, r29
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	21 f4       	brne	.+8      	; 0x33cc <digitalRead+0x4c>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	08 95       	ret

000033d2 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    33d2:	bf 92       	push	r11
    33d4:	cf 92       	push	r12
    33d6:	df 92       	push	r13
    33d8:	ef 92       	push	r14
    33da:	ff 92       	push	r15
    33dc:	0f 93       	push	r16
    33de:	1f 93       	push	r17
    33e0:	cf 93       	push	r28
    33e2:	df 93       	push	r29
    33e4:	b8 2e       	mov	r11, r24
    33e6:	16 2f       	mov	r17, r22
    33e8:	04 2f       	mov	r16, r20
    33ea:	c7 e0       	ldi	r28, 0x07	; 7
    33ec:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    33ee:	e2 2e       	mov	r14, r18
    33f0:	f1 2c       	mov	r15, r1
    33f2:	0f 2e       	mov	r0, r31
    33f4:	f7 e0       	ldi	r31, 0x07	; 7
    33f6:	cf 2e       	mov	r12, r31
    33f8:	d1 2c       	mov	r13, r1
    33fa:	f0 2d       	mov	r31, r0
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    33fc:	01 11       	cpse	r16, r1
    33fe:	0e c0       	rjmp	.+28     	; 0x341c <shiftOut+0x4a>
    3400:	c6 01       	movw	r24, r12
    3402:	8c 1b       	sub	r24, r28
    3404:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
    3406:	b7 01       	movw	r22, r14
    3408:	02 c0       	rjmp	.+4      	; 0x340e <shiftOut+0x3c>
    340a:	75 95       	asr	r23
    340c:	67 95       	ror	r22
    340e:	8a 95       	dec	r24
    3410:	e2 f7       	brpl	.-8      	; 0x340a <shiftOut+0x38>
    3412:	61 70       	andi	r22, 0x01	; 1
    3414:	8b 2d       	mov	r24, r11
    3416:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
    341a:	0b c0       	rjmp	.+22     	; 0x3432 <shiftOut+0x60>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    341c:	b7 01       	movw	r22, r14
    341e:	0c 2e       	mov	r0, r28
    3420:	02 c0       	rjmp	.+4      	; 0x3426 <shiftOut+0x54>
    3422:	75 95       	asr	r23
    3424:	67 95       	ror	r22
    3426:	0a 94       	dec	r0
    3428:	e2 f7       	brpl	.-8      	; 0x3422 <shiftOut+0x50>
    342a:	61 70       	andi	r22, 0x01	; 1
    342c:	8b 2d       	mov	r24, r11
    342e:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    3432:	61 e0       	ldi	r22, 0x01	; 1
    3434:	81 2f       	mov	r24, r17
    3436:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
		digitalWrite(clockPin, LOW);		
    343a:	60 e0       	ldi	r22, 0x00	; 0
    343c:	81 2f       	mov	r24, r17
    343e:	0e 94 8f 19 	call	0x331e	; 0x331e <digitalWrite>
    3442:	21 97       	sbiw	r28, 0x01	; 1
    3444:	d8 f6       	brcc	.-74     	; 0x33fc <shiftOut+0x2a>
	}
}
    3446:	df 91       	pop	r29
    3448:	cf 91       	pop	r28
    344a:	1f 91       	pop	r17
    344c:	0f 91       	pop	r16
    344e:	ff 90       	pop	r15
    3450:	ef 90       	pop	r14
    3452:	df 90       	pop	r13
    3454:	cf 90       	pop	r12
    3456:	bf 90       	pop	r11
    3458:	08 95       	ret

0000345a <__subsf3>:
    345a:	50 58       	subi	r21, 0x80	; 128

0000345c <__addsf3>:
    345c:	bb 27       	eor	r27, r27
    345e:	aa 27       	eor	r26, r26
    3460:	0e 94 45 1a 	call	0x348a	; 0x348a <__addsf3x>
    3464:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__fp_round>
    3468:	0e 94 88 1b 	call	0x3710	; 0x3710 <__fp_pscA>
    346c:	38 f0       	brcs	.+14     	; 0x347c <__addsf3+0x20>
    346e:	0e 94 8f 1b 	call	0x371e	; 0x371e <__fp_pscB>
    3472:	20 f0       	brcs	.+8      	; 0x347c <__addsf3+0x20>
    3474:	39 f4       	brne	.+14     	; 0x3484 <__addsf3+0x28>
    3476:	9f 3f       	cpi	r25, 0xFF	; 255
    3478:	19 f4       	brne	.+6      	; 0x3480 <__addsf3+0x24>
    347a:	26 f4       	brtc	.+8      	; 0x3484 <__addsf3+0x28>
    347c:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__fp_nan>
    3480:	0e f4       	brtc	.+2      	; 0x3484 <__addsf3+0x28>
    3482:	e0 95       	com	r30
    3484:	e7 fb       	bst	r30, 7
    3486:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <__fp_inf>

0000348a <__addsf3x>:
    348a:	e9 2f       	mov	r30, r25
    348c:	0e 94 a7 1b 	call	0x374e	; 0x374e <__fp_split3>
    3490:	58 f3       	brcs	.-42     	; 0x3468 <__addsf3+0xc>
    3492:	ba 17       	cp	r27, r26
    3494:	62 07       	cpc	r22, r18
    3496:	73 07       	cpc	r23, r19
    3498:	84 07       	cpc	r24, r20
    349a:	95 07       	cpc	r25, r21
    349c:	20 f0       	brcs	.+8      	; 0x34a6 <__addsf3x+0x1c>
    349e:	79 f4       	brne	.+30     	; 0x34be <__addsf3x+0x34>
    34a0:	a6 f5       	brtc	.+104    	; 0x350a <__addsf3x+0x80>
    34a2:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__fp_zero>
    34a6:	0e f4       	brtc	.+2      	; 0x34aa <__addsf3x+0x20>
    34a8:	e0 95       	com	r30
    34aa:	0b 2e       	mov	r0, r27
    34ac:	ba 2f       	mov	r27, r26
    34ae:	a0 2d       	mov	r26, r0
    34b0:	0b 01       	movw	r0, r22
    34b2:	b9 01       	movw	r22, r18
    34b4:	90 01       	movw	r18, r0
    34b6:	0c 01       	movw	r0, r24
    34b8:	ca 01       	movw	r24, r20
    34ba:	a0 01       	movw	r20, r0
    34bc:	11 24       	eor	r1, r1
    34be:	ff 27       	eor	r31, r31
    34c0:	59 1b       	sub	r21, r25
    34c2:	99 f0       	breq	.+38     	; 0x34ea <__addsf3x+0x60>
    34c4:	59 3f       	cpi	r21, 0xF9	; 249
    34c6:	50 f4       	brcc	.+20     	; 0x34dc <__addsf3x+0x52>
    34c8:	50 3e       	cpi	r21, 0xE0	; 224
    34ca:	68 f1       	brcs	.+90     	; 0x3526 <__addsf3x+0x9c>
    34cc:	1a 16       	cp	r1, r26
    34ce:	f0 40       	sbci	r31, 0x00	; 0
    34d0:	a2 2f       	mov	r26, r18
    34d2:	23 2f       	mov	r18, r19
    34d4:	34 2f       	mov	r19, r20
    34d6:	44 27       	eor	r20, r20
    34d8:	58 5f       	subi	r21, 0xF8	; 248
    34da:	f3 cf       	rjmp	.-26     	; 0x34c2 <__addsf3x+0x38>
    34dc:	46 95       	lsr	r20
    34de:	37 95       	ror	r19
    34e0:	27 95       	ror	r18
    34e2:	a7 95       	ror	r26
    34e4:	f0 40       	sbci	r31, 0x00	; 0
    34e6:	53 95       	inc	r21
    34e8:	c9 f7       	brne	.-14     	; 0x34dc <__addsf3x+0x52>
    34ea:	7e f4       	brtc	.+30     	; 0x350a <__addsf3x+0x80>
    34ec:	1f 16       	cp	r1, r31
    34ee:	ba 0b       	sbc	r27, r26
    34f0:	62 0b       	sbc	r22, r18
    34f2:	73 0b       	sbc	r23, r19
    34f4:	84 0b       	sbc	r24, r20
    34f6:	ba f0       	brmi	.+46     	; 0x3526 <__addsf3x+0x9c>
    34f8:	91 50       	subi	r25, 0x01	; 1
    34fa:	a1 f0       	breq	.+40     	; 0x3524 <__addsf3x+0x9a>
    34fc:	ff 0f       	add	r31, r31
    34fe:	bb 1f       	adc	r27, r27
    3500:	66 1f       	adc	r22, r22
    3502:	77 1f       	adc	r23, r23
    3504:	88 1f       	adc	r24, r24
    3506:	c2 f7       	brpl	.-16     	; 0x34f8 <__addsf3x+0x6e>
    3508:	0e c0       	rjmp	.+28     	; 0x3526 <__addsf3x+0x9c>
    350a:	ba 0f       	add	r27, r26
    350c:	62 1f       	adc	r22, r18
    350e:	73 1f       	adc	r23, r19
    3510:	84 1f       	adc	r24, r20
    3512:	48 f4       	brcc	.+18     	; 0x3526 <__addsf3x+0x9c>
    3514:	87 95       	ror	r24
    3516:	77 95       	ror	r23
    3518:	67 95       	ror	r22
    351a:	b7 95       	ror	r27
    351c:	f7 95       	ror	r31
    351e:	9e 3f       	cpi	r25, 0xFE	; 254
    3520:	08 f0       	brcs	.+2      	; 0x3524 <__addsf3x+0x9a>
    3522:	b0 cf       	rjmp	.-160    	; 0x3484 <__addsf3+0x28>
    3524:	93 95       	inc	r25
    3526:	88 0f       	add	r24, r24
    3528:	08 f0       	brcs	.+2      	; 0x352c <__addsf3x+0xa2>
    352a:	99 27       	eor	r25, r25
    352c:	ee 0f       	add	r30, r30
    352e:	97 95       	ror	r25
    3530:	87 95       	ror	r24
    3532:	08 95       	ret

00003534 <__divsf3>:
    3534:	0e 94 ae 1a 	call	0x355c	; 0x355c <__divsf3x>
    3538:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__fp_round>
    353c:	0e 94 8f 1b 	call	0x371e	; 0x371e <__fp_pscB>
    3540:	58 f0       	brcs	.+22     	; 0x3558 <__divsf3+0x24>
    3542:	0e 94 88 1b 	call	0x3710	; 0x3710 <__fp_pscA>
    3546:	40 f0       	brcs	.+16     	; 0x3558 <__divsf3+0x24>
    3548:	29 f4       	brne	.+10     	; 0x3554 <__divsf3+0x20>
    354a:	5f 3f       	cpi	r21, 0xFF	; 255
    354c:	29 f0       	breq	.+10     	; 0x3558 <__divsf3+0x24>
    354e:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <__fp_inf>
    3552:	51 11       	cpse	r21, r1
    3554:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__fp_szero>
    3558:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__fp_nan>

0000355c <__divsf3x>:
    355c:	0e 94 a7 1b 	call	0x374e	; 0x374e <__fp_split3>
    3560:	68 f3       	brcs	.-38     	; 0x353c <__divsf3+0x8>

00003562 <__divsf3_pse>:
    3562:	99 23       	and	r25, r25
    3564:	b1 f3       	breq	.-20     	; 0x3552 <__divsf3+0x1e>
    3566:	55 23       	and	r21, r21
    3568:	91 f3       	breq	.-28     	; 0x354e <__divsf3+0x1a>
    356a:	95 1b       	sub	r25, r21
    356c:	55 0b       	sbc	r21, r21
    356e:	bb 27       	eor	r27, r27
    3570:	aa 27       	eor	r26, r26
    3572:	62 17       	cp	r22, r18
    3574:	73 07       	cpc	r23, r19
    3576:	84 07       	cpc	r24, r20
    3578:	38 f0       	brcs	.+14     	; 0x3588 <__divsf3_pse+0x26>
    357a:	9f 5f       	subi	r25, 0xFF	; 255
    357c:	5f 4f       	sbci	r21, 0xFF	; 255
    357e:	22 0f       	add	r18, r18
    3580:	33 1f       	adc	r19, r19
    3582:	44 1f       	adc	r20, r20
    3584:	aa 1f       	adc	r26, r26
    3586:	a9 f3       	breq	.-22     	; 0x3572 <__divsf3_pse+0x10>
    3588:	35 d0       	rcall	.+106    	; 0x35f4 <__divsf3_pse+0x92>
    358a:	0e 2e       	mov	r0, r30
    358c:	3a f0       	brmi	.+14     	; 0x359c <__divsf3_pse+0x3a>
    358e:	e0 e8       	ldi	r30, 0x80	; 128
    3590:	32 d0       	rcall	.+100    	; 0x35f6 <__divsf3_pse+0x94>
    3592:	91 50       	subi	r25, 0x01	; 1
    3594:	50 40       	sbci	r21, 0x00	; 0
    3596:	e6 95       	lsr	r30
    3598:	00 1c       	adc	r0, r0
    359a:	ca f7       	brpl	.-14     	; 0x358e <__divsf3_pse+0x2c>
    359c:	2b d0       	rcall	.+86     	; 0x35f4 <__divsf3_pse+0x92>
    359e:	fe 2f       	mov	r31, r30
    35a0:	29 d0       	rcall	.+82     	; 0x35f4 <__divsf3_pse+0x92>
    35a2:	66 0f       	add	r22, r22
    35a4:	77 1f       	adc	r23, r23
    35a6:	88 1f       	adc	r24, r24
    35a8:	bb 1f       	adc	r27, r27
    35aa:	26 17       	cp	r18, r22
    35ac:	37 07       	cpc	r19, r23
    35ae:	48 07       	cpc	r20, r24
    35b0:	ab 07       	cpc	r26, r27
    35b2:	b0 e8       	ldi	r27, 0x80	; 128
    35b4:	09 f0       	breq	.+2      	; 0x35b8 <__divsf3_pse+0x56>
    35b6:	bb 0b       	sbc	r27, r27
    35b8:	80 2d       	mov	r24, r0
    35ba:	bf 01       	movw	r22, r30
    35bc:	ff 27       	eor	r31, r31
    35be:	93 58       	subi	r25, 0x83	; 131
    35c0:	5f 4f       	sbci	r21, 0xFF	; 255
    35c2:	3a f0       	brmi	.+14     	; 0x35d2 <__divsf3_pse+0x70>
    35c4:	9e 3f       	cpi	r25, 0xFE	; 254
    35c6:	51 05       	cpc	r21, r1
    35c8:	78 f0       	brcs	.+30     	; 0x35e8 <__divsf3_pse+0x86>
    35ca:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <__fp_inf>
    35ce:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__fp_szero>
    35d2:	5f 3f       	cpi	r21, 0xFF	; 255
    35d4:	e4 f3       	brlt	.-8      	; 0x35ce <__divsf3_pse+0x6c>
    35d6:	98 3e       	cpi	r25, 0xE8	; 232
    35d8:	d4 f3       	brlt	.-12     	; 0x35ce <__divsf3_pse+0x6c>
    35da:	86 95       	lsr	r24
    35dc:	77 95       	ror	r23
    35de:	67 95       	ror	r22
    35e0:	b7 95       	ror	r27
    35e2:	f7 95       	ror	r31
    35e4:	9f 5f       	subi	r25, 0xFF	; 255
    35e6:	c9 f7       	brne	.-14     	; 0x35da <__divsf3_pse+0x78>
    35e8:	88 0f       	add	r24, r24
    35ea:	91 1d       	adc	r25, r1
    35ec:	96 95       	lsr	r25
    35ee:	87 95       	ror	r24
    35f0:	97 f9       	bld	r25, 7
    35f2:	08 95       	ret
    35f4:	e1 e0       	ldi	r30, 0x01	; 1
    35f6:	66 0f       	add	r22, r22
    35f8:	77 1f       	adc	r23, r23
    35fa:	88 1f       	adc	r24, r24
    35fc:	bb 1f       	adc	r27, r27
    35fe:	62 17       	cp	r22, r18
    3600:	73 07       	cpc	r23, r19
    3602:	84 07       	cpc	r24, r20
    3604:	ba 07       	cpc	r27, r26
    3606:	20 f0       	brcs	.+8      	; 0x3610 <__divsf3_pse+0xae>
    3608:	62 1b       	sub	r22, r18
    360a:	73 0b       	sbc	r23, r19
    360c:	84 0b       	sbc	r24, r20
    360e:	ba 0b       	sbc	r27, r26
    3610:	ee 1f       	adc	r30, r30
    3612:	88 f7       	brcc	.-30     	; 0x35f6 <__divsf3_pse+0x94>
    3614:	e0 95       	com	r30
    3616:	08 95       	ret

00003618 <__fixsfsi>:
    3618:	0e 94 13 1b 	call	0x3626	; 0x3626 <__fixunssfsi>
    361c:	68 94       	set
    361e:	b1 11       	cpse	r27, r1
    3620:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__fp_szero>
    3624:	08 95       	ret

00003626 <__fixunssfsi>:
    3626:	0e 94 af 1b 	call	0x375e	; 0x375e <__fp_splitA>
    362a:	88 f0       	brcs	.+34     	; 0x364e <__fixunssfsi+0x28>
    362c:	9f 57       	subi	r25, 0x7F	; 127
    362e:	98 f0       	brcs	.+38     	; 0x3656 <__fixunssfsi+0x30>
    3630:	b9 2f       	mov	r27, r25
    3632:	99 27       	eor	r25, r25
    3634:	b7 51       	subi	r27, 0x17	; 23
    3636:	b0 f0       	brcs	.+44     	; 0x3664 <__fixunssfsi+0x3e>
    3638:	e1 f0       	breq	.+56     	; 0x3672 <__fixunssfsi+0x4c>
    363a:	66 0f       	add	r22, r22
    363c:	77 1f       	adc	r23, r23
    363e:	88 1f       	adc	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	1a f0       	brmi	.+6      	; 0x364a <__fixunssfsi+0x24>
    3644:	ba 95       	dec	r27
    3646:	c9 f7       	brne	.-14     	; 0x363a <__fixunssfsi+0x14>
    3648:	14 c0       	rjmp	.+40     	; 0x3672 <__fixunssfsi+0x4c>
    364a:	b1 30       	cpi	r27, 0x01	; 1
    364c:	91 f0       	breq	.+36     	; 0x3672 <__fixunssfsi+0x4c>
    364e:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__fp_zero>
    3652:	b1 e0       	ldi	r27, 0x01	; 1
    3654:	08 95       	ret
    3656:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__fp_zero>
    365a:	67 2f       	mov	r22, r23
    365c:	78 2f       	mov	r23, r24
    365e:	88 27       	eor	r24, r24
    3660:	b8 5f       	subi	r27, 0xF8	; 248
    3662:	39 f0       	breq	.+14     	; 0x3672 <__fixunssfsi+0x4c>
    3664:	b9 3f       	cpi	r27, 0xF9	; 249
    3666:	cc f3       	brlt	.-14     	; 0x365a <__fixunssfsi+0x34>
    3668:	86 95       	lsr	r24
    366a:	77 95       	ror	r23
    366c:	67 95       	ror	r22
    366e:	b3 95       	inc	r27
    3670:	d9 f7       	brne	.-10     	; 0x3668 <__fixunssfsi+0x42>
    3672:	3e f4       	brtc	.+14     	; 0x3682 <__fixunssfsi+0x5c>
    3674:	90 95       	com	r25
    3676:	80 95       	com	r24
    3678:	70 95       	com	r23
    367a:	61 95       	neg	r22
    367c:	7f 4f       	sbci	r23, 0xFF	; 255
    367e:	8f 4f       	sbci	r24, 0xFF	; 255
    3680:	9f 4f       	sbci	r25, 0xFF	; 255
    3682:	08 95       	ret

00003684 <__floatunsisf>:
    3684:	e8 94       	clt
    3686:	09 c0       	rjmp	.+18     	; 0x369a <__floatsisf+0x12>

00003688 <__floatsisf>:
    3688:	97 fb       	bst	r25, 7
    368a:	3e f4       	brtc	.+14     	; 0x369a <__floatsisf+0x12>
    368c:	90 95       	com	r25
    368e:	80 95       	com	r24
    3690:	70 95       	com	r23
    3692:	61 95       	neg	r22
    3694:	7f 4f       	sbci	r23, 0xFF	; 255
    3696:	8f 4f       	sbci	r24, 0xFF	; 255
    3698:	9f 4f       	sbci	r25, 0xFF	; 255
    369a:	99 23       	and	r25, r25
    369c:	a9 f0       	breq	.+42     	; 0x36c8 <__floatsisf+0x40>
    369e:	f9 2f       	mov	r31, r25
    36a0:	96 e9       	ldi	r25, 0x96	; 150
    36a2:	bb 27       	eor	r27, r27
    36a4:	93 95       	inc	r25
    36a6:	f6 95       	lsr	r31
    36a8:	87 95       	ror	r24
    36aa:	77 95       	ror	r23
    36ac:	67 95       	ror	r22
    36ae:	b7 95       	ror	r27
    36b0:	f1 11       	cpse	r31, r1
    36b2:	f8 cf       	rjmp	.-16     	; 0x36a4 <__floatsisf+0x1c>
    36b4:	fa f4       	brpl	.+62     	; 0x36f4 <__floatsisf+0x6c>
    36b6:	bb 0f       	add	r27, r27
    36b8:	11 f4       	brne	.+4      	; 0x36be <__floatsisf+0x36>
    36ba:	60 ff       	sbrs	r22, 0
    36bc:	1b c0       	rjmp	.+54     	; 0x36f4 <__floatsisf+0x6c>
    36be:	6f 5f       	subi	r22, 0xFF	; 255
    36c0:	7f 4f       	sbci	r23, 0xFF	; 255
    36c2:	8f 4f       	sbci	r24, 0xFF	; 255
    36c4:	9f 4f       	sbci	r25, 0xFF	; 255
    36c6:	16 c0       	rjmp	.+44     	; 0x36f4 <__floatsisf+0x6c>
    36c8:	88 23       	and	r24, r24
    36ca:	11 f0       	breq	.+4      	; 0x36d0 <__floatsisf+0x48>
    36cc:	96 e9       	ldi	r25, 0x96	; 150
    36ce:	11 c0       	rjmp	.+34     	; 0x36f2 <__floatsisf+0x6a>
    36d0:	77 23       	and	r23, r23
    36d2:	21 f0       	breq	.+8      	; 0x36dc <__floatsisf+0x54>
    36d4:	9e e8       	ldi	r25, 0x8E	; 142
    36d6:	87 2f       	mov	r24, r23
    36d8:	76 2f       	mov	r23, r22
    36da:	05 c0       	rjmp	.+10     	; 0x36e6 <__floatsisf+0x5e>
    36dc:	66 23       	and	r22, r22
    36de:	71 f0       	breq	.+28     	; 0x36fc <__floatsisf+0x74>
    36e0:	96 e8       	ldi	r25, 0x86	; 134
    36e2:	86 2f       	mov	r24, r22
    36e4:	70 e0       	ldi	r23, 0x00	; 0
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	2a f0       	brmi	.+10     	; 0x36f4 <__floatsisf+0x6c>
    36ea:	9a 95       	dec	r25
    36ec:	66 0f       	add	r22, r22
    36ee:	77 1f       	adc	r23, r23
    36f0:	88 1f       	adc	r24, r24
    36f2:	da f7       	brpl	.-10     	; 0x36ea <__floatsisf+0x62>
    36f4:	88 0f       	add	r24, r24
    36f6:	96 95       	lsr	r25
    36f8:	87 95       	ror	r24
    36fa:	97 f9       	bld	r25, 7
    36fc:	08 95       	ret

000036fe <__fp_inf>:
    36fe:	97 f9       	bld	r25, 7
    3700:	9f 67       	ori	r25, 0x7F	; 127
    3702:	80 e8       	ldi	r24, 0x80	; 128
    3704:	70 e0       	ldi	r23, 0x00	; 0
    3706:	60 e0       	ldi	r22, 0x00	; 0
    3708:	08 95       	ret

0000370a <__fp_nan>:
    370a:	9f ef       	ldi	r25, 0xFF	; 255
    370c:	80 ec       	ldi	r24, 0xC0	; 192
    370e:	08 95       	ret

00003710 <__fp_pscA>:
    3710:	00 24       	eor	r0, r0
    3712:	0a 94       	dec	r0
    3714:	16 16       	cp	r1, r22
    3716:	17 06       	cpc	r1, r23
    3718:	18 06       	cpc	r1, r24
    371a:	09 06       	cpc	r0, r25
    371c:	08 95       	ret

0000371e <__fp_pscB>:
    371e:	00 24       	eor	r0, r0
    3720:	0a 94       	dec	r0
    3722:	12 16       	cp	r1, r18
    3724:	13 06       	cpc	r1, r19
    3726:	14 06       	cpc	r1, r20
    3728:	05 06       	cpc	r0, r21
    372a:	08 95       	ret

0000372c <__fp_round>:
    372c:	09 2e       	mov	r0, r25
    372e:	03 94       	inc	r0
    3730:	00 0c       	add	r0, r0
    3732:	11 f4       	brne	.+4      	; 0x3738 <__fp_round+0xc>
    3734:	88 23       	and	r24, r24
    3736:	52 f0       	brmi	.+20     	; 0x374c <__fp_round+0x20>
    3738:	bb 0f       	add	r27, r27
    373a:	40 f4       	brcc	.+16     	; 0x374c <__fp_round+0x20>
    373c:	bf 2b       	or	r27, r31
    373e:	11 f4       	brne	.+4      	; 0x3744 <__fp_round+0x18>
    3740:	60 ff       	sbrs	r22, 0
    3742:	04 c0       	rjmp	.+8      	; 0x374c <__fp_round+0x20>
    3744:	6f 5f       	subi	r22, 0xFF	; 255
    3746:	7f 4f       	sbci	r23, 0xFF	; 255
    3748:	8f 4f       	sbci	r24, 0xFF	; 255
    374a:	9f 4f       	sbci	r25, 0xFF	; 255
    374c:	08 95       	ret

0000374e <__fp_split3>:
    374e:	57 fd       	sbrc	r21, 7
    3750:	90 58       	subi	r25, 0x80	; 128
    3752:	44 0f       	add	r20, r20
    3754:	55 1f       	adc	r21, r21
    3756:	59 f0       	breq	.+22     	; 0x376e <__fp_splitA+0x10>
    3758:	5f 3f       	cpi	r21, 0xFF	; 255
    375a:	71 f0       	breq	.+28     	; 0x3778 <__fp_splitA+0x1a>
    375c:	47 95       	ror	r20

0000375e <__fp_splitA>:
    375e:	88 0f       	add	r24, r24
    3760:	97 fb       	bst	r25, 7
    3762:	99 1f       	adc	r25, r25
    3764:	61 f0       	breq	.+24     	; 0x377e <__fp_splitA+0x20>
    3766:	9f 3f       	cpi	r25, 0xFF	; 255
    3768:	79 f0       	breq	.+30     	; 0x3788 <__fp_splitA+0x2a>
    376a:	87 95       	ror	r24
    376c:	08 95       	ret
    376e:	12 16       	cp	r1, r18
    3770:	13 06       	cpc	r1, r19
    3772:	14 06       	cpc	r1, r20
    3774:	55 1f       	adc	r21, r21
    3776:	f2 cf       	rjmp	.-28     	; 0x375c <__fp_split3+0xe>
    3778:	46 95       	lsr	r20
    377a:	f1 df       	rcall	.-30     	; 0x375e <__fp_splitA>
    377c:	08 c0       	rjmp	.+16     	; 0x378e <__fp_splitA+0x30>
    377e:	16 16       	cp	r1, r22
    3780:	17 06       	cpc	r1, r23
    3782:	18 06       	cpc	r1, r24
    3784:	99 1f       	adc	r25, r25
    3786:	f1 cf       	rjmp	.-30     	; 0x376a <__fp_splitA+0xc>
    3788:	86 95       	lsr	r24
    378a:	71 05       	cpc	r23, r1
    378c:	61 05       	cpc	r22, r1
    378e:	08 94       	sec
    3790:	08 95       	ret

00003792 <__fp_zero>:
    3792:	e8 94       	clt

00003794 <__fp_szero>:
    3794:	bb 27       	eor	r27, r27
    3796:	66 27       	eor	r22, r22
    3798:	77 27       	eor	r23, r23
    379a:	cb 01       	movw	r24, r22
    379c:	97 f9       	bld	r25, 7
    379e:	08 95       	ret

000037a0 <__mulsf3>:
    37a0:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3x>
    37a4:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__fp_round>
    37a8:	0e 94 88 1b 	call	0x3710	; 0x3710 <__fp_pscA>
    37ac:	38 f0       	brcs	.+14     	; 0x37bc <__mulsf3+0x1c>
    37ae:	0e 94 8f 1b 	call	0x371e	; 0x371e <__fp_pscB>
    37b2:	20 f0       	brcs	.+8      	; 0x37bc <__mulsf3+0x1c>
    37b4:	95 23       	and	r25, r21
    37b6:	11 f0       	breq	.+4      	; 0x37bc <__mulsf3+0x1c>
    37b8:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <__fp_inf>
    37bc:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__fp_nan>
    37c0:	11 24       	eor	r1, r1
    37c2:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__fp_szero>

000037c6 <__mulsf3x>:
    37c6:	0e 94 a7 1b 	call	0x374e	; 0x374e <__fp_split3>
    37ca:	70 f3       	brcs	.-36     	; 0x37a8 <__mulsf3+0x8>

000037cc <__mulsf3_pse>:
    37cc:	95 9f       	mul	r25, r21
    37ce:	c1 f3       	breq	.-16     	; 0x37c0 <__mulsf3+0x20>
    37d0:	95 0f       	add	r25, r21
    37d2:	50 e0       	ldi	r21, 0x00	; 0
    37d4:	55 1f       	adc	r21, r21
    37d6:	62 9f       	mul	r22, r18
    37d8:	f0 01       	movw	r30, r0
    37da:	72 9f       	mul	r23, r18
    37dc:	bb 27       	eor	r27, r27
    37de:	f0 0d       	add	r31, r0
    37e0:	b1 1d       	adc	r27, r1
    37e2:	63 9f       	mul	r22, r19
    37e4:	aa 27       	eor	r26, r26
    37e6:	f0 0d       	add	r31, r0
    37e8:	b1 1d       	adc	r27, r1
    37ea:	aa 1f       	adc	r26, r26
    37ec:	64 9f       	mul	r22, r20
    37ee:	66 27       	eor	r22, r22
    37f0:	b0 0d       	add	r27, r0
    37f2:	a1 1d       	adc	r26, r1
    37f4:	66 1f       	adc	r22, r22
    37f6:	82 9f       	mul	r24, r18
    37f8:	22 27       	eor	r18, r18
    37fa:	b0 0d       	add	r27, r0
    37fc:	a1 1d       	adc	r26, r1
    37fe:	62 1f       	adc	r22, r18
    3800:	73 9f       	mul	r23, r19
    3802:	b0 0d       	add	r27, r0
    3804:	a1 1d       	adc	r26, r1
    3806:	62 1f       	adc	r22, r18
    3808:	83 9f       	mul	r24, r19
    380a:	a0 0d       	add	r26, r0
    380c:	61 1d       	adc	r22, r1
    380e:	22 1f       	adc	r18, r18
    3810:	74 9f       	mul	r23, r20
    3812:	33 27       	eor	r19, r19
    3814:	a0 0d       	add	r26, r0
    3816:	61 1d       	adc	r22, r1
    3818:	23 1f       	adc	r18, r19
    381a:	84 9f       	mul	r24, r20
    381c:	60 0d       	add	r22, r0
    381e:	21 1d       	adc	r18, r1
    3820:	82 2f       	mov	r24, r18
    3822:	76 2f       	mov	r23, r22
    3824:	6a 2f       	mov	r22, r26
    3826:	11 24       	eor	r1, r1
    3828:	9f 57       	subi	r25, 0x7F	; 127
    382a:	50 40       	sbci	r21, 0x00	; 0
    382c:	9a f0       	brmi	.+38     	; 0x3854 <__mulsf3_pse+0x88>
    382e:	f1 f0       	breq	.+60     	; 0x386c <__mulsf3_pse+0xa0>
    3830:	88 23       	and	r24, r24
    3832:	4a f0       	brmi	.+18     	; 0x3846 <__mulsf3_pse+0x7a>
    3834:	ee 0f       	add	r30, r30
    3836:	ff 1f       	adc	r31, r31
    3838:	bb 1f       	adc	r27, r27
    383a:	66 1f       	adc	r22, r22
    383c:	77 1f       	adc	r23, r23
    383e:	88 1f       	adc	r24, r24
    3840:	91 50       	subi	r25, 0x01	; 1
    3842:	50 40       	sbci	r21, 0x00	; 0
    3844:	a9 f7       	brne	.-22     	; 0x3830 <__mulsf3_pse+0x64>
    3846:	9e 3f       	cpi	r25, 0xFE	; 254
    3848:	51 05       	cpc	r21, r1
    384a:	80 f0       	brcs	.+32     	; 0x386c <__mulsf3_pse+0xa0>
    384c:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <__fp_inf>
    3850:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__fp_szero>
    3854:	5f 3f       	cpi	r21, 0xFF	; 255
    3856:	e4 f3       	brlt	.-8      	; 0x3850 <__mulsf3_pse+0x84>
    3858:	98 3e       	cpi	r25, 0xE8	; 232
    385a:	d4 f3       	brlt	.-12     	; 0x3850 <__mulsf3_pse+0x84>
    385c:	86 95       	lsr	r24
    385e:	77 95       	ror	r23
    3860:	67 95       	ror	r22
    3862:	b7 95       	ror	r27
    3864:	f7 95       	ror	r31
    3866:	e7 95       	ror	r30
    3868:	9f 5f       	subi	r25, 0xFF	; 255
    386a:	c1 f7       	brne	.-16     	; 0x385c <__mulsf3_pse+0x90>
    386c:	fe 2b       	or	r31, r30
    386e:	88 0f       	add	r24, r24
    3870:	91 1d       	adc	r25, r1
    3872:	96 95       	lsr	r25
    3874:	87 95       	ror	r24
    3876:	97 f9       	bld	r25, 7
    3878:	08 95       	ret

0000387a <__divmodhi4>:
    387a:	97 fb       	bst	r25, 7
    387c:	07 2e       	mov	r0, r23
    387e:	16 f4       	brtc	.+4      	; 0x3884 <__divmodhi4+0xa>
    3880:	00 94       	com	r0
    3882:	07 d0       	rcall	.+14     	; 0x3892 <__divmodhi4_neg1>
    3884:	77 fd       	sbrc	r23, 7
    3886:	09 d0       	rcall	.+18     	; 0x389a <__divmodhi4_neg2>
    3888:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__udivmodhi4>
    388c:	07 fc       	sbrc	r0, 7
    388e:	05 d0       	rcall	.+10     	; 0x389a <__divmodhi4_neg2>
    3890:	3e f4       	brtc	.+14     	; 0x38a0 <__divmodhi4_exit>

00003892 <__divmodhi4_neg1>:
    3892:	90 95       	com	r25
    3894:	81 95       	neg	r24
    3896:	9f 4f       	sbci	r25, 0xFF	; 255
    3898:	08 95       	ret

0000389a <__divmodhi4_neg2>:
    389a:	70 95       	com	r23
    389c:	61 95       	neg	r22
    389e:	7f 4f       	sbci	r23, 0xFF	; 255

000038a0 <__divmodhi4_exit>:
    38a0:	08 95       	ret

000038a2 <__udivmodsi4>:
    38a2:	a1 e2       	ldi	r26, 0x21	; 33
    38a4:	1a 2e       	mov	r1, r26
    38a6:	aa 1b       	sub	r26, r26
    38a8:	bb 1b       	sub	r27, r27
    38aa:	fd 01       	movw	r30, r26
    38ac:	0d c0       	rjmp	.+26     	; 0x38c8 <__udivmodsi4_ep>

000038ae <__udivmodsi4_loop>:
    38ae:	aa 1f       	adc	r26, r26
    38b0:	bb 1f       	adc	r27, r27
    38b2:	ee 1f       	adc	r30, r30
    38b4:	ff 1f       	adc	r31, r31
    38b6:	a2 17       	cp	r26, r18
    38b8:	b3 07       	cpc	r27, r19
    38ba:	e4 07       	cpc	r30, r20
    38bc:	f5 07       	cpc	r31, r21
    38be:	20 f0       	brcs	.+8      	; 0x38c8 <__udivmodsi4_ep>
    38c0:	a2 1b       	sub	r26, r18
    38c2:	b3 0b       	sbc	r27, r19
    38c4:	e4 0b       	sbc	r30, r20
    38c6:	f5 0b       	sbc	r31, r21

000038c8 <__udivmodsi4_ep>:
    38c8:	66 1f       	adc	r22, r22
    38ca:	77 1f       	adc	r23, r23
    38cc:	88 1f       	adc	r24, r24
    38ce:	99 1f       	adc	r25, r25
    38d0:	1a 94       	dec	r1
    38d2:	69 f7       	brne	.-38     	; 0x38ae <__udivmodsi4_loop>
    38d4:	60 95       	com	r22
    38d6:	70 95       	com	r23
    38d8:	80 95       	com	r24
    38da:	90 95       	com	r25
    38dc:	9b 01       	movw	r18, r22
    38de:	ac 01       	movw	r20, r24
    38e0:	bd 01       	movw	r22, r26
    38e2:	cf 01       	movw	r24, r30
    38e4:	08 95       	ret

000038e6 <__tablejump2__>:
    38e6:	ee 0f       	add	r30, r30
    38e8:	ff 1f       	adc	r31, r31
    38ea:	05 90       	lpm	r0, Z+
    38ec:	f4 91       	lpm	r31, Z
    38ee:	e0 2d       	mov	r30, r0
    38f0:	09 94       	ijmp

000038f2 <__udivmodhi4>:
    38f2:	aa 1b       	sub	r26, r26
    38f4:	bb 1b       	sub	r27, r27
    38f6:	51 e1       	ldi	r21, 0x11	; 17
    38f8:	07 c0       	rjmp	.+14     	; 0x3908 <__udivmodhi4_ep>

000038fa <__udivmodhi4_loop>:
    38fa:	aa 1f       	adc	r26, r26
    38fc:	bb 1f       	adc	r27, r27
    38fe:	a6 17       	cp	r26, r22
    3900:	b7 07       	cpc	r27, r23
    3902:	10 f0       	brcs	.+4      	; 0x3908 <__udivmodhi4_ep>
    3904:	a6 1b       	sub	r26, r22
    3906:	b7 0b       	sbc	r27, r23

00003908 <__udivmodhi4_ep>:
    3908:	88 1f       	adc	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	5a 95       	dec	r21
    390e:	a9 f7       	brne	.-22     	; 0x38fa <__udivmodhi4_loop>
    3910:	80 95       	com	r24
    3912:	90 95       	com	r25
    3914:	bc 01       	movw	r22, r24
    3916:	cd 01       	movw	r24, r26
    3918:	08 95       	ret

0000391a <memcpy_P>:
    391a:	fb 01       	movw	r30, r22
    391c:	dc 01       	movw	r26, r24
    391e:	02 c0       	rjmp	.+4      	; 0x3924 <memcpy_P+0xa>
    3920:	05 90       	lpm	r0, Z+
    3922:	0d 92       	st	X+, r0
    3924:	41 50       	subi	r20, 0x01	; 1
    3926:	50 40       	sbci	r21, 0x00	; 0
    3928:	d8 f7       	brcc	.-10     	; 0x3920 <memcpy_P+0x6>
    392a:	08 95       	ret

0000392c <eeprom_read_byte>:
    392c:	f9 99       	sbic	0x1f, 1	; 31
    392e:	fe cf       	rjmp	.-4      	; 0x392c <eeprom_read_byte>
    3930:	92 bd       	out	0x22, r25	; 34
    3932:	81 bd       	out	0x21, r24	; 33
    3934:	f8 9a       	sbi	0x1f, 0	; 31
    3936:	99 27       	eor	r25, r25
    3938:	80 b5       	in	r24, 0x20	; 32
    393a:	08 95       	ret

0000393c <eeprom_write_byte>:
    393c:	26 2f       	mov	r18, r22

0000393e <eeprom_write_r18>:
    393e:	f9 99       	sbic	0x1f, 1	; 31
    3940:	fe cf       	rjmp	.-4      	; 0x393e <eeprom_write_r18>
    3942:	1f ba       	out	0x1f, r1	; 31
    3944:	92 bd       	out	0x22, r25	; 34
    3946:	81 bd       	out	0x21, r24	; 33
    3948:	20 bd       	out	0x20, r18	; 32
    394a:	0f b6       	in	r0, 0x3f	; 63
    394c:	f8 94       	cli
    394e:	fa 9a       	sbi	0x1f, 2	; 31
    3950:	f9 9a       	sbi	0x1f, 1	; 31
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	08 95       	ret

00003958 <_exit>:
    3958:	f8 94       	cli

0000395a <__stop_program>:
    395a:	ff cf       	rjmp	.-2      	; 0x395a <__stop_program>
