
MicroNumitron.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00003898  0000392c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b3  00800156  00800156  00003982  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003982  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000039b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e8  00000000  00000000  000039f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011d6f  00000000  00000000  000041dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d61  00000000  00000000  00015f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c71  00000000  00000000  00018cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a50  00000000  00000000  0001b920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000354e  00000000  00000000  0001d370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009de9  00000000  00000000  000208be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e0  00000000  00000000  0002a6a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__ctors_end>
       4:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__vector_1>
       8:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__vector_2>
       c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      10:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      14:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      18:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      1c:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__vector_7>
      20:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      24:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      28:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      2c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      30:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      34:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      38:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      3c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      40:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__vector_16>
      44:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      48:	0c 94 35 11 	jmp	0x226a	; 0x226a <__vector_18>
      4c:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__vector_19>
      50:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      54:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      58:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      5c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      60:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <__vector_24>
      64:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      68:	5c 13       	cpse	r21, r28
      6a:	7d 13       	cpse	r23, r29
      6c:	7d 13       	cpse	r23, r29
      6e:	7a 13       	cpse	r23, r26
      70:	7d 13       	cpse	r23, r29
      72:	58 13       	cpse	r21, r24
      74:	7d 13       	cpse	r23, r29
      76:	7d 13       	cpse	r23, r29
      78:	7d 13       	cpse	r23, r29
      7a:	4a 13       	cpse	r20, r26
      7c:	7d 13       	cpse	r23, r29
      7e:	7d 13       	cpse	r23, r29
      80:	65 13       	cpse	r22, r21
      82:	76 13       	cpse	r23, r22
      84:	72 13       	cpse	r23, r18
      86:	7d 13       	cpse	r23, r29
      88:	7d 13       	cpse	r23, r29
      8a:	7d 13       	cpse	r23, r29
      8c:	6e 13       	cpse	r22, r30
      8e:	45 16       	cp	r4, r21
      90:	49 16       	cp	r4, r25
      92:	49 16       	cp	r4, r25
      94:	49 16       	cp	r4, r25
      96:	49 16       	cp	r4, r25
      98:	49 16       	cp	r4, r25
      9a:	49 16       	cp	r4, r25
      9c:	49 16       	cp	r4, r25
      9e:	57 15       	cp	r21, r7
      a0:	49 16       	cp	r4, r25
      a2:	49 16       	cp	r4, r25
      a4:	49 16       	cp	r4, r25
      a6:	49 16       	cp	r4, r25
      a8:	49 16       	cp	r4, r25
      aa:	49 16       	cp	r4, r25
      ac:	49 16       	cp	r4, r25
      ae:	57 15       	cp	r21, r7
      b0:	49 16       	cp	r4, r25
      b2:	49 16       	cp	r4, r25
      b4:	49 16       	cp	r4, r25
      b6:	49 16       	cp	r4, r25
      b8:	49 16       	cp	r4, r25
      ba:	49 16       	cp	r4, r25
      bc:	49 16       	cp	r4, r25
      be:	5f 15       	cp	r21, r15
      c0:	49 16       	cp	r4, r25
      c2:	49 16       	cp	r4, r25
      c4:	49 16       	cp	r4, r25
      c6:	49 16       	cp	r4, r25
      c8:	49 16       	cp	r4, r25
      ca:	49 16       	cp	r4, r25
      cc:	49 16       	cp	r4, r25
      ce:	85 15       	cp	r24, r5
      d0:	49 16       	cp	r4, r25
      d2:	49 16       	cp	r4, r25
      d4:	49 16       	cp	r4, r25
      d6:	49 16       	cp	r4, r25
      d8:	49 16       	cp	r4, r25
      da:	49 16       	cp	r4, r25
      dc:	49 16       	cp	r4, r25
      de:	5f 15       	cp	r21, r15
      e0:	49 16       	cp	r4, r25
      e2:	49 16       	cp	r4, r25
      e4:	49 16       	cp	r4, r25
      e6:	49 16       	cp	r4, r25
      e8:	49 16       	cp	r4, r25
      ea:	49 16       	cp	r4, r25
      ec:	49 16       	cp	r4, r25
      ee:	8b 15       	cp	r24, r11
      f0:	49 16       	cp	r4, r25
      f2:	49 16       	cp	r4, r25
      f4:	49 16       	cp	r4, r25
      f6:	49 16       	cp	r4, r25
      f8:	49 16       	cp	r4, r25
      fa:	49 16       	cp	r4, r25
      fc:	49 16       	cp	r4, r25
      fe:	91 15       	cp	r25, r1
     100:	49 16       	cp	r4, r25
     102:	49 16       	cp	r4, r25
     104:	49 16       	cp	r4, r25
     106:	49 16       	cp	r4, r25
     108:	49 16       	cp	r4, r25
     10a:	49 16       	cp	r4, r25
     10c:	49 16       	cp	r4, r25
     10e:	a3 15       	cp	r26, r3
     110:	49 16       	cp	r4, r25
     112:	49 16       	cp	r4, r25
     114:	49 16       	cp	r4, r25
     116:	49 16       	cp	r4, r25
     118:	49 16       	cp	r4, r25
     11a:	49 16       	cp	r4, r25
     11c:	49 16       	cp	r4, r25
     11e:	cd 15       	cp	r28, r13
     120:	49 16       	cp	r4, r25
     122:	49 16       	cp	r4, r25
     124:	49 16       	cp	r4, r25
     126:	49 16       	cp	r4, r25
     128:	49 16       	cp	r4, r25
     12a:	49 16       	cp	r4, r25
     12c:	49 16       	cp	r4, r25
     12e:	97 15       	cp	r25, r7
     130:	49 16       	cp	r4, r25
     132:	49 16       	cp	r4, r25
     134:	49 16       	cp	r4, r25
     136:	49 16       	cp	r4, r25
     138:	49 16       	cp	r4, r25
     13a:	49 16       	cp	r4, r25
     13c:	49 16       	cp	r4, r25
     13e:	b1 15       	cp	r27, r1
     140:	49 16       	cp	r4, r25
     142:	49 16       	cp	r4, r25
     144:	49 16       	cp	r4, r25
     146:	49 16       	cp	r4, r25
     148:	49 16       	cp	r4, r25
     14a:	49 16       	cp	r4, r25
     14c:	49 16       	cp	r4, r25
     14e:	d0 15       	cp	r29, r0
     150:	49 16       	cp	r4, r25
     152:	49 16       	cp	r4, r25
     154:	49 16       	cp	r4, r25
     156:	49 16       	cp	r4, r25
     158:	49 16       	cp	r4, r25
     15a:	49 16       	cp	r4, r25
     15c:	49 16       	cp	r4, r25
     15e:	d0 15       	cp	r29, r0
     160:	49 16       	cp	r4, r25
     162:	49 16       	cp	r4, r25
     164:	49 16       	cp	r4, r25
     166:	49 16       	cp	r4, r25
     168:	49 16       	cp	r4, r25
     16a:	49 16       	cp	r4, r25
     16c:	49 16       	cp	r4, r25
     16e:	d0 15       	cp	r29, r0
     170:	49 16       	cp	r4, r25
     172:	49 16       	cp	r4, r25
     174:	49 16       	cp	r4, r25
     176:	49 16       	cp	r4, r25
     178:	49 16       	cp	r4, r25
     17a:	49 16       	cp	r4, r25
     17c:	49 16       	cp	r4, r25
     17e:	d0 15       	cp	r29, r0
     180:	49 16       	cp	r4, r25
     182:	49 16       	cp	r4, r25
     184:	49 16       	cp	r4, r25
     186:	49 16       	cp	r4, r25
     188:	49 16       	cp	r4, r25
     18a:	49 16       	cp	r4, r25
     18c:	49 16       	cp	r4, r25
     18e:	d9 15       	cp	r29, r9
     190:	49 16       	cp	r4, r25
     192:	49 16       	cp	r4, r25
     194:	49 16       	cp	r4, r25
     196:	49 16       	cp	r4, r25
     198:	49 16       	cp	r4, r25
     19a:	49 16       	cp	r4, r25
     19c:	49 16       	cp	r4, r25
     19e:	0c 16       	cp	r0, r28
     1a0:	49 16       	cp	r4, r25
     1a2:	49 16       	cp	r4, r25
     1a4:	49 16       	cp	r4, r25
     1a6:	49 16       	cp	r4, r25
     1a8:	49 16       	cp	r4, r25
     1aa:	49 16       	cp	r4, r25
     1ac:	49 16       	cp	r4, r25
     1ae:	d9 15       	cp	r29, r9
     1b0:	49 16       	cp	r4, r25
     1b2:	49 16       	cp	r4, r25
     1b4:	49 16       	cp	r4, r25
     1b6:	49 16       	cp	r4, r25
     1b8:	49 16       	cp	r4, r25
     1ba:	49 16       	cp	r4, r25
     1bc:	49 16       	cp	r4, r25
     1be:	0c 16       	cp	r0, r28
     1c0:	49 16       	cp	r4, r25
     1c2:	49 16       	cp	r4, r25
     1c4:	49 16       	cp	r4, r25
     1c6:	49 16       	cp	r4, r25
     1c8:	49 16       	cp	r4, r25
     1ca:	49 16       	cp	r4, r25
     1cc:	49 16       	cp	r4, r25
     1ce:	f1 15       	cp	r31, r1
     1d0:	49 16       	cp	r4, r25
     1d2:	49 16       	cp	r4, r25
     1d4:	49 16       	cp	r4, r25
     1d6:	49 16       	cp	r4, r25
     1d8:	49 16       	cp	r4, r25
     1da:	49 16       	cp	r4, r25
     1dc:	49 16       	cp	r4, r25
     1de:	10 16       	cp	r1, r16
     1e0:	49 16       	cp	r4, r25
     1e2:	49 16       	cp	r4, r25
     1e4:	49 16       	cp	r4, r25
     1e6:	49 16       	cp	r4, r25
     1e8:	49 16       	cp	r4, r25
     1ea:	49 16       	cp	r4, r25
     1ec:	49 16       	cp	r4, r25
     1ee:	10 16       	cp	r1, r16
     1f0:	49 16       	cp	r4, r25
     1f2:	49 16       	cp	r4, r25
     1f4:	49 16       	cp	r4, r25
     1f6:	49 16       	cp	r4, r25
     1f8:	49 16       	cp	r4, r25
     1fa:	49 16       	cp	r4, r25
     1fc:	49 16       	cp	r4, r25
     1fe:	25 16       	cp	r2, r21
     200:	49 16       	cp	r4, r25
     202:	49 16       	cp	r4, r25
     204:	49 16       	cp	r4, r25
     206:	49 16       	cp	r4, r25
     208:	49 16       	cp	r4, r25
     20a:	49 16       	cp	r4, r25
     20c:	49 16       	cp	r4, r25
     20e:	3f 16       	cp	r3, r31
     210:	49 16       	cp	r4, r25
     212:	49 16       	cp	r4, r25
     214:	49 16       	cp	r4, r25
     216:	49 16       	cp	r4, r25
     218:	49 16       	cp	r4, r25
     21a:	49 16       	cp	r4, r25
     21c:	49 16       	cp	r4, r25
     21e:	3f 16       	cp	r3, r31

00000220 <__trampolines_end>:
     220:	54 69       	ori	r21, 0x94	; 148
     222:	6d 65       	ori	r22, 0x5D	; 93
     224:	20 73       	andi	r18, 0x30	; 48
     226:	68 6f       	ori	r22, 0xF8	; 248
     228:	75 6c       	ori	r23, 0xC5	; 197
     22a:	64 20       	and	r6, r4
     22c:	62 65       	ori	r22, 0x52	; 82
     22e:	20 73       	andi	r18, 0x30	; 48
     230:	65 74       	andi	r22, 0x45	; 69
     232:	2e 0d       	add	r18, r14
     234:	0a 00       	.word	0x000a	; ????

00000236 <_ZZ4InitvE3__c_1>:
     236:	54 69 6d 65 20 64 69 64 20 6e 6f 74 20 73 65 74     Time did not set
     246:	20 63 6f 72 72 65 63 74 6c 79 2c 20 63 68 65 63      correctly, chec
     256:	6b 20 77 69 72 69 6e 67 2e 0d 0a 00                 k wiring....

00000262 <_ZZ4InitvE3__c>:
     262:	4e 6f 76 20 31 32 20 32 30 31 35 00                 Nov 12 2015.

0000026e <_ZZ4InitvE3__c_0>:
     26e:	30 31 3a 31 37 3a 33 39 00                          01:17:39.

00000277 <_ZL21tone_pin_to_timer_PGM>:
     277:	02                                                  .

00000278 <digital_pin_to_timer_PGM>:
     278:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     288:	00 00 00 00                                         ....

0000028c <digital_pin_to_bit_mask_PGM>:
     28c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     29c:	04 08 10 20                                         ... 

000002a0 <digital_pin_to_port_PGM>:
     2a0:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     2b0:	03 03 03 03                                         ....

000002b4 <port_to_input_PGM>:
     2b4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002be <port_to_output_PGM>:
     2be:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002c8 <port_to_mode_PGM>:
     2c8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002d2 <__ctors_start>:
     2d2:	5b 0f       	add	r21, r27
     2d4:	9d 11       	cpse	r25, r13
     2d6:	0d 12       	cpse	r0, r29
     2d8:	c7 17       	cp	r28, r23

000002da <__ctors_end>:
     2da:	11 24       	eor	r1, r1
     2dc:	1f be       	out	0x3f, r1	; 63
     2de:	cf ef       	ldi	r28, 0xFF	; 255
     2e0:	d4 e0       	ldi	r29, 0x04	; 4
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	cd bf       	out	0x3d, r28	; 61

000002e6 <__do_copy_data>:
     2e6:	11 e0       	ldi	r17, 0x01	; 1
     2e8:	a0 e0       	ldi	r26, 0x00	; 0
     2ea:	b1 e0       	ldi	r27, 0x01	; 1
     2ec:	e8 e9       	ldi	r30, 0x98	; 152
     2ee:	f8 e3       	ldi	r31, 0x38	; 56
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <__do_copy_data+0x10>
     2f2:	05 90       	lpm	r0, Z+
     2f4:	0d 92       	st	X+, r0
     2f6:	a6 35       	cpi	r26, 0x56	; 86
     2f8:	b1 07       	cpc	r27, r17
     2fa:	d9 f7       	brne	.-10     	; 0x2f2 <__do_copy_data+0xc>

000002fc <__do_clear_bss>:
     2fc:	23 e0       	ldi	r18, 0x03	; 3
     2fe:	a6 e5       	ldi	r26, 0x56	; 86
     300:	b1 e0       	ldi	r27, 0x01	; 1
     302:	01 c0       	rjmp	.+2      	; 0x306 <.do_clear_bss_start>

00000304 <.do_clear_bss_loop>:
     304:	1d 92       	st	X+, r1

00000306 <.do_clear_bss_start>:
     306:	a9 30       	cpi	r26, 0x09	; 9
     308:	b2 07       	cpc	r27, r18
     30a:	e1 f7       	brne	.-8      	; 0x304 <.do_clear_bss_loop>

0000030c <__do_global_ctors>:
     30c:	11 e0       	ldi	r17, 0x01	; 1
     30e:	cd e6       	ldi	r28, 0x6D	; 109
     310:	d1 e0       	ldi	r29, 0x01	; 1
     312:	04 c0       	rjmp	.+8      	; 0x31c <__do_global_ctors+0x10>
     314:	21 97       	sbiw	r28, 0x01	; 1
     316:	fe 01       	movw	r30, r28
     318:	0e 94 11 1c 	call	0x3822	; 0x3822 <__tablejump2__>
     31c:	c9 36       	cpi	r28, 0x69	; 105
     31e:	d1 07       	cpc	r29, r17
     320:	c9 f7       	brne	.-14     	; 0x314 <__do_global_ctors+0x8>
     322:	0e 94 19 12 	call	0x2432	; 0x2432 <main>
     326:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <_exit>

0000032a <__bad_interrupt>:
     32a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000032e <_ZN6DS1337C1Ev>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     32e:	8e ea       	ldi	r24, 0xAE	; 174
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <_ZN7TwoWire5beginEv>
     336:	08 95       	ret

00000338 <_ZN6DS133710getSecondsEv>:
     338:	fc 01       	movw	r30, r24
     33a:	92 81       	ldd	r25, Z+2	; 0x02
     33c:	89 2f       	mov	r24, r25
     33e:	86 95       	lsr	r24
     340:	86 95       	lsr	r24
     342:	86 95       	lsr	r24
     344:	8e 71       	andi	r24, 0x1E	; 30
     346:	28 2f       	mov	r18, r24
     348:	22 0f       	add	r18, r18
   rtc_bcd[DS1337_MIN] = bin2bcd(minute);
   rtc_bcd[DS1337_HR] = bin2bcd(hour);
   rtc_bcd[DS1337_DATE] = bin2bcd(day);
   rtc_bcd[DS1337_DOW] = bin2bcd(day_of_week);
   rtc_bcd[DS1337_MTH] = bin2bcd(month);
   rtc_bcd[DS1337_YR] = bin2bcd(year);
     34a:	22 0f       	add	r18, r18
     34c:	82 0f       	add	r24, r18
}
     34e:	9f 70       	andi	r25, 0x0F	; 15
     350:	89 0f       	add	r24, r25
     352:	08 95       	ret

00000354 <_ZN6DS133710getMinutesEv>:
     354:	fc 01       	movw	r30, r24
     356:	93 81       	ldd	r25, Z+3	; 0x03
     358:	89 2f       	mov	r24, r25
     35a:	86 95       	lsr	r24
     35c:	86 95       	lsr	r24
     35e:	86 95       	lsr	r24
     360:	8e 71       	andi	r24, 0x1E	; 30
     362:	28 2f       	mov	r18, r24
     364:	22 0f       	add	r18, r18
     366:	22 0f       	add	r18, r18
     368:	82 0f       	add	r24, r18
     36a:	9f 70       	andi	r25, 0x0F	; 15
     36c:	89 0f       	add	r24, r25
     36e:	08 95       	ret

00000370 <_ZN6DS13378getHoursEv>:
     370:	fc 01       	movw	r30, r24
     372:	94 81       	ldd	r25, Z+4	; 0x04
     374:	89 2f       	mov	r24, r25
     376:	86 95       	lsr	r24
     378:	86 95       	lsr	r24
     37a:	86 95       	lsr	r24
     37c:	8e 71       	andi	r24, 0x1E	; 30

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     37e:	28 2f       	mov	r18, r24
     380:	22 0f       	add	r18, r18
     382:	22 0f       	add	r18, r18
     384:	82 0f       	add	r24, r18
     386:	9f 70       	andi	r25, 0x0F	; 15
    return bcd2bin(rtc_bcd[DS1337_MIN]);
}
unsigned char DS1337::getHours()
{
    return bcd2bin(rtc_bcd[DS1337_HR]);
}
     388:	89 0f       	add	r24, r25
     38a:	08 95       	ret

0000038c <_ZN6DS133710setSecondsEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     38c:	2d ec       	ldi	r18, 0xCD	; 205
     38e:	62 9f       	mul	r22, r18
     390:	21 2d       	mov	r18, r1
     392:	11 24       	eor	r1, r1
     394:	26 95       	lsr	r18
     396:	26 95       	lsr	r18
     398:	26 95       	lsr	r18
     39a:	42 2f       	mov	r20, r18
     39c:	44 0f       	add	r20, r20
     39e:	34 2f       	mov	r19, r20
     3a0:	33 0f       	add	r19, r19
     3a2:	33 0f       	add	r19, r19
     3a4:	34 0f       	add	r19, r20
     3a6:	63 1b       	sub	r22, r19
     3a8:	30 e1       	ldi	r19, 0x10	; 16
     3aa:	23 9f       	mul	r18, r19
     3ac:	60 0d       	add	r22, r0
     3ae:	11 24       	eor	r1, r1
}


void DS1337::setSeconds(unsigned char v)
{
    rtc_bcd[DS1337_SEC] = bin2bcd(v);
     3b0:	fc 01       	movw	r30, r24
     3b2:	62 83       	std	Z+2, r22	; 0x02
     3b4:	08 95       	ret

000003b6 <_ZN6DS133710setMinutesEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     3b6:	2d ec       	ldi	r18, 0xCD	; 205
     3b8:	62 9f       	mul	r22, r18
     3ba:	21 2d       	mov	r18, r1
     3bc:	11 24       	eor	r1, r1
     3be:	26 95       	lsr	r18
     3c0:	26 95       	lsr	r18
     3c2:	26 95       	lsr	r18
     3c4:	42 2f       	mov	r20, r18
     3c6:	44 0f       	add	r20, r20
     3c8:	34 2f       	mov	r19, r20
     3ca:	33 0f       	add	r19, r19
     3cc:	33 0f       	add	r19, r19
     3ce:	34 0f       	add	r19, r20
     3d0:	63 1b       	sub	r22, r19
     3d2:	30 e1       	ldi	r19, 0x10	; 16
     3d4:	23 9f       	mul	r18, r19
     3d6:	60 0d       	add	r22, r0
     3d8:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_SEC] = bin2bcd(v);

}
void DS1337::setMinutes(unsigned char v)
{
    rtc_bcd[DS1337_MIN] = bin2bcd(v);
     3da:	fc 01       	movw	r30, r24
     3dc:	63 83       	std	Z+3, r22	; 0x03
     3de:	08 95       	ret

000003e0 <_ZN6DS13378setHoursEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     3e0:	2d ec       	ldi	r18, 0xCD	; 205
     3e2:	62 9f       	mul	r22, r18
     3e4:	21 2d       	mov	r18, r1
     3e6:	11 24       	eor	r1, r1
     3e8:	26 95       	lsr	r18
     3ea:	26 95       	lsr	r18
     3ec:	26 95       	lsr	r18
     3ee:	42 2f       	mov	r20, r18
     3f0:	44 0f       	add	r20, r20
     3f2:	34 2f       	mov	r19, r20
     3f4:	33 0f       	add	r19, r19
     3f6:	33 0f       	add	r19, r19
     3f8:	34 0f       	add	r19, r20
     3fa:	63 1b       	sub	r22, r19
     3fc:	30 e1       	ldi	r19, 0x10	; 16
     3fe:	23 9f       	mul	r18, r19
     400:	60 0d       	add	r22, r0
     402:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_MIN] = bin2bcd(v);

}
void DS1337::setHours(unsigned char v)
{
    rtc_bcd[DS1337_HR] = bin2bcd(v);
     404:	fc 01       	movw	r30, r24
     406:	64 83       	std	Z+4, r22	; 0x04
     408:	08 95       	ret

0000040a <_ZN6DS13377setDaysEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     40a:	2d ec       	ldi	r18, 0xCD	; 205
     40c:	62 9f       	mul	r22, r18
     40e:	21 2d       	mov	r18, r1
     410:	11 24       	eor	r1, r1
     412:	26 95       	lsr	r18
     414:	26 95       	lsr	r18
     416:	26 95       	lsr	r18
     418:	42 2f       	mov	r20, r18
     41a:	44 0f       	add	r20, r20
     41c:	34 2f       	mov	r19, r20
     41e:	33 0f       	add	r19, r19
     420:	33 0f       	add	r19, r19
     422:	34 0f       	add	r19, r20
     424:	63 1b       	sub	r22, r19
     426:	30 e1       	ldi	r19, 0x10	; 16
     428:	23 9f       	mul	r18, r19
     42a:	60 0d       	add	r22, r0
     42c:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_HR] = bin2bcd(v);

}
void DS1337::setDays(unsigned char v)
{
    rtc_bcd[DS1337_DATE] = bin2bcd(v);
     42e:	fc 01       	movw	r30, r24
     430:	66 83       	std	Z+6, r22	; 0x06
     432:	08 95       	ret

00000434 <_ZN6DS13379setMonthsEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     434:	2d ec       	ldi	r18, 0xCD	; 205
     436:	62 9f       	mul	r22, r18
     438:	21 2d       	mov	r18, r1
     43a:	11 24       	eor	r1, r1
     43c:	26 95       	lsr	r18
     43e:	26 95       	lsr	r18
     440:	26 95       	lsr	r18
     442:	42 2f       	mov	r20, r18
     444:	44 0f       	add	r20, r20
     446:	34 2f       	mov	r19, r20
     448:	33 0f       	add	r19, r19
     44a:	33 0f       	add	r19, r19
     44c:	34 0f       	add	r19, r20
     44e:	63 1b       	sub	r22, r19
     450:	30 e1       	ldi	r19, 0x10	; 16
     452:	23 9f       	mul	r18, r19
     454:	60 0d       	add	r22, r0
     456:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_DOW] = bin2bcd(v);

}
void DS1337::setMonths(unsigned char v)
{
    rtc_bcd[DS1337_MTH] = bin2bcd(v);
     458:	fc 01       	movw	r30, r24
     45a:	67 83       	std	Z+7, r22	; 0x07
     45c:	08 95       	ret

0000045e <_ZN6DS13378setYearsEj>:

}
void DS1337::setYears(unsigned int v)
{
     45e:	fc 01       	movw	r30, r24
    if (v>1999)
     460:	60 3d       	cpi	r22, 0xD0	; 208
     462:	87 e0       	ldi	r24, 0x07	; 7
     464:	78 07       	cpc	r23, r24
     466:	10 f0       	brcs	.+4      	; 0x46c <_ZN6DS13378setYearsEj+0xe>
    {
        v -= 2000;
     468:	60 5d       	subi	r22, 0xD0	; 208
     46a:	77 40       	sbci	r23, 0x07	; 7
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     46c:	9d ec       	ldi	r25, 0xCD	; 205
     46e:	69 9f       	mul	r22, r25
     470:	91 2d       	mov	r25, r1
     472:	11 24       	eor	r1, r1
     474:	96 95       	lsr	r25
     476:	96 95       	lsr	r25
     478:	96 95       	lsr	r25
     47a:	39 2f       	mov	r19, r25
     47c:	33 0f       	add	r19, r19
     47e:	23 2f       	mov	r18, r19
     480:	22 0f       	add	r18, r18
     482:	22 0f       	add	r18, r18
     484:	23 0f       	add	r18, r19
     486:	62 1b       	sub	r22, r18
     488:	80 e1       	ldi	r24, 0x10	; 16
     48a:	98 9f       	mul	r25, r24
     48c:	60 0d       	add	r22, r0
     48e:	11 24       	eor	r1, r1
{
    if (v>1999)
    {
        v -= 2000;
    }
    rtc_bcd[DS1337_YR] = bin2bcd(v);
     490:	60 87       	std	Z+8, r22	; 0x08
     492:	08 95       	ret

00000494 <_ZN6DS13378readTimeEv>:
}

// Aquire data from the RTC chip in BCD format
// refresh the buffer
void DS1337::readTime(void)
{
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	8c 01       	movw	r16, r24
// use the Wire lib to connect to tho rtc
// reset the register pointer to zero
	Wire.beginTransmission(DS1337_CTRL_ID);
     49e:	68 e6       	ldi	r22, 0x68	; 104
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	8e ea       	ldi	r24, 0xAE	; 174
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEi>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     4aa:	e0 91 ae 02 	lds	r30, 0x02AE
     4ae:	f0 91 af 02 	lds	r31, 0x02AF
     4b2:	01 90       	ld	r0, Z+
     4b4:	f0 81       	ld	r31, Z
     4b6:	e0 2d       	mov	r30, r0
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	8e ea       	ldi	r24, 0xAE	; 174
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	09 95       	icall
	Wire.write(0x00);
	Wire.endTransmission();
     4c0:	8e ea       	ldi	r24, 0xAE	; 174
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7TwoWire15endTransmissionEv>

// request the 7 bytes of data    (secs, min, hr, dow, date. mth, yr)
	Wire.requestFrom(DS1337_CTRL_ID, 7);
     4c8:	47 e0       	ldi	r20, 0x07	; 7
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	68 e6       	ldi	r22, 0x68	; 104
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	8e ea       	ldi	r24, 0xAE	; 174
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <_ZN7TwoWire11requestFromEii>
     4d8:	e8 01       	movw	r28, r16
     4da:	22 96       	adiw	r28, 0x02	; 2
     4dc:	07 5f       	subi	r16, 0xF7	; 247
     4de:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int i=0; i<7; i++)
	{
	// store data in raw bcd format
		if (Wire.available())
     4e0:	8e ea       	ldi	r24, 0xAE	; 174
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZN7TwoWire9availableEv>
     4e8:	89 2b       	or	r24, r25
     4ea:	29 f0       	breq	.+10     	; 0x4f6 <_ZN6DS13378readTimeEv+0x62>
			rtc_bcd[i]=Wire.read();
     4ec:	8e ea       	ldi	r24, 0xAE	; 174
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN7TwoWire4readEv>
     4f4:	88 83       	st	Y, r24
     4f6:	21 96       	adiw	r28, 0x01	; 1
	Wire.write(0x00);
	Wire.endTransmission();

// request the 7 bytes of data    (secs, min, hr, dow, date. mth, yr)
	Wire.requestFrom(DS1337_CTRL_ID, 7);
	for(int i=0; i<7; i++)
     4f8:	c0 17       	cp	r28, r16
     4fa:	d1 07       	cpc	r29, r17
     4fc:	89 f7       	brne	.-30     	; 0x4e0 <_ZN6DS13378readTimeEv+0x4c>
	{
	// store data in raw bcd format
		if (Wire.available())
			rtc_bcd[i]=Wire.read();
	}
}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	08 95       	ret

00000508 <_ZN6DS133711getRegisterEh>:
...
} */


unsigned char DS1337::getRegister(unsigned char registerNumber)
{
     508:	cf 93       	push	r28
     50a:	c6 2f       	mov	r28, r22
	Wire.beginTransmission(DS1337_CTRL_ID);
     50c:	68 e6       	ldi	r22, 0x68	; 104
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	8e ea       	ldi	r24, 0xAE	; 174
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(registerNumber);
     518:	6c 2f       	mov	r22, r28
     51a:	8e ea       	ldi	r24, 0xAE	; 174
     51c:	92 e0       	ldi	r25, 0x02	; 2
     51e:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     522:	8e ea       	ldi	r24, 0xAE	; 174
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7TwoWire15endTransmissionEv>

	Wire.requestFrom(DS1337_CTRL_ID, 1);
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	68 e6       	ldi	r22, 0x68	; 104
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	8e ea       	ldi	r24, 0xAE	; 174
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <_ZN7TwoWire11requestFromEii>

	return Wire.read();
     53a:	8e ea       	ldi	r24, 0xAE	; 174
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN7TwoWire4readEv>
}
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <_ZN6DS133711time_is_setEv>:
}

unsigned char DS1337::time_is_set()
{
  // Return TRUE if Oscillator Stop Flag is clear (osc. not stopped since last time setting), FALSE otherwise
  byte asdf = ((getRegister(DS1337_STATUS) & DS1337_STATUS_OSF) == 0);
     546:	6f e0       	ldi	r22, 0x0F	; 15
     548:	0e 94 84 02 	call	0x508	; 0x508 <_ZN6DS133711getRegisterEh>
     54c:	80 95       	com	r24
  return asdf;
}
     54e:	88 1f       	adc	r24, r24
     550:	88 27       	eor	r24, r24
     552:	88 1f       	adc	r24, r24
     554:	08 95       	ret

00000556 <_ZN6DS133711setRegisterEhh>:

	return Wire.read();
}

void DS1337::setRegister(unsigned char registerNumber, unsigned char value)
{
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	d6 2f       	mov	r29, r22
     55c:	c4 2f       	mov	r28, r20
	Wire.beginTransmission(DS1337_CTRL_ID);
     55e:	68 e6       	ldi	r22, 0x68	; 104
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	8e ea       	ldi	r24, 0xAE	; 174
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(registerNumber); // set register pointer
     56a:	6d 2f       	mov	r22, r29
     56c:	8e ea       	ldi	r24, 0xAE	; 174
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <_ZN7TwoWire5writeEh>

	Wire.write(value);
     574:	6c 2f       	mov	r22, r28
     576:	8e ea       	ldi	r24, 0xAE	; 174
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <_ZN7TwoWire5writeEh>

	Wire.endTransmission();
     57e:	8e ea       	ldi	r24, 0xAE	; 174
     580:	92 e0       	ldi	r25, 0x02	; 2
     582:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7TwoWire15endTransmissionEv>
}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <_ZN6DS13375startEv>:
{
	setRegister(DS1337_SP, getRegister(DS1337_SP) | DS1337_SP_EOSC);
}

void DS1337::start(void)
{
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ec 01       	movw	r28, r24
	setRegister(DS1337_SP, getRegister(DS1337_SP) & !DS1337_SP_EOSC);
     592:	6e e0       	ldi	r22, 0x0E	; 14
     594:	0e 94 84 02 	call	0x508	; 0x508 <_ZN6DS133711getRegisterEh>
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	6e e0       	ldi	r22, 0x0E	; 14
     59c:	ce 01       	movw	r24, r28
     59e:	0e 94 ab 02 	call	0x556	; 0x556 <_ZN6DS133711setRegisterEhh>
}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <_ZN6DS13379writeTimeEv>:
}

// update the data on the IC from the bcd formatted data in the buffer

void DS1337::writeTime(void)
{
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	7c 01       	movw	r14, r24
        //byte temp;
	Wire.beginTransmission(DS1337_CTRL_ID);
     5b6:	68 e6       	ldi	r22, 0x68	; 104
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	8e ea       	ldi	r24, 0xAE	; 174
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEi>
     5c2:	e0 91 ae 02 	lds	r30, 0x02AE
     5c6:	f0 91 af 02 	lds	r31, 0x02AF
     5ca:	01 90       	ld	r0, Z+
     5cc:	f0 81       	ld	r31, Z
     5ce:	e0 2d       	mov	r30, r0
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	8e ea       	ldi	r24, 0xAE	; 174
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	09 95       	icall
     5d8:	e7 01       	movw	r28, r14
     5da:	22 96       	adiw	r28, 0x02	; 2
     5dc:	87 01       	movw	r16, r14
     5de:	07 5f       	subi	r16, 0xF7	; 247
     5e0:	1f 4f       	sbci	r17, 0xFF	; 255
	Wire.write(0x00); // reset register pointer
	for(int i=0; i<7; i++)
	{
		Wire.write(rtc_bcd[i]);
     5e2:	69 91       	ld	r22, Y+
     5e4:	8e ea       	ldi	r24, 0xAE	; 174
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <_ZN7TwoWire5writeEh>
void DS1337::writeTime(void)
{
        //byte temp;
	Wire.beginTransmission(DS1337_CTRL_ID);
	Wire.write(0x00); // reset register pointer
	for(int i=0; i<7; i++)
     5ec:	c0 17       	cp	r28, r16
     5ee:	d1 07       	cpc	r29, r17
     5f0:	c1 f7       	brne	.-16     	; 0x5e2 <_ZN6DS13379writeTimeEv+0x3a>
	{
		Wire.write(rtc_bcd[i]);
	}
	Wire.endTransmission();
     5f2:	8e ea       	ldi	r24, 0xAE	; 174
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7TwoWire15endTransmissionEv>

	// clear the Oscillator Stop Flag
        setRegister(DS1337_STATUS, getRegister(DS1337_STATUS) & !DS1337_STATUS_OSF);
     5fa:	6f e0       	ldi	r22, 0x0F	; 15
     5fc:	c7 01       	movw	r24, r14
     5fe:	0e 94 84 02 	call	0x508	; 0x508 <_ZN6DS133711getRegisterEh>
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	6f e0       	ldi	r22, 0x0F	; 15
     606:	c7 01       	movw	r24, r14
     608:	0e 94 ab 02 	call	0x556	; 0x556 <_ZN6DS133711setRegisterEhh>
        //temp = getRegister(DS1337_STATUS);
        //temp &= (!DS1337_STATUS_OSF);
        //setRegister(DS1337_STATUS, temp);
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	08 95       	ret

0000061a <_Z16Interrupt_Updatev>:
    ADCSRA = adcsraSave;
	delay(_delay);	
}


void Interrupt_Update(){} //This is just to attach an interrupt
     61a:	08 95       	ret

0000061c <_Z9gotoSleepi>:
		}
	}
}

void gotoSleep(int _delay)
{
     61c:	bc 01       	movw	r22, r24
	sleep_enable();
     61e:	83 b7       	in	r24, 0x33	; 51
     620:	81 60       	ori	r24, 0x01	; 1
     622:	83 bf       	out	0x33, r24	; 51
    byte adcsraSave = ADCSRA;
     624:	ea e7       	ldi	r30, 0x7A	; 122
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	20 81       	ld	r18, Z
    ADCSRA &= ~ bit(ADEN); // disable the ADC
     62a:	80 81       	ld	r24, Z
     62c:	8f 77       	andi	r24, 0x7F	; 127
     62e:	80 83       	st	Z, r24
    set_sleep_mode(SLEEP_MODE_STANDBY);
     630:	93 b7       	in	r25, 0x33	; 51
     632:	91 7f       	andi	r25, 0xF1	; 241
     634:	9c 60       	ori	r25, 0x0C	; 12
     636:	93 bf       	out	0x33, r25	; 51
    sleep_cpu();
     638:	88 95       	sleep
    sleep_disable();
     63a:	83 b7       	in	r24, 0x33	; 51
     63c:	8e 7f       	andi	r24, 0xFE	; 254
     63e:	83 bf       	out	0x33, r24	; 51
    // re-enable what we disabled
    ADCSRA = adcsraSave;
     640:	20 83       	st	Z, r18
	delay(_delay);	
     642:	07 2e       	mov	r0, r23
     644:	00 0c       	add	r0, r0
     646:	88 0b       	sbc	r24, r24
     648:	99 0b       	sbc	r25, r25
     64a:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
     64e:	08 95       	ret

00000650 <_Z13clockSettingsv>:
		}
	}
}

void clockSettings()
{
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	02 e6       	ldi	r16, 0x62	; 98
     65a:	11 e0       	ldi	r17, 0x01	; 1
	//Display contents of EEPROM (Clock settings, alarm etc.).
	for(int x = 0;x<=6-1;x++)
     65c:	c0 e0       	ldi	r28, 0x00	; 0
     65e:	d0 e0       	ldi	r29, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     660:	ce 01       	movw	r24, r28
     662:	0e 94 34 1c 	call	0x3868	; 0x3868 <eeprom_read_byte>
	{
		EEPROM_ARRAY[x] = EEPROM.read(x);
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	f8 01       	movw	r30, r16
     66a:	81 93       	st	Z+, r24
     66c:	91 93       	st	Z+, r25
     66e:	8f 01       	movw	r16, r30
		delay(1);
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
}

void clockSettings()
{
	//Display contents of EEPROM (Clock settings, alarm etc.).
	for(int x = 0;x<=6-1;x++)
     67c:	21 96       	adiw	r28, 0x01	; 1
     67e:	c6 30       	cpi	r28, 0x06	; 6
     680:	d1 05       	cpc	r29, r1
     682:	71 f7       	brne	.-36     	; 0x660 <_Z13clockSettingsv+0x10>
		EEPROM_ARRAY[x] = EEPROM.read(x);
		delay(1);
	}
	
	//check for AM or PM
	ALARM_ARRAY[4] = EEPROM_ARRAY[4];
     684:	80 91 6a 01 	lds	r24, 0x016A
     688:	90 91 6b 01 	lds	r25, 0x016B
     68c:	90 93 5f 01 	sts	0x015F, r25
     690:	80 93 5e 01 	sts	0x015E, r24
}
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	08 95       	ret

0000069e <_Z8readTempi>:
	
	EEPROM.put(5,AT);
}

float readTemp (int internal)
{
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
	//We are oversampling the temp sensor by 100 cycles
	//for better overall average temperature, this gives
	//us a more stable reading.

	Temperature = 0;
     6a6:	10 92 88 01 	sts	0x0188, r1
     6aa:	10 92 89 01 	sts	0x0189, r1
     6ae:	10 92 8a 01 	sts	0x018A, r1
     6b2:	10 92 8b 01 	sts	0x018B, r1
	if (!internal) //if internal == 0
     6b6:	89 2b       	or	r24, r25
     6b8:	09 f0       	breq	.+2      	; 0x6bc <_Z8readTempi+0x1e>
     6ba:	4f c0       	rjmp	.+158    	; 0x75a <_Z8readTempi+0xbc>
     6bc:	c4 e6       	ldi	r28, 0x64	; 100
     6be:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(int x = 0; x <= 99; x++)
		{
			Temperature += analogRead(LM35);
     6c0:	00 e2       	ldi	r16, 0x20	; 32
     6c2:	11 e0       	ldi	r17, 0x01	; 1
     6c4:	f8 01       	movw	r30, r16
     6c6:	80 81       	ld	r24, Z
     6c8:	0e 94 a3 18 	call	0x3146	; 0x3146 <analogRead>
     6cc:	bc 01       	movw	r22, r24
     6ce:	99 0f       	add	r25, r25
     6d0:	88 0b       	sbc	r24, r24
     6d2:	99 0b       	sbc	r25, r25
     6d4:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__floatsisf>
     6d8:	20 91 88 01 	lds	r18, 0x0188
     6dc:	30 91 89 01 	lds	r19, 0x0189
     6e0:	40 91 8a 01 	lds	r20, 0x018A
     6e4:	50 91 8b 01 	lds	r21, 0x018B
     6e8:	0e 94 cc 19 	call	0x3398	; 0x3398 <__addsf3>
     6ec:	60 93 88 01 	sts	0x0188, r22
     6f0:	70 93 89 01 	sts	0x0189, r23
     6f4:	80 93 8a 01 	sts	0x018A, r24
     6f8:	90 93 8b 01 	sts	0x018B, r25
     6fc:	21 97       	sbiw	r28, 0x01	; 1
	//us a more stable reading.

	Temperature = 0;
	if (!internal) //if internal == 0
	{
		for(int x = 0; x <= 99; x++)
     6fe:	11 f7       	brne	.-60     	; 0x6c4 <_Z8readTempi+0x26>
		// -11.69mv/C
		//The LM20 degree per C is inversely proportional
		//to its output at 1.574V T = 25C @ 303mV T = 130C
		//this equation has been calibrated for my office. Thus the
		//-7.4C.
		Temperature_C = (((11.69/Temperature)*(1024))*100)-7.4;//(1024))*100;
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	6d e3       	ldi	r22, 0x3D	; 61
     706:	7a e0       	ldi	r23, 0x0A	; 10
     708:	8b e3       	ldi	r24, 0x3B	; 59
     70a:	91 e4       	ldi	r25, 0x41	; 65
     70c:	0e 94 38 1a 	call	0x3470	; 0x3470 <__divsf3>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e8       	ldi	r20, 0x80	; 128
     716:	54 e4       	ldi	r21, 0x44	; 68
     718:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__mulsf3>
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	48 ec       	ldi	r20, 0xC8	; 200
     722:	52 e4       	ldi	r21, 0x42	; 66
     724:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__mulsf3>
     728:	2d ec       	ldi	r18, 0xCD	; 205
     72a:	3c ec       	ldi	r19, 0xCC	; 204
     72c:	4c ee       	ldi	r20, 0xEC	; 236
     72e:	50 e4       	ldi	r21, 0x40	; 64
     730:	0e 94 cb 19 	call	0x3396	; 0x3396 <__subsf3>
     734:	36 2f       	mov	r19, r22
     736:	27 2f       	mov	r18, r23
     738:	46 2f       	mov	r20, r22
     73a:	57 2f       	mov	r21, r23
     73c:	68 2f       	mov	r22, r24
     73e:	79 2f       	mov	r23, r25
     740:	40 93 8c 01 	sts	0x018C, r20
     744:	50 93 8d 01 	sts	0x018D, r21
     748:	60 93 8e 01 	sts	0x018E, r22
     74c:	70 93 8f 01 	sts	0x018F, r23
		return Temperature_C;
     750:	53 2f       	mov	r21, r19
     752:	42 2f       	mov	r20, r18
     754:	38 2f       	mov	r19, r24
     756:	29 2f       	mov	r18, r25
     758:	1d c0       	rjmp	.+58     	; 0x794 <_Z8readTempi+0xf6>
		{
			iTemperature += analogRead(LM35);
		}
		iTemperature/100;
		*/
		iTemperature = analogRead(LM35);
     75a:	80 91 20 01 	lds	r24, 0x0120
     75e:	0e 94 a3 18 	call	0x3146	; 0x3146 <analogRead>
     762:	bc 01       	movw	r22, r24
		//same equation as above but we add 10 to the
		//final calculation since the display only displays
		//ints and not floats, we loose some accuracy, about
		//10degrees C.
		iTemp_C = (((12/iTemperature)*(1024))*100);
     764:	8c e0       	ldi	r24, 0x0C	; 12
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__divmodhi4>
     76c:	9b 01       	movw	r18, r22
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e9       	ldi	r25, 0x90	; 144
     772:	28 9f       	mul	r18, r24
     774:	b0 01       	movw	r22, r0
     776:	29 9f       	mul	r18, r25
     778:	70 0d       	add	r23, r0
     77a:	38 9f       	mul	r19, r24
     77c:	70 0d       	add	r23, r0
     77e:	11 24       	eor	r1, r1

		return iTemp_C;
     780:	07 2e       	mov	r0, r23
     782:	00 0c       	add	r0, r0
     784:	88 0b       	sbc	r24, r24
     786:	99 0b       	sbc	r25, r25
     788:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__floatsisf>
     78c:	56 2f       	mov	r21, r22
     78e:	47 2f       	mov	r20, r23
     790:	38 2f       	mov	r19, r24
     792:	29 2f       	mov	r18, r25
	}
}
     794:	65 2f       	mov	r22, r21
     796:	74 2f       	mov	r23, r20
     798:	83 2f       	mov	r24, r19
     79a:	92 2f       	mov	r25, r18
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	08 95       	ret

000007a6 <_Z8splitIntii>:

int splitInt(int pos, int value)
{
     7a6:	9b 01       	movw	r18, r22
	//a temp_array[] of at least 1 length.
	//this can be substituted for a normal
	//int provided in global variables.
	
	int x = 0;
	if(!pos)	//if pos == 0;
     7a8:	89 2b       	or	r24, r25
     7aa:	99 f4       	brne	.+38     	; 0x7d2 <_Z8splitIntii+0x2c>
	{
		x = value % 10;
     7ac:	ea e0       	ldi	r30, 0x0A	; 10
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	cb 01       	movw	r24, r22
     7b2:	bf 01       	movw	r22, r30
     7b4:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__divmodhi4>
		Temp_Array[0] = x;
     7b8:	90 93 6f 01 	sts	0x016F, r25
     7bc:	80 93 6e 01 	sts	0x016E, r24
		value = (value - Temp_Array[0]) / 10;
     7c0:	a9 01       	movw	r20, r18
     7c2:	48 1b       	sub	r20, r24
     7c4:	59 0b       	sbc	r21, r25
     7c6:	ca 01       	movw	r24, r20
		return value; //tens digit
     7c8:	bf 01       	movw	r22, r30
     7ca:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__divmodhi4>
     7ce:	cb 01       	movw	r24, r22
     7d0:	08 95       	ret
	}
	else
	{
		return Temp_Array[0]; //ones digit
     7d2:	80 91 6e 01 	lds	r24, 0x016E
     7d6:	90 91 6f 01 	lds	r25, 0x016F
	}
}
     7da:	08 95       	ret

000007dc <_Z10checkAlarmii>:
	//get current clock settings.
	clockSettings();
}

int checkAlarm(int HR,int minute)
{
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	7c 01       	movw	r14, r24
     7ea:	8b 01       	movw	r16, r22
	//load the ALARM array with current time
	//variables.
	for(int x = 0;x<=1;x++)
	{
		ALARM_ARRAY[x] = splitInt(x,HR);
     7ec:	bc 01       	movw	r22, r24
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     7f6:	c6 e5       	ldi	r28, 0x56	; 86
     7f8:	d1 e0       	ldi	r29, 0x01	; 1
     7fa:	99 83       	std	Y+1, r25	; 0x01
     7fc:	88 83       	st	Y, r24
     7fe:	b7 01       	movw	r22, r14
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     808:	9b 83       	std	Y+3, r25	; 0x03
     80a:	8a 83       	std	Y+2, r24	; 0x02
	}
	for(int x = 0;x<=1;x++)
	{
		ALARM_ARRAY[x+2] = splitInt(x,minute);
     80c:	b8 01       	movw	r22, r16
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     816:	9d 83       	std	Y+5, r25	; 0x05
     818:	8c 83       	std	Y+4, r24	; 0x04
     81a:	b8 01       	movw	r22, r16
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     824:	9f 83       	std	Y+7, r25	; 0x07
     826:	8e 83       	std	Y+6, r24	; 0x06
	int same = 0;
	//check our set alarm in ALARM array against
	//EEPROM array to see if we have a match.
	for (int x =0;x<=3;x++)
	{
		if(ALARM_ARRAY[x] == EEPROM_ARRAY[x])
     828:	48 81       	ld	r20, Y
     82a:	59 81       	ldd	r21, Y+1	; 0x01
     82c:	20 91 62 01 	lds	r18, 0x0162
     830:	30 91 63 01 	lds	r19, 0x0163
     834:	42 17       	cp	r20, r18
     836:	53 07       	cpc	r21, r19
     838:	b9 f0       	breq	.+46     	; 0x868 <_Z10checkAlarmii+0x8c>
     83a:	0c c0       	rjmp	.+24     	; 0x854 <_Z10checkAlarmii+0x78>
		}
		
	}
	//Check to see if we are set to go off at
	//AM or PM.
	if(AM_PM == EEPROM_ARRAY[4])
     83c:	20 91 6a 01 	lds	r18, 0x016A
     840:	30 91 6b 01 	lds	r19, 0x016B
     844:	80 91 86 01 	lds	r24, 0x0186
     848:	90 91 87 01 	lds	r25, 0x0187
     84c:	28 17       	cp	r18, r24
     84e:	39 07       	cpc	r19, r25
     850:	49 f5       	brne	.+82     	; 0x8a4 <_Z10checkAlarmii+0xc8>
     852:	07 c0       	rjmp	.+14     	; 0x862 <_Z10checkAlarmii+0x86>
			same +=1;
		}
		else
		{
			//Alarm is not the same.
			alarm_Silence = 0;
     854:	10 92 82 01 	sts	0x0182, r1
     858:	10 92 81 01 	sts	0x0181, r1
			return 0;
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	21 c0       	rjmp	.+66     	; 0x8a4 <_Z10checkAlarmii+0xc8>
	if(AM_PM == EEPROM_ARRAY[4])
	{
		same +=1;
	}
	//Alarm is ready
	if(same == 5){return 1;}
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	1e c0       	rjmp	.+60     	; 0x8a4 <_Z10checkAlarmii+0xc8>
	int same = 0;
	//check our set alarm in ALARM array against
	//EEPROM array to see if we have a match.
	for (int x =0;x<=3;x++)
	{
		if(ALARM_ARRAY[x] == EEPROM_ARRAY[x])
     868:	40 91 58 01 	lds	r20, 0x0158
     86c:	50 91 59 01 	lds	r21, 0x0159
     870:	20 91 64 01 	lds	r18, 0x0164
     874:	30 91 65 01 	lds	r19, 0x0165
     878:	42 17       	cp	r20, r18
     87a:	53 07       	cpc	r21, r19
     87c:	59 f7       	brne	.-42     	; 0x854 <_Z10checkAlarmii+0x78>
     87e:	40 91 5a 01 	lds	r20, 0x015A
     882:	50 91 5b 01 	lds	r21, 0x015B
     886:	20 91 66 01 	lds	r18, 0x0166
     88a:	30 91 67 01 	lds	r19, 0x0167
     88e:	42 17       	cp	r20, r18
     890:	53 07       	cpc	r21, r19
     892:	01 f7       	brne	.-64     	; 0x854 <_Z10checkAlarmii+0x78>
     894:	20 91 68 01 	lds	r18, 0x0168
     898:	30 91 69 01 	lds	r19, 0x0169
     89c:	82 17       	cp	r24, r18
     89e:	93 07       	cpc	r25, r19
     8a0:	69 f2       	breq	.-102    	; 0x83c <_Z10checkAlarmii+0x60>
     8a2:	d8 cf       	rjmp	.-80     	; 0x854 <_Z10checkAlarmii+0x78>
	{
		same +=1;
	}
	//Alarm is ready
	if(same == 5){return 1;}
}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	08 95       	ret

000008b2 <_Z11alarmEEPROMhhii>:
	SECONDS_LAST = RTC.getSeconds();
	attachInterrupt(0, Interrupt_Update, RISING);
}

void alarmEEPROM(byte hour, byte minute, int AP,int AT)
{
     8b2:	4f 92       	push	r4
     8b4:	5f 92       	push	r5
     8b6:	6f 92       	push	r6
     8b8:	7f 92       	push	r7
     8ba:	8f 92       	push	r8
     8bc:	9f 92       	push	r9
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	2a 97       	sbiw	r28, 0x0a	; 10
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	46 2e       	mov	r4, r22
     8e4:	3a 01       	movw	r6, r20
     8e6:	3a 87       	std	Y+10, r19	; 0x0a
     8e8:	29 87       	std	Y+9, r18	; 0x09
	// store alarm time in eeprom.
	for(int x = 0;x<=1;x++)//0-1 iterates twice.
     8ea:	c1 2c       	mov	r12, r1
     8ec:	d1 2c       	mov	r13, r1
	{
		EEPROM.put(x,splitInt(x,hour));
     8ee:	88 2e       	mov	r8, r24
     8f0:	91 2c       	mov	r9, r1
     8f2:	5e 01       	movw	r10, r28
     8f4:	89 e0       	ldi	r24, 0x09	; 9
     8f6:	a8 0e       	add	r10, r24
     8f8:	b1 1c       	adc	r11, r1
     8fa:	b4 01       	movw	r22, r8
     8fc:	c6 01       	movw	r24, r12
     8fe:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     902:	98 87       	std	Y+8, r25	; 0x08
     904:	8f 83       	std	Y+7, r24	; 0x07
     906:	fe 01       	movw	r30, r28
     908:	37 96       	adiw	r30, 0x07	; 7
     90a:	7f 01       	movw	r14, r30
     90c:	86 01       	movw	r16, r12
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     90e:	f7 01       	movw	r30, r14
     910:	51 90       	ld	r5, Z+
     912:	7f 01       	movw	r14, r30

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     914:	c8 01       	movw	r24, r16
     916:	0e 94 34 1c 	call	0x3868	; 0x3868 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     91a:	58 16       	cp	r5, r24
     91c:	21 f0       	breq	.+8      	; 0x926 <_Z11alarmEEPROMhhii+0x74>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     91e:	65 2d       	mov	r22, r5
     920:	c8 01       	movw	r24, r16
     922:	0e 94 3c 1c 	call	0x3878	; 0x3878 <eeprom_write_byte>
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }
    
    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     926:	0f 5f       	subi	r16, 0xFF	; 255
     928:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     92a:	ea 14       	cp	r14, r10
     92c:	fb 04       	cpc	r15, r11
     92e:	79 f7       	brne	.-34     	; 0x90e <_Z11alarmEEPROMhhii+0x5c>
		delay(1);
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
}

void alarmEEPROM(byte hour, byte minute, int AP,int AT)
{
	// store alarm time in eeprom.
	for(int x = 0;x<=1;x++)//0-1 iterates twice.
     93c:	ff ef       	ldi	r31, 0xFF	; 255
     93e:	cf 1a       	sub	r12, r31
     940:	df 0a       	sbc	r13, r31
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	c8 16       	cp	r12, r24
     946:	d1 04       	cpc	r13, r1
     948:	c1 f6       	brne	.-80     	; 0x8fa <_Z11alarmEEPROMhhii+0x48>
     94a:	68 94       	set
     94c:	cc 24       	eor	r12, r12
     94e:	c1 f8       	bld	r12, 1
     950:	d1 2c       	mov	r13, r1
		delay(1);
	}

	for(int y = 2;y<=3;y++)
	{
		EEPROM.put(y,splitInt(y-2,minute));
     952:	84 2c       	mov	r8, r4
     954:	91 2c       	mov	r9, r1
     956:	5e 01       	movw	r10, r28
     958:	97 e0       	ldi	r25, 0x07	; 7
     95a:	a9 0e       	add	r10, r25
     95c:	b1 1c       	adc	r11, r1
     95e:	b4 01       	movw	r22, r8
     960:	c6 01       	movw	r24, r12
     962:	02 97       	sbiw	r24, 0x02	; 2
     964:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     968:	9e 83       	std	Y+6, r25	; 0x06
     96a:	8d 83       	std	Y+5, r24	; 0x05
     96c:	fe 01       	movw	r30, r28
     96e:	35 96       	adiw	r30, 0x05	; 5
     970:	7f 01       	movw	r14, r30
     972:	86 01       	movw	r16, r12
     974:	f7 01       	movw	r30, r14
     976:	51 90       	ld	r5, Z+
     978:	7f 01       	movw	r14, r30

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     97a:	c8 01       	movw	r24, r16
     97c:	0e 94 34 1c 	call	0x3868	; 0x3868 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     980:	58 16       	cp	r5, r24
     982:	21 f0       	breq	.+8      	; 0x98c <_Z11alarmEEPROMhhii+0xda>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     984:	65 2d       	mov	r22, r5
     986:	c8 01       	movw	r24, r16
     988:	0e 94 3c 1c 	call	0x3878	; 0x3878 <eeprom_write_byte>
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }
    
    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     98c:	0f 5f       	subi	r16, 0xFF	; 255
     98e:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     990:	ea 14       	cp	r14, r10
     992:	fb 04       	cpc	r15, r11
     994:	79 f7       	brne	.-34     	; 0x974 <_Z11alarmEEPROMhhii+0xc2>
		delay(1);
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
	{
		EEPROM.put(x,splitInt(x,hour));
		delay(1);
	}

	for(int y = 2;y<=3;y++)
     9a2:	ff ef       	ldi	r31, 0xFF	; 255
     9a4:	cf 1a       	sub	r12, r31
     9a6:	df 0a       	sbc	r13, r31
     9a8:	84 e0       	ldi	r24, 0x04	; 4
     9aa:	c8 16       	cp	r12, r24
     9ac:	d1 04       	cpc	r13, r1
     9ae:	b9 f6       	brne	.-82     	; 0x95e <_Z11alarmEEPROMhhii+0xac>
		EEPROM.put(y,splitInt(y-2,minute));
		delay(1);
	}

	//store wether AM or PM in EEPROM.
	if(AP == 17)
     9b0:	91 e1       	ldi	r25, 0x11	; 17
     9b2:	69 16       	cp	r6, r25
     9b4:	71 04       	cpc	r7, r1
     9b6:	d9 f4       	brne	.+54     	; 0x9ee <_Z11alarmEEPROMhhii+0x13c>
	{
		EEPROM.put(4,0);
     9b8:	1c 82       	std	Y+4, r1	; 0x04
     9ba:	1b 82       	std	Y+3, r1	; 0x03
     9bc:	10 e0       	ldi	r17, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     9be:	84 e0       	ldi	r24, 0x04	; 4
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 34 1c 	call	0x3868	; 0x3868 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     9c6:	18 17       	cp	r17, r24
     9c8:	29 f0       	breq	.+10     	; 0x9d4 <_Z11alarmEEPROMhhii+0x122>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     9ca:	61 2f       	mov	r22, r17
     9cc:	84 e0       	ldi	r24, 0x04	; 4
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 3c 1c 	call	0x3878	; 0x3878 <eeprom_write_byte>
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     9d4:	1c 81       	ldd	r17, Y+4	; 0x04

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     9d6:	85 e0       	ldi	r24, 0x05	; 5
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 34 1c 	call	0x3868	; 0x3868 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     9de:	18 17       	cp	r17, r24
     9e0:	41 f1       	breq	.+80     	; 0xa32 <_Z11alarmEEPROMhhii+0x180>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     9e2:	61 2f       	mov	r22, r17
     9e4:	85 e0       	ldi	r24, 0x05	; 5
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 3c 1c 	call	0x3878	; 0x3878 <eeprom_write_byte>
     9ec:	22 c0       	rjmp	.+68     	; 0xa32 <_Z11alarmEEPROMhhii+0x180>
	}
	else
	{
		EEPROM.put(4,1);
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	69 83       	std	Y+1, r22	; 0x01
     9f2:	1a 82       	std	Y+2, r1	; 0x02
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     9f4:	16 2f       	mov	r17, r22

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     9f6:	84 e0       	ldi	r24, 0x04	; 4
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 34 1c 	call	0x3868	; 0x3868 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     9fe:	18 17       	cp	r17, r24
     a00:	29 f0       	breq	.+10     	; 0xa0c <_Z11alarmEEPROMhhii+0x15a>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     a02:	61 2f       	mov	r22, r17
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 3c 1c 	call	0x3878	; 0x3878 <eeprom_write_byte>
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     a0c:	1a 81       	ldd	r17, Y+2	; 0x02

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     a0e:	85 e0       	ldi	r24, 0x05	; 5
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 34 1c 	call	0x3868	; 0x3868 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     a16:	18 17       	cp	r17, r24
     a18:	61 f0       	breq	.+24     	; 0xa32 <_Z11alarmEEPROMhhii+0x180>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     a1a:	61 2f       	mov	r22, r17
     a1c:	85 e0       	ldi	r24, 0x05	; 5
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 3c 1c 	call	0x3878	; 0x3878 <eeprom_write_byte>
     a24:	06 c0       	rjmp	.+12     	; 0xa32 <_Z11alarmEEPROMhhii+0x180>
     a26:	61 2f       	mov	r22, r17
     a28:	86 e0       	ldi	r24, 0x06	; 6
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 3c 1c 	call	0x3878	; 0x3878 <eeprom_write_byte>
     a30:	13 c0       	rjmp	.+38     	; 0xa58 <_Z11alarmEEPROMhhii+0x1a6>
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     a32:	19 85       	ldd	r17, Y+9	; 0x09

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     a34:	85 e0       	ldi	r24, 0x05	; 5
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 34 1c 	call	0x3868	; 0x3868 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     a3c:	18 17       	cp	r17, r24
     a3e:	29 f0       	breq	.+10     	; 0xa4a <_Z11alarmEEPROMhhii+0x198>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     a40:	61 2f       	mov	r22, r17
     a42:	85 e0       	ldi	r24, 0x05	; 5
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 3c 1c 	call	0x3878	; 0x3878 <eeprom_write_byte>
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     a4a:	1a 85       	ldd	r17, Y+10	; 0x0a

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     a4c:	86 e0       	ldi	r24, 0x06	; 6
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 34 1c 	call	0x3868	; 0x3868 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     a54:	18 13       	cpse	r17, r24
     a56:	e7 cf       	rjmp	.-50     	; 0xa26 <_Z11alarmEEPROMhhii+0x174>
	}
	
	EEPROM.put(5,AT);
}
     a58:	2a 96       	adiw	r28, 0x0a	; 10
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	bf 90       	pop	r11
     a76:	af 90       	pop	r10
     a78:	9f 90       	pop	r9
     a7a:	8f 90       	pop	r8
     a7c:	7f 90       	pop	r7
     a7e:	6f 90       	pop	r6
     a80:	5f 90       	pop	r5
     a82:	4f 90       	pop	r4
     a84:	08 95       	ret

00000a86 <_Z11convertTimei>:
{
	//This function is used to convert
	//a time eg a 24hr clock into a 12 hr
	//clock.
	
	if (value > 12)
     a86:	8d 30       	cpi	r24, 0x0D	; 13
     a88:	91 05       	cpc	r25, r1
     a8a:	24 f0       	brlt	.+8      	; 0xa94 <_Z11convertTimei+0xe>
	{
		value -= 12;
		return value;
     a8c:	9c 01       	movw	r18, r24
     a8e:	2c 50       	subi	r18, 0x0C	; 12
     a90:	31 09       	sbc	r19, r1
     a92:	05 c0       	rjmp	.+10     	; 0xa9e <_Z11convertTimei+0x18>
	}
	else if (!value)
     a94:	89 2b       	or	r24, r25
     a96:	09 f0       	breq	.+2      	; 0xa9a <_Z11convertTimei+0x14>
     a98:	08 95       	ret
	{
		value = 12;
		return value;
     a9a:	2c e0       	ldi	r18, 0x0C	; 12
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	82 2f       	mov	r24, r18
     aa0:	93 2f       	mov	r25, r19
	}
}
     aa2:	08 95       	ret

00000aa4 <_Z12BlankDisplayi>:

void BlankDisplay(int nap)
{
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
	if(!nap){
     aa8:	89 2b       	or	r24, r25
     aaa:	99 f4       	brne	.+38     	; 0xad2 <_Z12BlankDisplayi+0x2e>
		//Blanks the current display being used.
		digitalWrite(LATCH, LOW);
     aac:	c4 e2       	ldi	r28, 0x24	; 36
     aae:	d1 e0       	ldi	r29, 0x01	; 1
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	88 81       	ld	r24, Y
     ab4:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, 0b11111111);
     ab8:	2f ef       	ldi	r18, 0xFF	; 255
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	60 91 22 01 	lds	r22, 0x0122
     ac0:	80 91 26 01 	lds	r24, 0x0126
     ac4:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	88 81       	ld	r24, Y
     acc:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
     ad0:	16 c0       	rjmp	.+44     	; 0xafe <_Z12BlankDisplayi+0x5a>
	}
	else
	{
		//Blanks the current display being used.
		digitalWrite(LATCH, LOW);
     ad2:	c4 e2       	ldi	r28, 0x24	; 36
     ad4:	d1 e0       	ldi	r29, 0x01	; 1
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	88 81       	ld	r24, Y
     ada:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, 0b11111111);
     ade:	2f ef       	ldi	r18, 0xFF	; 255
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	60 91 22 01 	lds	r22, 0x0122
     ae6:	80 91 26 01 	lds	r24, 0x0126
     aea:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	88 81       	ld	r24, Y
     af2:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		
		//delay(TIME_DELAY);
		gotoSleep(10);
     af6:	8a e0       	ldi	r24, 0x0A	; 10
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z9gotoSleepi>
	}
	
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <_Z14Update_Displayv>:
	Serial.print("\r\n");
}
#endif

void Update_Display()
{
     b04:	4f 92       	push	r4
     b06:	5f 92       	push	r5
     b08:	6f 92       	push	r6
     b0a:	7f 92       	push	r7
     b0c:	8f 92       	push	r8
     b0e:	9f 92       	push	r9
     b10:	af 92       	push	r10
     b12:	bf 92       	push	r11
     b14:	cf 92       	push	r12
     b16:	df 92       	push	r13
     b18:	ef 92       	push	r14
     b1a:	ff 92       	push	r15
     b1c:	0f 93       	push	r16
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
	///////////////////////////////////////////////////////////
	//This function updates the display on the VFD Tube.
	///////////////////////////////////////////////////////////
	//DateTime now = rtc.now();
	RTC.readTime();
     b24:	88 e7       	ldi	r24, 0x78	; 120
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN6DS13378readTimeEv>
	int SLEEP_DELAY = 2;
	int HR = 0;
	int MN = 0;

	//MN = now.minute();
	MN = RTC.getMinutes();
     b2c:	88 e7       	ldi	r24, 0x78	; 120
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN6DS133710getMinutesEv>
     b34:	48 2e       	mov	r4, r24
     b36:	51 2c       	mov	r5, r1
	//HR = now.hour();
	HR = RTC.getHours();
     b38:	88 e7       	ldi	r24, 0x78	; 120
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN6DS13378getHoursEv>
	
	//Converting 24HR time to 12HR format.
	HR = convertTime(HR);
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z11convertTimei>
     b46:	3c 01       	movw	r6, r24
	
	//display hours first tens then one's position.
	Temp_Array[2] = splitInt(0,HR);
     b48:	bc 01       	movw	r22, r24
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     b52:	90 93 73 01 	sts	0x0173, r25
     b56:	80 93 72 01 	sts	0x0172, r24
	for(int x = 0; x<=1;x++)
     b5a:	c0 e0       	ldi	r28, 0x00	; 0
     b5c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(Temp_Array[2] == splitInt(1,HR)){BlankDisplay(1);}
     b5e:	0f 2e       	mov	r0, r31
     b60:	fe e6       	ldi	r31, 0x6E	; 110
     b62:	8f 2e       	mov	r8, r31
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	9f 2e       	mov	r9, r31
     b68:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, LOW);
     b6a:	04 e2       	ldi	r16, 0x24	; 36
     b6c:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(x,HR)]);
     b6e:	0f 2e       	mov	r0, r31
     b70:	f2 e2       	ldi	r31, 0x22	; 34
     b72:	af 2e       	mov	r10, r31
     b74:	f1 e0       	ldi	r31, 0x01	; 1
     b76:	bf 2e       	mov	r11, r31
     b78:	f0 2d       	mov	r31, r0
     b7a:	0f 2e       	mov	r0, r31
     b7c:	f6 e2       	ldi	r31, 0x26	; 38
     b7e:	cf 2e       	mov	r12, r31
     b80:	f1 e0       	ldi	r31, 0x01	; 1
     b82:	df 2e       	mov	r13, r31
     b84:	f0 2d       	mov	r31, r0
	
	//display hours first tens then one's position.
	Temp_Array[2] = splitInt(0,HR);
	for(int x = 0; x<=1;x++)
	{
		if(Temp_Array[2] == splitInt(1,HR)){BlankDisplay(1);}
     b86:	f4 01       	movw	r30, r8
     b88:	e4 80       	ldd	r14, Z+4	; 0x04
     b8a:	f5 80       	ldd	r15, Z+5	; 0x05
     b8c:	b3 01       	movw	r22, r6
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     b96:	e8 16       	cp	r14, r24
     b98:	f9 06       	cpc	r15, r25
     b9a:	21 f4       	brne	.+8      	; 0xba4 <_Z14Update_Displayv+0xa0>
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
		digitalWrite(LATCH, LOW);
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	f8 01       	movw	r30, r16
     ba8:	80 81       	ld	r24, Z
     baa:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(x,HR)]);
     bae:	b3 01       	movw	r22, r6
     bb0:	ce 01       	movw	r24, r28
     bb2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     bb6:	8c 5f       	subi	r24, 0xFC	; 252
     bb8:	9e 4f       	sbci	r25, 0xFE	; 254
     bba:	fc 01       	movw	r30, r24
     bbc:	20 81       	ld	r18, Z
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	f5 01       	movw	r30, r10
     bc2:	60 81       	ld	r22, Z
     bc4:	f6 01       	movw	r30, r12
     bc6:	80 81       	ld	r24, Z
     bc8:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	f8 01       	movw	r30, r16
     bd0:	80 81       	ld	r24, Z
     bd2:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		//delay(TIME_DELAY);
		gotoSleep(SLEEP_DELAY);
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z9gotoSleepi>
	//Converting 24HR time to 12HR format.
	HR = convertTime(HR);
	
	//display hours first tens then one's position.
	Temp_Array[2] = splitInt(0,HR);
	for(int x = 0; x<=1;x++)
     bde:	21 96       	adiw	r28, 0x01	; 1
     be0:	c2 30       	cpi	r28, 0x02	; 2
     be2:	d1 05       	cpc	r29, r1
     be4:	81 f6       	brne	.-96     	; 0xb86 <_Z14Update_Displayv+0x82>
		//delay(TIME_DELAY);
		gotoSleep(SLEEP_DELAY);
	}
	
	//Dash between HH:MM to separate Hours and minutes.
	digitalWrite(LATCH, LOW);
     be6:	c4 e2       	ldi	r28, 0x24	; 36
     be8:	d1 e0       	ldi	r29, 0x01	; 1
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	88 81       	ld	r24, Y
     bee:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
	shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[10]);
     bf2:	20 91 0e 01 	lds	r18, 0x010E
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	60 91 22 01 	lds	r22, 0x0122
     bfc:	80 91 26 01 	lds	r24, 0x0126
     c00:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
	digitalWrite(LATCH, HIGH);
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	88 81       	ld	r24, Y
     c08:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
	//delay(TIME_DELAY);
	gotoSleep(SLEEP_DELAY);
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z9gotoSleepi>

	//display minutes first tens then one's position
	Temp_Array[3] = splitInt(0,MN);
     c14:	b2 01       	movw	r22, r4
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     c1e:	90 93 75 01 	sts	0x0175, r25
     c22:	80 93 74 01 	sts	0x0174, r24
	for(int y = 0;y<=1;y++)
     c26:	c0 e0       	ldi	r28, 0x00	; 0
     c28:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(Temp_Array[3] == splitInt(1,MN)){BlankDisplay(1);}
     c2a:	0f 2e       	mov	r0, r31
     c2c:	fe e6       	ldi	r31, 0x6E	; 110
     c2e:	8f 2e       	mov	r8, r31
     c30:	f1 e0       	ldi	r31, 0x01	; 1
     c32:	9f 2e       	mov	r9, r31
     c34:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, LOW);
     c36:	04 e2       	ldi	r16, 0x24	; 36
     c38:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(y,MN)]);
     c3a:	0f 2e       	mov	r0, r31
     c3c:	f2 e2       	ldi	r31, 0x22	; 34
     c3e:	af 2e       	mov	r10, r31
     c40:	f1 e0       	ldi	r31, 0x01	; 1
     c42:	bf 2e       	mov	r11, r31
     c44:	f0 2d       	mov	r31, r0
     c46:	0f 2e       	mov	r0, r31
     c48:	f6 e2       	ldi	r31, 0x26	; 38
     c4a:	cf 2e       	mov	r12, r31
     c4c:	f1 e0       	ldi	r31, 0x01	; 1
     c4e:	df 2e       	mov	r13, r31
     c50:	f0 2d       	mov	r31, r0

	//display minutes first tens then one's position
	Temp_Array[3] = splitInt(0,MN);
	for(int y = 0;y<=1;y++)
	{
		if(Temp_Array[3] == splitInt(1,MN)){BlankDisplay(1);}
     c52:	f4 01       	movw	r30, r8
     c54:	e6 80       	ldd	r14, Z+6	; 0x06
     c56:	f7 80       	ldd	r15, Z+7	; 0x07
     c58:	b2 01       	movw	r22, r4
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     c62:	e8 16       	cp	r14, r24
     c64:	f9 06       	cpc	r15, r25
     c66:	21 f4       	brne	.+8      	; 0xc70 <_Z14Update_Displayv+0x16c>
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
		digitalWrite(LATCH, LOW);
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	f8 01       	movw	r30, r16
     c74:	80 81       	ld	r24, Z
     c76:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(y,MN)]);
     c7a:	b2 01       	movw	r22, r4
     c7c:	ce 01       	movw	r24, r28
     c7e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     c82:	8c 5f       	subi	r24, 0xFC	; 252
     c84:	9e 4f       	sbci	r25, 0xFE	; 254
     c86:	fc 01       	movw	r30, r24
     c88:	20 81       	ld	r18, Z
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	f5 01       	movw	r30, r10
     c8e:	60 81       	ld	r22, Z
     c90:	f6 01       	movw	r30, r12
     c92:	80 81       	ld	r24, Z
     c94:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	f8 01       	movw	r30, r16
     c9c:	80 81       	ld	r24, Z
     c9e:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		//delay(TIME_DELAY);
		gotoSleep(SLEEP_DELAY);
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z9gotoSleepi>
	//delay(TIME_DELAY);
	gotoSleep(SLEEP_DELAY);

	//display minutes first tens then one's position
	Temp_Array[3] = splitInt(0,MN);
	for(int y = 0;y<=1;y++)
     caa:	21 96       	adiw	r28, 0x01	; 1
     cac:	c2 30       	cpi	r28, 0x02	; 2
     cae:	d1 05       	cpc	r29, r1
     cb0:	81 f6       	brne	.-96     	; 0xc52 <_Z14Update_Displayv+0x14e>
		//delay(TIME_DELAY);
		gotoSleep(SLEEP_DELAY);
	}

	//Blank display
	BlankDisplay(1);
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	
	if(tempDisplay == true)
     cba:	80 91 91 01 	lds	r24, 0x0191
     cbe:	88 23       	and	r24, r24
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <_Z14Update_Displayv+0x1c0>
     cc2:	b2 c0       	rjmp	.+356    	; 0xe28 <_Z14Update_Displayv+0x324>
	{
		//Display Temperature.
		Temp_Array[4] = splitInt(0,readTemp(1));
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 4f 03 	call	0x69e	; 0x69e <_Z8readTempi>
     ccc:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__fixsfsi>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     cd8:	90 93 77 01 	sts	0x0177, r25
     cdc:	80 93 76 01 	sts	0x0176, r24
		for (int z = 0; z <= 1; z++)
     ce0:	c0 e0       	ldi	r28, 0x00	; 0
     ce2:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(Temp_Array[4] == splitInt(1,readTemp(1))){BlankDisplay(1);}
     ce4:	0f 2e       	mov	r0, r31
     ce6:	fe e6       	ldi	r31, 0x6E	; 110
     ce8:	8f 2e       	mov	r8, r31
     cea:	f1 e0       	ldi	r31, 0x01	; 1
     cec:	9f 2e       	mov	r9, r31
     cee:	f0 2d       	mov	r31, r0
			digitalWrite(LATCH, LOW);
     cf0:	04 e2       	ldi	r16, 0x24	; 36
     cf2:	11 e0       	ldi	r17, 0x01	; 1
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(z,readTemp(1))]);
     cf4:	0f 2e       	mov	r0, r31
     cf6:	f2 e2       	ldi	r31, 0x22	; 34
     cf8:	af 2e       	mov	r10, r31
     cfa:	f1 e0       	ldi	r31, 0x01	; 1
     cfc:	bf 2e       	mov	r11, r31
     cfe:	f0 2d       	mov	r31, r0
     d00:	0f 2e       	mov	r0, r31
     d02:	f6 e2       	ldi	r31, 0x26	; 38
     d04:	cf 2e       	mov	r12, r31
     d06:	f1 e0       	ldi	r31, 0x01	; 1
     d08:	df 2e       	mov	r13, r31
     d0a:	f0 2d       	mov	r31, r0
	{
		//Display Temperature.
		Temp_Array[4] = splitInt(0,readTemp(1));
		for (int z = 0; z <= 1; z++)
		{
			if(Temp_Array[4] == splitInt(1,readTemp(1))){BlankDisplay(1);}
     d0c:	f4 01       	movw	r30, r8
     d0e:	e0 84       	ldd	r14, Z+8	; 0x08
     d10:	f1 84       	ldd	r15, Z+9	; 0x09
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 4f 03 	call	0x69e	; 0x69e <_Z8readTempi>
     d1a:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__fixsfsi>
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     d26:	e8 16       	cp	r14, r24
     d28:	f9 06       	cpc	r15, r25
     d2a:	21 f4       	brne	.+8      	; 0xd34 <_Z14Update_Displayv+0x230>
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
			digitalWrite(LATCH, LOW);
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	f8 01       	movw	r30, r16
     d38:	80 81       	ld	r24, Z
     d3a:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[splitInt(z,readTemp(1))]);
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 4f 03 	call	0x69e	; 0x69e <_Z8readTempi>
     d46:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__fixsfsi>
     d4a:	ce 01       	movw	r24, r28
     d4c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z8splitIntii>
     d50:	8c 5f       	subi	r24, 0xFC	; 252
     d52:	9e 4f       	sbci	r25, 0xFE	; 254
     d54:	fc 01       	movw	r30, r24
     d56:	20 81       	ld	r18, Z
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	f5 01       	movw	r30, r10
     d5c:	60 81       	ld	r22, Z
     d5e:	f6 01       	movw	r30, r12
     d60:	80 81       	ld	r24, Z
     d62:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	f8 01       	movw	r30, r16
     d6a:	80 81       	ld	r24, Z
     d6c:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			//delay(TIME_DELAY);
			gotoSleep(SLEEP_DELAY);
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z9gotoSleepi>
	
	if(tempDisplay == true)
	{
		//Display Temperature.
		Temp_Array[4] = splitInt(0,readTemp(1));
		for (int z = 0; z <= 1; z++)
     d78:	21 96       	adiw	r28, 0x01	; 1
     d7a:	c2 30       	cpi	r28, 0x02	; 2
     d7c:	d1 05       	cpc	r29, r1
     d7e:	31 f6       	brne	.-116    	; 0xd0c <_Z14Update_Displayv+0x208>
			//delay(TIME_DELAY);
			gotoSleep(SLEEP_DELAY);
		}

		//display a degree symbol
		digitalWrite(LATCH, LOW);
     d80:	c4 e2       	ldi	r28, 0x24	; 36
     d82:	d1 e0       	ldi	r29, 0x01	; 1
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	88 81       	ld	r24, Y
     d88:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[15]);
     d8c:	20 91 13 01 	lds	r18, 0x0113
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	60 91 22 01 	lds	r22, 0x0122
     d96:	80 91 26 01 	lds	r24, 0x0126
     d9a:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	88 81       	ld	r24, Y
     da2:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		//delay(TIME_DELAY);
		gotoSleep(SLEEP_DELAY);
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z9gotoSleepi>
		
		BlankDisplay(1);
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
		if(tempCORF == false)
     db6:	80 91 90 01 	lds	r24, 0x0190
     dba:	81 11       	cpse	r24, r1
     dbc:	1a c0       	rjmp	.+52     	; 0xdf2 <_Z14Update_Displayv+0x2ee>
		{
			//display a Celsius (c) symbol
			digitalWrite(LATCH, LOW);
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	88 81       	ld	r24, Y
     dc2:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[16]);
     dc6:	20 91 14 01 	lds	r18, 0x0114
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	60 91 22 01 	lds	r22, 0x0122
     dd0:	80 91 26 01 	lds	r24, 0x0126
     dd4:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	88 81       	ld	r24, Y
     ddc:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			//delay(TIME_DELAY);
			gotoSleep(SLEEP_DELAY);
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z9gotoSleepi>

			BlankDisplay(1);
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
     df0:	1b c0       	rjmp	.+54     	; 0xe28 <_Z14Update_Displayv+0x324>
		}
		else
		{
			//display a Celsius (c) symbol
			digitalWrite(LATCH, LOW);
     df2:	c4 e2       	ldi	r28, 0x24	; 36
     df4:	d1 e0       	ldi	r29, 0x01	; 1
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	88 81       	ld	r24, Y
     dfa:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[16]);
     dfe:	20 91 14 01 	lds	r18, 0x0114
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	60 91 22 01 	lds	r22, 0x0122
     e08:	80 91 26 01 	lds	r24, 0x0126
     e0c:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	88 81       	ld	r24, Y
     e14:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			//delay(TIME_DELAY);
			gotoSleep(SLEEP_DELAY);
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z9gotoSleepi>

			BlankDisplay(1);
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
		}
	}
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	cf 90       	pop	r12
     e38:	bf 90       	pop	r11
     e3a:	af 90       	pop	r10
     e3c:	9f 90       	pop	r9
     e3e:	8f 90       	pop	r8
     e40:	7f 90       	pop	r7
     e42:	6f 90       	pop	r6
     e44:	5f 90       	pop	r5
     e46:	4f 90       	pop	r4
     e48:	08 95       	ret

00000e4a <_Z7setTimev>:
	BlankDisplay(0);
	delay(BTN_DELAY);
}

void setTime()
{
     e4a:	2f 92       	push	r2
     e4c:	3f 92       	push	r3
     e4e:	4f 92       	push	r4
     e50:	5f 92       	push	r5
     e52:	6f 92       	push	r6
     e54:	7f 92       	push	r7
     e56:	8f 92       	push	r8
     e58:	9f 92       	push	r9
     e5a:	af 92       	push	r10
     e5c:	bf 92       	push	r11
     e5e:	cf 92       	push	r12
     e60:	df 92       	push	r13
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
	// user presses button A (digital 8) to enter 'set time' mode while time being displayed
	// then user presses A to advance value, B to lock in. Repeat for four digits of time
	
	//mini state machine
	int State = 0;
	detachInterrupt(0);
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <detachInterrupt>
	int h1=0;
	int h2=0;
	int m1=0;
	int m2=0;
	boolean set=false;
	BlankDisplay(0);
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	
	//mini state machine
	int State = 0;
	detachInterrupt(0);
	byte minute, hour;
	int h1=0;
     e7c:	c0 e0       	ldi	r28, 0x00	; 0
     e7e:	d0 e0       	ldi	r29, 0x00	; 0

	do // get first digit of hours from user
	// press digital 8 button to change from 0>1>2>0>1...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
     e80:	04 e2       	ldi	r16, 0x24	; 36
     e82:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
     e84:	0f 2e       	mov	r0, r31
     e86:	f2 e2       	ldi	r31, 0x22	; 34
     e88:	cf 2e       	mov	r12, r31
     e8a:	f1 e0       	ldi	r31, 0x01	; 1
     e8c:	df 2e       	mov	r13, r31
     e8e:	f0 2d       	mov	r31, r0
     e90:	0f 2e       	mov	r0, r31
     e92:	f6 e2       	ldi	r31, 0x26	; 38
     e94:	ef 2e       	mov	r14, r31
     e96:	f1 e0       	ldi	r31, 0x01	; 1
     e98:	ff 2e       	mov	r15, r31
     e9a:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
     e9c:	0f 2e       	mov	r0, r31
     e9e:	fa e2       	ldi	r31, 0x2A	; 42
     ea0:	8f 2e       	mov	r8, r31
     ea2:	f1 e0       	ldi	r31, 0x01	; 1
     ea4:	9f 2e       	mov	r9, r31
     ea6:	f0 2d       	mov	r31, r0
		{
			delay(debounce);
			h1++;
			if (h1>2)
			{
				h1=0;
     ea8:	61 2c       	mov	r6, r1
     eaa:	71 2c       	mov	r7, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
     eac:	0f 2e       	mov	r0, r31
     eae:	f8 e2       	ldi	r31, 0x28	; 40
     eb0:	af 2e       	mov	r10, r31
     eb2:	f1 e0       	ldi	r31, 0x01	; 1
     eb4:	bf 2e       	mov	r11, r31
     eb6:	f0 2d       	mov	r31, r0

	do // get first digit of hours from user
	// press digital 8 button to change from 0>1>2>0>1...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	f8 01       	movw	r30, r16
     ebc:	80 81       	ld	r24, Z
     ebe:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
     ec2:	fe 01       	movw	r30, r28
     ec4:	ec 5f       	subi	r30, 0xFC	; 252
     ec6:	fe 4f       	sbci	r31, 0xFE	; 254
     ec8:	20 81       	ld	r18, Z
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	f6 01       	movw	r30, r12
     ece:	60 81       	ld	r22, Z
     ed0:	f7 01       	movw	r30, r14
     ed2:	80 81       	ld	r24, Z
     ed4:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	f8 01       	movw	r30, r16
     edc:	80 81       	ld	r24, Z
     ede:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
     ee2:	f4 01       	movw	r30, r8
     ee4:	80 81       	ld	r24, Z
     ee6:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	29 f5       	brne	.+74     	; 0xf38 <_Z7setTimev+0xee>
		{
			delay(debounce);
     eee:	60 91 18 01 	lds	r22, 0x0118
     ef2:	70 91 19 01 	lds	r23, 0x0119
     ef6:	07 2e       	mov	r0, r23
     ef8:	00 0c       	add	r0, r0
     efa:	88 0b       	sbc	r24, r24
     efc:	99 0b       	sbc	r25, r25
     efe:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			h1++;
     f02:	21 96       	adiw	r28, 0x01	; 1
			if (h1>2)
     f04:	c3 30       	cpi	r28, 0x03	; 3
     f06:	d1 05       	cpc	r29, r1
     f08:	14 f0       	brlt	.+4      	; 0xf0e <_Z7setTimev+0xc4>
			{
				h1=0;
     f0a:	c6 2d       	mov	r28, r6
     f0c:	d7 2d       	mov	r29, r7
			}
			digitalWrite(LATCH, LOW);
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	f8 01       	movw	r30, r16
     f12:	80 81       	ld	r24, Z
     f14:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
     f18:	fe 01       	movw	r30, r28
     f1a:	ec 5f       	subi	r30, 0xFC	; 252
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	20 81       	ld	r18, Z
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	f6 01       	movw	r30, r12
     f24:	60 81       	ld	r22, Z
     f26:	f7 01       	movw	r30, r14
     f28:	80 81       	ld	r24, Z
     f2a:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	f8 01       	movw	r30, r16
     f32:	80 81       	ld	r24, Z
     f34:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
     f38:	f5 01       	movw	r30, r10
     f3a:	80 81       	ld	r24, Z
     f3c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	09 f0       	breq	.+2      	; 0xf46 <_Z7setTimev+0xfc>
     f44:	b9 cf       	rjmp	.-142    	; 0xeb8 <_Z7setTimev+0x6e>
		{
			delay(debounce);
     f46:	60 91 18 01 	lds	r22, 0x0118
     f4a:	70 91 19 01 	lds	r23, 0x0119
     f4e:	07 2e       	mov	r0, r23
     f50:	00 0c       	add	r0, r0
     f52:	88 0b       	sbc	r24, r24
     f54:	99 0b       	sbc	r25, r25
     f56:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			set=true;
		}
	}
	while (set!=true);
	BlankDisplay(0);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
     f62:	60 91 1c 01 	lds	r22, 0x011C
     f66:	70 91 1d 01 	lds	r23, 0x011D
     f6a:	07 2e       	mov	r0, r23
     f6c:	00 0c       	add	r0, r0
     f6e:	88 0b       	sbc	r24, r24
     f70:	99 0b       	sbc	r25, r25
     f72:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
	//mini state machine
	int State = 0;
	detachInterrupt(0);
	byte minute, hour;
	int h1=0;
	int h2=0;
     f76:	c1 2c       	mov	r12, r1
     f78:	d1 2c       	mov	r13, r1

	do // get second digit of hours from user
	// press digital 8 button to change from 0>1>2>...9>0...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
     f7a:	04 e2       	ldi	r16, 0x24	; 36
     f7c:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
     f7e:	0f 2e       	mov	r0, r31
     f80:	f2 e2       	ldi	r31, 0x22	; 34
     f82:	af 2e       	mov	r10, r31
     f84:	f1 e0       	ldi	r31, 0x01	; 1
     f86:	bf 2e       	mov	r11, r31
     f88:	f0 2d       	mov	r31, r0
     f8a:	0f 2e       	mov	r0, r31
     f8c:	f6 e2       	ldi	r31, 0x26	; 38
     f8e:	ef 2e       	mov	r14, r31
     f90:	f1 e0       	ldi	r31, 0x01	; 1
     f92:	ff 2e       	mov	r15, r31
     f94:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
     f96:	0f 2e       	mov	r0, r31
     f98:	fa e2       	ldi	r31, 0x2A	; 42
     f9a:	8f 2e       	mov	r8, r31
     f9c:	f1 e0       	ldi	r31, 0x01	; 1
     f9e:	9f 2e       	mov	r9, r31
     fa0:	f0 2d       	mov	r31, r0
		{
			delay(debounce);
			h2++;
			if (h2>9)
			{
				h2=0;
     fa2:	41 2c       	mov	r4, r1
     fa4:	51 2c       	mov	r5, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
     fa6:	0f 2e       	mov	r0, r31
     fa8:	f8 e2       	ldi	r31, 0x28	; 40
     faa:	6f 2e       	mov	r6, r31
     fac:	f1 e0       	ldi	r31, 0x01	; 1
     fae:	7f 2e       	mov	r7, r31
     fb0:	f0 2d       	mov	r31, r0

	do // get second digit of hours from user
	// press digital 8 button to change from 0>1>2>...9>0...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	f8 01       	movw	r30, r16
     fb6:	80 81       	ld	r24, Z
     fb8:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
     fbc:	f6 01       	movw	r30, r12
     fbe:	ec 5f       	subi	r30, 0xFC	; 252
     fc0:	fe 4f       	sbci	r31, 0xFE	; 254
     fc2:	20 81       	ld	r18, Z
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	f5 01       	movw	r30, r10
     fc8:	60 81       	ld	r22, Z
     fca:	f7 01       	movw	r30, r14
     fcc:	80 81       	ld	r24, Z
     fce:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	f8 01       	movw	r30, r16
     fd6:	80 81       	ld	r24, Z
     fd8:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
     fdc:	f4 01       	movw	r30, r8
     fde:	80 81       	ld	r24, Z
     fe0:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	41 f5       	brne	.+80     	; 0x1038 <_Z7setTimev+0x1ee>
		{
			delay(debounce);
     fe8:	60 91 18 01 	lds	r22, 0x0118
     fec:	70 91 19 01 	lds	r23, 0x0119
     ff0:	07 2e       	mov	r0, r23
     ff2:	00 0c       	add	r0, r0
     ff4:	88 0b       	sbc	r24, r24
     ff6:	99 0b       	sbc	r25, r25
     ff8:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			h2++;
     ffc:	ff ef       	ldi	r31, 0xFF	; 255
     ffe:	cf 1a       	sub	r12, r31
    1000:	df 0a       	sbc	r13, r31
			if (h2>9)
    1002:	8a e0       	ldi	r24, 0x0A	; 10
    1004:	c8 16       	cp	r12, r24
    1006:	d1 04       	cpc	r13, r1
    1008:	14 f0       	brlt	.+4      	; 0x100e <_Z7setTimev+0x1c4>
			{
				h2=0;
    100a:	c4 2c       	mov	r12, r4
    100c:	d5 2c       	mov	r13, r5
			}
			digitalWrite(LATCH, LOW);
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	f8 01       	movw	r30, r16
    1012:	80 81       	ld	r24, Z
    1014:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
    1018:	f6 01       	movw	r30, r12
    101a:	ec 5f       	subi	r30, 0xFC	; 252
    101c:	fe 4f       	sbci	r31, 0xFE	; 254
    101e:	20 81       	ld	r18, Z
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	f5 01       	movw	r30, r10
    1024:	60 81       	ld	r22, Z
    1026:	f7 01       	movw	r30, r14
    1028:	80 81       	ld	r24, Z
    102a:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	f8 01       	movw	r30, r16
    1032:	80 81       	ld	r24, Z
    1034:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    1038:	f3 01       	movw	r30, r6
    103a:	80 81       	ld	r24, Z
    103c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	09 f0       	breq	.+2      	; 0x1046 <_Z7setTimev+0x1fc>
    1044:	b6 cf       	rjmp	.-148    	; 0xfb2 <_Z7setTimev+0x168>
		{
			delay(debounce);
    1046:	60 91 18 01 	lds	r22, 0x0118
    104a:	70 91 19 01 	lds	r23, 0x0119
    104e:	07 2e       	mov	r0, r23
    1050:	00 0c       	add	r0, r0
    1052:	88 0b       	sbc	r24, r24
    1054:	99 0b       	sbc	r25, r25
    1056:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			set=true;
		}
	}
	while (set!=true);
	BlankDisplay(0);
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    1062:	60 91 1c 01 	lds	r22, 0x011C
    1066:	70 91 1d 01 	lds	r23, 0x011D
    106a:	07 2e       	mov	r0, r23
    106c:	00 0c       	add	r0, r0
    106e:	88 0b       	sbc	r24, r24
    1070:	99 0b       	sbc	r25, r25
    1072:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
	int State = 0;
	detachInterrupt(0);
	byte minute, hour;
	int h1=0;
	int h2=0;
	int m1=0;
    1076:	e1 2c       	mov	r14, r1
    1078:	f1 2c       	mov	r15, r1

	do // get first digit of minutes from user
	// press digital 8 button to change from 0>1>..5>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    107a:	04 e2       	ldi	r16, 0x24	; 36
    107c:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
    107e:	0f 2e       	mov	r0, r31
    1080:	f2 e2       	ldi	r31, 0x22	; 34
    1082:	8f 2e       	mov	r8, r31
    1084:	f1 e0       	ldi	r31, 0x01	; 1
    1086:	9f 2e       	mov	r9, r31
    1088:	f0 2d       	mov	r31, r0
    108a:	0f 2e       	mov	r0, r31
    108c:	f6 e2       	ldi	r31, 0x26	; 38
    108e:	af 2e       	mov	r10, r31
    1090:	f1 e0       	ldi	r31, 0x01	; 1
    1092:	bf 2e       	mov	r11, r31
    1094:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    1096:	0f 2e       	mov	r0, r31
    1098:	fa e2       	ldi	r31, 0x2A	; 42
    109a:	6f 2e       	mov	r6, r31
    109c:	f1 e0       	ldi	r31, 0x01	; 1
    109e:	7f 2e       	mov	r7, r31
    10a0:	f0 2d       	mov	r31, r0
		{
			delay(debounce);
			m1++;
			if (m1>5)
			{
				m1=0;
    10a2:	21 2c       	mov	r2, r1
    10a4:	31 2c       	mov	r3, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    10a6:	0f 2e       	mov	r0, r31
    10a8:	f8 e2       	ldi	r31, 0x28	; 40
    10aa:	4f 2e       	mov	r4, r31
    10ac:	f1 e0       	ldi	r31, 0x01	; 1
    10ae:	5f 2e       	mov	r5, r31
    10b0:	f0 2d       	mov	r31, r0

	do // get first digit of minutes from user
	// press digital 8 button to change from 0>1>..5>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	f8 01       	movw	r30, r16
    10b6:	80 81       	ld	r24, Z
    10b8:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
    10bc:	f7 01       	movw	r30, r14
    10be:	ec 5f       	subi	r30, 0xFC	; 252
    10c0:	fe 4f       	sbci	r31, 0xFE	; 254
    10c2:	20 81       	ld	r18, Z
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	f4 01       	movw	r30, r8
    10c8:	60 81       	ld	r22, Z
    10ca:	f5 01       	movw	r30, r10
    10cc:	80 81       	ld	r24, Z
    10ce:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	f8 01       	movw	r30, r16
    10d6:	80 81       	ld	r24, Z
    10d8:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    10dc:	f3 01       	movw	r30, r6
    10de:	80 81       	ld	r24, Z
    10e0:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	41 f5       	brne	.+80     	; 0x1138 <_Z7setTimev+0x2ee>
		{
			delay(debounce);
    10e8:	60 91 18 01 	lds	r22, 0x0118
    10ec:	70 91 19 01 	lds	r23, 0x0119
    10f0:	07 2e       	mov	r0, r23
    10f2:	00 0c       	add	r0, r0
    10f4:	88 0b       	sbc	r24, r24
    10f6:	99 0b       	sbc	r25, r25
    10f8:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			m1++;
    10fc:	ff ef       	ldi	r31, 0xFF	; 255
    10fe:	ef 1a       	sub	r14, r31
    1100:	ff 0a       	sbc	r15, r31
			if (m1>5)
    1102:	86 e0       	ldi	r24, 0x06	; 6
    1104:	e8 16       	cp	r14, r24
    1106:	f1 04       	cpc	r15, r1
    1108:	14 f0       	brlt	.+4      	; 0x110e <_Z7setTimev+0x2c4>
			{
				m1=0;
    110a:	e2 2c       	mov	r14, r2
    110c:	f3 2c       	mov	r15, r3
			}
			digitalWrite(LATCH, LOW);
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	f8 01       	movw	r30, r16
    1112:	80 81       	ld	r24, Z
    1114:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
    1118:	f7 01       	movw	r30, r14
    111a:	ec 5f       	subi	r30, 0xFC	; 252
    111c:	fe 4f       	sbci	r31, 0xFE	; 254
    111e:	20 81       	ld	r18, Z
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	f4 01       	movw	r30, r8
    1124:	60 81       	ld	r22, Z
    1126:	f5 01       	movw	r30, r10
    1128:	80 81       	ld	r24, Z
    112a:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	f8 01       	movw	r30, r16
    1132:	80 81       	ld	r24, Z
    1134:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    1138:	f2 01       	movw	r30, r4
    113a:	80 81       	ld	r24, Z
    113c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	09 f0       	breq	.+2      	; 0x1146 <_Z7setTimev+0x2fc>
    1144:	b6 cf       	rjmp	.-148    	; 0x10b2 <_Z7setTimev+0x268>
		{
			set=true;
			delay(debounce);
    1146:	60 91 18 01 	lds	r22, 0x0118
    114a:	70 91 19 01 	lds	r23, 0x0119
    114e:	07 2e       	mov	r0, r23
    1150:	00 0c       	add	r0, r0
    1152:	88 0b       	sbc	r24, r24
    1154:	99 0b       	sbc	r25, r25
    1156:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
		}
	}
	while (set!=true);
	BlankDisplay(0);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    1162:	60 91 1c 01 	lds	r22, 0x011C
    1166:	70 91 1d 01 	lds	r23, 0x011D
    116a:	07 2e       	mov	r0, r23
    116c:	00 0c       	add	r0, r0
    116e:	88 0b       	sbc	r24, r24
    1170:	99 0b       	sbc	r25, r25
    1172:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
	detachInterrupt(0);
	byte minute, hour;
	int h1=0;
	int h2=0;
	int m1=0;
	int m2=0;
    1176:	00 e0       	ldi	r16, 0x00	; 0
    1178:	10 e0       	ldi	r17, 0x00	; 0

	do // get second digit of minutes from user
	// press digital 8 button to change from 0>1>..9>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    117a:	0f 2e       	mov	r0, r31
    117c:	f4 e2       	ldi	r31, 0x24	; 36
    117e:	af 2e       	mov	r10, r31
    1180:	f1 e0       	ldi	r31, 0x01	; 1
    1182:	bf 2e       	mov	r11, r31
    1184:	f0 2d       	mov	r31, r0
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
    1186:	0f 2e       	mov	r0, r31
    1188:	f2 e2       	ldi	r31, 0x22	; 34
    118a:	8f 2e       	mov	r8, r31
    118c:	f1 e0       	ldi	r31, 0x01	; 1
    118e:	9f 2e       	mov	r9, r31
    1190:	f0 2d       	mov	r31, r0
    1192:	0f 2e       	mov	r0, r31
    1194:	f6 e2       	ldi	r31, 0x26	; 38
    1196:	6f 2e       	mov	r6, r31
    1198:	f1 e0       	ldi	r31, 0x01	; 1
    119a:	7f 2e       	mov	r7, r31
    119c:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    119e:	0f 2e       	mov	r0, r31
    11a0:	fa e2       	ldi	r31, 0x2A	; 42
    11a2:	4f 2e       	mov	r4, r31
    11a4:	f1 e0       	ldi	r31, 0x01	; 1
    11a6:	5f 2e       	mov	r5, r31
    11a8:	f0 2d       	mov	r31, r0
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    11aa:	0f 2e       	mov	r0, r31
    11ac:	f8 e2       	ldi	r31, 0x28	; 40
    11ae:	2f 2e       	mov	r2, r31
    11b0:	f1 e0       	ldi	r31, 0x01	; 1
    11b2:	3f 2e       	mov	r3, r31
    11b4:	f0 2d       	mov	r31, r0

	do // get second digit of minutes from user
	// press digital 8 button to change from 0>1>..9>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	f5 01       	movw	r30, r10
    11ba:	80 81       	ld	r24, Z
    11bc:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
    11c0:	f8 01       	movw	r30, r16
    11c2:	ec 5f       	subi	r30, 0xFC	; 252
    11c4:	fe 4f       	sbci	r31, 0xFE	; 254
    11c6:	20 81       	ld	r18, Z
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	f4 01       	movw	r30, r8
    11cc:	60 81       	ld	r22, Z
    11ce:	f3 01       	movw	r30, r6
    11d0:	80 81       	ld	r24, Z
    11d2:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	f5 01       	movw	r30, r10
    11da:	80 81       	ld	r24, Z
    11dc:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    11e0:	f2 01       	movw	r30, r4
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	31 f5       	brne	.+76     	; 0x1238 <_Z7setTimev+0x3ee>
		{
			delay(debounce);
    11ec:	60 91 18 01 	lds	r22, 0x0118
    11f0:	70 91 19 01 	lds	r23, 0x0119
    11f4:	07 2e       	mov	r0, r23
    11f6:	00 0c       	add	r0, r0
    11f8:	88 0b       	sbc	r24, r24
    11fa:	99 0b       	sbc	r25, r25
    11fc:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			m2++;
    1200:	0f 5f       	subi	r16, 0xFF	; 255
    1202:	1f 4f       	sbci	r17, 0xFF	; 255
			if (m2>9)
    1204:	0a 30       	cpi	r16, 0x0A	; 10
    1206:	11 05       	cpc	r17, r1
    1208:	14 f0       	brlt	.+4      	; 0x120e <_Z7setTimev+0x3c4>
			{
				m2=0;
    120a:	00 e0       	ldi	r16, 0x00	; 0
    120c:	10 e0       	ldi	r17, 0x00	; 0
			}
			digitalWrite(LATCH, LOW);
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	f5 01       	movw	r30, r10
    1212:	80 81       	ld	r24, Z
    1214:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
    1218:	f8 01       	movw	r30, r16
    121a:	ec 5f       	subi	r30, 0xFC	; 252
    121c:	fe 4f       	sbci	r31, 0xFE	; 254
    121e:	20 81       	ld	r18, Z
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	f4 01       	movw	r30, r8
    1224:	60 81       	ld	r22, Z
    1226:	f3 01       	movw	r30, r6
    1228:	80 81       	ld	r24, Z
    122a:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	f5 01       	movw	r30, r10
    1232:	80 81       	ld	r24, Z
    1234:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    1238:	f1 01       	movw	r30, r2
    123a:	80 81       	ld	r24, Z
    123c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	09 f0       	breq	.+2      	; 0x1246 <_Z7setTimev+0x3fc>
    1244:	b8 cf       	rjmp	.-144    	; 0x11b6 <_Z7setTimev+0x36c>
		{
			set=true;
			delay(debounce);
    1246:	60 91 18 01 	lds	r22, 0x0118
    124a:	70 91 19 01 	lds	r23, 0x0119
    124e:	07 2e       	mov	r0, r23
    1250:	00 0c       	add	r0, r0
    1252:	88 0b       	sbc	r24, r24
    1254:	99 0b       	sbc	r25, r25
    1256:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
		}
	}
	while (set!=true);
	BlankDisplay(0);
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    1262:	60 91 1c 01 	lds	r22, 0x011C
    1266:	70 91 1d 01 	lds	r23, 0x011D
    126a:	07 2e       	mov	r0, r23
    126c:	00 0c       	add	r0, r0
    126e:	88 0b       	sbc	r24, r24
    1270:	99 0b       	sbc	r25, r25
    1272:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>

	// now convert the user time data to variables to write to DS1307
	hour = (h1*10)+h2;
    1276:	cc 0f       	add	r28, r28
    1278:	8c 2f       	mov	r24, r28
    127a:	88 0f       	add	r24, r24
    127c:	88 0f       	add	r24, r24
    127e:	c8 0f       	add	r28, r24
    1280:	cc 0d       	add	r28, r12
	minute = (m1*10)+m2;
    1282:	ee 0c       	add	r14, r14
    1284:	6e 2d       	mov	r22, r14
    1286:	66 0f       	add	r22, r22
    1288:	66 0f       	add	r22, r22
    128a:	e6 0e       	add	r14, r22
    128c:	6e 2d       	mov	r22, r14
    128e:	60 0f       	add	r22, r16
	if (hour<24 && minute <60) // in case user enters invalid time e.g. 2659h
    1290:	c8 31       	cpi	r28, 0x18	; 24
    1292:	08 f0       	brcs	.+2      	; 0x1296 <_Z7setTimev+0x44c>
    1294:	78 c0       	rjmp	.+240    	; 0x1386 <_Z7setTimev+0x53c>
    1296:	6c 33       	cpi	r22, 0x3C	; 60
    1298:	08 f0       	brcs	.+2      	; 0x129c <_Z7setTimev+0x452>
    129a:	75 c0       	rjmp	.+234    	; 0x1386 <_Z7setTimev+0x53c>
	{

		RTC.setMinutes(minute);
    129c:	88 e7       	ldi	r24, 0x78	; 120
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6DS133710setMinutesEh>
		RTC.setHours(hour);
    12a4:	6c 2f       	mov	r22, r28
    12a6:	88 e7       	ldi	r24, 0x78	; 120
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN6DS13378setHoursEh>
		RTC.writeTime();
    12ae:	88 e7       	ldi	r24, 0x78	; 120
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN6DS13379writeTimeEv>
		digitalWrite(LATCH, LOW);
    12b6:	c4 e2       	ldi	r28, 0x24	; 36
    12b8:	d1 e0       	ldi	r29, 0x01	; 1
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	88 81       	ld	r24, Y
    12be:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[10]);
    12c2:	0f 2e       	mov	r0, r31
    12c4:	f4 e0       	ldi	r31, 0x04	; 4
    12c6:	cf 2e       	mov	r12, r31
    12c8:	f1 e0       	ldi	r31, 0x01	; 1
    12ca:	df 2e       	mov	r13, r31
    12cc:	f0 2d       	mov	r31, r0
    12ce:	0f 2e       	mov	r0, r31
    12d0:	f2 e2       	ldi	r31, 0x22	; 34
    12d2:	ef 2e       	mov	r14, r31
    12d4:	f1 e0       	ldi	r31, 0x01	; 1
    12d6:	ff 2e       	mov	r15, r31
    12d8:	f0 2d       	mov	r31, r0
    12da:	06 e2       	ldi	r16, 0x26	; 38
    12dc:	11 e0       	ldi	r17, 0x01	; 1
    12de:	f6 01       	movw	r30, r12
    12e0:	22 85       	ldd	r18, Z+10	; 0x0a
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	f7 01       	movw	r30, r14
    12e6:	60 81       	ld	r22, Z
    12e8:	f8 01       	movw	r30, r16
    12ea:	80 81       	ld	r24, Z
    12ec:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH); // display hyphen
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	88 81       	ld	r24, Y
    12f4:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		delay(DIGIT_DELAY);
    12f8:	60 91 1a 01 	lds	r22, 0x011A
    12fc:	70 91 1b 01 	lds	r23, 0x011B
    1300:	07 2e       	mov	r0, r23
    1302:	00 0c       	add	r0, r0
    1304:	88 0b       	sbc	r24, r24
    1306:	99 0b       	sbc	r25, r25
    1308:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
		BlankDisplay(0);
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
		delay(DIGIT_DELAY);
    1314:	60 91 1a 01 	lds	r22, 0x011A
    1318:	70 91 1b 01 	lds	r23, 0x011B
    131c:	07 2e       	mov	r0, r23
    131e:	00 0c       	add	r0, r0
    1320:	88 0b       	sbc	r24, r24
    1322:	99 0b       	sbc	r25, r25
    1324:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
		digitalWrite(LATCH, LOW);
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	88 81       	ld	r24, Y
    132c:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[10]);
    1330:	f6 01       	movw	r30, r12
    1332:	22 85       	ldd	r18, Z+10	; 0x0a
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	f7 01       	movw	r30, r14
    1338:	60 81       	ld	r22, Z
    133a:	f8 01       	movw	r30, r16
    133c:	80 81       	ld	r24, Z
    133e:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH); // display hyphen
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	88 81       	ld	r24, Y
    1346:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		delay(DIGIT_DELAY);
    134a:	60 91 1a 01 	lds	r22, 0x011A
    134e:	70 91 1b 01 	lds	r23, 0x011B
    1352:	07 2e       	mov	r0, r23
    1354:	00 0c       	add	r0, r0
    1356:	88 0b       	sbc	r24, r24
    1358:	99 0b       	sbc	r25, r25
    135a:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
		BlankDisplay(0);
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
		
		//this needs to happen, cpu will hang
		//without it.
		SECONDS_LAST = RTC.getSeconds();
    1366:	88 e7       	ldi	r24, 0x78	; 120
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6DS133710getSecondsEv>
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	90 93 85 01 	sts	0x0185, r25
    1374:	80 93 84 01 	sts	0x0184, r24
		attachInterrupt(0, Interrupt_Update, RISING);
    1378:	43 e0       	ldi	r20, 0x03	; 3
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	6d e0       	ldi	r22, 0x0D	; 13
    137e:	73 e0       	ldi	r23, 0x03	; 3
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <attachInterrupt>
	}
}
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	cf 90       	pop	r12
    1396:	bf 90       	pop	r11
    1398:	af 90       	pop	r10
    139a:	9f 90       	pop	r9
    139c:	8f 90       	pop	r8
    139e:	7f 90       	pop	r7
    13a0:	6f 90       	pop	r6
    13a2:	5f 90       	pop	r5
    13a4:	4f 90       	pop	r4
    13a6:	3f 90       	pop	r3
    13a8:	2f 90       	pop	r2
    13aa:	08 95       	ret

000013ac <_Z10soundAlarmv>:
	//Alarm is ready
	if(same == 5){return 1;}
}

void soundAlarm()
{
    13ac:	6f 92       	push	r6
    13ae:	7f 92       	push	r7
    13b0:	8f 92       	push	r8
    13b2:	9f 92       	push	r9
    13b4:	af 92       	push	r10
    13b6:	bf 92       	push	r11
    13b8:	cf 92       	push	r12
    13ba:	df 92       	push	r13
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
	detachInterrupt(0);
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <detachInterrupt>
	
	RTC.readTime();
    13ce:	88 e7       	ldi	r24, 0x78	; 120
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN6DS13378readTimeEv>
	int min = RTC.getMinutes();
    13d6:	88 e7       	ldi	r24, 0x78	; 120
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN6DS133710getMinutesEv>
    13de:	c8 2f       	mov	r28, r24
	int min_last = RTC.getMinutes();
    13e0:	88 e7       	ldi	r24, 0x78	; 120
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN6DS133710getMinutesEv>
	
	//check to see if alarm is already silenced
	if(!alarm_Silence){
    13e8:	20 91 81 01 	lds	r18, 0x0181
    13ec:	30 91 82 01 	lds	r19, 0x0182
    13f0:	23 2b       	or	r18, r19
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <_Z10soundAlarmv+0x4a>
    13f4:	53 c0       	rjmp	.+166    	; 0x149c <_Z10soundAlarmv+0xf0>
void soundAlarm()
{
	detachInterrupt(0);
	
	RTC.readTime();
	int min = RTC.getMinutes();
    13f6:	d0 e0       	ldi	r29, 0x00	; 0
				digitalWrite(ALARM, LOW);
			}
			else
			{
				*/
				digitalWrite(LATCH, LOW);
    13f8:	04 e2       	ldi	r16, 0x24	; 36
    13fa:	11 e0       	ldi	r17, 0x01	; 1
				shiftOut(DATA_PIN,CLOCK,LSBFIRST,DATA_ARRAY[17]);
    13fc:	0f 2e       	mov	r0, r31
    13fe:	f4 e0       	ldi	r31, 0x04	; 4
    1400:	8f 2e       	mov	r8, r31
    1402:	f1 e0       	ldi	r31, 0x01	; 1
    1404:	9f 2e       	mov	r9, r31
    1406:	f0 2d       	mov	r31, r0
    1408:	0f 2e       	mov	r0, r31
    140a:	f2 e2       	ldi	r31, 0x22	; 34
    140c:	af 2e       	mov	r10, r31
    140e:	f1 e0       	ldi	r31, 0x01	; 1
    1410:	bf 2e       	mov	r11, r31
    1412:	f0 2d       	mov	r31, r0
    1414:	0f 2e       	mov	r0, r31
    1416:	f6 e2       	ldi	r31, 0x26	; 38
    1418:	cf 2e       	mov	r12, r31
    141a:	f1 e0       	ldi	r31, 0x01	; 1
    141c:	df 2e       	mov	r13, r31
    141e:	f0 2d       	mov	r31, r0
{
	detachInterrupt(0);
	
	RTC.readTime();
	int min = RTC.getMinutes();
	int min_last = RTC.getMinutes();
    1420:	e8 2e       	mov	r14, r24
    1422:	f1 2c       	mov	r15, r1
			//to silence the alarm.
			if(min_last != min){break;}
			RTC.readTime();
			min = RTC.getMinutes();
			
		} while (digitalRead(Next_BTN) == LOW);
    1424:	0f 2e       	mov	r0, r31
    1426:	f8 e2       	ldi	r31, 0x28	; 40
    1428:	6f 2e       	mov	r6, r31
    142a:	f1 e0       	ldi	r31, 0x01	; 1
    142c:	7f 2e       	mov	r7, r31
    142e:	f0 2d       	mov	r31, r0
				digitalWrite(ALARM, LOW);
			}
			else
			{
				*/
				digitalWrite(LATCH, LOW);
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	f8 01       	movw	r30, r16
    1434:	80 81       	ld	r24, Z
    1436:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
				shiftOut(DATA_PIN,CLOCK,LSBFIRST,DATA_ARRAY[17]);
    143a:	f4 01       	movw	r30, r8
    143c:	21 89       	ldd	r18, Z+17	; 0x11
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	f5 01       	movw	r30, r10
    1442:	60 81       	ld	r22, Z
    1444:	f6 01       	movw	r30, r12
    1446:	80 81       	ld	r24, Z
    1448:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
				digitalWrite(LATCH,HIGH);
    144c:	61 e0       	ldi	r22, 0x01	; 1
    144e:	f8 01       	movw	r30, r16
    1450:	80 81       	ld	r24, Z
    1452:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
				delay(5);
    1456:	65 e0       	ldi	r22, 0x05	; 5
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
				
				BlankDisplay(0);
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
			//}
			//keep beeping if next button is not press
			//to silence the alarm.
			if(min_last != min){break;}
    146a:	ec 16       	cp	r14, r28
    146c:	fd 06       	cpc	r15, r29
    146e:	81 f4       	brne	.+32     	; 0x1490 <_Z10soundAlarmv+0xe4>
			RTC.readTime();
    1470:	88 e7       	ldi	r24, 0x78	; 120
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN6DS13378readTimeEv>
			min = RTC.getMinutes();
    1478:	88 e7       	ldi	r24, 0x78	; 120
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN6DS133710getMinutesEv>
    1480:	c8 2f       	mov	r28, r24
    1482:	d0 e0       	ldi	r29, 0x00	; 0
			
		} while (digitalRead(Next_BTN) == LOW);
    1484:	f3 01       	movw	r30, r6
    1486:	80 81       	ld	r24, Z
    1488:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
	int min = RTC.getMinutes();
	int min_last = RTC.getMinutes();
	
	//check to see if alarm is already silenced
	if(!alarm_Silence){
		do
    148c:	89 2b       	or	r24, r25
    148e:	81 f2       	breq	.-96     	; 0x1430 <_Z10soundAlarmv+0x84>
			min = RTC.getMinutes();
			
		} while (digitalRead(Next_BTN) == LOW);
		//This keeps us from sounding the alarm once
		//the user has silenced it.
		alarm_Silence = 1;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	90 93 82 01 	sts	0x0182, r25
    1498:	80 93 81 01 	sts	0x0181, r24
	//keep the peizo buzzer pin high so we don't
	//keep sounding.
	//digitalWrite(ALARM, LOW);
	
	//PPS_COUNT = 0;
	SECONDS_LAST = RTC.getSeconds();
    149c:	88 e7       	ldi	r24, 0x78	; 120
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6DS133710getSecondsEv>
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	90 93 85 01 	sts	0x0185, r25
    14aa:	80 93 84 01 	sts	0x0184, r24
	attachInterrupt(0, Interrupt_Update, RISING);
    14ae:	43 e0       	ldi	r20, 0x03	; 3
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	6d e0       	ldi	r22, 0x0D	; 13
    14b4:	73 e0       	ldi	r23, 0x03	; 3
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <attachInterrupt>
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	df 90       	pop	r13
    14ca:	cf 90       	pop	r12
    14cc:	bf 90       	pop	r11
    14ce:	af 90       	pop	r10
    14d0:	9f 90       	pop	r9
    14d2:	8f 90       	pop	r8
    14d4:	7f 90       	pop	r7
    14d6:	6f 90       	pop	r6
    14d8:	08 95       	ret

000014da <_Z8setALARMv>:
}

void setALARM()
// user presses button A (digital 8) to enter 'set time' mode while time being displayed
// then user presses A to advance value, B to lock in. Repeat for four digits of time
{
    14da:	2f 92       	push	r2
    14dc:	3f 92       	push	r3
    14de:	4f 92       	push	r4
    14e0:	5f 92       	push	r5
    14e2:	6f 92       	push	r6
    14e4:	7f 92       	push	r7
    14e6:	8f 92       	push	r8
    14e8:	9f 92       	push	r9
    14ea:	af 92       	push	r10
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
	detachInterrupt(0);
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <detachInterrupt>
	int h2=0;
	int m1=0;
	int m2=0;
	int AP = 17;
	boolean set=false;
	BlankDisplay(0);
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	
	digitalWrite(LATCH, LOW);
    150c:	c4 e2       	ldi	r28, 0x24	; 36
    150e:	d1 e0       	ldi	r29, 0x01	; 1
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	88 81       	ld	r24, Y
    1514:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
	shiftOut(DATA_PIN,CLOCK,LSBFIRST,DATA_ARRAY[17]);
    1518:	0f 2e       	mov	r0, r31
    151a:	f4 e0       	ldi	r31, 0x04	; 4
    151c:	cf 2e       	mov	r12, r31
    151e:	f1 e0       	ldi	r31, 0x01	; 1
    1520:	df 2e       	mov	r13, r31
    1522:	f0 2d       	mov	r31, r0
    1524:	0f 2e       	mov	r0, r31
    1526:	f2 e2       	ldi	r31, 0x22	; 34
    1528:	ef 2e       	mov	r14, r31
    152a:	f1 e0       	ldi	r31, 0x01	; 1
    152c:	ff 2e       	mov	r15, r31
    152e:	f0 2d       	mov	r31, r0
    1530:	06 e2       	ldi	r16, 0x26	; 38
    1532:	11 e0       	ldi	r17, 0x01	; 1
    1534:	f6 01       	movw	r30, r12
    1536:	21 89       	ldd	r18, Z+17	; 0x11
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	f7 01       	movw	r30, r14
    153c:	60 81       	ld	r22, Z
    153e:	f8 01       	movw	r30, r16
    1540:	80 81       	ld	r24, Z
    1542:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
	digitalWrite(LATCH,HIGH);
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	88 81       	ld	r24, Y
    154a:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
	delay(DIGIT_DELAY);
    154e:	60 91 1a 01 	lds	r22, 0x011A
    1552:	70 91 1b 01 	lds	r23, 0x011B
    1556:	07 2e       	mov	r0, r23
    1558:	00 0c       	add	r0, r0
    155a:	88 0b       	sbc	r24, r24
    155c:	99 0b       	sbc	r25, r25
    155e:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
	
	BlankDisplay(0);
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	
	digitalWrite(LATCH, LOW);
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	88 81       	ld	r24, Y
    156e:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
	shiftOut(DATA_PIN,CLOCK,LSBFIRST,DATA_ARRAY[17]);
    1572:	f6 01       	movw	r30, r12
    1574:	21 89       	ldd	r18, Z+17	; 0x11
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	f7 01       	movw	r30, r14
    157a:	60 81       	ld	r22, Z
    157c:	f8 01       	movw	r30, r16
    157e:	80 81       	ld	r24, Z
    1580:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
	digitalWrite(LATCH,HIGH);
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	88 81       	ld	r24, Y
    1588:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
	delay(DIGIT_DELAY);
    158c:	60 91 1a 01 	lds	r22, 0x011A
    1590:	70 91 1b 01 	lds	r23, 0x011B
    1594:	07 2e       	mov	r0, r23
    1596:	00 0c       	add	r0, r0
    1598:	88 0b       	sbc	r24, r24
    159a:	99 0b       	sbc	r25, r25
    159c:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
	
	BlankDisplay(0);
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	
	digitalWrite(LATCH, LOW);
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	88 81       	ld	r24, Y
    15ac:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
	shiftOut(DATA_PIN,CLOCK,LSBFIRST,DATA_ARRAY[17]);
    15b0:	f6 01       	movw	r30, r12
    15b2:	21 89       	ldd	r18, Z+17	; 0x11
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	f7 01       	movw	r30, r14
    15b8:	60 81       	ld	r22, Z
    15ba:	f8 01       	movw	r30, r16
    15bc:	80 81       	ld	r24, Z
    15be:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
	digitalWrite(LATCH,HIGH);
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	88 81       	ld	r24, Y
    15c6:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
	delay(DIGIT_DELAY);
    15ca:	60 91 1a 01 	lds	r22, 0x011A
    15ce:	70 91 1b 01 	lds	r23, 0x011B
    15d2:	07 2e       	mov	r0, r23
    15d4:	00 0c       	add	r0, r0
    15d6:	88 0b       	sbc	r24, r24
    15d8:	99 0b       	sbc	r25, r25
    15da:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
	
	BlankDisplay(0);
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
// user presses button A (digital 8) to enter 'set time' mode while time being displayed
// then user presses A to advance value, B to lock in. Repeat for four digits of time
{
	detachInterrupt(0);
	int minute, hour;
	int h1=0;
    15e6:	c0 e0       	ldi	r28, 0x00	; 0
    15e8:	d0 e0       	ldi	r29, 0x00	; 0

	do // get first digit of hours from user
	// press digital 8 button to change from 0>1>2>0>1...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    15ea:	04 e2       	ldi	r16, 0x24	; 36
    15ec:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
    15ee:	67 01       	movw	r12, r14
    15f0:	0f 2e       	mov	r0, r31
    15f2:	f6 e2       	ldi	r31, 0x26	; 38
    15f4:	ef 2e       	mov	r14, r31
    15f6:	f1 e0       	ldi	r31, 0x01	; 1
    15f8:	ff 2e       	mov	r15, r31
    15fa:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    15fc:	0f 2e       	mov	r0, r31
    15fe:	fa e2       	ldi	r31, 0x2A	; 42
    1600:	8f 2e       	mov	r8, r31
    1602:	f1 e0       	ldi	r31, 0x01	; 1
    1604:	9f 2e       	mov	r9, r31
    1606:	f0 2d       	mov	r31, r0
		{
			delay(debounce);
			h1++;
			if (h1>1)
			{
				h1=0;
    1608:	61 2c       	mov	r6, r1
    160a:	71 2c       	mov	r7, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    160c:	0f 2e       	mov	r0, r31
    160e:	f8 e2       	ldi	r31, 0x28	; 40
    1610:	af 2e       	mov	r10, r31
    1612:	f1 e0       	ldi	r31, 0x01	; 1
    1614:	bf 2e       	mov	r11, r31
    1616:	f0 2d       	mov	r31, r0

	do // get first digit of hours from user
	// press digital 8 button to change from 0>1>2>0>1...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	f8 01       	movw	r30, r16
    161c:	80 81       	ld	r24, Z
    161e:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
    1622:	fe 01       	movw	r30, r28
    1624:	ec 5f       	subi	r30, 0xFC	; 252
    1626:	fe 4f       	sbci	r31, 0xFE	; 254
    1628:	20 81       	ld	r18, Z
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	f6 01       	movw	r30, r12
    162e:	60 81       	ld	r22, Z
    1630:	f7 01       	movw	r30, r14
    1632:	80 81       	ld	r24, Z
    1634:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
    1638:	61 e0       	ldi	r22, 0x01	; 1
    163a:	f8 01       	movw	r30, r16
    163c:	80 81       	ld	r24, Z
    163e:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    1642:	f4 01       	movw	r30, r8
    1644:	80 81       	ld	r24, Z
    1646:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	29 f5       	brne	.+74     	; 0x1698 <_Z8setALARMv+0x1be>
		{
			delay(debounce);
    164e:	60 91 18 01 	lds	r22, 0x0118
    1652:	70 91 19 01 	lds	r23, 0x0119
    1656:	07 2e       	mov	r0, r23
    1658:	00 0c       	add	r0, r0
    165a:	88 0b       	sbc	r24, r24
    165c:	99 0b       	sbc	r25, r25
    165e:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			h1++;
    1662:	21 96       	adiw	r28, 0x01	; 1
			if (h1>1)
    1664:	c2 30       	cpi	r28, 0x02	; 2
    1666:	d1 05       	cpc	r29, r1
    1668:	14 f0       	brlt	.+4      	; 0x166e <_Z8setALARMv+0x194>
			{
				h1=0;
    166a:	c6 2d       	mov	r28, r6
    166c:	d7 2d       	mov	r29, r7
			}
			digitalWrite(LATCH, LOW);
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	f8 01       	movw	r30, r16
    1672:	80 81       	ld	r24, Z
    1674:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h1]);
    1678:	fe 01       	movw	r30, r28
    167a:	ec 5f       	subi	r30, 0xFC	; 252
    167c:	fe 4f       	sbci	r31, 0xFE	; 254
    167e:	20 81       	ld	r18, Z
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	f6 01       	movw	r30, r12
    1684:	60 81       	ld	r22, Z
    1686:	f7 01       	movw	r30, r14
    1688:	80 81       	ld	r24, Z
    168a:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
    168e:	61 e0       	ldi	r22, 0x01	; 1
    1690:	f8 01       	movw	r30, r16
    1692:	80 81       	ld	r24, Z
    1694:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    1698:	f5 01       	movw	r30, r10
    169a:	80 81       	ld	r24, Z
    169c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <_Z8setALARMv+0x1cc>
    16a4:	b9 cf       	rjmp	.-142    	; 0x1618 <_Z8setALARMv+0x13e>
		{
			delay(debounce);
    16a6:	60 91 18 01 	lds	r22, 0x0118
    16aa:	70 91 19 01 	lds	r23, 0x0119
    16ae:	07 2e       	mov	r0, r23
    16b0:	00 0c       	add	r0, r0
    16b2:	88 0b       	sbc	r24, r24
    16b4:	99 0b       	sbc	r25, r25
    16b6:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			set=true;
		}
	}
	while (set!=true);
	BlankDisplay(0);
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    16c2:	60 91 1c 01 	lds	r22, 0x011C
    16c6:	70 91 1d 01 	lds	r23, 0x011D
    16ca:	07 2e       	mov	r0, r23
    16cc:	00 0c       	add	r0, r0
    16ce:	88 0b       	sbc	r24, r24
    16d0:	99 0b       	sbc	r25, r25
    16d2:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
// then user presses A to advance value, B to lock in. Repeat for four digits of time
{
	detachInterrupt(0);
	int minute, hour;
	int h1=0;
	int h2=0;
    16d6:	a1 2c       	mov	r10, r1
    16d8:	b1 2c       	mov	r11, r1

	do // get second digit of hours from user
	// press digital 8 button to change from 0>1>2>...9>0...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    16da:	04 e2       	ldi	r16, 0x24	; 36
    16dc:	11 e0       	ldi	r17, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
    16de:	0f 2e       	mov	r0, r31
    16e0:	f2 e2       	ldi	r31, 0x22	; 34
    16e2:	cf 2e       	mov	r12, r31
    16e4:	f1 e0       	ldi	r31, 0x01	; 1
    16e6:	df 2e       	mov	r13, r31
    16e8:	f0 2d       	mov	r31, r0
    16ea:	0f 2e       	mov	r0, r31
    16ec:	f6 e2       	ldi	r31, 0x26	; 38
    16ee:	ef 2e       	mov	r14, r31
    16f0:	f1 e0       	ldi	r31, 0x01	; 1
    16f2:	ff 2e       	mov	r15, r31
    16f4:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    16f6:	0f 2e       	mov	r0, r31
    16f8:	fa e2       	ldi	r31, 0x2A	; 42
    16fa:	8f 2e       	mov	r8, r31
    16fc:	f1 e0       	ldi	r31, 0x01	; 1
    16fe:	9f 2e       	mov	r9, r31
    1700:	f0 2d       	mov	r31, r0
			}
			else if(h1 == 1)
			{
				if(h2>=2)
				{
					h2 = 0;
    1702:	41 2c       	mov	r4, r1
    1704:	51 2c       	mov	r5, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    1706:	0f 2e       	mov	r0, r31
    1708:	f8 e2       	ldi	r31, 0x28	; 40
    170a:	6f 2e       	mov	r6, r31
    170c:	f1 e0       	ldi	r31, 0x01	; 1
    170e:	7f 2e       	mov	r7, r31
    1710:	f0 2d       	mov	r31, r0

	do // get second digit of hours from user
	// press digital 8 button to change from 0>1>2>...9>0...
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	f8 01       	movw	r30, r16
    1716:	80 81       	ld	r24, Z
    1718:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
    171c:	f5 01       	movw	r30, r10
    171e:	ec 5f       	subi	r30, 0xFC	; 252
    1720:	fe 4f       	sbci	r31, 0xFE	; 254
    1722:	20 81       	ld	r18, Z
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	f6 01       	movw	r30, r12
    1728:	60 81       	ld	r22, Z
    172a:	f7 01       	movw	r30, r14
    172c:	80 81       	ld	r24, Z
    172e:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
    1732:	61 e0       	ldi	r22, 0x01	; 1
    1734:	f8 01       	movw	r30, r16
    1736:	80 81       	ld	r24, Z
    1738:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    173c:	f4 01       	movw	r30, r8
    173e:	80 81       	ld	r24, Z
    1740:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	c9 f5       	brne	.+114    	; 0x17ba <_Z8setALARMv+0x2e0>
		{
			delay(debounce);
    1748:	60 91 18 01 	lds	r22, 0x0118
    174c:	70 91 19 01 	lds	r23, 0x0119
    1750:	07 2e       	mov	r0, r23
    1752:	00 0c       	add	r0, r0
    1754:	88 0b       	sbc	r24, r24
    1756:	99 0b       	sbc	r25, r25
    1758:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			if(h1 == 0)
    175c:	20 97       	sbiw	r28, 0x00	; 0
    175e:	41 f4       	brne	.+16     	; 0x1770 <_Z8setALARMv+0x296>
			{
				if(h2>=9)
    1760:	f9 e0       	ldi	r31, 0x09	; 9
    1762:	af 16       	cp	r10, r31
    1764:	b1 04       	cpc	r11, r1
    1766:	7c f4       	brge	.+30     	; 0x1786 <_Z8setALARMv+0x2ac>
				{
					h2=0;
				}
				else
				{
					h2++;
    1768:	8f ef       	ldi	r24, 0xFF	; 255
    176a:	a8 1a       	sub	r10, r24
    176c:	b8 0a       	sbc	r11, r24
    176e:	10 c0       	rjmp	.+32     	; 0x1790 <_Z8setALARMv+0x2b6>
				}
			}
			else if(h1 == 1)
    1770:	c1 30       	cpi	r28, 0x01	; 1
    1772:	d1 05       	cpc	r29, r1
    1774:	69 f4       	brne	.+26     	; 0x1790 <_Z8setALARMv+0x2b6>
			{
				if(h2>=2)
    1776:	e2 e0       	ldi	r30, 0x02	; 2
    1778:	ae 16       	cp	r10, r30
    177a:	b1 04       	cpc	r11, r1
    177c:	3c f4       	brge	.+14     	; 0x178c <_Z8setALARMv+0x2b2>
				{
					h2 = 0;
				}
				else
				{
					h2++;
    177e:	ff ef       	ldi	r31, 0xFF	; 255
    1780:	af 1a       	sub	r10, r31
    1782:	bf 0a       	sbc	r11, r31
    1784:	05 c0       	rjmp	.+10     	; 0x1790 <_Z8setALARMv+0x2b6>
			delay(debounce);
			if(h1 == 0)
			{
				if(h2>=9)
				{
					h2=0;
    1786:	a4 2c       	mov	r10, r4
    1788:	b5 2c       	mov	r11, r5
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <_Z8setALARMv+0x2b6>
			}
			else if(h1 == 1)
			{
				if(h2>=2)
				{
					h2 = 0;
    178c:	a4 2c       	mov	r10, r4
    178e:	b5 2c       	mov	r11, r5
				else
				{
					h2++;
				}
			}
			digitalWrite(LATCH, LOW);
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	f8 01       	movw	r30, r16
    1794:	80 81       	ld	r24, Z
    1796:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[h2]);
    179a:	f5 01       	movw	r30, r10
    179c:	ec 5f       	subi	r30, 0xFC	; 252
    179e:	fe 4f       	sbci	r31, 0xFE	; 254
    17a0:	20 81       	ld	r18, Z
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	f6 01       	movw	r30, r12
    17a6:	60 81       	ld	r22, Z
    17a8:	f7 01       	movw	r30, r14
    17aa:	80 81       	ld	r24, Z
    17ac:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	f8 01       	movw	r30, r16
    17b4:	80 81       	ld	r24, Z
    17b6:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    17ba:	f3 01       	movw	r30, r6
    17bc:	80 81       	ld	r24, Z
    17be:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <_Z8setALARMv+0x2ee>
    17c6:	a5 cf       	rjmp	.-182    	; 0x1712 <_Z8setALARMv+0x238>
		{
			delay(debounce);
    17c8:	60 91 18 01 	lds	r22, 0x0118
    17cc:	70 91 19 01 	lds	r23, 0x0119
    17d0:	07 2e       	mov	r0, r23
    17d2:	00 0c       	add	r0, r0
    17d4:	88 0b       	sbc	r24, r24
    17d6:	99 0b       	sbc	r25, r25
    17d8:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			set=true;
		}
	}
	while (set!=true);
	BlankDisplay(0);
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    17e4:	60 91 1c 01 	lds	r22, 0x011C
    17e8:	70 91 1d 01 	lds	r23, 0x011D
    17ec:	07 2e       	mov	r0, r23
    17ee:	00 0c       	add	r0, r0
    17f0:	88 0b       	sbc	r24, r24
    17f2:	99 0b       	sbc	r25, r25
    17f4:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
{
	detachInterrupt(0);
	int minute, hour;
	int h1=0;
	int h2=0;
	int m1=0;
    17f8:	00 e0       	ldi	r16, 0x00	; 0
    17fa:	10 e0       	ldi	r17, 0x00	; 0

	do // get first digit of minutes from user
	// press digital 8 button to change from 0>1>..5>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    17fc:	0f 2e       	mov	r0, r31
    17fe:	f4 e2       	ldi	r31, 0x24	; 36
    1800:	ef 2e       	mov	r14, r31
    1802:	f1 e0       	ldi	r31, 0x01	; 1
    1804:	ff 2e       	mov	r15, r31
    1806:	f0 2d       	mov	r31, r0
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
    1808:	0f 2e       	mov	r0, r31
    180a:	f2 e2       	ldi	r31, 0x22	; 34
    180c:	8f 2e       	mov	r8, r31
    180e:	f1 e0       	ldi	r31, 0x01	; 1
    1810:	9f 2e       	mov	r9, r31
    1812:	f0 2d       	mov	r31, r0
    1814:	0f 2e       	mov	r0, r31
    1816:	f6 e2       	ldi	r31, 0x26	; 38
    1818:	cf 2e       	mov	r12, r31
    181a:	f1 e0       	ldi	r31, 0x01	; 1
    181c:	df 2e       	mov	r13, r31
    181e:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    1820:	0f 2e       	mov	r0, r31
    1822:	fa e2       	ldi	r31, 0x2A	; 42
    1824:	6f 2e       	mov	r6, r31
    1826:	f1 e0       	ldi	r31, 0x01	; 1
    1828:	7f 2e       	mov	r7, r31
    182a:	f0 2d       	mov	r31, r0
		{
			delay(debounce);
			m1++;
			if (m1>5)
			{
				m1=0;
    182c:	21 2c       	mov	r2, r1
    182e:	31 2c       	mov	r3, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    1830:	0f 2e       	mov	r0, r31
    1832:	f8 e2       	ldi	r31, 0x28	; 40
    1834:	4f 2e       	mov	r4, r31
    1836:	f1 e0       	ldi	r31, 0x01	; 1
    1838:	5f 2e       	mov	r5, r31
    183a:	f0 2d       	mov	r31, r0

	do // get first digit of minutes from user
	// press digital 8 button to change from 0>1>..5>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	f7 01       	movw	r30, r14
    1840:	80 81       	ld	r24, Z
    1842:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
    1846:	f8 01       	movw	r30, r16
    1848:	ec 5f       	subi	r30, 0xFC	; 252
    184a:	fe 4f       	sbci	r31, 0xFE	; 254
    184c:	20 81       	ld	r18, Z
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	f4 01       	movw	r30, r8
    1852:	60 81       	ld	r22, Z
    1854:	f6 01       	movw	r30, r12
    1856:	80 81       	ld	r24, Z
    1858:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
    185c:	61 e0       	ldi	r22, 0x01	; 1
    185e:	f7 01       	movw	r30, r14
    1860:	80 81       	ld	r24, Z
    1862:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    1866:	f3 01       	movw	r30, r6
    1868:	80 81       	ld	r24, Z
    186a:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	31 f5       	brne	.+76     	; 0x18be <_Z8setALARMv+0x3e4>
		{
			delay(debounce);
    1872:	60 91 18 01 	lds	r22, 0x0118
    1876:	70 91 19 01 	lds	r23, 0x0119
    187a:	07 2e       	mov	r0, r23
    187c:	00 0c       	add	r0, r0
    187e:	88 0b       	sbc	r24, r24
    1880:	99 0b       	sbc	r25, r25
    1882:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			m1++;
    1886:	0f 5f       	subi	r16, 0xFF	; 255
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
			if (m1>5)
    188a:	06 30       	cpi	r16, 0x06	; 6
    188c:	11 05       	cpc	r17, r1
    188e:	14 f0       	brlt	.+4      	; 0x1894 <_Z8setALARMv+0x3ba>
			{
				m1=0;
    1890:	02 2d       	mov	r16, r2
    1892:	13 2d       	mov	r17, r3
			}
			digitalWrite(LATCH, LOW);
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	f7 01       	movw	r30, r14
    1898:	80 81       	ld	r24, Z
    189a:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m1]);
    189e:	f8 01       	movw	r30, r16
    18a0:	ec 5f       	subi	r30, 0xFC	; 252
    18a2:	fe 4f       	sbci	r31, 0xFE	; 254
    18a4:	20 81       	ld	r18, Z
    18a6:	40 e0       	ldi	r20, 0x00	; 0
    18a8:	f4 01       	movw	r30, r8
    18aa:	60 81       	ld	r22, Z
    18ac:	f6 01       	movw	r30, r12
    18ae:	80 81       	ld	r24, Z
    18b0:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
    18b4:	61 e0       	ldi	r22, 0x01	; 1
    18b6:	f7 01       	movw	r30, r14
    18b8:	80 81       	ld	r24, Z
    18ba:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    18be:	f2 01       	movw	r30, r4
    18c0:	80 81       	ld	r24, Z
    18c2:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	09 f0       	breq	.+2      	; 0x18cc <_Z8setALARMv+0x3f2>
    18ca:	b8 cf       	rjmp	.-144    	; 0x183c <_Z8setALARMv+0x362>
		{
			set=true;
			delay(debounce);
    18cc:	60 91 18 01 	lds	r22, 0x0118
    18d0:	70 91 19 01 	lds	r23, 0x0119
    18d4:	07 2e       	mov	r0, r23
    18d6:	00 0c       	add	r0, r0
    18d8:	88 0b       	sbc	r24, r24
    18da:	99 0b       	sbc	r25, r25
    18dc:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
		}
	}
	while (set!=true);
	BlankDisplay(0);
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    18e8:	60 91 1c 01 	lds	r22, 0x011C
    18ec:	70 91 1d 01 	lds	r23, 0x011D
    18f0:	07 2e       	mov	r0, r23
    18f2:	00 0c       	add	r0, r0
    18f4:	88 0b       	sbc	r24, r24
    18f6:	99 0b       	sbc	r25, r25
    18f8:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
	detachInterrupt(0);
	int minute, hour;
	int h1=0;
	int h2=0;
	int m1=0;
	int m2=0;
    18fc:	e1 2c       	mov	r14, r1
    18fe:	f1 2c       	mov	r15, r1

	do // get second digit of minutes from user
	// press digital 8 button to change from 0>1>..9>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    1900:	0f 2e       	mov	r0, r31
    1902:	f4 e2       	ldi	r31, 0x24	; 36
    1904:	cf 2e       	mov	r12, r31
    1906:	f1 e0       	ldi	r31, 0x01	; 1
    1908:	df 2e       	mov	r13, r31
    190a:	f0 2d       	mov	r31, r0
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
    190c:	0f 2e       	mov	r0, r31
    190e:	f2 e2       	ldi	r31, 0x22	; 34
    1910:	8f 2e       	mov	r8, r31
    1912:	f1 e0       	ldi	r31, 0x01	; 1
    1914:	9f 2e       	mov	r9, r31
    1916:	f0 2d       	mov	r31, r0
    1918:	0f 2e       	mov	r0, r31
    191a:	f6 e2       	ldi	r31, 0x26	; 38
    191c:	6f 2e       	mov	r6, r31
    191e:	f1 e0       	ldi	r31, 0x01	; 1
    1920:	7f 2e       	mov	r7, r31
    1922:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    1924:	0f 2e       	mov	r0, r31
    1926:	fa e2       	ldi	r31, 0x2A	; 42
    1928:	4f 2e       	mov	r4, r31
    192a:	f1 e0       	ldi	r31, 0x01	; 1
    192c:	5f 2e       	mov	r5, r31
    192e:	f0 2d       	mov	r31, r0
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    1930:	0f 2e       	mov	r0, r31
    1932:	f8 e2       	ldi	r31, 0x28	; 40
    1934:	2f 2e       	mov	r2, r31
    1936:	f1 e0       	ldi	r31, 0x01	; 1
    1938:	3f 2e       	mov	r3, r31
    193a:	f0 2d       	mov	r31, r0

	do // get second digit of minutes from user
	// press digital 8 button to change from 0>1>..9>0..
	// press digital 9 to set value
	{
		digitalWrite(LATCH, LOW);
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	f6 01       	movw	r30, r12
    1940:	80 81       	ld	r24, Z
    1942:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
    1946:	f7 01       	movw	r30, r14
    1948:	ec 5f       	subi	r30, 0xFC	; 252
    194a:	fe 4f       	sbci	r31, 0xFE	; 254
    194c:	20 81       	ld	r18, Z
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	f4 01       	movw	r30, r8
    1952:	60 81       	ld	r22, Z
    1954:	f3 01       	movw	r30, r6
    1956:	80 81       	ld	r24, Z
    1958:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	f6 01       	movw	r30, r12
    1960:	80 81       	ld	r24, Z
    1962:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    1966:	f2 01       	movw	r30, r4
    1968:	80 81       	ld	r24, Z
    196a:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	41 f5       	brne	.+80     	; 0x19c2 <_Z8setALARMv+0x4e8>
		{
			delay(debounce);
    1972:	60 91 18 01 	lds	r22, 0x0118
    1976:	70 91 19 01 	lds	r23, 0x0119
    197a:	07 2e       	mov	r0, r23
    197c:	00 0c       	add	r0, r0
    197e:	88 0b       	sbc	r24, r24
    1980:	99 0b       	sbc	r25, r25
    1982:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			m2++;
    1986:	ff ef       	ldi	r31, 0xFF	; 255
    1988:	ef 1a       	sub	r14, r31
    198a:	ff 0a       	sbc	r15, r31
			if (m2>9)
    198c:	8a e0       	ldi	r24, 0x0A	; 10
    198e:	e8 16       	cp	r14, r24
    1990:	f1 04       	cpc	r15, r1
    1992:	14 f0       	brlt	.+4      	; 0x1998 <_Z8setALARMv+0x4be>
			{
				m2=0;
    1994:	e1 2c       	mov	r14, r1
    1996:	f1 2c       	mov	r15, r1
			}
			digitalWrite(LATCH, LOW);
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	f6 01       	movw	r30, r12
    199c:	80 81       	ld	r24, Z
    199e:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[m2]);
    19a2:	f7 01       	movw	r30, r14
    19a4:	ec 5f       	subi	r30, 0xFC	; 252
    19a6:	fe 4f       	sbci	r31, 0xFE	; 254
    19a8:	20 81       	ld	r18, Z
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	f4 01       	movw	r30, r8
    19ae:	60 81       	ld	r22, Z
    19b0:	f3 01       	movw	r30, r6
    19b2:	80 81       	ld	r24, Z
    19b4:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
    19b8:	61 e0       	ldi	r22, 0x01	; 1
    19ba:	f6 01       	movw	r30, r12
    19bc:	80 81       	ld	r24, Z
    19be:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    19c2:	f1 01       	movw	r30, r2
    19c4:	80 81       	ld	r24, Z
    19c6:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <_Z8setALARMv+0x4f6>
    19ce:	b6 cf       	rjmp	.-148    	; 0x193c <_Z8setALARMv+0x462>
		{
			set=true;
			delay(debounce);
    19d0:	60 91 18 01 	lds	r22, 0x0118
    19d4:	70 91 19 01 	lds	r23, 0x0119
    19d8:	07 2e       	mov	r0, r23
    19da:	00 0c       	add	r0, r0
    19dc:	88 0b       	sbc	r24, r24
    19de:	99 0b       	sbc	r25, r25
    19e0:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
		}
	}
	while (set!=true);
	BlankDisplay(0);
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    19ec:	60 91 1c 01 	lds	r22, 0x011C
    19f0:	70 91 1d 01 	lds	r23, 0x011D
    19f4:	07 2e       	mov	r0, r23
    19f6:	00 0c       	add	r0, r0
    19f8:	88 0b       	sbc	r24, r24
    19fa:	99 0b       	sbc	r25, r25
    19fc:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
	int minute, hour;
	int h1=0;
	int h2=0;
	int m1=0;
	int m2=0;
	int AP = 17;
    1a00:	0f 2e       	mov	r0, r31
    1a02:	f1 e1       	ldi	r31, 0x11	; 17
    1a04:	8f 2e       	mov	r8, r31
    1a06:	91 2c       	mov	r9, r1
    1a08:	f0 2d       	mov	r31, r0
	set=false;
	delay(BTN_DELAY);

	do
	{
		digitalWrite(LATCH, LOW);
    1a0a:	0f 2e       	mov	r0, r31
    1a0c:	f4 e2       	ldi	r31, 0x24	; 36
    1a0e:	cf 2e       	mov	r12, r31
    1a10:	f1 e0       	ldi	r31, 0x01	; 1
    1a12:	df 2e       	mov	r13, r31
    1a14:	f0 2d       	mov	r31, r0
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[AP]);
    1a16:	0f 2e       	mov	r0, r31
    1a18:	f2 e2       	ldi	r31, 0x22	; 34
    1a1a:	6f 2e       	mov	r6, r31
    1a1c:	f1 e0       	ldi	r31, 0x01	; 1
    1a1e:	7f 2e       	mov	r7, r31
    1a20:	f0 2d       	mov	r31, r0
    1a22:	0f 2e       	mov	r0, r31
    1a24:	f6 e2       	ldi	r31, 0x26	; 38
    1a26:	4f 2e       	mov	r4, r31
    1a28:	f1 e0       	ldi	r31, 0x01	; 1
    1a2a:	5f 2e       	mov	r5, r31
    1a2c:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    1a2e:	0f 2e       	mov	r0, r31
    1a30:	fa e2       	ldi	r31, 0x2A	; 42
    1a32:	2f 2e       	mov	r2, r31
    1a34:	f1 e0       	ldi	r31, 0x01	; 1
    1a36:	3f 2e       	mov	r3, r31
    1a38:	f0 2d       	mov	r31, r0
	set=false;
	delay(BTN_DELAY);

	do
	{
		digitalWrite(LATCH, LOW);
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	f6 01       	movw	r30, r12
    1a3e:	80 81       	ld	r24, Z
    1a40:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[AP]);
    1a44:	f4 01       	movw	r30, r8
    1a46:	ec 5f       	subi	r30, 0xFC	; 252
    1a48:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4a:	20 81       	ld	r18, Z
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	f3 01       	movw	r30, r6
    1a50:	60 81       	ld	r22, Z
    1a52:	f2 01       	movw	r30, r4
    1a54:	80 81       	ld	r24, Z
    1a56:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	f6 01       	movw	r30, r12
    1a5e:	80 81       	ld	r24, Z
    1a60:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    1a64:	f1 01       	movw	r30, r2
    1a66:	80 81       	ld	r24, Z
    1a68:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	59 f5       	brne	.+86     	; 0x1ac6 <_Z8setALARMv+0x5ec>
		{
			delay(debounce);
    1a70:	60 91 18 01 	lds	r22, 0x0118
    1a74:	70 91 19 01 	lds	r23, 0x0119
    1a78:	07 2e       	mov	r0, r23
    1a7a:	00 0c       	add	r0, r0
    1a7c:	88 0b       	sbc	r24, r24
    1a7e:	99 0b       	sbc	r25, r25
    1a80:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			AP++;
    1a84:	ff ef       	ldi	r31, 0xFF	; 255
    1a86:	8f 1a       	sub	r8, r31
    1a88:	9f 0a       	sbc	r9, r31
			if (AP>18)
    1a8a:	83 e1       	ldi	r24, 0x13	; 19
    1a8c:	88 16       	cp	r8, r24
    1a8e:	91 04       	cpc	r9, r1
    1a90:	2c f0       	brlt	.+10     	; 0x1a9c <_Z8setALARMv+0x5c2>
			{
				AP=17;
    1a92:	0f 2e       	mov	r0, r31
    1a94:	f1 e1       	ldi	r31, 0x11	; 17
    1a96:	8f 2e       	mov	r8, r31
    1a98:	f0 2d       	mov	r31, r0
    1a9a:	91 2c       	mov	r9, r1
			}
			digitalWrite(LATCH, LOW);
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	f6 01       	movw	r30, r12
    1aa0:	80 81       	ld	r24, Z
    1aa2:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[AP]);
    1aa6:	f4 01       	movw	r30, r8
    1aa8:	ec 5f       	subi	r30, 0xFC	; 252
    1aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    1aac:	20 81       	ld	r18, Z
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	f3 01       	movw	r30, r6
    1ab2:	60 81       	ld	r22, Z
    1ab4:	f2 01       	movw	r30, r4
    1ab6:	80 81       	ld	r24, Z
    1ab8:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
    1abc:	61 e0       	ldi	r22, 0x01	; 1
    1abe:	f6 01       	movw	r30, r12
    1ac0:	80 81       	ld	r24, Z
    1ac2:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    1ac6:	e8 e2       	ldi	r30, 0x28	; 40
    1ac8:	f1 e0       	ldi	r31, 0x01	; 1
    1aca:	80 81       	ld	r24, Z
    1acc:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <_Z8setALARMv+0x5fc>
    1ad4:	b2 cf       	rjmp	.-156    	; 0x1a3a <_Z8setALARMv+0x560>
		{
			delay(debounce);
    1ad6:	60 91 18 01 	lds	r22, 0x0118
    1ada:	70 91 19 01 	lds	r23, 0x0119
    1ade:	07 2e       	mov	r0, r23
    1ae0:	00 0c       	add	r0, r0
    1ae2:	88 0b       	sbc	r24, r24
    1ae4:	99 0b       	sbc	r25, r25
    1ae6:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			set=true;
		}
	}
	while (set!=true);
	BlankDisplay(0);
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	set=false;
	delay(BTN_DELAY);
    1af2:	60 91 1c 01 	lds	r22, 0x011C
    1af6:	70 91 1d 01 	lds	r23, 0x011D
    1afa:	07 2e       	mov	r0, r23
    1afc:	00 0c       	add	r0, r0
    1afe:	88 0b       	sbc	r24, r24
    1b00:	99 0b       	sbc	r25, r25
    1b02:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>

	//This portion is experimental.
	hour = (h1*10)+h2;
    1b06:	ce 01       	movw	r24, r28
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	cc 0f       	add	r28, r28
    1b0e:	dd 1f       	adc	r29, r29
    1b10:	cc 0f       	add	r28, r28
    1b12:	dd 1f       	adc	r29, r29
    1b14:	cc 0f       	add	r28, r28
    1b16:	dd 1f       	adc	r29, r29
    1b18:	c8 0f       	add	r28, r24
    1b1a:	d9 1f       	adc	r29, r25
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	8a 0d       	add	r24, r10
    1b20:	9b 1d       	adc	r25, r11
	//terminal_Display("Hour :",hour);
	minute = (m1*10)+m2;
    1b22:	b8 01       	movw	r22, r16
    1b24:	66 0f       	add	r22, r22
    1b26:	77 1f       	adc	r23, r23
    1b28:	00 0f       	add	r16, r16
    1b2a:	11 1f       	adc	r17, r17
    1b2c:	00 0f       	add	r16, r16
    1b2e:	11 1f       	adc	r17, r17
    1b30:	00 0f       	add	r16, r16
    1b32:	11 1f       	adc	r17, r17
    1b34:	06 0f       	add	r16, r22
    1b36:	17 1f       	adc	r17, r23
    1b38:	b8 01       	movw	r22, r16
    1b3a:	6e 0d       	add	r22, r14
    1b3c:	7f 1d       	adc	r23, r15
	//terminal_Display("Minute :",minute);
	
	if (hour<=12 && minute <60) // in case user enters invalid time e.g. 2659h
    1b3e:	8d 30       	cpi	r24, 0x0D	; 13
    1b40:	91 05       	cpc	r25, r1
    1b42:	0c f0       	brlt	.+2      	; 0x1b46 <_Z8setALARMv+0x66c>
    1b44:	71 c0       	rjmp	.+226    	; 0x1c28 <_Z8setALARMv+0x74e>
    1b46:	6c 33       	cpi	r22, 0x3C	; 60
    1b48:	71 05       	cpc	r23, r1
    1b4a:	0c f0       	brlt	.+2      	; 0x1b4e <_Z8setALARMv+0x674>
    1b4c:	6d c0       	rjmp	.+218    	; 0x1c28 <_Z8setALARMv+0x74e>
	{
		alarmEEPROM(hour, minute,AP,1);
    1b4e:	21 e0       	ldi	r18, 0x01	; 1
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	a4 01       	movw	r20, r8
    1b54:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_Z11alarmEEPROMhhii>
		
		digitalWrite(LATCH, LOW);
    1b58:	c4 e2       	ldi	r28, 0x24	; 36
    1b5a:	d1 e0       	ldi	r29, 0x01	; 1
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	88 81       	ld	r24, Y
    1b60:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[10]);
    1b64:	0f 2e       	mov	r0, r31
    1b66:	f4 e0       	ldi	r31, 0x04	; 4
    1b68:	cf 2e       	mov	r12, r31
    1b6a:	f1 e0       	ldi	r31, 0x01	; 1
    1b6c:	df 2e       	mov	r13, r31
    1b6e:	f0 2d       	mov	r31, r0
    1b70:	0f 2e       	mov	r0, r31
    1b72:	f2 e2       	ldi	r31, 0x22	; 34
    1b74:	ef 2e       	mov	r14, r31
    1b76:	f1 e0       	ldi	r31, 0x01	; 1
    1b78:	ff 2e       	mov	r15, r31
    1b7a:	f0 2d       	mov	r31, r0
    1b7c:	06 e2       	ldi	r16, 0x26	; 38
    1b7e:	11 e0       	ldi	r17, 0x01	; 1
    1b80:	f6 01       	movw	r30, r12
    1b82:	22 85       	ldd	r18, Z+10	; 0x0a
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	f7 01       	movw	r30, r14
    1b88:	60 81       	ld	r22, Z
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	80 81       	ld	r24, Z
    1b8e:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH); // display hyphen
    1b92:	61 e0       	ldi	r22, 0x01	; 1
    1b94:	88 81       	ld	r24, Y
    1b96:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		delay(DIGIT_DELAY);
    1b9a:	60 91 1a 01 	lds	r22, 0x011A
    1b9e:	70 91 1b 01 	lds	r23, 0x011B
    1ba2:	07 2e       	mov	r0, r23
    1ba4:	00 0c       	add	r0, r0
    1ba6:	88 0b       	sbc	r24, r24
    1ba8:	99 0b       	sbc	r25, r25
    1baa:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
		BlankDisplay(0);
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
		delay(DIGIT_DELAY);
    1bb6:	60 91 1a 01 	lds	r22, 0x011A
    1bba:	70 91 1b 01 	lds	r23, 0x011B
    1bbe:	07 2e       	mov	r0, r23
    1bc0:	00 0c       	add	r0, r0
    1bc2:	88 0b       	sbc	r24, r24
    1bc4:	99 0b       	sbc	r25, r25
    1bc6:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
		digitalWrite(LATCH, LOW);
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	88 81       	ld	r24, Y
    1bce:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[10]);
    1bd2:	f6 01       	movw	r30, r12
    1bd4:	22 85       	ldd	r18, Z+10	; 0x0a
    1bd6:	40 e0       	ldi	r20, 0x00	; 0
    1bd8:	f7 01       	movw	r30, r14
    1bda:	60 81       	ld	r22, Z
    1bdc:	f8 01       	movw	r30, r16
    1bde:	80 81       	ld	r24, Z
    1be0:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH); // display hyphen
    1be4:	61 e0       	ldi	r22, 0x01	; 1
    1be6:	88 81       	ld	r24, Y
    1be8:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		delay(DIGIT_DELAY);
    1bec:	60 91 1a 01 	lds	r22, 0x011A
    1bf0:	70 91 1b 01 	lds	r23, 0x011B
    1bf4:	07 2e       	mov	r0, r23
    1bf6:	00 0c       	add	r0, r0
    1bf8:	88 0b       	sbc	r24, r24
    1bfa:	99 0b       	sbc	r25, r25
    1bfc:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
		BlankDisplay(0);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
		
		//this needs to happen, cpu will hang
		//without it.
		//PPS_COUNT = 0;
		SECONDS_LAST = RTC.getSeconds();
    1c08:	88 e7       	ldi	r24, 0x78	; 120
    1c0a:	91 e0       	ldi	r25, 0x01	; 1
    1c0c:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6DS133710getSecondsEv>
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	90 93 85 01 	sts	0x0185, r25
    1c16:	80 93 84 01 	sts	0x0184, r24
		attachInterrupt(0, Interrupt_Update, RISING);
    1c1a:	43 e0       	ldi	r20, 0x03	; 3
    1c1c:	50 e0       	ldi	r21, 0x00	; 0
    1c1e:	6d e0       	ldi	r22, 0x0D	; 13
    1c20:	73 e0       	ldi	r23, 0x03	; 3
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <attachInterrupt>
	}
	//get current clock settings.
	clockSettings();
    1c28:	0e 94 28 03 	call	0x650	; 0x650 <_Z13clockSettingsv>
}
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	df 90       	pop	r13
    1c3a:	cf 90       	pop	r12
    1c3c:	bf 90       	pop	r11
    1c3e:	af 90       	pop	r10
    1c40:	9f 90       	pop	r9
    1c42:	8f 90       	pop	r8
    1c44:	7f 90       	pop	r7
    1c46:	6f 90       	pop	r6
    1c48:	5f 90       	pop	r5
    1c4a:	4f 90       	pop	r4
    1c4c:	3f 90       	pop	r3
    1c4e:	2f 90       	pop	r2
    1c50:	08 95       	ret

00001c52 <_Z4menuv>:
	//check for AM or PM
	ALARM_ARRAY[4] = EEPROM_ARRAY[4];
}

void menu()
{
    1c52:	6f 92       	push	r6
    1c54:	7f 92       	push	r7
    1c56:	8f 92       	push	r8
    1c58:	9f 92       	push	r9
    1c5a:	af 92       	push	r10
    1c5c:	bf 92       	push	r11
    1c5e:	cf 92       	push	r12
    1c60:	df 92       	push	r13
    1c62:	ef 92       	push	r14
    1c64:	ff 92       	push	r15
    1c66:	0f 93       	push	r16
    1c68:	1f 93       	push	r17
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
						  0b00001000,//A = Set Alarm
					      0b00011100,//Degree symbol, Show temp?
						  0b01110010//Display time only when a butten is pressed?}
	*/
	bool set = false;
	int opt = 0;
    1c6e:	00 e0       	ldi	r16, 0x00	; 0
    1c70:	10 e0       	ldi	r17, 0x00	; 0
	do
	{
		digitalWrite(LATCH, LOW);
    1c72:	c4 e2       	ldi	r28, 0x24	; 36
    1c74:	d1 e0       	ldi	r29, 0x01	; 1
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, MENU_ARRAY[opt]);
    1c76:	0f 2e       	mov	r0, r31
    1c78:	f2 e2       	ldi	r31, 0x22	; 34
    1c7a:	cf 2e       	mov	r12, r31
    1c7c:	f1 e0       	ldi	r31, 0x01	; 1
    1c7e:	df 2e       	mov	r13, r31
    1c80:	f0 2d       	mov	r31, r0
    1c82:	0f 2e       	mov	r0, r31
    1c84:	f6 e2       	ldi	r31, 0x26	; 38
    1c86:	ef 2e       	mov	r14, r31
    1c88:	f1 e0       	ldi	r31, 0x01	; 1
    1c8a:	ff 2e       	mov	r15, r31
    1c8c:	f0 2d       	mov	r31, r0
		digitalWrite(LATCH, HIGH);
		if (digitalRead(Select_BTN)==HIGH)
    1c8e:	0f 2e       	mov	r0, r31
    1c90:	fa e2       	ldi	r31, 0x2A	; 42
    1c92:	8f 2e       	mov	r8, r31
    1c94:	f1 e0       	ldi	r31, 0x01	; 1
    1c96:	9f 2e       	mov	r9, r31
    1c98:	f0 2d       	mov	r31, r0
		{
			delay(debounce);
			opt++;
			if (opt>3)
			{
				opt=0;
    1c9a:	61 2c       	mov	r6, r1
    1c9c:	71 2c       	mov	r7, r1
			}
			digitalWrite(LATCH, LOW);
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[opt]);
			digitalWrite(LATCH, HIGH);
		}
		if (digitalRead(Next_BTN)==HIGH)
    1c9e:	0f 2e       	mov	r0, r31
    1ca0:	f8 e2       	ldi	r31, 0x28	; 40
    1ca2:	af 2e       	mov	r10, r31
    1ca4:	f1 e0       	ldi	r31, 0x01	; 1
    1ca6:	bf 2e       	mov	r11, r31
    1ca8:	f0 2d       	mov	r31, r0
	*/
	bool set = false;
	int opt = 0;
	do
	{
		digitalWrite(LATCH, LOW);
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	88 81       	ld	r24, Y
    1cae:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		shiftOut(DATA_PIN, CLOCK, LSBFIRST, MENU_ARRAY[opt]);
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	e0 50       	subi	r30, 0x00	; 0
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	20 81       	ld	r18, Z
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	f6 01       	movw	r30, r12
    1cbe:	60 81       	ld	r22, Z
    1cc0:	f7 01       	movw	r30, r14
    1cc2:	80 81       	ld	r24, Z
    1cc4:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
		digitalWrite(LATCH, HIGH);
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	88 81       	ld	r24, Y
    1ccc:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		if (digitalRead(Select_BTN)==HIGH)
    1cd0:	f4 01       	movw	r30, r8
    1cd2:	80 81       	ld	r24, Z
    1cd4:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	21 f5       	brne	.+72     	; 0x1d24 <_Z4menuv+0xd2>
		{
			delay(debounce);
    1cdc:	60 91 18 01 	lds	r22, 0x0118
    1ce0:	70 91 19 01 	lds	r23, 0x0119
    1ce4:	07 2e       	mov	r0, r23
    1ce6:	00 0c       	add	r0, r0
    1ce8:	88 0b       	sbc	r24, r24
    1cea:	99 0b       	sbc	r25, r25
    1cec:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			opt++;
    1cf0:	0f 5f       	subi	r16, 0xFF	; 255
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
			if (opt>3)
    1cf4:	04 30       	cpi	r16, 0x04	; 4
    1cf6:	11 05       	cpc	r17, r1
    1cf8:	14 f0       	brlt	.+4      	; 0x1cfe <_Z4menuv+0xac>
			{
				opt=0;
    1cfa:	06 2d       	mov	r16, r6
    1cfc:	17 2d       	mov	r17, r7
			}
			digitalWrite(LATCH, LOW);
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	88 81       	ld	r24, Y
    1d02:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			shiftOut(DATA_PIN, CLOCK, LSBFIRST, DATA_ARRAY[opt]);
    1d06:	f8 01       	movw	r30, r16
    1d08:	ec 5f       	subi	r30, 0xFC	; 252
    1d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d0c:	20 81       	ld	r18, Z
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	f6 01       	movw	r30, r12
    1d12:	60 81       	ld	r22, Z
    1d14:	f7 01       	movw	r30, r14
    1d16:	80 81       	ld	r24, Z
    1d18:	0e 94 87 19 	call	0x330e	; 0x330e <shiftOut>
			digitalWrite(LATCH, HIGH);
    1d1c:	61 e0       	ldi	r22, 0x01	; 1
    1d1e:	88 81       	ld	r24, Y
    1d20:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		}
		if (digitalRead(Next_BTN)==HIGH)
    1d24:	f5 01       	movw	r30, r10
    1d26:	80 81       	ld	r24, Z
    1d28:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <_Z4menuv+0xe0>
    1d30:	bc cf       	rjmp	.-136    	; 0x1caa <_Z4menuv+0x58>
		{
			delay(debounce);
    1d32:	60 91 18 01 	lds	r22, 0x0118
    1d36:	70 91 19 01 	lds	r23, 0x0119
    1d3a:	07 2e       	mov	r0, r23
    1d3c:	00 0c       	add	r0, r0
    1d3e:	88 0b       	sbc	r24, r24
    1d40:	99 0b       	sbc	r25, r25
    1d42:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
			set=true;
		}
	}
	while (set!=true);
	delay(BTN_DELAY);
    1d46:	60 91 1c 01 	lds	r22, 0x011C
    1d4a:	70 91 1d 01 	lds	r23, 0x011D
    1d4e:	07 2e       	mov	r0, r23
    1d50:	00 0c       	add	r0, r0
    1d52:	88 0b       	sbc	r24, r24
    1d54:	99 0b       	sbc	r25, r25
    1d56:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
	
	switch(opt)
    1d5a:	01 30       	cpi	r16, 0x01	; 1
    1d5c:	11 05       	cpc	r17, r1
    1d5e:	71 f0       	breq	.+28     	; 0x1d7c <_Z4menuv+0x12a>
    1d60:	1c f4       	brge	.+6      	; 0x1d68 <_Z4menuv+0x116>
    1d62:	01 2b       	or	r16, r17
    1d64:	41 f0       	breq	.+16     	; 0x1d76 <_Z4menuv+0x124>
    1d66:	2e c0       	rjmp	.+92     	; 0x1dc4 <_Z4menuv+0x172>
    1d68:	02 30       	cpi	r16, 0x02	; 2
    1d6a:	11 05       	cpc	r17, r1
    1d6c:	51 f0       	breq	.+20     	; 0x1d82 <_Z4menuv+0x130>
    1d6e:	03 30       	cpi	r16, 0x03	; 3
    1d70:	11 05       	cpc	r17, r1
    1d72:	f1 f0       	breq	.+60     	; 0x1db0 <_Z4menuv+0x15e>
    1d74:	27 c0       	rjmp	.+78     	; 0x1dc4 <_Z4menuv+0x172>
	{
		case 0:
			setTime();
    1d76:	0e 94 25 07 	call	0xe4a	; 0xe4a <_Z7setTimev>
			break;
    1d7a:	24 c0       	rjmp	.+72     	; 0x1dc4 <_Z4menuv+0x172>
		case 1:
			setALARM();
    1d7c:	0e 94 6d 0a 	call	0x14da	; 0x14da <_Z8setALARMv>
			break;
    1d80:	21 c0       	rjmp	.+66     	; 0x1dc4 <_Z4menuv+0x172>
		case 2:
			if(tempDisplay == false){tempDisplay = true; PPS_TIMER = 20;}
    1d82:	80 91 91 01 	lds	r24, 0x0191
    1d86:	81 11       	cpse	r24, r1
    1d88:	0a c0       	rjmp	.+20     	; 0x1d9e <_Z4menuv+0x14c>
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	80 93 91 01 	sts	0x0191, r24
    1d90:	84 e1       	ldi	r24, 0x14	; 20
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	90 93 1f 01 	sts	0x011F, r25
    1d98:	80 93 1e 01 	sts	0x011E, r24
    1d9c:	13 c0       	rjmp	.+38     	; 0x1dc4 <_Z4menuv+0x172>
			else{tempDisplay = false; PPS_TIMER = 15;}
    1d9e:	10 92 91 01 	sts	0x0191, r1
    1da2:	8f e0       	ldi	r24, 0x0F	; 15
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	90 93 1f 01 	sts	0x011F, r25
    1daa:	80 93 1e 01 	sts	0x011E, r24
    1dae:	0a c0       	rjmp	.+20     	; 0x1dc4 <_Z4menuv+0x172>
			break;
		case 3:
			if(BTN_TIME == false){BTN_TIME = true;}
    1db0:	80 91 83 01 	lds	r24, 0x0183
    1db4:	81 11       	cpse	r24, r1
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <_Z4menuv+0x16e>
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	80 93 83 01 	sts	0x0183, r24
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <_Z4menuv+0x172>
			else{BTN_TIME = false;}
    1dc0:	10 92 83 01 	sts	0x0183, r1
			break;
		default:
			break;	
	}
	set = false;
	BlankDisplay(0);
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
	delay(BTN_DELAY);
    1dcc:	60 91 1c 01 	lds	r22, 0x011C
    1dd0:	70 91 1d 01 	lds	r23, 0x011D
    1dd4:	07 2e       	mov	r0, r23
    1dd6:	00 0c       	add	r0, r0
    1dd8:	88 0b       	sbc	r24, r24
    1dda:	99 0b       	sbc	r25, r25
    1ddc:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
}
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	ff 90       	pop	r15
    1dea:	ef 90       	pop	r14
    1dec:	df 90       	pop	r13
    1dee:	cf 90       	pop	r12
    1df0:	bf 90       	pop	r11
    1df2:	af 90       	pop	r10
    1df4:	9f 90       	pop	r9
    1df6:	8f 90       	pop	r8
    1df8:	7f 90       	pop	r7
    1dfa:	6f 90       	pop	r6
    1dfc:	08 95       	ret

00001dfe <loop>:
	//clear display at start up.
	BlankDisplay(1);
}

void loop()
{
    1dfe:	cf 93       	push	r28
	RTC.readTime();
    1e00:	88 e7       	ldi	r24, 0x78	; 120
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN6DS13378readTimeEv>
	if(RTC.getSeconds() < PPS_TIMER){SECONDS_LAST = 0;}
    1e08:	88 e7       	ldi	r24, 0x78	; 120
    1e0a:	91 e0       	ldi	r25, 0x01	; 1
    1e0c:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6DS133710getSecondsEv>
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	20 91 1e 01 	lds	r18, 0x011E
    1e16:	30 91 1f 01 	lds	r19, 0x011F
    1e1a:	82 17       	cp	r24, r18
    1e1c:	93 07       	cpc	r25, r19
    1e1e:	24 f4       	brge	.+8      	; 0x1e28 <loop+0x2a>
    1e20:	10 92 85 01 	sts	0x0185, r1
    1e24:	10 92 84 01 	sts	0x0184, r1
	
	//checking if the alarm has been
	//triggered.
	int HR = RTC.getHours();
    1e28:	88 e7       	ldi	r24, 0x78	; 120
    1e2a:	91 e0       	ldi	r25, 0x01	; 1
    1e2c:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN6DS13378getHoursEv>
    1e30:	c8 2f       	mov	r28, r24
	int MIN = RTC.getMinutes();
    1e32:	88 e7       	ldi	r24, 0x78	; 120
    1e34:	91 e0       	ldi	r25, 0x01	; 1
    1e36:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN6DS133710getMinutesEv>
    1e3a:	68 2f       	mov	r22, r24
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
	convertTime(HR);
	
	if(checkAlarm(HR,MIN) == 1)
    1e3e:	8c 2f       	mov	r24, r28
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_Z10checkAlarmii>
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	11 f4       	brne	.+4      	; 0x1e4e <loop+0x50>
	{
		soundAlarm();
    1e4a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <_Z10soundAlarmv>
	}
	
	if (digitalRead(Select_BTN)==HIGH)
    1e4e:	80 91 2a 01 	lds	r24, 0x012A
    1e52:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	11 f4       	brne	.+4      	; 0x1e5e <loop+0x60>
	{
		//setTime();
		menu();
    1e5a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_Z4menuv>
	}
	
	if(BTN_TIME == true)
    1e5e:	80 91 83 01 	lds	r24, 0x0183
    1e62:	88 23       	and	r24, r24
    1e64:	49 f0       	breq	.+18     	; 0x1e78 <loop+0x7a>
	{
		if(digitalRead(Next_BTN) == HIGH){
    1e66:	80 91 28 01 	lds	r24, 0x0128
    1e6a:	0e 94 5e 19 	call	0x32bc	; 0x32bc <digitalRead>
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	01 f5       	brne	.+64     	; 0x1eb2 <loop+0xb4>
			Update_Display();
    1e72:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z14Update_Displayv>
    1e76:	1d c0       	rjmp	.+58     	; 0x1eb2 <loop+0xb4>
		}
	}
	else
	{	
		//update the RTC buffers
		if(RTC.getSeconds() - SECONDS_LAST >= PPS_TIMER)
    1e78:	88 e7       	ldi	r24, 0x78	; 120
    1e7a:	91 e0       	ldi	r25, 0x01	; 1
    1e7c:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6DS133710getSecondsEv>
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	20 91 84 01 	lds	r18, 0x0184
    1e86:	30 91 85 01 	lds	r19, 0x0185
    1e8a:	82 1b       	sub	r24, r18
    1e8c:	93 0b       	sbc	r25, r19
    1e8e:	20 91 1e 01 	lds	r18, 0x011E
    1e92:	30 91 1f 01 	lds	r19, 0x011F
    1e96:	82 17       	cp	r24, r18
    1e98:	93 07       	cpc	r25, r19
    1e9a:	5c f0       	brlt	.+22     	; 0x1eb2 <loop+0xb4>
		{
			//Internal_Update();
		
			//Update the VFD display
			Update_Display();
    1e9c:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z14Update_Displayv>
			SECONDS_LAST = RTC.getSeconds();
    1ea0:	88 e7       	ldi	r24, 0x78	; 120
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6DS133710getSecondsEv>
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	90 93 85 01 	sts	0x0185, r25
    1eae:	80 93 84 01 	sts	0x0184, r24
		}
	}
}
    1eb2:	cf 91       	pop	r28
    1eb4:	08 95       	ret

00001eb6 <_GLOBAL__sub_I_INTERUPT_0>:
int alarmMM = 0;
int alarm_check = 0;
int alarm_Silence = 0;

//RTC_DS1307 rtc;             //Creating a new RTC object.
DS1337 RTC = DS1337();
    1eb6:	88 e7       	ldi	r24, 0x78	; 120
    1eb8:	91 e0       	ldi	r25, 0x01	; 1
    1eba:	0e 94 97 01 	call	0x32e	; 0x32e <_ZN6DS1337C1Ev>
    1ebe:	08 95       	ret

00001ec0 <_Z9i2c_writehPhh>:
 * \param buf A pointer to a buffer from which to read the data. 
 * \param num The number of bytes to write. 
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t i2c_write(uint8_t addr, uint8_t* buf, uint8_t num) {
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	7b 01       	movw	r14, r22
    1ece:	14 2f       	mov	r17, r20
  Wire.beginTransmission(addr);
    1ed0:	68 2f       	mov	r22, r24
    1ed2:	8e ea       	ldi	r24, 0xAE	; 174
    1ed4:	92 e0       	ldi	r25, 0x02	; 2
    1ed6:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN7TwoWire17beginTransmissionEh>
  for (uint8_t i = 0; i < num; i++) {
    1eda:	11 23       	and	r17, r17
    1edc:	81 f0       	breq	.+32     	; 0x1efe <_Z9i2c_writehPhh+0x3e>
    1ede:	e7 01       	movw	r28, r14
    1ee0:	11 50       	subi	r17, 0x01	; 1
    1ee2:	01 2f       	mov	r16, r17
    1ee4:	10 e0       	ldi	r17, 0x00	; 0
    1ee6:	0f 5f       	subi	r16, 0xFF	; 255
    1ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eea:	0e 0d       	add	r16, r14
    1eec:	1f 1d       	adc	r17, r15
    Wire.write(buf[i]);
    1eee:	69 91       	ld	r22, Y+
    1ef0:	8e ea       	ldi	r24, 0xAE	; 174
    1ef2:	92 e0       	ldi	r25, 0x02	; 2
    1ef4:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <_ZN7TwoWire5writeEh>
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t i2c_write(uint8_t addr, uint8_t* buf, uint8_t num) {
  Wire.beginTransmission(addr);
  for (uint8_t i = 0; i < num; i++) {
    1ef8:	c0 17       	cp	r28, r16
    1efa:	d1 07       	cpc	r29, r17
    1efc:	c1 f7       	brne	.-16     	; 0x1eee <_Z9i2c_writehPhh+0x2e>
    Wire.write(buf[i]);
  }
  return Wire.endTransmission();
    1efe:	8e ea       	ldi	r24, 0xAE	; 174
    1f00:	92 e0       	ldi	r25, 0x02	; 2
    1f02:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7TwoWire15endTransmissionEv>
}
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	ff 90       	pop	r15
    1f10:	ef 90       	pop	r14
    1f12:	08 95       	ret

00001f14 <_Z18ds1337_set_controlh>:
 *
 * \param ctrl The value to set. 
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t ds1337_set_control(uint8_t ctrl) {
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <_Z18ds1337_set_controlh+0x6>
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
   uint8_t buf[2];
   buf[0] = DS1337_REG_CONTROL;
    1f1e:	9e e0       	ldi	r25, 0x0E	; 14
    1f20:	99 83       	std	Y+1, r25	; 0x01
   buf[1] = ctrl;
    1f22:	8a 83       	std	Y+2, r24	; 0x02
   return i2c_write(DS1337_ADDR, buf, 2);
    1f24:	42 e0       	ldi	r20, 0x02	; 2
    1f26:	be 01       	movw	r22, r28
    1f28:	6f 5f       	subi	r22, 0xFF	; 255
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	88 e6       	ldi	r24, 0x68	; 104
    1f2e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_Z9i2c_writehPhh>
}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	08 95       	ret

00001f3c <_Z25ds1337_clear_control_bitsh>:
 * \param mask A mask specifying which bits to clear. (High bits will be cleared.) 
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t ds1337_clear_control_bits(uint8_t mask) {
	return ds1337_set_control(~mask);
    1f3c:	80 95       	com	r24
    1f3e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <_Z18ds1337_set_controlh>
}
    1f42:	08 95       	ret

00001f44 <_Z4Initv>:


void Interrupt_Update(){} //This is just to attach an interrupt

void Init()
{
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <_Z4Initv+0x6>
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <_Z4Initv+0x8>
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <_Z4Initv+0xa>
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
	//This is where we initialize everything.
	///////////////////////////////////////////////////////////
	
	//Coms are not enabled on this clock.
	
	Wire.begin();
    1f52:	8e ea       	ldi	r24, 0xAE	; 174
    1f54:	92 e0       	ldi	r25, 0x02	; 2
    1f56:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <_ZN7TwoWire5beginEv>
	//pullups on the SDA(), and SCL() pins.
	
	SCL_PORT |= _BV(SCL_BIT);   // enable pull up on TWI clock line
	SDA_PORT |= _BV(SDA_BIT);   // enable pull up on TWI data line
	#else
	SCL_PORT &= _BV(SCL_BIT);   // disable pull up on TWI clock line
    1f5a:	88 b1       	in	r24, 0x08	; 8
    1f5c:	80 72       	andi	r24, 0x20	; 32
    1f5e:	88 b9       	out	0x08, r24	; 8
	SDA_PORT &= _BV(SDA_BIT);   // disable pull up on TWI data line
    1f60:	88 b1       	in	r24, 0x08	; 8
    1f62:	80 71       	andi	r24, 0x10	; 16
    1f64:	88 b9       	out	0x08, r24	; 8
	#endif
	
	RTC.start(); //starts the DS1337
    1f66:	88 e7       	ldi	r24, 0x78	; 120
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN6DS13375startEv>
	///////////////////////////////////////////////////////////
	//Pin Functions
	///////////////////////////////////////////////////////////

	//pinMode(Freq_Adj, INPUT);
	pinMode(INTERUPT_0, INPUT);
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	80 91 2c 01 	lds	r24, 0x012C
    1f74:	0e 94 ee 18 	call	0x31dc	; 0x31dc <pinMode>
	pinMode(DATA_PIN, OUTPUT);
    1f78:	61 e0       	ldi	r22, 0x01	; 1
    1f7a:	80 91 26 01 	lds	r24, 0x0126
    1f7e:	0e 94 ee 18 	call	0x31dc	; 0x31dc <pinMode>
	pinMode(CLOCK, OUTPUT);
    1f82:	61 e0       	ldi	r22, 0x01	; 1
    1f84:	80 91 22 01 	lds	r24, 0x0122
    1f88:	0e 94 ee 18 	call	0x31dc	; 0x31dc <pinMode>
	pinMode(LATCH, OUTPUT);
    1f8c:	61 e0       	ldi	r22, 0x01	; 1
    1f8e:	80 91 24 01 	lds	r24, 0x0124
    1f92:	0e 94 ee 18 	call	0x31dc	; 0x31dc <pinMode>
	pinMode(Select_BTN, INPUT);
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	80 91 2a 01 	lds	r24, 0x012A
    1f9c:	0e 94 ee 18 	call	0x31dc	; 0x31dc <pinMode>
	//digitalWrite(Select_BTN, LOW);
	pinMode(Next_BTN, INPUT);
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	80 91 28 01 	lds	r24, 0x0128
    1fa6:	0e 94 ee 18 	call	0x31dc	; 0x31dc <pinMode>
	//digitalWrite(Next_BTN, LOW);
	pinMode(LM35, INPUT);
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	80 91 20 01 	lds	r24, 0x0120
    1fb0:	0e 94 ee 18 	call	0x31dc	; 0x31dc <pinMode>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1fb4:	8a e0       	ldi	r24, 0x0A	; 10
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 34 1c 	call	0x3868	; 0x3868 <eeprom_read_byte>
	///////////////////////////////////////////////////////////
	//If the RTC is not currently set to the correct time set the time
	//based on the time used when compiling this firmware.
	///////////////////////////////////////////////////////////
	
	if(EEPROM.read(10) == 0){
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	33 c0       	rjmp	.+102    	; 0x2026 <_Z4Initv+0xe2>
		if(!RTC.time_is_set())
    1fc0:	88 e7       	ldi	r24, 0x78	; 120
    1fc2:	91 e0       	ldi	r25, 0x01	; 1
    1fc4:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN6DS133711time_is_setEv>
    1fc8:	81 11       	cpse	r24, r1
    1fca:	2d c0       	rjmp	.+90     	; 0x2026 <_Z4Initv+0xe2>
		{
			DateTime now = DateTime(F(__DATE__),F(__TIME__));
    1fcc:	4e e6       	ldi	r20, 0x6E	; 110
    1fce:	52 e0       	ldi	r21, 0x02	; 2
    1fd0:	62 e6       	ldi	r22, 0x62	; 98
    1fd2:	72 e0       	ldi	r23, 0x02	; 2
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	01 96       	adiw	r24, 0x01	; 1
    1fd8:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
			Serial.print(":");
			Serial.print(now.second(),DEC);
			Serial.print("\r\n");
			*/
			//setting to build header time.
			RTC.setSeconds(now.second());
    1fdc:	6e 81       	ldd	r22, Y+6	; 0x06
    1fde:	88 e7       	ldi	r24, 0x78	; 120
    1fe0:	91 e0       	ldi	r25, 0x01	; 1
    1fe2:	0e 94 c6 01 	call	0x38c	; 0x38c <_ZN6DS133710setSecondsEh>
			RTC.setMinutes(now.minute());
    1fe6:	6d 81       	ldd	r22, Y+5	; 0x05
    1fe8:	88 e7       	ldi	r24, 0x78	; 120
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6DS133710setMinutesEh>
			RTC.setHours(now.hour());
    1ff0:	6c 81       	ldd	r22, Y+4	; 0x04
    1ff2:	88 e7       	ldi	r24, 0x78	; 120
    1ff4:	91 e0       	ldi	r25, 0x01	; 1
    1ff6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN6DS13378setHoursEh>
			RTC.setDays(now.day());
    1ffa:	6b 81       	ldd	r22, Y+3	; 0x03
    1ffc:	88 e7       	ldi	r24, 0x78	; 120
    1ffe:	91 e0       	ldi	r25, 0x01	; 1
    2000:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN6DS13377setDaysEh>
			RTC.setMonths(now.month());
    2004:	6a 81       	ldd	r22, Y+2	; 0x02
    2006:	88 e7       	ldi	r24, 0x78	; 120
    2008:	91 e0       	ldi	r25, 0x01	; 1
    200a:	0e 94 1a 02 	call	0x434	; 0x434 <_ZN6DS13379setMonthsEh>
    DateTime (uint16_t year, uint8_t month, uint8_t day,
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    200e:	69 81       	ldd	r22, Y+1	; 0x01
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	60 53       	subi	r22, 0x30	; 48
    2014:	78 4f       	sbci	r23, 0xF8	; 248
			RTC.setYears(now.year());
    2016:	88 e7       	ldi	r24, 0x78	; 120
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	0e 94 2f 02 	call	0x45e	; 0x45e <_ZN6DS13378setYearsEj>
			RTC.writeTime();
    201e:	88 e7       	ldi	r24, 0x78	; 120
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN6DS13379writeTimeEv>
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    2026:	61 e0       	ldi	r22, 0x01	; 1
    2028:	8a e0       	ldi	r24, 0x0A	; 10
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 3c 1c 	call	0x3878	; 0x3878 <eeprom_write_byte>
		}
	}
	
	EEPROM.write(10,1);
	
	delay(10);
    2030:	6a e0       	ldi	r22, 0x0A	; 10
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
	
	if(!RTC.time_is_set())
    203c:	88 e7       	ldi	r24, 0x78	; 120
    203e:	91 e0       	ldi	r25, 0x01	; 1
    2040:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN6DS133711time_is_setEv>
    2044:	81 11       	cpse	r24, r1
    2046:	07 c0       	rjmp	.+14     	; 0x2056 <_Z4Initv+0x112>
	{
		Serial.print(F("Time did not set correctly, check wiring.\r\n"));
    2048:	66 e3       	ldi	r22, 0x36	; 54
    204a:	72 e0       	ldi	r23, 0x02	; 2
    204c:	82 e9       	ldi	r24, 0x92	; 146
    204e:	91 e0       	ldi	r25, 0x01	; 1
    2050:	0e 94 55 12 	call	0x24aa	; 0x24aa <_ZN5Print5printEPK19__FlashStringHelper>
    2054:	06 c0       	rjmp	.+12     	; 0x2062 <_Z4Initv+0x11e>
	}
	else
	{
		Serial.print(F("Time should be set.\r\n"));
    2056:	60 e2       	ldi	r22, 0x20	; 32
    2058:	72 e0       	ldi	r23, 0x02	; 2
    205a:	82 e9       	ldi	r24, 0x92	; 146
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	0e 94 55 12 	call	0x24aa	; 0x24aa <_ZN5Print5printEPK19__FlashStringHelper>
	//We will be using this as our interrupt to update the time.

	//INTA alarm 1 will be set to 500ms cycles to set the delay
	//between display digits.
	
	ds1337_clear_control_bits(DS1337_SQW_MASK);
    2062:	8c e0       	ldi	r24, 0x0C	; 12
    2064:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_Z25ds1337_clear_control_bitsh>
	ds1337_set_control(DS1337_SQW_1HZ);
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <_Z18ds1337_set_controlh>
	delay(10);
    206e:	6a e0       	ldi	r22, 0x0A	; 10
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 3c 18 	call	0x3078	; 0x3078 <delay>
	///////////////////////////////////////////////////////////
	
	// Setting up sleep mode.
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    207a:	83 b7       	in	r24, 0x33	; 51
    207c:	81 7f       	andi	r24, 0xF1	; 241
    207e:	84 60       	ori	r24, 0x04	; 4
    2080:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    2082:	83 b7       	in	r24, 0x33	; 51
    2084:	81 60       	ori	r24, 0x01	; 1
    2086:	83 bf       	out	0x33, r24	; 51
	
	//allow interrupts
	sei();
    2088:	78 94       	sei
	
	//Interrupts
	attachInterrupt(0, Interrupt_Update, RISING);
    208a:	43 e0       	ldi	r20, 0x03	; 3
    208c:	50 e0       	ldi	r21, 0x00	; 0
    208e:	6d e0       	ldi	r22, 0x0D	; 13
    2090:	73 e0       	ldi	r23, 0x03	; 3
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <attachInterrupt>
	
	//load clock settings from eeprom.
	clockSettings();
    2098:	0e 94 28 03 	call	0x650	; 0x650 <_Z13clockSettingsv>
}
    209c:	26 96       	adiw	r28, 0x06	; 6
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	08 95       	ret

000020ae <setup>:

void setup()
{
		
	//Initialize the clock
	Init();
    20ae:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_Z4Initv>
	
	//clear display at start up.
	BlankDisplay(1);
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z12BlankDisplayi>
    20ba:	08 95       	ret

000020bc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    20bc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    20be:	91 8d       	ldd	r25, Z+25	; 0x19
    20c0:	22 8d       	ldd	r18, Z+26	; 0x1a
    20c2:	89 2f       	mov	r24, r25
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	80 5c       	subi	r24, 0xC0	; 192
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	82 1b       	sub	r24, r18
    20cc:	91 09       	sbc	r25, r1
}
    20ce:	8f 73       	andi	r24, 0x3F	; 63
    20d0:	99 27       	eor	r25, r25
    20d2:	08 95       	ret

000020d4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    20d4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    20d6:	91 8d       	ldd	r25, Z+25	; 0x19
    20d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    20da:	98 17       	cp	r25, r24
    20dc:	31 f0       	breq	.+12     	; 0x20ea <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    20de:	82 8d       	ldd	r24, Z+26	; 0x1a
    20e0:	e8 0f       	add	r30, r24
    20e2:	f1 1d       	adc	r31, r1
    20e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    20ea:	8f ef       	ldi	r24, 0xFF	; 255
    20ec:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    20ee:	08 95       	ret

000020f0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    20f0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    20f2:	91 8d       	ldd	r25, Z+25	; 0x19
    20f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    20f6:	98 17       	cp	r25, r24
    20f8:	61 f0       	breq	.+24     	; 0x2112 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    20fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    20fc:	df 01       	movw	r26, r30
    20fe:	a8 0f       	add	r26, r24
    2100:	b1 1d       	adc	r27, r1
    2102:	5d 96       	adiw	r26, 0x1d	; 29
    2104:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2106:	92 8d       	ldd	r25, Z+26	; 0x1a
    2108:	9f 5f       	subi	r25, 0xFF	; 255
    210a:	9f 73       	andi	r25, 0x3F	; 63
    210c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2112:	8f ef       	ldi	r24, 0xFF	; 255
    2114:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2116:	08 95       	ret

00002118 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2118:	83 e9       	ldi	r24, 0x93	; 147
    211a:	91 e1       	ldi	r25, 0x11	; 17
    211c:	89 2b       	or	r24, r25
    211e:	49 f0       	breq	.+18     	; 0x2132 <_Z14serialEventRunv+0x1a>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	89 2b       	or	r24, r25
    2126:	29 f0       	breq	.+10     	; 0x2132 <_Z14serialEventRunv+0x1a>
    2128:	0e 94 93 11 	call	0x2326	; 0x2326 <_Z17Serial0_availablev>
    212c:	81 11       	cpse	r24, r1
    212e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2132:	08 95       	ret

00002134 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2134:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2136:	84 8d       	ldd	r24, Z+28	; 0x1c
    2138:	df 01       	movw	r26, r30
    213a:	a8 0f       	add	r26, r24
    213c:	b1 1d       	adc	r27, r1
    213e:	a3 5a       	subi	r26, 0xA3	; 163
    2140:	bf 4f       	sbci	r27, 0xFF	; 255
    2142:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2144:	24 8d       	ldd	r18, Z+28	; 0x1c
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	2f 5f       	subi	r18, 0xFF	; 255
    214a:	3f 4f       	sbci	r19, 0xFF	; 255
    214c:	2f 73       	andi	r18, 0x3F	; 63
    214e:	30 78       	andi	r19, 0x80	; 128
    2150:	33 23       	and	r19, r19
    2152:	34 f4       	brge	.+12     	; 0x2160 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    2154:	21 50       	subi	r18, 0x01	; 1
    2156:	31 09       	sbc	r19, r1
    2158:	20 6c       	ori	r18, 0xC0	; 192
    215a:	3f 6f       	ori	r19, 0xFF	; 255
    215c:	2f 5f       	subi	r18, 0xFF	; 255
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    2162:	a6 89       	ldd	r26, Z+22	; 0x16
    2164:	b7 89       	ldd	r27, Z+23	; 0x17
    2166:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2168:	a0 89       	ldd	r26, Z+16	; 0x10
    216a:	b1 89       	ldd	r27, Z+17	; 0x11
    216c:	8c 91       	ld	r24, X
    216e:	80 64       	ori	r24, 0x40	; 64
    2170:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2172:	93 8d       	ldd	r25, Z+27	; 0x1b
    2174:	84 8d       	ldd	r24, Z+28	; 0x1c
    2176:	98 13       	cpse	r25, r24
    2178:	06 c0       	rjmp	.+12     	; 0x2186 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    217a:	02 88       	ldd	r0, Z+18	; 0x12
    217c:	f3 89       	ldd	r31, Z+19	; 0x13
    217e:	e0 2d       	mov	r30, r0
    2180:	80 81       	ld	r24, Z
    2182:	8f 7d       	andi	r24, 0xDF	; 223
    2184:	80 83       	st	Z, r24
    2186:	08 95       	ret

00002188 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    218e:	88 8d       	ldd	r24, Y+24	; 0x18
    2190:	81 11       	cpse	r24, r1
    2192:	0f c0       	rjmp	.+30     	; 0x21b2 <_ZN14HardwareSerial5flushEv+0x2a>
    2194:	18 c0       	rjmp	.+48     	; 0x21c6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	07 fc       	sbrc	r0, 7
    219a:	0d c0       	rjmp	.+26     	; 0x21b6 <_ZN14HardwareSerial5flushEv+0x2e>
    219c:	90 81       	ld	r25, Z
    219e:	95 ff       	sbrs	r25, 5
    21a0:	0a c0       	rjmp	.+20     	; 0x21b6 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    21a2:	a8 89       	ldd	r26, Y+16	; 0x10
    21a4:	b9 89       	ldd	r27, Y+17	; 0x11
    21a6:	8c 91       	ld	r24, X
    21a8:	85 ff       	sbrs	r24, 5
    21aa:	05 c0       	rjmp	.+10     	; 0x21b6 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
    21ac:	ce 01       	movw	r24, r28
    21ae:	0e 94 9a 10 	call	0x2134	; 0x2134 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    21b2:	ea 89       	ldd	r30, Y+18	; 0x12
    21b4:	fb 89       	ldd	r31, Y+19	; 0x13
    21b6:	90 81       	ld	r25, Z
    21b8:	95 fd       	sbrc	r25, 5
    21ba:	ed cf       	rjmp	.-38     	; 0x2196 <_ZN14HardwareSerial5flushEv+0xe>
    21bc:	a8 89       	ldd	r26, Y+16	; 0x10
    21be:	b9 89       	ldd	r27, Y+17	; 0x11
    21c0:	8c 91       	ld	r24, X
    21c2:	86 ff       	sbrs	r24, 6
    21c4:	e8 cf       	rjmp	.-48     	; 0x2196 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	08 95       	ret

000021cc <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    21cc:	0f 93       	push	r16
    21ce:	1f 93       	push	r17
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	fc 01       	movw	r30, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    21d6:	93 8d       	ldd	r25, Z+27	; 0x1b
    21d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    21da:	98 13       	cpse	r25, r24
    21dc:	24 c0       	rjmp	.+72     	; 0x2226 <_ZN14HardwareSerial5writeEh+0x5a>
    21de:	a0 89       	ldd	r26, Z+16	; 0x10
    21e0:	b1 89       	ldd	r27, Z+17	; 0x11
    21e2:	8c 91       	ld	r24, X
    21e4:	85 fd       	sbrc	r24, 5
    21e6:	31 c0       	rjmp	.+98     	; 0x224a <_ZN14HardwareSerial5writeEh+0x7e>
    21e8:	1e c0       	rjmp	.+60     	; 0x2226 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	07 fc       	sbrc	r0, 7
    21ee:	08 c0       	rjmp	.+16     	; 0x2200 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    21f0:	e8 89       	ldd	r30, Y+16	; 0x10
    21f2:	f9 89       	ldd	r31, Y+17	; 0x11
    21f4:	80 81       	ld	r24, Z
    21f6:	85 ff       	sbrs	r24, 5
    21f8:	03 c0       	rjmp	.+6      	; 0x2200 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    21fa:	ce 01       	movw	r24, r28
    21fc:	0e 94 9a 10 	call	0x2134	; 0x2134 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2200:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2202:	09 17       	cp	r16, r25
    2204:	91 f3       	breq	.-28     	; 0x21ea <_ZN14HardwareSerial5writeEh+0x1e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2206:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2208:	fe 01       	movw	r30, r28
    220a:	e8 0f       	add	r30, r24
    220c:	f1 1d       	adc	r31, r1
    220e:	e3 5a       	subi	r30, 0xA3	; 163
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    2214:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2216:	ea 89       	ldd	r30, Y+18	; 0x12
    2218:	fb 89       	ldd	r31, Y+19	; 0x13
    221a:	80 81       	ld	r24, Z
    221c:	80 62       	ori	r24, 0x20	; 32
    221e:	80 83       	st	Z, r24
  _written = true;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
    2224:	1b c0       	rjmp	.+54     	; 0x225c <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2226:	23 8d       	ldd	r18, Z+27	; 0x1b
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	2f 5f       	subi	r18, 0xFF	; 255
    222c:	3f 4f       	sbci	r19, 0xFF	; 255
    222e:	2f 73       	andi	r18, 0x3F	; 63
    2230:	30 78       	andi	r19, 0x80	; 128
    2232:	33 23       	and	r19, r19
    2234:	34 f4       	brge	.+12     	; 0x2242 <_ZN14HardwareSerial5writeEh+0x76>
    2236:	21 50       	subi	r18, 0x01	; 1
    2238:	31 09       	sbc	r19, r1
    223a:	20 6c       	ori	r18, 0xC0	; 192
    223c:	3f 6f       	ori	r19, 0xFF	; 255
    223e:	2f 5f       	subi	r18, 0xFF	; 255
    2240:	3f 4f       	sbci	r19, 0xFF	; 255
    2242:	16 2f       	mov	r17, r22
    2244:	ef 01       	movw	r28, r30
    2246:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2248:	db cf       	rjmp	.-74     	; 0x2200 <_ZN14HardwareSerial5writeEh+0x34>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    224a:	a6 89       	ldd	r26, Z+22	; 0x16
    224c:	b7 89       	ldd	r27, Z+23	; 0x17
    224e:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    2250:	00 88       	ldd	r0, Z+16	; 0x10
    2252:	f1 89       	ldd	r31, Z+17	; 0x11
    2254:	e0 2d       	mov	r30, r0
    2256:	80 81       	ld	r24, Z
    2258:	80 64       	ori	r24, 0x40	; 64
    225a:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	df 91       	pop	r29
    2262:	cf 91       	pop	r28
    2264:	1f 91       	pop	r17
    2266:	0f 91       	pop	r16
    2268:	08 95       	ret

0000226a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    226a:	1f 92       	push	r1
    226c:	0f 92       	push	r0
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	0f 92       	push	r0
    2272:	11 24       	eor	r1, r1
    2274:	2f 93       	push	r18
    2276:	8f 93       	push	r24
    2278:	9f 93       	push	r25
    227a:	af 93       	push	r26
    227c:	bf 93       	push	r27
    227e:	ef 93       	push	r30
    2280:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2282:	e0 91 a2 01 	lds	r30, 0x01A2
    2286:	f0 91 a3 01 	lds	r31, 0x01A3
    228a:	80 81       	ld	r24, Z
    228c:	82 fd       	sbrc	r24, 2
    228e:	14 c0       	rjmp	.+40     	; 0x22b8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2290:	e2 e9       	ldi	r30, 0x92	; 146
    2292:	f1 e0       	ldi	r31, 0x01	; 1
    2294:	a6 89       	ldd	r26, Z+22	; 0x16
    2296:	b7 89       	ldd	r27, Z+23	; 0x17
    2298:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    229a:	81 8d       	ldd	r24, Z+25	; 0x19
    229c:	8f 5f       	subi	r24, 0xFF	; 255
    229e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    22a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    22a2:	89 17       	cp	r24, r25
    22a4:	71 f0       	breq	.+28     	; 0x22c2 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    22a6:	df 01       	movw	r26, r30
    22a8:	e1 8d       	ldd	r30, Z+25	; 0x19
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	ee 56       	subi	r30, 0x6E	; 110
    22ae:	fe 4f       	sbci	r31, 0xFE	; 254
    22b0:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    22b2:	59 96       	adiw	r26, 0x19	; 25
    22b4:	8c 93       	st	X, r24
    22b6:	05 c0       	rjmp	.+10     	; 0x22c2 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    22b8:	e0 91 a8 01 	lds	r30, 0x01A8
    22bc:	f0 91 a9 01 	lds	r31, 0x01A9
    22c0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    22c2:	ff 91       	pop	r31
    22c4:	ef 91       	pop	r30
    22c6:	bf 91       	pop	r27
    22c8:	af 91       	pop	r26
    22ca:	9f 91       	pop	r25
    22cc:	8f 91       	pop	r24
    22ce:	2f 91       	pop	r18
    22d0:	0f 90       	pop	r0
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	0f 90       	pop	r0
    22d6:	1f 90       	pop	r1
    22d8:	18 95       	reti

000022da <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    22da:	1f 92       	push	r1
    22dc:	0f 92       	push	r0
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	0f 92       	push	r0
    22e2:	11 24       	eor	r1, r1
    22e4:	2f 93       	push	r18
    22e6:	3f 93       	push	r19
    22e8:	4f 93       	push	r20
    22ea:	5f 93       	push	r21
    22ec:	6f 93       	push	r22
    22ee:	7f 93       	push	r23
    22f0:	8f 93       	push	r24
    22f2:	9f 93       	push	r25
    22f4:	af 93       	push	r26
    22f6:	bf 93       	push	r27
    22f8:	ef 93       	push	r30
    22fa:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    22fc:	82 e9       	ldi	r24, 0x92	; 146
    22fe:	91 e0       	ldi	r25, 0x01	; 1
    2300:	0e 94 9a 10 	call	0x2134	; 0x2134 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2304:	ff 91       	pop	r31
    2306:	ef 91       	pop	r30
    2308:	bf 91       	pop	r27
    230a:	af 91       	pop	r26
    230c:	9f 91       	pop	r25
    230e:	8f 91       	pop	r24
    2310:	7f 91       	pop	r23
    2312:	6f 91       	pop	r22
    2314:	5f 91       	pop	r21
    2316:	4f 91       	pop	r20
    2318:	3f 91       	pop	r19
    231a:	2f 91       	pop	r18
    231c:	0f 90       	pop	r0
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	0f 90       	pop	r0
    2322:	1f 90       	pop	r1
    2324:	18 95       	reti

00002326 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2326:	82 e9       	ldi	r24, 0x92	; 146
    2328:	91 e0       	ldi	r25, 0x01	; 1
    232a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <_ZN14HardwareSerial9availableEv>
    232e:	21 e0       	ldi	r18, 0x01	; 1
    2330:	89 2b       	or	r24, r25
    2332:	09 f4       	brne	.+2      	; 0x2336 <_Z17Serial0_availablev+0x10>
    2334:	20 e0       	ldi	r18, 0x00	; 0
}
    2336:	82 2f       	mov	r24, r18
    2338:	08 95       	ret

0000233a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    233a:	e2 e9       	ldi	r30, 0x92	; 146
    233c:	f1 e0       	ldi	r31, 0x01	; 1
    233e:	13 82       	std	Z+3, r1	; 0x03
    2340:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2342:	88 ee       	ldi	r24, 0xE8	; 232
    2344:	93 e0       	ldi	r25, 0x03	; 3
    2346:	a0 e0       	ldi	r26, 0x00	; 0
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	84 83       	std	Z+4, r24	; 0x04
    234c:	95 83       	std	Z+5, r25	; 0x05
    234e:	a6 83       	std	Z+6, r26	; 0x06
    2350:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2352:	84 e3       	ldi	r24, 0x34	; 52
    2354:	91 e0       	ldi	r25, 0x01	; 1
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
    235a:	85 ec       	ldi	r24, 0xC5	; 197
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	95 87       	std	Z+13, r25	; 0x0d
    2360:	84 87       	std	Z+12, r24	; 0x0c
    2362:	84 ec       	ldi	r24, 0xC4	; 196
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	97 87       	std	Z+15, r25	; 0x0f
    2368:	86 87       	std	Z+14, r24	; 0x0e
    236a:	80 ec       	ldi	r24, 0xC0	; 192
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	91 8b       	std	Z+17, r25	; 0x11
    2370:	80 8b       	std	Z+16, r24	; 0x10
    2372:	81 ec       	ldi	r24, 0xC1	; 193
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	93 8b       	std	Z+19, r25	; 0x13
    2378:	82 8b       	std	Z+18, r24	; 0x12
    237a:	82 ec       	ldi	r24, 0xC2	; 194
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	95 8b       	std	Z+21, r25	; 0x15
    2380:	84 8b       	std	Z+20, r24	; 0x14
    2382:	86 ec       	ldi	r24, 0xC6	; 198
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	97 8b       	std	Z+23, r25	; 0x17
    2388:	86 8b       	std	Z+22, r24	; 0x16
    238a:	11 8e       	std	Z+25, r1	; 0x19
    238c:	12 8e       	std	Z+26, r1	; 0x1a
    238e:	13 8e       	std	Z+27, r1	; 0x1b
    2390:	14 8e       	std	Z+28, r1	; 0x1c
    2392:	08 95       	ret

00002394 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2394:	08 95       	ret

00002396 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    2396:	8f 92       	push	r8
    2398:	9f 92       	push	r9
    239a:	af 92       	push	r10
    239c:	bf 92       	push	r11
    239e:	cf 92       	push	r12
    23a0:	df 92       	push	r13
    23a2:	ef 92       	push	r14
    23a4:	ff 92       	push	r15
    23a6:	0f 93       	push	r16
    23a8:	1f 93       	push	r17
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	5c 01       	movw	r10, r24
    23b0:	7b 01       	movw	r14, r22
    23b2:	4c 01       	movw	r8, r24
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	88 0e       	add	r8, r24
    23b8:	91 1c       	adc	r9, r1
    23ba:	65 01       	movw	r12, r10
    23bc:	e5 e0       	ldi	r30, 0x05	; 5
    23be:	ce 0e       	add	r12, r30
    23c0:	d1 1c       	adc	r13, r1
    size_t n = 0;
    23c2:	00 e0       	ldi	r16, 0x00	; 0
    23c4:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    23c6:	f4 01       	movw	r30, r8
    23c8:	61 91       	ld	r22, Z+
    23ca:	4f 01       	movw	r8, r30
    23cc:	4a e0       	ldi	r20, 0x0A	; 10
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	c7 01       	movw	r24, r14
    23d2:	0e 94 08 13 	call	0x2610	; 0x2610 <_ZN5Print5printEhi>
    23d6:	ec 01       	movw	r28, r24
        n += p.print('.');
    23d8:	6e e2       	ldi	r22, 0x2E	; 46
    23da:	c7 01       	movw	r24, r14
    23dc:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN5Print5printEc>
    23e0:	8c 0f       	add	r24, r28
    23e2:	9d 1f       	adc	r25, r29
    23e4:	08 0f       	add	r16, r24
    23e6:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    23e8:	8c 14       	cp	r8, r12
    23ea:	9d 04       	cpc	r9, r13
    23ec:	61 f7       	brne	.-40     	; 0x23c6 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    23ee:	4a e0       	ldi	r20, 0x0A	; 10
    23f0:	50 e0       	ldi	r21, 0x00	; 0
    23f2:	f5 01       	movw	r30, r10
    23f4:	65 81       	ldd	r22, Z+5	; 0x05
    23f6:	c7 01       	movw	r24, r14
    23f8:	0e 94 08 13 	call	0x2610	; 0x2610 <_ZN5Print5printEhi>
    return n;
}
    23fc:	80 0f       	add	r24, r16
    23fe:	91 1f       	adc	r25, r17
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	ff 90       	pop	r15
    240a:	ef 90       	pop	r14
    240c:	df 90       	pop	r13
    240e:	cf 90       	pop	r12
    2410:	bf 90       	pop	r11
    2412:	af 90       	pop	r10
    2414:	9f 90       	pop	r9
    2416:	8f 90       	pop	r8
    2418:	08 95       	ret

0000241a <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    241a:	ef e2       	ldi	r30, 0x2F	; 47
    241c:	f2 e0       	ldi	r31, 0x02	; 2
    241e:	84 e4       	ldi	r24, 0x44	; 68
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    2426:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    2428:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    242a:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    242c:	15 82       	std	Z+5, r1	; 0x05
    242e:	08 95       	ret

00002430 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2430:	08 95       	ret

00002432 <main>:

int main(void)
{
	init();
    2432:	0e 94 68 18 	call	0x30d0	; 0x30d0 <init>

	initVariant();
    2436:	0e 94 18 12 	call	0x2430	; 0x2430 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    243a:	0e 94 57 10 	call	0x20ae	; 0x20ae <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    243e:	cc e8       	ldi	r28, 0x8C	; 140
    2440:	d0 e1       	ldi	r29, 0x10	; 16
#endif
	
	setup();
    
	for (;;) {
		loop();
    2442:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <loop>
		if (serialEventRun) serialEventRun();
    2446:	20 97       	sbiw	r28, 0x00	; 0
    2448:	e1 f3       	breq	.-8      	; 0x2442 <main+0x10>
    244a:	0e 94 8c 10 	call	0x2118	; 0x2118 <_Z14serialEventRunv>
    244e:	f9 cf       	rjmp	.-14     	; 0x2442 <main+0x10>

00002450 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2450:	cf 92       	push	r12
    2452:	df 92       	push	r13
    2454:	ef 92       	push	r14
    2456:	ff 92       	push	r15
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
    2460:	41 15       	cp	r20, r1
    2462:	51 05       	cpc	r21, r1
    2464:	b1 f0       	breq	.+44     	; 0x2492 <_ZN5Print5writeEPKhj+0x42>
    2466:	8c 01       	movw	r16, r24
    2468:	e6 2e       	mov	r14, r22
    246a:	f7 2e       	mov	r15, r23
    246c:	ea 01       	movw	r28, r20
    246e:	c1 2c       	mov	r12, r1
    2470:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
    2472:	d7 01       	movw	r26, r14
    2474:	6d 91       	ld	r22, X+
    2476:	7d 01       	movw	r14, r26
    2478:	d8 01       	movw	r26, r16
    247a:	ed 91       	ld	r30, X+
    247c:	fc 91       	ld	r31, X
    247e:	01 90       	ld	r0, Z+
    2480:	f0 81       	ld	r31, Z
    2482:	e0 2d       	mov	r30, r0
    2484:	c8 01       	movw	r24, r16
    2486:	09 95       	icall
    2488:	c8 0e       	add	r12, r24
    248a:	d9 1e       	adc	r13, r25
    248c:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    248e:	89 f7       	brne	.-30     	; 0x2472 <_ZN5Print5writeEPKhj+0x22>
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    2492:	c1 2c       	mov	r12, r1
    2494:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    2496:	c6 01       	movw	r24, r12
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	1f 91       	pop	r17
    249e:	0f 91       	pop	r16
    24a0:	ff 90       	pop	r15
    24a2:	ef 90       	pop	r14
    24a4:	df 90       	pop	r13
    24a6:	cf 90       	pop	r12
    24a8:	08 95       	ret

000024aa <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    24b6:	eb 01       	movw	r28, r22
    24b8:	21 96       	adiw	r28, 0x01	; 1
    24ba:	fb 01       	movw	r30, r22
    24bc:	64 91       	lpm	r22, Z
    if (c == 0) break;
    24be:	66 23       	and	r22, r22
    24c0:	99 f0       	breq	.+38     	; 0x24e8 <_ZN5Print5printEPK19__FlashStringHelper+0x3e>
    24c2:	8c 01       	movw	r16, r24
    24c4:	e1 2c       	mov	r14, r1
    24c6:	f1 2c       	mov	r15, r1
    n += write(c);
    24c8:	d8 01       	movw	r26, r16
    24ca:	ed 91       	ld	r30, X+
    24cc:	fc 91       	ld	r31, X
    24ce:	01 90       	ld	r0, Z+
    24d0:	f0 81       	ld	r31, Z
    24d2:	e0 2d       	mov	r30, r0
    24d4:	c8 01       	movw	r24, r16
    24d6:	09 95       	icall
    24d8:	e8 0e       	add	r14, r24
    24da:	f9 1e       	adc	r15, r25
size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    24dc:	fe 01       	movw	r30, r28
    24de:	64 91       	lpm	r22, Z
    24e0:	21 96       	adiw	r28, 0x01	; 1
    if (c == 0) break;
    24e2:	61 11       	cpse	r22, r1
    24e4:	f1 cf       	rjmp	.-30     	; 0x24c8 <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <_ZN5Print5printEPK19__FlashStringHelper+0x42>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    24e8:	e1 2c       	mov	r14, r1
    24ea:	f1 2c       	mov	r15, r1
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    24ec:	c7 01       	movw	r24, r14
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	1f 91       	pop	r17
    24f4:	0f 91       	pop	r16
    24f6:	ff 90       	pop	r15
    24f8:	ef 90       	pop	r14
    24fa:	08 95       	ret

000024fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    24fc:	dc 01       	movw	r26, r24
    24fe:	ed 91       	ld	r30, X+
    2500:	fc 91       	ld	r31, X
    2502:	01 90       	ld	r0, Z+
    2504:	f0 81       	ld	r31, Z
    2506:	e0 2d       	mov	r30, r0
    2508:	09 95       	icall
}
    250a:	08 95       	ret

0000250c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    250c:	4f 92       	push	r4
    250e:	5f 92       	push	r5
    2510:	6f 92       	push	r6
    2512:	7f 92       	push	r7
    2514:	9f 92       	push	r9
    2516:	af 92       	push	r10
    2518:	bf 92       	push	r11
    251a:	cf 92       	push	r12
    251c:	df 92       	push	r13
    251e:	ef 92       	push	r14
    2520:	ff 92       	push	r15
    2522:	0f 93       	push	r16
    2524:	1f 93       	push	r17
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	a1 97       	sbiw	r28, 0x21	; 33
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	5c 01       	movw	r10, r24
    253c:	6a 01       	movw	r12, r20
    253e:	7b 01       	movw	r14, r22
    2540:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2542:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	82 17       	cp	r24, r18
    2548:	20 f0       	brcs	.+8      	; 0x2552 <_ZN5Print11printNumberEmh+0x46>
    254a:	0f 2e       	mov	r0, r31
    254c:	fa e0       	ldi	r31, 0x0A	; 10
    254e:	9f 2e       	mov	r9, r31
    2550:	f0 2d       	mov	r31, r0
    2552:	8e 01       	movw	r16, r28
    2554:	0f 5d       	subi	r16, 0xDF	; 223
    2556:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
    2558:	49 2c       	mov	r4, r9
    255a:	51 2c       	mov	r5, r1
    255c:	61 2c       	mov	r6, r1
    255e:	71 2c       	mov	r7, r1
    2560:	c7 01       	movw	r24, r14
    2562:	b6 01       	movw	r22, r12
    2564:	a3 01       	movw	r20, r6
    2566:	92 01       	movw	r18, r4
    2568:	0e 94 ef 1b 	call	0x37de	; 0x37de <__udivmodsi4>
    char c = m - base * n;
    256c:	8c 2d       	mov	r24, r12
    256e:	92 9e       	mul	r9, r18
    2570:	80 19       	sub	r24, r0
    2572:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2574:	01 50       	subi	r16, 0x01	; 1
    2576:	11 09       	sbc	r17, r1
    2578:	8a 30       	cpi	r24, 0x0A	; 10
    257a:	10 f4       	brcc	.+4      	; 0x2580 <_ZN5Print11printNumberEmh+0x74>
    257c:	80 5d       	subi	r24, 0xD0	; 208
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <_ZN5Print11printNumberEmh+0x76>
    2580:	89 5c       	subi	r24, 0xC9	; 201
    2582:	d8 01       	movw	r26, r16
    2584:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    2586:	c2 2e       	mov	r12, r18
    2588:	d3 2e       	mov	r13, r19
    258a:	e4 2e       	mov	r14, r20
    258c:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    258e:	c1 14       	cp	r12, r1
    2590:	d1 04       	cpc	r13, r1
    2592:	e1 04       	cpc	r14, r1
    2594:	f1 04       	cpc	r15, r1
    2596:	21 f7       	brne	.-56     	; 0x2560 <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2598:	01 15       	cp	r16, r1
    259a:	11 05       	cpc	r17, r1
    259c:	91 f0       	breq	.+36     	; 0x25c2 <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
    259e:	f8 01       	movw	r30, r16
    25a0:	01 90       	ld	r0, Z+
    25a2:	00 20       	and	r0, r0
    25a4:	e9 f7       	brne	.-6      	; 0x25a0 <_ZN5Print11printNumberEmh+0x94>
    25a6:	31 97       	sbiw	r30, 0x01	; 1
    25a8:	af 01       	movw	r20, r30
    25aa:	40 1b       	sub	r20, r16
    25ac:	51 0b       	sbc	r21, r17
    25ae:	d5 01       	movw	r26, r10
    25b0:	ed 91       	ld	r30, X+
    25b2:	fc 91       	ld	r31, X
    25b4:	02 80       	ldd	r0, Z+2	; 0x02
    25b6:	f3 81       	ldd	r31, Z+3	; 0x03
    25b8:	e0 2d       	mov	r30, r0
    25ba:	b8 01       	movw	r22, r16
    25bc:	c5 01       	movw	r24, r10
    25be:	09 95       	icall
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    25c6:	a1 96       	adiw	r28, 0x21	; 33
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	1f 91       	pop	r17
    25d8:	0f 91       	pop	r16
    25da:	ff 90       	pop	r15
    25dc:	ef 90       	pop	r14
    25de:	df 90       	pop	r13
    25e0:	cf 90       	pop	r12
    25e2:	bf 90       	pop	r11
    25e4:	af 90       	pop	r10
    25e6:	9f 90       	pop	r9
    25e8:	7f 90       	pop	r7
    25ea:	6f 90       	pop	r6
    25ec:	5f 90       	pop	r5
    25ee:	4f 90       	pop	r4
    25f0:	08 95       	ret

000025f2 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    25f2:	21 15       	cp	r18, r1
    25f4:	31 05       	cpc	r19, r1
    25f6:	49 f4       	brne	.+18     	; 0x260a <_ZN5Print5printEmi+0x18>
    25f8:	dc 01       	movw	r26, r24
    25fa:	ed 91       	ld	r30, X+
    25fc:	fc 91       	ld	r31, X
    25fe:	01 90       	ld	r0, Z+
    2600:	f0 81       	ld	r31, Z
    2602:	e0 2d       	mov	r30, r0
    2604:	64 2f       	mov	r22, r20
    2606:	09 95       	icall
    2608:	08 95       	ret
  else return printNumber(n, base);
    260a:	0e 94 86 12 	call	0x250c	; 0x250c <_ZN5Print11printNumberEmh>
}
    260e:	08 95       	ret

00002610 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    2610:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    2612:	46 2f       	mov	r20, r22
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN5Print5printEmi>
}
    261e:	08 95       	ret

00002620 <_ZL6conv2dPKc>:
  hh(copy.hh),
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    2620:	fc 01       	movw	r30, r24
    uint8_t v = 0;
    if ('0' <= *p && *p <= '9')
    2622:	90 81       	ld	r25, Z
    2624:	90 53       	subi	r25, 0x30	; 48
    2626:	9a 30       	cpi	r25, 0x0A	; 10
    2628:	08 f0       	brcs	.+2      	; 0x262c <_ZL6conv2dPKc+0xc>
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    uint8_t v = 0;
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	81 81       	ldd	r24, Z+1	; 0x01
    262e:	80 53       	subi	r24, 0x30	; 48
    if ('0' <= *p && *p <= '9')
        v = *p - '0';
    return 10 * v + *++p - '0';
    2630:	99 0f       	add	r25, r25
    2632:	29 2f       	mov	r18, r25
    2634:	22 0f       	add	r18, r18
    2636:	22 0f       	add	r18, r18
    2638:	92 0f       	add	r25, r18
}
    263a:	89 0f       	add	r24, r25
    263c:	08 95       	ret

0000263e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
}

// A convenient constructor for using "the compiler's time":
// This version will save RAM by using PROGMEM to store it by using the F macro.
//   DateTime now (F(__DATE__), F(__TIME__));
DateTime::DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time) {
    263e:	cf 92       	push	r12
    2640:	df 92       	push	r13
    2642:	ef 92       	push	r14
    2644:	ff 92       	push	r15
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	2b 97       	sbiw	r28, 0x0b	; 11
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	7c 01       	movw	r14, r24
    2660:	6a 01       	movw	r12, r20
    // sample input: date = "Dec 26 2009", time = "12:34:56"
    char buff[11];
    memcpy_P(buff, date, 11);
    2662:	4b e0       	ldi	r20, 0x0B	; 11
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	ce 01       	movw	r24, r28
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	0e 94 2b 1c 	call	0x3856	; 0x3856 <memcpy_P>
    yOff = conv2d(buff + 9);
    266e:	ce 01       	movw	r24, r28
    2670:	0a 96       	adiw	r24, 0x0a	; 10
    2672:	0e 94 10 13 	call	0x2620	; 0x2620 <_ZL6conv2dPKc>
    2676:	f7 01       	movw	r30, r14
    2678:	80 83       	st	Z, r24
    // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
    switch (buff[0]) {
    267a:	e9 81       	ldd	r30, Y+1	; 0x01
    267c:	0e 2f       	mov	r16, r30
    267e:	10 e0       	ldi	r17, 0x00	; 0
    2680:	f8 01       	movw	r30, r16
    2682:	e1 54       	subi	r30, 0x41	; 65
    2684:	f1 09       	sbc	r31, r1
    2686:	e3 31       	cpi	r30, 0x13	; 19
    2688:	f1 05       	cpc	r31, r1
    268a:	b8 f5       	brcc	.+110    	; 0x26fa <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
    268c:	ec 5c       	subi	r30, 0xCC	; 204
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	0c 94 11 1c 	jmp	0x3822	; 0x3822 <__tablejump2__>
        case 'J': m = buff[1] == 'a' ? 1 : m = buff[2] == 'n' ? 6 : 7; break;
    2694:	8a 81       	ldd	r24, Y+2	; 0x02
    2696:	81 36       	cpi	r24, 0x61	; 97
    2698:	39 f0       	breq	.+14     	; 0x26a8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6a>
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	8e 36       	cpi	r24, 0x6E	; 110
    269e:	11 f0       	breq	.+4      	; 0x26a4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x66>
    26a0:	87 e0       	ldi	r24, 0x07	; 7
    26a2:	03 c0       	rjmp	.+6      	; 0x26aa <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6c>
    26a4:	86 e0       	ldi	r24, 0x06	; 6
    26a6:	01 c0       	rjmp	.+2      	; 0x26aa <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6c>
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	f7 01       	movw	r30, r14
    26ac:	81 83       	std	Z+1, r24	; 0x01
    26ae:	25 c0       	rjmp	.+74     	; 0x26fa <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'F': m = 2; break;
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	f7 01       	movw	r30, r14
    26b4:	81 83       	std	Z+1, r24	; 0x01
    26b6:	21 c0       	rjmp	.+66     	; 0x26fa <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'A': m = buff[2] == 'r' ? 4 : 8; break;
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	82 37       	cpi	r24, 0x72	; 114
    26bc:	11 f0       	breq	.+4      	; 0x26c2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    26be:	88 e0       	ldi	r24, 0x08	; 8
    26c0:	01 c0       	rjmp	.+2      	; 0x26c4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x86>
    26c2:	84 e0       	ldi	r24, 0x04	; 4
    26c4:	f7 01       	movw	r30, r14
    26c6:	81 83       	std	Z+1, r24	; 0x01
    26c8:	18 c0       	rjmp	.+48     	; 0x26fa <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'M': m = buff[2] == 'r' ? 3 : 5; break;
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	82 37       	cpi	r24, 0x72	; 114
    26ce:	11 f0       	breq	.+4      	; 0x26d4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    26d0:	85 e0       	ldi	r24, 0x05	; 5
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    26d4:	83 e0       	ldi	r24, 0x03	; 3
    26d6:	f7 01       	movw	r30, r14
    26d8:	81 83       	std	Z+1, r24	; 0x01
    26da:	0f c0       	rjmp	.+30     	; 0x26fa <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'S': m = 9; break;
    26dc:	89 e0       	ldi	r24, 0x09	; 9
    26de:	f7 01       	movw	r30, r14
    26e0:	81 83       	std	Z+1, r24	; 0x01
    26e2:	0b c0       	rjmp	.+22     	; 0x26fa <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'O': m = 10; break;
    26e4:	8a e0       	ldi	r24, 0x0A	; 10
    26e6:	f7 01       	movw	r30, r14
    26e8:	81 83       	std	Z+1, r24	; 0x01
    26ea:	07 c0       	rjmp	.+14     	; 0x26fa <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'N': m = 11; break;
    26ec:	8b e0       	ldi	r24, 0x0B	; 11
    26ee:	f7 01       	movw	r30, r14
    26f0:	81 83       	std	Z+1, r24	; 0x01
    26f2:	03 c0       	rjmp	.+6      	; 0x26fa <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'D': m = 12; break;
    26f4:	8c e0       	ldi	r24, 0x0C	; 12
    26f6:	f7 01       	movw	r30, r14
    26f8:	81 83       	std	Z+1, r24	; 0x01
    }
    d = conv2d(buff + 4);
    26fa:	ce 01       	movw	r24, r28
    26fc:	05 96       	adiw	r24, 0x05	; 5
    26fe:	0e 94 10 13 	call	0x2620	; 0x2620 <_ZL6conv2dPKc>
    2702:	f7 01       	movw	r30, r14
    2704:	82 83       	std	Z+2, r24	; 0x02
    memcpy_P(buff, time, 8);
    2706:	48 e0       	ldi	r20, 0x08	; 8
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	b6 01       	movw	r22, r12
    270c:	ce 01       	movw	r24, r28
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	0e 94 2b 1c 	call	0x3856	; 0x3856 <memcpy_P>
    hh = conv2d(buff);
    2714:	ce 01       	movw	r24, r28
    2716:	01 96       	adiw	r24, 0x01	; 1
    2718:	0e 94 10 13 	call	0x2620	; 0x2620 <_ZL6conv2dPKc>
    271c:	f7 01       	movw	r30, r14
    271e:	83 83       	std	Z+3, r24	; 0x03
    mm = conv2d(buff + 3);
    2720:	ce 01       	movw	r24, r28
    2722:	04 96       	adiw	r24, 0x04	; 4
    2724:	0e 94 10 13 	call	0x2620	; 0x2620 <_ZL6conv2dPKc>
    2728:	f7 01       	movw	r30, r14
    272a:	84 83       	std	Z+4, r24	; 0x04
    ss = conv2d(buff + 6);
    272c:	ce 01       	movw	r24, r28
    272e:	07 96       	adiw	r24, 0x07	; 7
    2730:	0e 94 10 13 	call	0x2620	; 0x2620 <_ZL6conv2dPKc>
    2734:	f7 01       	movw	r30, r14
    2736:	85 83       	std	Z+5, r24	; 0x05
}
    2738:	2b 96       	adiw	r28, 0x0b	; 11
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	ff 90       	pop	r15
    274e:	ef 90       	pop	r14
    2750:	df 90       	pop	r13
    2752:	cf 90       	pop	r12
    2754:	08 95       	ret

00002756 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    2756:	81 30       	cpi	r24, 0x01	; 1
    2758:	39 f0       	breq	.+14     	; 0x2768 <_Z12disableTimerh+0x12>
    275a:	18 f0       	brcs	.+6      	; 0x2762 <_Z12disableTimerh+0xc>
    275c:	82 30       	cpi	r24, 0x02	; 2
    275e:	51 f0       	breq	.+20     	; 0x2774 <_Z12disableTimerh+0x1e>
    2760:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    2762:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    2766:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    2768:	ef e6       	ldi	r30, 0x6F	; 111
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	8d 7f       	andi	r24, 0xFD	; 253
    2770:	80 83       	st	Z, r24
      break;
    2772:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    2774:	e0 e7       	ldi	r30, 0x70	; 112
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	8d 7f       	andi	r24, 0xFD	; 253
    277c:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    2784:	e1 eb       	ldi	r30, 0xB1	; 177
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	88 7f       	andi	r24, 0xF8	; 248
    278c:	84 60       	ori	r24, 0x04	; 4
    278e:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    2790:	10 92 b3 00 	sts	0x00B3, r1
    2794:	08 95       	ret

00002796 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    2796:	cf 93       	push	r28
    2798:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    279a:	80 91 2e 01 	lds	r24, 0x012E
    279e:	8c 13       	cpse	r24, r28
    27a0:	08 c0       	rjmp	.+16     	; 0x27b2 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    27a2:	e7 e7       	ldi	r30, 0x77	; 119
    27a4:	f2 e0       	ldi	r31, 0x02	; 2
    27a6:	e4 91       	lpm	r30, Z
    27a8:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    27aa:	9f ef       	ldi	r25, 0xFF	; 255
    27ac:	90 93 2e 01 	sts	0x012E, r25
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <_Z6noToneh+0x1e>
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    27b4:	0e 94 ab 13 	call	0x2756	; 0x2756 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    27b8:	60 e0       	ldi	r22, 0x00	; 0
    27ba:	8c 2f       	mov	r24, r28
    27bc:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
}
    27c0:	cf 91       	pop	r28
    27c2:	08 95       	ret

000027c4 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    27c4:	1f 92       	push	r1
    27c6:	0f 92       	push	r0
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	0f 92       	push	r0
    27cc:	11 24       	eor	r1, r1
    27ce:	2f 93       	push	r18
    27d0:	3f 93       	push	r19
    27d2:	4f 93       	push	r20
    27d4:	5f 93       	push	r21
    27d6:	6f 93       	push	r22
    27d8:	7f 93       	push	r23
    27da:	8f 93       	push	r24
    27dc:	9f 93       	push	r25
    27de:	af 93       	push	r26
    27e0:	bf 93       	push	r27
    27e2:	ef 93       	push	r30
    27e4:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    27e6:	80 91 38 02 	lds	r24, 0x0238
    27ea:	90 91 39 02 	lds	r25, 0x0239
    27ee:	a0 91 3a 02 	lds	r26, 0x023A
    27f2:	b0 91 3b 02 	lds	r27, 0x023B
    27f6:	89 2b       	or	r24, r25
    27f8:	8a 2b       	or	r24, r26
    27fa:	8b 2b       	or	r24, r27
    27fc:	51 f1       	breq	.+84     	; 0x2852 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    27fe:	80 91 35 02 	lds	r24, 0x0235
    2802:	e0 91 36 02 	lds	r30, 0x0236
    2806:	f0 91 37 02 	lds	r31, 0x0237
    280a:	90 81       	ld	r25, Z
    280c:	89 27       	eor	r24, r25
    280e:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    2810:	80 91 38 02 	lds	r24, 0x0238
    2814:	90 91 39 02 	lds	r25, 0x0239
    2818:	a0 91 3a 02 	lds	r26, 0x023A
    281c:	b0 91 3b 02 	lds	r27, 0x023B
    2820:	18 16       	cp	r1, r24
    2822:	19 06       	cpc	r1, r25
    2824:	1a 06       	cpc	r1, r26
    2826:	1b 06       	cpc	r1, r27
    2828:	c4 f4       	brge	.+48     	; 0x285a <__vector_7+0x96>
      timer2_toggle_count--;
    282a:	80 91 38 02 	lds	r24, 0x0238
    282e:	90 91 39 02 	lds	r25, 0x0239
    2832:	a0 91 3a 02 	lds	r26, 0x023A
    2836:	b0 91 3b 02 	lds	r27, 0x023B
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	a1 09       	sbc	r26, r1
    283e:	b1 09       	sbc	r27, r1
    2840:	80 93 38 02 	sts	0x0238, r24
    2844:	90 93 39 02 	sts	0x0239, r25
    2848:	a0 93 3a 02 	sts	0x023A, r26
    284c:	b0 93 3b 02 	sts	0x023B, r27
    2850:	04 c0       	rjmp	.+8      	; 0x285a <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    2852:	80 91 2e 01 	lds	r24, 0x012E
    2856:	0e 94 cb 13 	call	0x2796	; 0x2796 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    285a:	ff 91       	pop	r31
    285c:	ef 91       	pop	r30
    285e:	bf 91       	pop	r27
    2860:	af 91       	pop	r26
    2862:	9f 91       	pop	r25
    2864:	8f 91       	pop	r24
    2866:	7f 91       	pop	r23
    2868:	6f 91       	pop	r22
    286a:	5f 91       	pop	r21
    286c:	4f 91       	pop	r20
    286e:	3f 91       	pop	r19
    2870:	2f 91       	pop	r18
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    287c:	10 92 a9 02 	sts	0x02A9, r1
  twi_sendStop = true;		// default value
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	80 93 a7 02 	sts	0x02A7, r24
  twi_inRepStart = false;
    2886:	10 92 a6 02 	sts	0x02A6, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    288a:	61 e0       	ldi	r22, 0x01	; 1
    288c:	82 e1       	ldi	r24, 0x12	; 18
    288e:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
  digitalWrite(SCL, 1);
    2892:	61 e0       	ldi	r22, 0x01	; 1
    2894:	83 e1       	ldi	r24, 0x13	; 19
    2896:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    289a:	e9 eb       	ldi	r30, 0xB9	; 185
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	8e 7f       	andi	r24, 0xFE	; 254
    28a2:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    28a4:	80 81       	ld	r24, Z
    28a6:	8d 7f       	andi	r24, 0xFD	; 253
    28a8:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    28aa:	88 e4       	ldi	r24, 0x48	; 72
    28ac:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    28b0:	85 e4       	ldi	r24, 0x45	; 69
    28b2:	80 93 bc 00 	sts	0x00BC, r24
    28b6:	08 95       	ret

000028b8 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    28b8:	41 32       	cpi	r20, 0x21	; 33
    28ba:	08 f0       	brcs	.+2      	; 0x28be <twi_readFrom+0x6>
    28bc:	46 c0       	rjmp	.+140    	; 0x294a <twi_readFrom+0x92>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    28be:	90 91 a9 02 	lds	r25, 0x02A9
    28c2:	91 11       	cpse	r25, r1
    28c4:	fc cf       	rjmp	.-8      	; 0x28be <twi_readFrom+0x6>
    continue;
  }
  twi_state = TWI_MRX;
    28c6:	31 e0       	ldi	r19, 0x01	; 1
    28c8:	30 93 a9 02 	sts	0x02A9, r19
  twi_sendStop = sendStop;
    28cc:	20 93 a7 02 	sts	0x02A7, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    28d0:	2f ef       	ldi	r18, 0xFF	; 255
    28d2:	20 93 3c 02 	sts	0x023C, r18

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    28d6:	10 92 81 02 	sts	0x0281, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    28da:	24 0f       	add	r18, r20
    28dc:	20 93 80 02 	sts	0x0280, r18
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    28e0:	30 93 a8 02 	sts	0x02A8, r19
  twi_slarw |= address << 1;
    28e4:	20 91 a8 02 	lds	r18, 0x02A8
    28e8:	88 0f       	add	r24, r24
    28ea:	82 2b       	or	r24, r18
    28ec:	80 93 a8 02 	sts	0x02A8, r24

  if (true == twi_inRepStart) {
    28f0:	80 91 a6 02 	lds	r24, 0x02A6
    28f4:	81 30       	cpi	r24, 0x01	; 1
    28f6:	51 f4       	brne	.+20     	; 0x290c <twi_readFrom+0x54>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    28f8:	10 92 a6 02 	sts	0x02A6, r1
    TWDR = twi_slarw;
    28fc:	80 91 a8 02 	lds	r24, 0x02A8
    2900:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2904:	85 ec       	ldi	r24, 0xC5	; 197
    2906:	80 93 bc 00 	sts	0x00BC, r24
    290a:	03 c0       	rjmp	.+6      	; 0x2912 <twi_readFrom+0x5a>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    290c:	85 ee       	ldi	r24, 0xE5	; 229
    290e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    2912:	80 91 a9 02 	lds	r24, 0x02A9
    2916:	81 30       	cpi	r24, 0x01	; 1
    2918:	e1 f3       	breq	.-8      	; 0x2912 <twi_readFrom+0x5a>
    continue;
  }

  if (twi_masterBufferIndex < length)
    291a:	80 91 81 02 	lds	r24, 0x0281
    291e:	84 17       	cp	r24, r20
    2920:	10 f4       	brcc	.+4      	; 0x2926 <twi_readFrom+0x6e>
    length = twi_masterBufferIndex;
    2922:	40 91 81 02 	lds	r20, 0x0281

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2926:	44 23       	and	r20, r20
    2928:	89 f0       	breq	.+34     	; 0x294c <twi_readFrom+0x94>
    292a:	a2 e8       	ldi	r26, 0x82	; 130
    292c:	b2 e0       	ldi	r27, 0x02	; 2
    292e:	fb 01       	movw	r30, r22
    2930:	8f ef       	ldi	r24, 0xFF	; 255
    2932:	84 0f       	add	r24, r20
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	01 96       	adiw	r24, 0x01	; 1
    2938:	68 0f       	add	r22, r24
    293a:	79 1f       	adc	r23, r25
    data[i] = twi_masterBuffer[i];
    293c:	8d 91       	ld	r24, X+
    293e:	81 93       	st	Z+, r24

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2940:	e6 17       	cp	r30, r22
    2942:	f7 07       	cpc	r31, r23
    2944:	d9 f7       	brne	.-10     	; 0x293c <twi_readFrom+0x84>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    2946:	94 2f       	mov	r25, r20
    2948:	01 c0       	rjmp	.+2      	; 0x294c <twi_readFrom+0x94>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
    294a:	90 e0       	ldi	r25, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    294c:	89 2f       	mov	r24, r25
    294e:	08 95       	ret

00002950 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    2950:	0f 93       	push	r16
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2952:	41 32       	cpi	r20, 0x21	; 33
    2954:	08 f0       	brcs	.+2      	; 0x2958 <twi_writeTo+0x8>
    2956:	51 c0       	rjmp	.+162    	; 0x29fa <twi_writeTo+0xaa>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    2958:	30 91 a9 02 	lds	r19, 0x02A9
    295c:	31 11       	cpse	r19, r1
    295e:	fc cf       	rjmp	.-8      	; 0x2958 <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
    2960:	92 e0       	ldi	r25, 0x02	; 2
    2962:	90 93 a9 02 	sts	0x02A9, r25
  twi_sendStop = sendStop;
    2966:	00 93 a7 02 	sts	0x02A7, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    296a:	9f ef       	ldi	r25, 0xFF	; 255
    296c:	90 93 3c 02 	sts	0x023C, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    2970:	10 92 81 02 	sts	0x0281, r1
  twi_masterBufferLength = length;
    2974:	40 93 80 02 	sts	0x0280, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2978:	44 23       	and	r20, r20
    297a:	71 f0       	breq	.+28     	; 0x2998 <twi_writeTo+0x48>
    297c:	fb 01       	movw	r30, r22
    297e:	a2 e8       	ldi	r26, 0x82	; 130
    2980:	b2 e0       	ldi	r27, 0x02	; 2
    2982:	41 50       	subi	r20, 0x01	; 1
    2984:	50 e0       	ldi	r21, 0x00	; 0
    2986:	4f 5f       	subi	r20, 0xFF	; 255
    2988:	5f 4f       	sbci	r21, 0xFF	; 255
    298a:	64 0f       	add	r22, r20
    298c:	75 1f       	adc	r23, r21
    twi_masterBuffer[i] = data[i];
    298e:	91 91       	ld	r25, Z+
    2990:	9d 93       	st	X+, r25
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2992:	e6 17       	cp	r30, r22
    2994:	f7 07       	cpc	r31, r23
    2996:	d9 f7       	brne	.-10     	; 0x298e <twi_writeTo+0x3e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    2998:	10 92 a8 02 	sts	0x02A8, r1
  twi_slarw |= address << 1;
    299c:	90 91 a8 02 	lds	r25, 0x02A8
    29a0:	88 0f       	add	r24, r24
    29a2:	89 2b       	or	r24, r25
    29a4:	80 93 a8 02 	sts	0x02A8, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    29a8:	80 91 a6 02 	lds	r24, 0x02A6
    29ac:	81 30       	cpi	r24, 0x01	; 1
    29ae:	51 f4       	brne	.+20     	; 0x29c4 <twi_writeTo+0x74>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    29b0:	10 92 a6 02 	sts	0x02A6, r1
    TWDR = twi_slarw;				
    29b4:	80 91 a8 02 	lds	r24, 0x02A8
    29b8:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    29bc:	85 ec       	ldi	r24, 0xC5	; 197
    29be:	80 93 bc 00 	sts	0x00BC, r24
    29c2:	03 c0       	rjmp	.+6      	; 0x29ca <twi_writeTo+0x7a>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    29c4:	85 ee       	ldi	r24, 0xE5	; 229
    29c6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    29ca:	22 23       	and	r18, r18
    29cc:	41 f0       	breq	.+16     	; 0x29de <twi_writeTo+0x8e>
    29ce:	80 91 a9 02 	lds	r24, 0x02A9
    29d2:	82 30       	cpi	r24, 0x02	; 2
    29d4:	21 f4       	brne	.+8      	; 0x29de <twi_writeTo+0x8e>
    29d6:	80 91 a9 02 	lds	r24, 0x02A9
    29da:	82 30       	cpi	r24, 0x02	; 2
    29dc:	e1 f3       	breq	.-8      	; 0x29d6 <twi_writeTo+0x86>
    continue;
  }
  
  if (twi_error == 0xFF)
    29de:	80 91 3c 02 	lds	r24, 0x023C
    29e2:	8f 3f       	cpi	r24, 0xFF	; 255
    29e4:	79 f0       	breq	.+30     	; 0x2a04 <twi_writeTo+0xb4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    29e6:	80 91 3c 02 	lds	r24, 0x023C
    29ea:	80 32       	cpi	r24, 0x20	; 32
    29ec:	41 f0       	breq	.+16     	; 0x29fe <twi_writeTo+0xae>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    29ee:	80 91 3c 02 	lds	r24, 0x023C
    29f2:	80 33       	cpi	r24, 0x30	; 48
    29f4:	31 f0       	breq	.+12     	; 0x2a02 <twi_writeTo+0xb2>
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
    29f6:	34 e0       	ldi	r19, 0x04	; 4
    29f8:	05 c0       	rjmp	.+10     	; 0x2a04 <twi_writeTo+0xb4>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    29fa:	31 e0       	ldi	r19, 0x01	; 1
    29fc:	03 c0       	rjmp	.+6      	; 0x2a04 <twi_writeTo+0xb4>
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
    29fe:	32 e0       	ldi	r19, 0x02	; 2
    2a00:	01 c0       	rjmp	.+2      	; 0x2a04 <twi_writeTo+0xb4>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
    2a02:	33 e0       	ldi	r19, 0x03	; 3
  else
    return 4;	// other twi error
}
    2a04:	83 2f       	mov	r24, r19
    2a06:	0f 91       	pop	r16
    2a08:	08 95       	ret

00002a0a <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2a0a:	61 32       	cpi	r22, 0x21	; 33
    2a0c:	c8 f4       	brcc	.+50     	; 0x2a40 <twi_transmit+0x36>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    2a0e:	20 91 a9 02 	lds	r18, 0x02A9
    2a12:	24 30       	cpi	r18, 0x04	; 4
    2a14:	b9 f4       	brne	.+46     	; 0x2a44 <twi_transmit+0x3a>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    2a16:	60 93 5e 02 	sts	0x025E, r22
  for(i = 0; i < length; ++i){
    2a1a:	66 23       	and	r22, r22
    2a1c:	a9 f0       	breq	.+42     	; 0x2a48 <twi_transmit+0x3e>
    2a1e:	fc 01       	movw	r30, r24
    2a20:	a0 e6       	ldi	r26, 0x60	; 96
    2a22:	b2 e0       	ldi	r27, 0x02	; 2
    2a24:	61 50       	subi	r22, 0x01	; 1
    2a26:	26 2f       	mov	r18, r22
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	2f 5f       	subi	r18, 0xFF	; 255
    2a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2e:	28 0f       	add	r18, r24
    2a30:	39 1f       	adc	r19, r25
    twi_txBuffer[i] = data[i];
    2a32:	91 91       	ld	r25, Z+
    2a34:	9d 93       	st	X+, r25
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    2a36:	e2 17       	cp	r30, r18
    2a38:	f3 07       	cpc	r31, r19
    2a3a:	d9 f7       	brne	.-10     	; 0x2a32 <twi_transmit+0x28>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	08 95       	ret
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    2a48:	80 e0       	ldi	r24, 0x00	; 0
}
    2a4a:	08 95       	ret

00002a4c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2a4c:	85 ed       	ldi	r24, 0xD5	; 213
    2a4e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2a52:	ec eb       	ldi	r30, 0xBC	; 188
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	84 fd       	sbrc	r24, 4
    2a5a:	fd cf       	rjmp	.-6      	; 0x2a56 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2a5c:	10 92 a9 02 	sts	0x02A9, r1
    2a60:	08 95       	ret

00002a62 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2a62:	85 ec       	ldi	r24, 0xC5	; 197
    2a64:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    2a68:	10 92 a9 02 	sts	0x02A9, r1
    2a6c:	08 95       	ret

00002a6e <__vector_24>:
}

ISR(TWI_vect)
{
    2a6e:	1f 92       	push	r1
    2a70:	0f 92       	push	r0
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	0f 92       	push	r0
    2a76:	11 24       	eor	r1, r1
    2a78:	2f 93       	push	r18
    2a7a:	3f 93       	push	r19
    2a7c:	4f 93       	push	r20
    2a7e:	5f 93       	push	r21
    2a80:	6f 93       	push	r22
    2a82:	7f 93       	push	r23
    2a84:	8f 93       	push	r24
    2a86:	9f 93       	push	r25
    2a88:	af 93       	push	r26
    2a8a:	bf 93       	push	r27
    2a8c:	ef 93       	push	r30
    2a8e:	ff 93       	push	r31
  switch(TW_STATUS){
    2a90:	80 91 b9 00 	lds	r24, 0x00B9
    2a94:	e8 2f       	mov	r30, r24
    2a96:	e8 7f       	andi	r30, 0xF8	; 248
    2a98:	8e 2f       	mov	r24, r30
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	89 3c       	cpi	r24, 0xC9	; 201
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	08 f0       	brcs	.+2      	; 0x2aa4 <__vector_24+0x36>
    2aa2:	f7 c0       	rjmp	.+494    	; 0x2c92 <__vector_24+0x224>
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	e9 5b       	subi	r30, 0xB9	; 185
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	0c 94 11 1c 	jmp	0x3822	; 0x3822 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2aae:	80 91 a8 02 	lds	r24, 0x02A8
    2ab2:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2ab6:	85 ec       	ldi	r24, 0xC5	; 197
    2ab8:	80 93 bc 00 	sts	0x00BC, r24
    2abc:	ea c0       	rjmp	.+468    	; 0x2c92 <__vector_24+0x224>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2abe:	90 91 81 02 	lds	r25, 0x0281
    2ac2:	80 91 80 02 	lds	r24, 0x0280
    2ac6:	98 17       	cp	r25, r24
    2ac8:	80 f4       	brcc	.+32     	; 0x2aea <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2aca:	e0 91 81 02 	lds	r30, 0x0281
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	8e 0f       	add	r24, r30
    2ad2:	80 93 81 02 	sts	0x0281, r24
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	ee 57       	subi	r30, 0x7E	; 126
    2ada:	fd 4f       	sbci	r31, 0xFD	; 253
    2adc:	80 81       	ld	r24, Z
    2ade:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2ae2:	85 ec       	ldi	r24, 0xC5	; 197
    2ae4:	80 93 bc 00 	sts	0x00BC, r24
    2ae8:	d4 c0       	rjmp	.+424    	; 0x2c92 <__vector_24+0x224>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2aea:	80 91 a7 02 	lds	r24, 0x02A7
    2aee:	88 23       	and	r24, r24
    2af0:	19 f0       	breq	.+6      	; 0x2af8 <__vector_24+0x8a>
          twi_stop();
    2af2:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <twi_stop>
    2af6:	cd c0       	rjmp	.+410    	; 0x2c92 <__vector_24+0x224>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	80 93 a6 02 	sts	0x02A6, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2afe:	84 ea       	ldi	r24, 0xA4	; 164
    2b00:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    2b04:	10 92 a9 02 	sts	0x02A9, r1
    2b08:	c4 c0       	rjmp	.+392    	; 0x2c92 <__vector_24+0x224>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    2b0a:	80 e2       	ldi	r24, 0x20	; 32
    2b0c:	80 93 3c 02 	sts	0x023C, r24
      twi_stop();
    2b10:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <twi_stop>
      break;
    2b14:	be c0       	rjmp	.+380    	; 0x2c92 <__vector_24+0x224>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2b16:	80 e3       	ldi	r24, 0x30	; 48
    2b18:	80 93 3c 02 	sts	0x023C, r24
      twi_stop();
    2b1c:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <twi_stop>
      break;
    2b20:	b8 c0       	rjmp	.+368    	; 0x2c92 <__vector_24+0x224>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2b22:	88 e3       	ldi	r24, 0x38	; 56
    2b24:	80 93 3c 02 	sts	0x023C, r24
      twi_releaseBus();
    2b28:	0e 94 31 15 	call	0x2a62	; 0x2a62 <twi_releaseBus>
      break;
    2b2c:	b2 c0       	rjmp	.+356    	; 0x2c92 <__vector_24+0x224>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2b2e:	e0 91 81 02 	lds	r30, 0x0281
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	8e 0f       	add	r24, r30
    2b36:	80 93 81 02 	sts	0x0281, r24
    2b3a:	80 91 bb 00 	lds	r24, 0x00BB
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	ee 57       	subi	r30, 0x7E	; 126
    2b42:	fd 4f       	sbci	r31, 0xFD	; 253
    2b44:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2b46:	90 91 81 02 	lds	r25, 0x0281
    2b4a:	80 91 80 02 	lds	r24, 0x0280
    2b4e:	98 17       	cp	r25, r24
    2b50:	20 f4       	brcc	.+8      	; 0x2b5a <__vector_24+0xec>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2b52:	85 ec       	ldi	r24, 0xC5	; 197
    2b54:	80 93 bc 00 	sts	0x00BC, r24
    2b58:	9c c0       	rjmp	.+312    	; 0x2c92 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2b5a:	85 e8       	ldi	r24, 0x85	; 133
    2b5c:	80 93 bc 00 	sts	0x00BC, r24
    2b60:	98 c0       	rjmp	.+304    	; 0x2c92 <__vector_24+0x224>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2b62:	e0 91 81 02 	lds	r30, 0x0281
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	8e 0f       	add	r24, r30
    2b6a:	80 93 81 02 	sts	0x0281, r24
    2b6e:	80 91 bb 00 	lds	r24, 0x00BB
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	ee 57       	subi	r30, 0x7E	; 126
    2b76:	fd 4f       	sbci	r31, 0xFD	; 253
    2b78:	80 83       	st	Z, r24
	if (twi_sendStop)
    2b7a:	80 91 a7 02 	lds	r24, 0x02A7
    2b7e:	88 23       	and	r24, r24
    2b80:	19 f0       	breq	.+6      	; 0x2b88 <__vector_24+0x11a>
          twi_stop();
    2b82:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <twi_stop>
    2b86:	85 c0       	rjmp	.+266    	; 0x2c92 <__vector_24+0x224>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	80 93 a6 02 	sts	0x02A6, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2b8e:	84 ea       	ldi	r24, 0xA4	; 164
    2b90:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    2b94:	10 92 a9 02 	sts	0x02A9, r1
    2b98:	7c c0       	rjmp	.+248    	; 0x2c92 <__vector_24+0x224>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2b9a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <twi_stop>
      break;
    2b9e:	79 c0       	rjmp	.+242    	; 0x2c92 <__vector_24+0x224>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2ba0:	83 e0       	ldi	r24, 0x03	; 3
    2ba2:	80 93 a9 02 	sts	0x02A9, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2ba6:	10 92 3d 02 	sts	0x023D, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2baa:	85 ec       	ldi	r24, 0xC5	; 197
    2bac:	80 93 bc 00 	sts	0x00BC, r24
    2bb0:	70 c0       	rjmp	.+224    	; 0x2c92 <__vector_24+0x224>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2bb2:	80 91 3d 02 	lds	r24, 0x023D
    2bb6:	80 32       	cpi	r24, 0x20	; 32
    2bb8:	80 f4       	brcc	.+32     	; 0x2bda <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2bba:	e0 91 3d 02 	lds	r30, 0x023D
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	8e 0f       	add	r24, r30
    2bc2:	80 93 3d 02 	sts	0x023D, r24
    2bc6:	80 91 bb 00 	lds	r24, 0x00BB
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	e2 5c       	subi	r30, 0xC2	; 194
    2bce:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd0:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2bd2:	85 ec       	ldi	r24, 0xC5	; 197
    2bd4:	80 93 bc 00 	sts	0x00BC, r24
    2bd8:	5c c0       	rjmp	.+184    	; 0x2c92 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2bda:	85 e8       	ldi	r24, 0x85	; 133
    2bdc:	80 93 bc 00 	sts	0x00BC, r24
    2be0:	58 c0       	rjmp	.+176    	; 0x2c92 <__vector_24+0x224>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2be2:	80 91 3d 02 	lds	r24, 0x023D
    2be6:	80 32       	cpi	r24, 0x20	; 32
    2be8:	30 f4       	brcc	.+12     	; 0x2bf6 <__vector_24+0x188>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2bea:	e0 91 3d 02 	lds	r30, 0x023D
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	e2 5c       	subi	r30, 0xC2	; 194
    2bf2:	fd 4f       	sbci	r31, 0xFD	; 253
    2bf4:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    2bf6:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2bfa:	60 91 3d 02 	lds	r22, 0x023D
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	e0 91 a2 02 	lds	r30, 0x02A2
    2c04:	f0 91 a3 02 	lds	r31, 0x02A3
    2c08:	8e e3       	ldi	r24, 0x3E	; 62
    2c0a:	92 e0       	ldi	r25, 0x02	; 2
    2c0c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2c0e:	10 92 3d 02 	sts	0x023D, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2c12:	0e 94 31 15 	call	0x2a62	; 0x2a62 <twi_releaseBus>
      break;
    2c16:	3d c0       	rjmp	.+122    	; 0x2c92 <__vector_24+0x224>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2c18:	85 e8       	ldi	r24, 0x85	; 133
    2c1a:	80 93 bc 00 	sts	0x00BC, r24
    2c1e:	39 c0       	rjmp	.+114    	; 0x2c92 <__vector_24+0x224>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2c20:	84 e0       	ldi	r24, 0x04	; 4
    2c22:	80 93 a9 02 	sts	0x02A9, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2c26:	10 92 5f 02 	sts	0x025F, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2c2a:	10 92 5e 02 	sts	0x025E, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2c2e:	e0 91 a4 02 	lds	r30, 0x02A4
    2c32:	f0 91 a5 02 	lds	r31, 0x02A5
    2c36:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2c38:	80 91 5e 02 	lds	r24, 0x025E
    2c3c:	81 11       	cpse	r24, r1
    2c3e:	05 c0       	rjmp	.+10     	; 0x2c4a <__vector_24+0x1dc>
        twi_txBufferLength = 1;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	80 93 5e 02 	sts	0x025E, r24
        twi_txBuffer[0] = 0x00;
    2c46:	10 92 60 02 	sts	0x0260, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2c4a:	e0 91 5f 02 	lds	r30, 0x025F
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	8e 0f       	add	r24, r30
    2c52:	80 93 5f 02 	sts	0x025F, r24
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	e0 5a       	subi	r30, 0xA0	; 160
    2c5a:	fd 4f       	sbci	r31, 0xFD	; 253
    2c5c:	80 81       	ld	r24, Z
    2c5e:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2c62:	90 91 5f 02 	lds	r25, 0x025F
    2c66:	80 91 5e 02 	lds	r24, 0x025E
    2c6a:	98 17       	cp	r25, r24
    2c6c:	20 f4       	brcc	.+8      	; 0x2c76 <__vector_24+0x208>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c6e:	85 ec       	ldi	r24, 0xC5	; 197
    2c70:	80 93 bc 00 	sts	0x00BC, r24
    2c74:	0e c0       	rjmp	.+28     	; 0x2c92 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2c76:	85 e8       	ldi	r24, 0x85	; 133
    2c78:	80 93 bc 00 	sts	0x00BC, r24
    2c7c:	0a c0       	rjmp	.+20     	; 0x2c92 <__vector_24+0x224>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c7e:	85 ec       	ldi	r24, 0xC5	; 197
    2c80:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2c84:	10 92 a9 02 	sts	0x02A9, r1
      break;
    2c88:	04 c0       	rjmp	.+8      	; 0x2c92 <__vector_24+0x224>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2c8a:	10 92 3c 02 	sts	0x023C, r1
      twi_stop();
    2c8e:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <twi_stop>
      break;
  }
}
    2c92:	ff 91       	pop	r31
    2c94:	ef 91       	pop	r30
    2c96:	bf 91       	pop	r27
    2c98:	af 91       	pop	r26
    2c9a:	9f 91       	pop	r25
    2c9c:	8f 91       	pop	r24
    2c9e:	7f 91       	pop	r23
    2ca0:	6f 91       	pop	r22
    2ca2:	5f 91       	pop	r21
    2ca4:	4f 91       	pop	r20
    2ca6:	3f 91       	pop	r19
    2ca8:	2f 91       	pop	r18
    2caa:	0f 90       	pop	r0
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	0f 90       	pop	r0
    2cb0:	1f 90       	pop	r1
    2cb2:	18 95       	reti

00002cb4 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    2cb4:	82 30       	cpi	r24, 0x02	; 2
    2cb6:	00 f5       	brcc	.+64     	; 0x2cf8 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    2cb8:	e8 2f       	mov	r30, r24
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	ee 0f       	add	r30, r30
    2cbe:	ff 1f       	adc	r31, r31
    2cc0:	e6 55       	subi	r30, 0x56	; 86
    2cc2:	fd 4f       	sbci	r31, 0xFD	; 253
    2cc4:	71 83       	std	Z+1, r23	; 0x01
    2cc6:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    2cc8:	88 23       	and	r24, r24
    2cca:	19 f0       	breq	.+6      	; 0x2cd2 <attachInterrupt+0x1e>
    2ccc:	81 30       	cpi	r24, 0x01	; 1
    2cce:	49 f0       	breq	.+18     	; 0x2ce2 <attachInterrupt+0x2e>
    2cd0:	08 95       	ret
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    2cd2:	e9 e6       	ldi	r30, 0x69	; 105
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	8c 7f       	andi	r24, 0xFC	; 252
    2cda:	48 2b       	or	r20, r24
    2cdc:	40 83       	st	Z, r20
      EIMSK |= (1 << INT0);
    2cde:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    2ce0:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    2ce2:	e9 e6       	ldi	r30, 0x69	; 105
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	44 0f       	add	r20, r20
    2cea:	55 1f       	adc	r21, r21
    2cec:	44 0f       	add	r20, r20
    2cee:	55 1f       	adc	r21, r21
    2cf0:	83 7f       	andi	r24, 0xF3	; 243
    2cf2:	48 2b       	or	r20, r24
    2cf4:	40 83       	st	Z, r20
      EIMSK |= (1 << INT1);
    2cf6:	e9 9a       	sbi	0x1d, 1	; 29
    2cf8:	08 95       	ret

00002cfa <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    2cfa:	82 30       	cpi	r24, 0x02	; 2
    2cfc:	80 f4       	brcc	.+32     	; 0x2d1e <detachInterrupt+0x24>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    2cfe:	88 23       	and	r24, r24
    2d00:	19 f0       	breq	.+6      	; 0x2d08 <detachInterrupt+0xe>
    2d02:	81 30       	cpi	r24, 0x01	; 1
    2d04:	19 f0       	breq	.+6      	; 0x2d0c <detachInterrupt+0x12>
    2d06:	03 c0       	rjmp	.+6      	; 0x2d0e <detachInterrupt+0x14>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    2d08:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    2d0a:	01 c0       	rjmp	.+2      	; 0x2d0e <detachInterrupt+0x14>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    2d0c:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    2d0e:	e8 2f       	mov	r30, r24
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	ee 0f       	add	r30, r30
    2d14:	ff 1f       	adc	r31, r31
    2d16:	e6 55       	subi	r30, 0x56	; 86
    2d18:	fd 4f       	sbci	r31, 0xFD	; 253
    2d1a:	11 82       	std	Z+1, r1	; 0x01
    2d1c:	10 82       	st	Z, r1
    2d1e:	08 95       	ret

00002d20 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    2d20:	1f 92       	push	r1
    2d22:	0f 92       	push	r0
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	0f 92       	push	r0
    2d28:	11 24       	eor	r1, r1
    2d2a:	2f 93       	push	r18
    2d2c:	3f 93       	push	r19
    2d2e:	4f 93       	push	r20
    2d30:	5f 93       	push	r21
    2d32:	6f 93       	push	r22
    2d34:	7f 93       	push	r23
    2d36:	8f 93       	push	r24
    2d38:	9f 93       	push	r25
    2d3a:	af 93       	push	r26
    2d3c:	bf 93       	push	r27
    2d3e:	ef 93       	push	r30
    2d40:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    2d42:	80 91 aa 02 	lds	r24, 0x02AA
    2d46:	90 91 ab 02 	lds	r25, 0x02AB
    2d4a:	89 2b       	or	r24, r25
    2d4c:	29 f0       	breq	.+10     	; 0x2d58 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    2d4e:	e0 91 aa 02 	lds	r30, 0x02AA
    2d52:	f0 91 ab 02 	lds	r31, 0x02AB
    2d56:	09 95       	icall
}
    2d58:	ff 91       	pop	r31
    2d5a:	ef 91       	pop	r30
    2d5c:	bf 91       	pop	r27
    2d5e:	af 91       	pop	r26
    2d60:	9f 91       	pop	r25
    2d62:	8f 91       	pop	r24
    2d64:	7f 91       	pop	r23
    2d66:	6f 91       	pop	r22
    2d68:	5f 91       	pop	r21
    2d6a:	4f 91       	pop	r20
    2d6c:	3f 91       	pop	r19
    2d6e:	2f 91       	pop	r18
    2d70:	0f 90       	pop	r0
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	0f 90       	pop	r0
    2d76:	1f 90       	pop	r1
    2d78:	18 95       	reti

00002d7a <__vector_2>:

ISR(INT1_vect) {
    2d7a:	1f 92       	push	r1
    2d7c:	0f 92       	push	r0
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	0f 92       	push	r0
    2d82:	11 24       	eor	r1, r1
    2d84:	2f 93       	push	r18
    2d86:	3f 93       	push	r19
    2d88:	4f 93       	push	r20
    2d8a:	5f 93       	push	r21
    2d8c:	6f 93       	push	r22
    2d8e:	7f 93       	push	r23
    2d90:	8f 93       	push	r24
    2d92:	9f 93       	push	r25
    2d94:	af 93       	push	r26
    2d96:	bf 93       	push	r27
    2d98:	ef 93       	push	r30
    2d9a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    2d9c:	80 91 ac 02 	lds	r24, 0x02AC
    2da0:	90 91 ad 02 	lds	r25, 0x02AD
    2da4:	89 2b       	or	r24, r25
    2da6:	29 f0       	breq	.+10     	; 0x2db2 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    2da8:	e0 91 ac 02 	lds	r30, 0x02AC
    2dac:	f0 91 ad 02 	lds	r31, 0x02AD
    2db0:	09 95       	icall
}
    2db2:	ff 91       	pop	r31
    2db4:	ef 91       	pop	r30
    2db6:	bf 91       	pop	r27
    2db8:	af 91       	pop	r26
    2dba:	9f 91       	pop	r25
    2dbc:	8f 91       	pop	r24
    2dbe:	7f 91       	pop	r23
    2dc0:	6f 91       	pop	r22
    2dc2:	5f 91       	pop	r21
    2dc4:	4f 91       	pop	r20
    2dc6:	3f 91       	pop	r19
    2dc8:	2f 91       	pop	r18
    2dca:	0f 90       	pop	r0
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	0f 90       	pop	r0
    2dd0:	1f 90       	pop	r1
    2dd2:	18 95       	reti

00002dd4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    2dd4:	80 91 de 02 	lds	r24, 0x02DE
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	20 91 df 02 	lds	r18, 0x02DF
}
    2dde:	82 1b       	sub	r24, r18
    2de0:	91 09       	sbc	r25, r1
    2de2:	08 95       	ret

00002de4 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2de4:	90 91 df 02 	lds	r25, 0x02DF
    2de8:	80 91 de 02 	lds	r24, 0x02DE
    2dec:	98 17       	cp	r25, r24
    2dee:	50 f4       	brcc	.+20     	; 0x2e04 <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    2df0:	e9 2f       	mov	r30, r25
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	e0 52       	subi	r30, 0x20	; 32
    2df6:	fd 4f       	sbci	r31, 0xFD	; 253
    2df8:	20 81       	ld	r18, Z
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    2dfc:	9f 5f       	subi	r25, 0xFF	; 255
    2dfe:	90 93 df 02 	sts	0x02DF, r25
    2e02:	02 c0       	rjmp	.+4      	; 0x2e08 <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    2e04:	2f ef       	ldi	r18, 0xFF	; 255
    2e06:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    2e08:	c9 01       	movw	r24, r18
    2e0a:	08 95       	ret

00002e0c <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    2e0c:	e0 91 df 02 	lds	r30, 0x02DF
    2e10:	80 91 de 02 	lds	r24, 0x02DE
    2e14:	e8 17       	cp	r30, r24
    2e16:	30 f4       	brcc	.+12     	; 0x2e24 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	e0 52       	subi	r30, 0x20	; 32
    2e1c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e1e:	80 81       	ld	r24, Z
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    2e24:	8f ef       	ldi	r24, 0xFF	; 255
    2e26:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    2e28:	08 95       	ret

00002e2a <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    2e2a:	08 95       	ret

00002e2c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2e2c:	cf 92       	push	r12
    2e2e:	df 92       	push	r13
    2e30:	ef 92       	push	r14
    2e32:	ff 92       	push	r15
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	8c 01       	movw	r16, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	6a 01       	movw	r12, r20
  if(transmitting){
    2e42:	20 91 ba 02 	lds	r18, 0x02BA
    2e46:	22 23       	and	r18, r18
    2e48:	a1 f0       	breq	.+40     	; 0x2e72 <_ZN7TwoWire5writeEPKhj+0x46>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2e4a:	41 15       	cp	r20, r1
    2e4c:	51 05       	cpc	r21, r1
    2e4e:	a1 f0       	breq	.+40     	; 0x2e78 <_ZN7TwoWire5writeEPKhj+0x4c>
    2e50:	eb 01       	movw	r28, r22
    2e52:	7b 01       	movw	r14, r22
    2e54:	e4 0e       	add	r14, r20
    2e56:	f5 1e       	adc	r15, r21
      write(data[i]);
    2e58:	69 91       	ld	r22, Y+
    2e5a:	d8 01       	movw	r26, r16
    2e5c:	ed 91       	ld	r30, X+
    2e5e:	fc 91       	ld	r31, X
    2e60:	01 90       	ld	r0, Z+
    2e62:	f0 81       	ld	r31, Z
    2e64:	e0 2d       	mov	r30, r0
    2e66:	c8 01       	movw	r24, r16
    2e68:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2e6a:	ce 15       	cp	r28, r14
    2e6c:	df 05       	cpc	r29, r15
    2e6e:	a1 f7       	brne	.-24     	; 0x2e58 <_ZN7TwoWire5writeEPKhj+0x2c>
    2e70:	03 c0       	rjmp	.+6      	; 0x2e78 <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2e72:	64 2f       	mov	r22, r20
    2e74:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <twi_transmit>
  }
  return quantity;
}
    2e78:	c6 01       	movw	r24, r12
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	1f 91       	pop	r17
    2e80:	0f 91       	pop	r16
    2e82:	ff 90       	pop	r15
    2e84:	ef 90       	pop	r14
    2e86:	df 90       	pop	r13
    2e88:	cf 90       	pop	r12
    2e8a:	08 95       	ret

00002e8c <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	1f 92       	push	r1
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	fc 01       	movw	r30, r24
    2e98:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    2e9a:	90 91 ba 02 	lds	r25, 0x02BA
    2e9e:	99 23       	and	r25, r25
    2ea0:	d9 f0       	breq	.+54     	; 0x2ed8 <_ZN7TwoWire5writeEh+0x4c>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2ea2:	90 91 bb 02 	lds	r25, 0x02BB
    2ea6:	90 32       	cpi	r25, 0x20	; 32
    2ea8:	38 f0       	brcs	.+14     	; 0x2eb8 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	93 83       	std	Z+3, r25	; 0x03
    2eb0:	82 83       	std	Z+2, r24	; 0x02
      setWriteError();
      return 0;
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	17 c0       	rjmp	.+46     	; 0x2ee6 <_ZN7TwoWire5writeEh+0x5a>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2eb8:	80 91 bc 02 	lds	r24, 0x02BC
    2ebc:	e8 2f       	mov	r30, r24
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	e3 54       	subi	r30, 0x43	; 67
    2ec2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ec4:	99 81       	ldd	r25, Y+1	; 0x01
    2ec6:	90 83       	st	Z, r25
    ++txBufferIndex;
    2ec8:	8f 5f       	subi	r24, 0xFF	; 255
    2eca:	80 93 bc 02 	sts	0x02BC, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    2ece:	80 93 bb 02 	sts	0x02BB, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	07 c0       	rjmp	.+14     	; 0x2ee6 <_ZN7TwoWire5writeEh+0x5a>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2ed8:	61 e0       	ldi	r22, 0x01	; 1
    2eda:	ce 01       	movw	r24, r28
    2edc:	01 96       	adiw	r24, 0x01	; 1
    2ede:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <twi_transmit>
  }
  return 1;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
}
    2ee6:	0f 90       	pop	r0
    2ee8:	df 91       	pop	r29
    2eea:	cf 91       	pop	r28
    2eec:	08 95       	ret

00002eee <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2eee:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    2ef0:	13 82       	std	Z+3, r1	; 0x03
    2ef2:	12 82       	std	Z+2, r1	; 0x02
    2ef4:	88 ee       	ldi	r24, 0xE8	; 232
    2ef6:	93 e0       	ldi	r25, 0x03	; 3
    2ef8:	a0 e0       	ldi	r26, 0x00	; 0
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	84 83       	std	Z+4, r24	; 0x04
    2efe:	95 83       	std	Z+5, r25	; 0x05
    2f00:	a6 83       	std	Z+6, r26	; 0x06
    2f02:	b7 83       	std	Z+7, r27	; 0x07
    2f04:	8a e4       	ldi	r24, 0x4A	; 74
    2f06:	91 e0       	ldi	r25, 0x01	; 1
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
    2f0c:	08 95       	ret

00002f0e <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    2f0e:	10 92 df 02 	sts	0x02DF, r1
  rxBufferLength = 0;
    2f12:	10 92 de 02 	sts	0x02DE, r1

  txBufferIndex = 0;
    2f16:	10 92 bc 02 	sts	0x02BC, r1
  txBufferLength = 0;
    2f1a:	10 92 bb 02 	sts	0x02BB, r1

  twi_init();
    2f1e:	0e 94 3e 14 	call	0x287c	; 0x287c <twi_init>
    2f22:	08 95       	ret

00002f24 <_ZN7TwoWire11requestFromEhhh>:
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
    2f24:	86 2f       	mov	r24, r22
    2f26:	41 32       	cpi	r20, 0x21	; 33
    2f28:	08 f0       	brcs	.+2      	; 0x2f2c <_ZN7TwoWire11requestFromEhhh+0x8>
    2f2a:	40 e2       	ldi	r20, 0x20	; 32
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    2f2c:	60 ee       	ldi	r22, 0xE0	; 224
    2f2e:	72 e0       	ldi	r23, 0x02	; 2
    2f30:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2f34:	10 92 df 02 	sts	0x02DF, r1
  rxBufferLength = read;
    2f38:	80 93 de 02 	sts	0x02DE, r24

  return read;
}
    2f3c:	08 95       	ret

00002f3e <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2f3e:	21 e0       	ldi	r18, 0x01	; 1
    2f40:	0e 94 92 17 	call	0x2f24	; 0x2f24 <_ZN7TwoWire11requestFromEhhh>
}
    2f44:	08 95       	ret

00002f46 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	80 93 ba 02 	sts	0x02BA, r24
  // set address of targeted slave
  txAddress = address;
    2f4c:	60 93 dd 02 	sts	0x02DD, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2f50:	10 92 bc 02 	sts	0x02BC, r1
  txBufferLength = 0;
    2f54:	10 92 bb 02 	sts	0x02BB, r1
    2f58:	08 95       	ret

00002f5a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2f5a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN7TwoWire17beginTransmissionEh>
    2f5e:	08 95       	ret

00002f60 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2f60:	0f 93       	push	r16
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    2f62:	06 2f       	mov	r16, r22
    2f64:	21 e0       	ldi	r18, 0x01	; 1
    2f66:	40 91 bb 02 	lds	r20, 0x02BB
    2f6a:	6d eb       	ldi	r22, 0xBD	; 189
    2f6c:	72 e0       	ldi	r23, 0x02	; 2
    2f6e:	80 91 dd 02 	lds	r24, 0x02DD
    2f72:	0e 94 a8 14 	call	0x2950	; 0x2950 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2f76:	10 92 bc 02 	sts	0x02BC, r1
  txBufferLength = 0;
    2f7a:	10 92 bb 02 	sts	0x02BB, r1
  // indicate that we are done transmitting
  transmitting = 0;
    2f7e:	10 92 ba 02 	sts	0x02BA, r1
  return ret;
}
    2f82:	0f 91       	pop	r16
    2f84:	08 95       	ret

00002f86 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    2f86:	61 e0       	ldi	r22, 0x01	; 1
    2f88:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <_ZN7TwoWire15endTransmissionEh>
}
    2f8c:	08 95       	ret

00002f8e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2f8e:	8e ea       	ldi	r24, 0xAE	; 174
    2f90:	92 e0       	ldi	r25, 0x02	; 2
    2f92:	0e 94 77 17 	call	0x2eee	; 0x2eee <_ZN7TwoWireC1Ev>
    2f96:	08 95       	ret

00002f98 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2f98:	1f 92       	push	r1
    2f9a:	0f 92       	push	r0
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	0f 92       	push	r0
    2fa0:	11 24       	eor	r1, r1
    2fa2:	2f 93       	push	r18
    2fa4:	3f 93       	push	r19
    2fa6:	8f 93       	push	r24
    2fa8:	9f 93       	push	r25
    2faa:	af 93       	push	r26
    2fac:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2fae:	80 91 01 03 	lds	r24, 0x0301
    2fb2:	90 91 02 03 	lds	r25, 0x0302
    2fb6:	a0 91 03 03 	lds	r26, 0x0303
    2fba:	b0 91 04 03 	lds	r27, 0x0304
	unsigned char f = timer0_fract;
    2fbe:	30 91 00 03 	lds	r19, 0x0300

	m += MILLIS_INC;
	f += FRACT_INC;
    2fc2:	23 e0       	ldi	r18, 0x03	; 3
    2fc4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2fc6:	2d 37       	cpi	r18, 0x7D	; 125
    2fc8:	20 f4       	brcc	.+8      	; 0x2fd2 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2fca:	01 96       	adiw	r24, 0x01	; 1
    2fcc:	a1 1d       	adc	r26, r1
    2fce:	b1 1d       	adc	r27, r1
    2fd0:	05 c0       	rjmp	.+10     	; 0x2fdc <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2fd2:	26 e8       	ldi	r18, 0x86	; 134
    2fd4:	23 0f       	add	r18, r19
		m += 1;
    2fd6:	02 96       	adiw	r24, 0x02	; 2
    2fd8:	a1 1d       	adc	r26, r1
    2fda:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2fdc:	20 93 00 03 	sts	0x0300, r18
	timer0_millis = m;
    2fe0:	80 93 01 03 	sts	0x0301, r24
    2fe4:	90 93 02 03 	sts	0x0302, r25
    2fe8:	a0 93 03 03 	sts	0x0303, r26
    2fec:	b0 93 04 03 	sts	0x0304, r27
	timer0_overflow_count++;
    2ff0:	80 91 05 03 	lds	r24, 0x0305
    2ff4:	90 91 06 03 	lds	r25, 0x0306
    2ff8:	a0 91 07 03 	lds	r26, 0x0307
    2ffc:	b0 91 08 03 	lds	r27, 0x0308
    3000:	01 96       	adiw	r24, 0x01	; 1
    3002:	a1 1d       	adc	r26, r1
    3004:	b1 1d       	adc	r27, r1
    3006:	80 93 05 03 	sts	0x0305, r24
    300a:	90 93 06 03 	sts	0x0306, r25
    300e:	a0 93 07 03 	sts	0x0307, r26
    3012:	b0 93 08 03 	sts	0x0308, r27
}
    3016:	bf 91       	pop	r27
    3018:	af 91       	pop	r26
    301a:	9f 91       	pop	r25
    301c:	8f 91       	pop	r24
    301e:	3f 91       	pop	r19
    3020:	2f 91       	pop	r18
    3022:	0f 90       	pop	r0
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	0f 90       	pop	r0
    3028:	1f 90       	pop	r1
    302a:	18 95       	reti

0000302c <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    302c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    302e:	f8 94       	cli
	m = timer0_overflow_count;
    3030:	80 91 05 03 	lds	r24, 0x0305
    3034:	90 91 06 03 	lds	r25, 0x0306
    3038:	a0 91 07 03 	lds	r26, 0x0307
    303c:	b0 91 08 03 	lds	r27, 0x0308
#if defined(TCNT0)
	t = TCNT0;
    3040:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3042:	a8 9b       	sbis	0x15, 0	; 21
    3044:	05 c0       	rjmp	.+10     	; 0x3050 <micros+0x24>
    3046:	2f 3f       	cpi	r18, 0xFF	; 255
    3048:	19 f0       	breq	.+6      	; 0x3050 <micros+0x24>
		m++;
    304a:	01 96       	adiw	r24, 0x01	; 1
    304c:	a1 1d       	adc	r26, r1
    304e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3050:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3052:	ba 2f       	mov	r27, r26
    3054:	a9 2f       	mov	r26, r25
    3056:	98 2f       	mov	r25, r24
    3058:	88 27       	eor	r24, r24
    305a:	82 0f       	add	r24, r18
    305c:	91 1d       	adc	r25, r1
    305e:	a1 1d       	adc	r26, r1
    3060:	b1 1d       	adc	r27, r1
    3062:	bc 01       	movw	r22, r24
    3064:	cd 01       	movw	r24, r26
    3066:	66 0f       	add	r22, r22
    3068:	77 1f       	adc	r23, r23
    306a:	88 1f       	adc	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	66 0f       	add	r22, r22
    3070:	77 1f       	adc	r23, r23
    3072:	88 1f       	adc	r24, r24
    3074:	99 1f       	adc	r25, r25
}
    3076:	08 95       	ret

00003078 <delay>:

void delay(unsigned long ms)
{
    3078:	cf 92       	push	r12
    307a:	df 92       	push	r13
    307c:	ef 92       	push	r14
    307e:	ff 92       	push	r15
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	6b 01       	movw	r12, r22
    3086:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    3088:	0e 94 16 18 	call	0x302c	; 0x302c <micros>
    308c:	eb 01       	movw	r28, r22

	while (ms > 0) {
    308e:	c1 14       	cp	r12, r1
    3090:	d1 04       	cpc	r13, r1
    3092:	e1 04       	cpc	r14, r1
    3094:	f1 04       	cpc	r15, r1
    3096:	a9 f0       	breq	.+42     	; 0x30c2 <delay+0x4a>
		yield();
    3098:	0e 94 ca 11 	call	0x2394	; 0x2394 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    309c:	0e 94 16 18 	call	0x302c	; 0x302c <micros>
    30a0:	6c 1b       	sub	r22, r28
    30a2:	7d 0b       	sbc	r23, r29
    30a4:	68 3e       	cpi	r22, 0xE8	; 232
    30a6:	73 40       	sbci	r23, 0x03	; 3
    30a8:	38 f0       	brcs	.+14     	; 0x30b8 <delay+0x40>
			ms--;
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	c8 1a       	sub	r12, r24
    30ae:	d1 08       	sbc	r13, r1
    30b0:	e1 08       	sbc	r14, r1
    30b2:	f1 08       	sbc	r15, r1
			start += 1000;
    30b4:	c8 51       	subi	r28, 0x18	; 24
    30b6:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    30b8:	c1 14       	cp	r12, r1
    30ba:	d1 04       	cpc	r13, r1
    30bc:	e1 04       	cpc	r14, r1
    30be:	f1 04       	cpc	r15, r1
    30c0:	59 f7       	brne	.-42     	; 0x3098 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    30c2:	df 91       	pop	r29
    30c4:	cf 91       	pop	r28
    30c6:	ff 90       	pop	r15
    30c8:	ef 90       	pop	r14
    30ca:	df 90       	pop	r13
    30cc:	cf 90       	pop	r12
    30ce:	08 95       	ret

000030d0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    30d0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    30d2:	84 b5       	in	r24, 0x24	; 36
    30d4:	82 60       	ori	r24, 0x02	; 2
    30d6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    30d8:	84 b5       	in	r24, 0x24	; 36
    30da:	81 60       	ori	r24, 0x01	; 1
    30dc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    30de:	85 b5       	in	r24, 0x25	; 37
    30e0:	82 60       	ori	r24, 0x02	; 2
    30e2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    30e4:	85 b5       	in	r24, 0x25	; 37
    30e6:	81 60       	ori	r24, 0x01	; 1
    30e8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    30ea:	ee e6       	ldi	r30, 0x6E	; 110
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	81 60       	ori	r24, 0x01	; 1
    30f2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    30f4:	e1 e8       	ldi	r30, 0x81	; 129
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    30fa:	80 81       	ld	r24, Z
    30fc:	82 60       	ori	r24, 0x02	; 2
    30fe:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3100:	80 81       	ld	r24, Z
    3102:	81 60       	ori	r24, 0x01	; 1
    3104:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3106:	e0 e8       	ldi	r30, 0x80	; 128
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	80 81       	ld	r24, Z
    310c:	81 60       	ori	r24, 0x01	; 1
    310e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3110:	e1 eb       	ldi	r30, 0xB1	; 177
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	84 60       	ori	r24, 0x04	; 4
    3118:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    311a:	e0 eb       	ldi	r30, 0xB0	; 176
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	81 60       	ori	r24, 0x01	; 1
    3122:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    3124:	ea e7       	ldi	r30, 0x7A	; 122
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	84 60       	ori	r24, 0x04	; 4
    312c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    312e:	80 81       	ld	r24, Z
    3130:	82 60       	ori	r24, 0x02	; 2
    3132:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    3134:	80 81       	ld	r24, Z
    3136:	81 60       	ori	r24, 0x01	; 1
    3138:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    313a:	80 81       	ld	r24, Z
    313c:	80 68       	ori	r24, 0x80	; 128
    313e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3140:	10 92 c1 00 	sts	0x00C1, r1
    3144:	08 95       	ret

00003146 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3146:	8e 30       	cpi	r24, 0x0E	; 14
    3148:	08 f0       	brcs	.+2      	; 0x314c <analogRead+0x6>
    314a:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    314c:	87 70       	andi	r24, 0x07	; 7
    314e:	90 91 2f 01 	lds	r25, 0x012F
    3152:	40 e4       	ldi	r20, 0x40	; 64
    3154:	94 9f       	mul	r25, r20
    3156:	90 01       	movw	r18, r0
    3158:	11 24       	eor	r1, r1
    315a:	28 2b       	or	r18, r24
    315c:	20 93 7c 00 	sts	0x007C, r18
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3160:	ea e7       	ldi	r30, 0x7A	; 122
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	80 64       	ori	r24, 0x40	; 64
    3168:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    316a:	80 81       	ld	r24, Z
    316c:	86 fd       	sbrc	r24, 6
    316e:	fd cf       	rjmp	.-6      	; 0x316a <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3170:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    3174:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3178:	90 e0       	ldi	r25, 0x00	; 0
}
    317a:	92 2b       	or	r25, r18
    317c:	08 95       	ret

0000317e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    317e:	83 30       	cpi	r24, 0x03	; 3
    3180:	69 f0       	breq	.+26     	; 0x319c <turnOffPWM+0x1e>
    3182:	28 f4       	brcc	.+10     	; 0x318e <turnOffPWM+0x10>
    3184:	81 30       	cpi	r24, 0x01	; 1
    3186:	b1 f0       	breq	.+44     	; 0x31b4 <turnOffPWM+0x36>
    3188:	82 30       	cpi	r24, 0x02	; 2
    318a:	c1 f0       	breq	.+48     	; 0x31bc <turnOffPWM+0x3e>
    318c:	08 95       	ret
    318e:	87 30       	cpi	r24, 0x07	; 7
    3190:	c9 f0       	breq	.+50     	; 0x31c4 <turnOffPWM+0x46>
    3192:	88 30       	cpi	r24, 0x08	; 8
    3194:	e9 f0       	breq	.+58     	; 0x31d0 <turnOffPWM+0x52>
    3196:	84 30       	cpi	r24, 0x04	; 4
    3198:	01 f5       	brne	.+64     	; 0x31da <turnOffPWM+0x5c>
    319a:	06 c0       	rjmp	.+12     	; 0x31a8 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    319c:	e0 e8       	ldi	r30, 0x80	; 128
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	8f 77       	andi	r24, 0x7F	; 127
    31a4:	80 83       	st	Z, r24
    31a6:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    31a8:	e0 e8       	ldi	r30, 0x80	; 128
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	8f 7d       	andi	r24, 0xDF	; 223
    31b0:	80 83       	st	Z, r24
    31b2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    31b4:	84 b5       	in	r24, 0x24	; 36
    31b6:	8f 77       	andi	r24, 0x7F	; 127
    31b8:	84 bd       	out	0x24, r24	; 36
    31ba:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    31bc:	84 b5       	in	r24, 0x24	; 36
    31be:	8f 7d       	andi	r24, 0xDF	; 223
    31c0:	84 bd       	out	0x24, r24	; 36
    31c2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    31c4:	e0 eb       	ldi	r30, 0xB0	; 176
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	8f 77       	andi	r24, 0x7F	; 127
    31cc:	80 83       	st	Z, r24
    31ce:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    31d0:	e0 eb       	ldi	r30, 0xB0	; 176
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	8f 7d       	andi	r24, 0xDF	; 223
    31d8:	80 83       	st	Z, r24
    31da:	08 95       	ret

000031dc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	fc 01       	movw	r30, r24
    31e4:	e4 57       	subi	r30, 0x74	; 116
    31e6:	fd 4f       	sbci	r31, 0xFD	; 253
    31e8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    31ea:	fc 01       	movw	r30, r24
    31ec:	e0 56       	subi	r30, 0x60	; 96
    31ee:	fd 4f       	sbci	r31, 0xFD	; 253
    31f0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    31f2:	88 23       	and	r24, r24
    31f4:	79 f1       	breq	.+94     	; 0x3254 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	fc 01       	movw	r30, r24
    31fe:	e8 53       	subi	r30, 0x38	; 56
    3200:	fd 4f       	sbci	r31, 0xFD	; 253
    3202:	a5 91       	lpm	r26, Z+
    3204:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    3206:	fc 01       	movw	r30, r24
    3208:	e2 54       	subi	r30, 0x42	; 66
    320a:	fd 4f       	sbci	r31, 0xFD	; 253
    320c:	c5 91       	lpm	r28, Z+
    320e:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    3210:	61 11       	cpse	r22, r1
    3212:	0c c0       	rjmp	.+24     	; 0x322c <pinMode+0x50>
		uint8_t oldSREG = SREG;
    3214:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3216:	f8 94       	cli
		*reg &= ~bit;
    3218:	8c 91       	ld	r24, X
    321a:	e2 2f       	mov	r30, r18
    321c:	e0 95       	com	r30
    321e:	8e 23       	and	r24, r30
    3220:	8c 93       	st	X, r24
		*out &= ~bit;
    3222:	28 81       	ld	r18, Y
    3224:	e2 23       	and	r30, r18
    3226:	e8 83       	st	Y, r30
		SREG = oldSREG;
    3228:	9f bf       	out	0x3f, r25	; 63
    322a:	14 c0       	rjmp	.+40     	; 0x3254 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    322c:	62 30       	cpi	r22, 0x02	; 2
    322e:	61 f4       	brne	.+24     	; 0x3248 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    3230:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3232:	f8 94       	cli
		*reg &= ~bit;
    3234:	3c 91       	ld	r19, X
    3236:	82 2f       	mov	r24, r18
    3238:	80 95       	com	r24
    323a:	83 23       	and	r24, r19
    323c:	8c 93       	st	X, r24
		*out |= bit;
    323e:	e8 81       	ld	r30, Y
    3240:	e2 2b       	or	r30, r18
    3242:	e8 83       	st	Y, r30
		SREG = oldSREG;
    3244:	9f bf       	out	0x3f, r25	; 63
    3246:	06 c0       	rjmp	.+12     	; 0x3254 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    3248:	8f b7       	in	r24, 0x3f	; 63
                cli();
    324a:	f8 94       	cli
		*reg |= bit;
    324c:	ec 91       	ld	r30, X
    324e:	e2 2b       	or	r30, r18
    3250:	ec 93       	st	X, r30
		SREG = oldSREG;
    3252:	8f bf       	out	0x3f, r24	; 63
	}
}
    3254:	df 91       	pop	r29
    3256:	cf 91       	pop	r28
    3258:	08 95       	ret

0000325a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    325a:	1f 93       	push	r17
    325c:	cf 93       	push	r28
    325e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3260:	28 2f       	mov	r18, r24
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	f9 01       	movw	r30, r18
    3266:	e8 58       	subi	r30, 0x88	; 136
    3268:	fd 4f       	sbci	r31, 0xFD	; 253
    326a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    326c:	f9 01       	movw	r30, r18
    326e:	e4 57       	subi	r30, 0x74	; 116
    3270:	fd 4f       	sbci	r31, 0xFD	; 253
    3272:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    3274:	f9 01       	movw	r30, r18
    3276:	e0 56       	subi	r30, 0x60	; 96
    3278:	fd 4f       	sbci	r31, 0xFD	; 253
    327a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    327c:	cc 23       	and	r28, r28
    327e:	d1 f0       	breq	.+52     	; 0x32b4 <digitalWrite+0x5a>
    3280:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3282:	81 11       	cpse	r24, r1
    3284:	0e 94 bf 18 	call	0x317e	; 0x317e <turnOffPWM>

	out = portOutputRegister(port);
    3288:	ec 2f       	mov	r30, r28
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	ee 0f       	add	r30, r30
    328e:	ff 1f       	adc	r31, r31
    3290:	e2 54       	subi	r30, 0x42	; 66
    3292:	fd 4f       	sbci	r31, 0xFD	; 253
    3294:	a5 91       	lpm	r26, Z+
    3296:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3298:	8f b7       	in	r24, 0x3f	; 63
	cli();
    329a:	f8 94       	cli

	if (val == LOW) {
    329c:	d1 11       	cpse	r29, r1
    329e:	06 c0       	rjmp	.+12     	; 0x32ac <digitalWrite+0x52>
		*out &= ~bit;
    32a0:	9c 91       	ld	r25, X
    32a2:	e1 2f       	mov	r30, r17
    32a4:	e0 95       	com	r30
    32a6:	e9 23       	and	r30, r25
    32a8:	ec 93       	st	X, r30
    32aa:	03 c0       	rjmp	.+6      	; 0x32b2 <digitalWrite+0x58>
	} else {
		*out |= bit;
    32ac:	ec 91       	ld	r30, X
    32ae:	e1 2b       	or	r30, r17
    32b0:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    32b2:	8f bf       	out	0x3f, r24	; 63
}
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	1f 91       	pop	r17
    32ba:	08 95       	ret

000032bc <digitalRead>:

int digitalRead(uint8_t pin)
{
    32bc:	cf 93       	push	r28
    32be:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    32c0:	28 2f       	mov	r18, r24
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	f9 01       	movw	r30, r18
    32c6:	e8 58       	subi	r30, 0x88	; 136
    32c8:	fd 4f       	sbci	r31, 0xFD	; 253
    32ca:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    32cc:	f9 01       	movw	r30, r18
    32ce:	e4 57       	subi	r30, 0x74	; 116
    32d0:	fd 4f       	sbci	r31, 0xFD	; 253
    32d2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    32d4:	f9 01       	movw	r30, r18
    32d6:	e0 56       	subi	r30, 0x60	; 96
    32d8:	fd 4f       	sbci	r31, 0xFD	; 253
    32da:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    32dc:	cc 23       	and	r28, r28
    32de:	91 f0       	breq	.+36     	; 0x3304 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    32e0:	81 11       	cpse	r24, r1
    32e2:	0e 94 bf 18 	call	0x317e	; 0x317e <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    32e6:	ec 2f       	mov	r30, r28
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	ee 0f       	add	r30, r30
    32ec:	ff 1f       	adc	r31, r31
    32ee:	ec 54       	subi	r30, 0x4C	; 76
    32f0:	fd 4f       	sbci	r31, 0xFD	; 253
    32f2:	a5 91       	lpm	r26, Z+
    32f4:	b4 91       	lpm	r27, Z
    32f6:	ec 91       	ld	r30, X
    32f8:	ed 23       	and	r30, r29
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	21 f4       	brne	.+8      	; 0x3308 <digitalRead+0x4c>
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	02 c0       	rjmp	.+4      	; 0x3308 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    3308:	df 91       	pop	r29
    330a:	cf 91       	pop	r28
    330c:	08 95       	ret

0000330e <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    330e:	bf 92       	push	r11
    3310:	cf 92       	push	r12
    3312:	df 92       	push	r13
    3314:	ef 92       	push	r14
    3316:	ff 92       	push	r15
    3318:	0f 93       	push	r16
    331a:	1f 93       	push	r17
    331c:	cf 93       	push	r28
    331e:	df 93       	push	r29
    3320:	b8 2e       	mov	r11, r24
    3322:	16 2f       	mov	r17, r22
    3324:	04 2f       	mov	r16, r20
    3326:	c7 e0       	ldi	r28, 0x07	; 7
    3328:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    332a:	e2 2e       	mov	r14, r18
    332c:	f1 2c       	mov	r15, r1
    332e:	0f 2e       	mov	r0, r31
    3330:	f7 e0       	ldi	r31, 0x07	; 7
    3332:	cf 2e       	mov	r12, r31
    3334:	d1 2c       	mov	r13, r1
    3336:	f0 2d       	mov	r31, r0
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    3338:	01 11       	cpse	r16, r1
    333a:	0e c0       	rjmp	.+28     	; 0x3358 <shiftOut+0x4a>
    333c:	c6 01       	movw	r24, r12
    333e:	8c 1b       	sub	r24, r28
    3340:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
    3342:	b7 01       	movw	r22, r14
    3344:	02 c0       	rjmp	.+4      	; 0x334a <shiftOut+0x3c>
    3346:	75 95       	asr	r23
    3348:	67 95       	ror	r22
    334a:	8a 95       	dec	r24
    334c:	e2 f7       	brpl	.-8      	; 0x3346 <shiftOut+0x38>
    334e:	61 70       	andi	r22, 0x01	; 1
    3350:	8b 2d       	mov	r24, r11
    3352:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
    3356:	0b c0       	rjmp	.+22     	; 0x336e <shiftOut+0x60>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    3358:	b7 01       	movw	r22, r14
    335a:	0c 2e       	mov	r0, r28
    335c:	02 c0       	rjmp	.+4      	; 0x3362 <shiftOut+0x54>
    335e:	75 95       	asr	r23
    3360:	67 95       	ror	r22
    3362:	0a 94       	dec	r0
    3364:	e2 f7       	brpl	.-8      	; 0x335e <shiftOut+0x50>
    3366:	61 70       	andi	r22, 0x01	; 1
    3368:	8b 2d       	mov	r24, r11
    336a:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    336e:	61 e0       	ldi	r22, 0x01	; 1
    3370:	81 2f       	mov	r24, r17
    3372:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
		digitalWrite(clockPin, LOW);		
    3376:	60 e0       	ldi	r22, 0x00	; 0
    3378:	81 2f       	mov	r24, r17
    337a:	0e 94 2d 19 	call	0x325a	; 0x325a <digitalWrite>
    337e:	21 97       	sbiw	r28, 0x01	; 1
    3380:	d8 f6       	brcc	.-74     	; 0x3338 <shiftOut+0x2a>
	}
}
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	1f 91       	pop	r17
    3388:	0f 91       	pop	r16
    338a:	ff 90       	pop	r15
    338c:	ef 90       	pop	r14
    338e:	df 90       	pop	r13
    3390:	cf 90       	pop	r12
    3392:	bf 90       	pop	r11
    3394:	08 95       	ret

00003396 <__subsf3>:
    3396:	50 58       	subi	r21, 0x80	; 128

00003398 <__addsf3>:
    3398:	bb 27       	eor	r27, r27
    339a:	aa 27       	eor	r26, r26
    339c:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <__addsf3x>
    33a0:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__fp_round>
    33a4:	0e 94 26 1b 	call	0x364c	; 0x364c <__fp_pscA>
    33a8:	38 f0       	brcs	.+14     	; 0x33b8 <__addsf3+0x20>
    33aa:	0e 94 2d 1b 	call	0x365a	; 0x365a <__fp_pscB>
    33ae:	20 f0       	brcs	.+8      	; 0x33b8 <__addsf3+0x20>
    33b0:	39 f4       	brne	.+14     	; 0x33c0 <__addsf3+0x28>
    33b2:	9f 3f       	cpi	r25, 0xFF	; 255
    33b4:	19 f4       	brne	.+6      	; 0x33bc <__addsf3+0x24>
    33b6:	26 f4       	brtc	.+8      	; 0x33c0 <__addsf3+0x28>
    33b8:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__fp_nan>
    33bc:	0e f4       	brtc	.+2      	; 0x33c0 <__addsf3+0x28>
    33be:	e0 95       	com	r30
    33c0:	e7 fb       	bst	r30, 7
    33c2:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <__fp_inf>

000033c6 <__addsf3x>:
    33c6:	e9 2f       	mov	r30, r25
    33c8:	0e 94 45 1b 	call	0x368a	; 0x368a <__fp_split3>
    33cc:	58 f3       	brcs	.-42     	; 0x33a4 <__addsf3+0xc>
    33ce:	ba 17       	cp	r27, r26
    33d0:	62 07       	cpc	r22, r18
    33d2:	73 07       	cpc	r23, r19
    33d4:	84 07       	cpc	r24, r20
    33d6:	95 07       	cpc	r25, r21
    33d8:	20 f0       	brcs	.+8      	; 0x33e2 <__addsf3x+0x1c>
    33da:	79 f4       	brne	.+30     	; 0x33fa <__addsf3x+0x34>
    33dc:	a6 f5       	brtc	.+104    	; 0x3446 <__addsf3x+0x80>
    33de:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__fp_zero>
    33e2:	0e f4       	brtc	.+2      	; 0x33e6 <__addsf3x+0x20>
    33e4:	e0 95       	com	r30
    33e6:	0b 2e       	mov	r0, r27
    33e8:	ba 2f       	mov	r27, r26
    33ea:	a0 2d       	mov	r26, r0
    33ec:	0b 01       	movw	r0, r22
    33ee:	b9 01       	movw	r22, r18
    33f0:	90 01       	movw	r18, r0
    33f2:	0c 01       	movw	r0, r24
    33f4:	ca 01       	movw	r24, r20
    33f6:	a0 01       	movw	r20, r0
    33f8:	11 24       	eor	r1, r1
    33fa:	ff 27       	eor	r31, r31
    33fc:	59 1b       	sub	r21, r25
    33fe:	99 f0       	breq	.+38     	; 0x3426 <__addsf3x+0x60>
    3400:	59 3f       	cpi	r21, 0xF9	; 249
    3402:	50 f4       	brcc	.+20     	; 0x3418 <__addsf3x+0x52>
    3404:	50 3e       	cpi	r21, 0xE0	; 224
    3406:	68 f1       	brcs	.+90     	; 0x3462 <__addsf3x+0x9c>
    3408:	1a 16       	cp	r1, r26
    340a:	f0 40       	sbci	r31, 0x00	; 0
    340c:	a2 2f       	mov	r26, r18
    340e:	23 2f       	mov	r18, r19
    3410:	34 2f       	mov	r19, r20
    3412:	44 27       	eor	r20, r20
    3414:	58 5f       	subi	r21, 0xF8	; 248
    3416:	f3 cf       	rjmp	.-26     	; 0x33fe <__addsf3x+0x38>
    3418:	46 95       	lsr	r20
    341a:	37 95       	ror	r19
    341c:	27 95       	ror	r18
    341e:	a7 95       	ror	r26
    3420:	f0 40       	sbci	r31, 0x00	; 0
    3422:	53 95       	inc	r21
    3424:	c9 f7       	brne	.-14     	; 0x3418 <__addsf3x+0x52>
    3426:	7e f4       	brtc	.+30     	; 0x3446 <__addsf3x+0x80>
    3428:	1f 16       	cp	r1, r31
    342a:	ba 0b       	sbc	r27, r26
    342c:	62 0b       	sbc	r22, r18
    342e:	73 0b       	sbc	r23, r19
    3430:	84 0b       	sbc	r24, r20
    3432:	ba f0       	brmi	.+46     	; 0x3462 <__addsf3x+0x9c>
    3434:	91 50       	subi	r25, 0x01	; 1
    3436:	a1 f0       	breq	.+40     	; 0x3460 <__addsf3x+0x9a>
    3438:	ff 0f       	add	r31, r31
    343a:	bb 1f       	adc	r27, r27
    343c:	66 1f       	adc	r22, r22
    343e:	77 1f       	adc	r23, r23
    3440:	88 1f       	adc	r24, r24
    3442:	c2 f7       	brpl	.-16     	; 0x3434 <__addsf3x+0x6e>
    3444:	0e c0       	rjmp	.+28     	; 0x3462 <__addsf3x+0x9c>
    3446:	ba 0f       	add	r27, r26
    3448:	62 1f       	adc	r22, r18
    344a:	73 1f       	adc	r23, r19
    344c:	84 1f       	adc	r24, r20
    344e:	48 f4       	brcc	.+18     	; 0x3462 <__addsf3x+0x9c>
    3450:	87 95       	ror	r24
    3452:	77 95       	ror	r23
    3454:	67 95       	ror	r22
    3456:	b7 95       	ror	r27
    3458:	f7 95       	ror	r31
    345a:	9e 3f       	cpi	r25, 0xFE	; 254
    345c:	08 f0       	brcs	.+2      	; 0x3460 <__addsf3x+0x9a>
    345e:	b0 cf       	rjmp	.-160    	; 0x33c0 <__addsf3+0x28>
    3460:	93 95       	inc	r25
    3462:	88 0f       	add	r24, r24
    3464:	08 f0       	brcs	.+2      	; 0x3468 <__addsf3x+0xa2>
    3466:	99 27       	eor	r25, r25
    3468:	ee 0f       	add	r30, r30
    346a:	97 95       	ror	r25
    346c:	87 95       	ror	r24
    346e:	08 95       	ret

00003470 <__divsf3>:
    3470:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__divsf3x>
    3474:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__fp_round>
    3478:	0e 94 2d 1b 	call	0x365a	; 0x365a <__fp_pscB>
    347c:	58 f0       	brcs	.+22     	; 0x3494 <__divsf3+0x24>
    347e:	0e 94 26 1b 	call	0x364c	; 0x364c <__fp_pscA>
    3482:	40 f0       	brcs	.+16     	; 0x3494 <__divsf3+0x24>
    3484:	29 f4       	brne	.+10     	; 0x3490 <__divsf3+0x20>
    3486:	5f 3f       	cpi	r21, 0xFF	; 255
    3488:	29 f0       	breq	.+10     	; 0x3494 <__divsf3+0x24>
    348a:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <__fp_inf>
    348e:	51 11       	cpse	r21, r1
    3490:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <__fp_szero>
    3494:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__fp_nan>

00003498 <__divsf3x>:
    3498:	0e 94 45 1b 	call	0x368a	; 0x368a <__fp_split3>
    349c:	68 f3       	brcs	.-38     	; 0x3478 <__divsf3+0x8>

0000349e <__divsf3_pse>:
    349e:	99 23       	and	r25, r25
    34a0:	b1 f3       	breq	.-20     	; 0x348e <__divsf3+0x1e>
    34a2:	55 23       	and	r21, r21
    34a4:	91 f3       	breq	.-28     	; 0x348a <__divsf3+0x1a>
    34a6:	95 1b       	sub	r25, r21
    34a8:	55 0b       	sbc	r21, r21
    34aa:	bb 27       	eor	r27, r27
    34ac:	aa 27       	eor	r26, r26
    34ae:	62 17       	cp	r22, r18
    34b0:	73 07       	cpc	r23, r19
    34b2:	84 07       	cpc	r24, r20
    34b4:	38 f0       	brcs	.+14     	; 0x34c4 <__divsf3_pse+0x26>
    34b6:	9f 5f       	subi	r25, 0xFF	; 255
    34b8:	5f 4f       	sbci	r21, 0xFF	; 255
    34ba:	22 0f       	add	r18, r18
    34bc:	33 1f       	adc	r19, r19
    34be:	44 1f       	adc	r20, r20
    34c0:	aa 1f       	adc	r26, r26
    34c2:	a9 f3       	breq	.-22     	; 0x34ae <__divsf3_pse+0x10>
    34c4:	35 d0       	rcall	.+106    	; 0x3530 <__divsf3_pse+0x92>
    34c6:	0e 2e       	mov	r0, r30
    34c8:	3a f0       	brmi	.+14     	; 0x34d8 <__divsf3_pse+0x3a>
    34ca:	e0 e8       	ldi	r30, 0x80	; 128
    34cc:	32 d0       	rcall	.+100    	; 0x3532 <__divsf3_pse+0x94>
    34ce:	91 50       	subi	r25, 0x01	; 1
    34d0:	50 40       	sbci	r21, 0x00	; 0
    34d2:	e6 95       	lsr	r30
    34d4:	00 1c       	adc	r0, r0
    34d6:	ca f7       	brpl	.-14     	; 0x34ca <__divsf3_pse+0x2c>
    34d8:	2b d0       	rcall	.+86     	; 0x3530 <__divsf3_pse+0x92>
    34da:	fe 2f       	mov	r31, r30
    34dc:	29 d0       	rcall	.+82     	; 0x3530 <__divsf3_pse+0x92>
    34de:	66 0f       	add	r22, r22
    34e0:	77 1f       	adc	r23, r23
    34e2:	88 1f       	adc	r24, r24
    34e4:	bb 1f       	adc	r27, r27
    34e6:	26 17       	cp	r18, r22
    34e8:	37 07       	cpc	r19, r23
    34ea:	48 07       	cpc	r20, r24
    34ec:	ab 07       	cpc	r26, r27
    34ee:	b0 e8       	ldi	r27, 0x80	; 128
    34f0:	09 f0       	breq	.+2      	; 0x34f4 <__divsf3_pse+0x56>
    34f2:	bb 0b       	sbc	r27, r27
    34f4:	80 2d       	mov	r24, r0
    34f6:	bf 01       	movw	r22, r30
    34f8:	ff 27       	eor	r31, r31
    34fa:	93 58       	subi	r25, 0x83	; 131
    34fc:	5f 4f       	sbci	r21, 0xFF	; 255
    34fe:	3a f0       	brmi	.+14     	; 0x350e <__divsf3_pse+0x70>
    3500:	9e 3f       	cpi	r25, 0xFE	; 254
    3502:	51 05       	cpc	r21, r1
    3504:	78 f0       	brcs	.+30     	; 0x3524 <__divsf3_pse+0x86>
    3506:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <__fp_inf>
    350a:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <__fp_szero>
    350e:	5f 3f       	cpi	r21, 0xFF	; 255
    3510:	e4 f3       	brlt	.-8      	; 0x350a <__divsf3_pse+0x6c>
    3512:	98 3e       	cpi	r25, 0xE8	; 232
    3514:	d4 f3       	brlt	.-12     	; 0x350a <__divsf3_pse+0x6c>
    3516:	86 95       	lsr	r24
    3518:	77 95       	ror	r23
    351a:	67 95       	ror	r22
    351c:	b7 95       	ror	r27
    351e:	f7 95       	ror	r31
    3520:	9f 5f       	subi	r25, 0xFF	; 255
    3522:	c9 f7       	brne	.-14     	; 0x3516 <__divsf3_pse+0x78>
    3524:	88 0f       	add	r24, r24
    3526:	91 1d       	adc	r25, r1
    3528:	96 95       	lsr	r25
    352a:	87 95       	ror	r24
    352c:	97 f9       	bld	r25, 7
    352e:	08 95       	ret
    3530:	e1 e0       	ldi	r30, 0x01	; 1
    3532:	66 0f       	add	r22, r22
    3534:	77 1f       	adc	r23, r23
    3536:	88 1f       	adc	r24, r24
    3538:	bb 1f       	adc	r27, r27
    353a:	62 17       	cp	r22, r18
    353c:	73 07       	cpc	r23, r19
    353e:	84 07       	cpc	r24, r20
    3540:	ba 07       	cpc	r27, r26
    3542:	20 f0       	brcs	.+8      	; 0x354c <__divsf3_pse+0xae>
    3544:	62 1b       	sub	r22, r18
    3546:	73 0b       	sbc	r23, r19
    3548:	84 0b       	sbc	r24, r20
    354a:	ba 0b       	sbc	r27, r26
    354c:	ee 1f       	adc	r30, r30
    354e:	88 f7       	brcc	.-30     	; 0x3532 <__divsf3_pse+0x94>
    3550:	e0 95       	com	r30
    3552:	08 95       	ret

00003554 <__fixsfsi>:
    3554:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__fixunssfsi>
    3558:	68 94       	set
    355a:	b1 11       	cpse	r27, r1
    355c:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <__fp_szero>
    3560:	08 95       	ret

00003562 <__fixunssfsi>:
    3562:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fp_splitA>
    3566:	88 f0       	brcs	.+34     	; 0x358a <__fixunssfsi+0x28>
    3568:	9f 57       	subi	r25, 0x7F	; 127
    356a:	98 f0       	brcs	.+38     	; 0x3592 <__fixunssfsi+0x30>
    356c:	b9 2f       	mov	r27, r25
    356e:	99 27       	eor	r25, r25
    3570:	b7 51       	subi	r27, 0x17	; 23
    3572:	b0 f0       	brcs	.+44     	; 0x35a0 <__fixunssfsi+0x3e>
    3574:	e1 f0       	breq	.+56     	; 0x35ae <__fixunssfsi+0x4c>
    3576:	66 0f       	add	r22, r22
    3578:	77 1f       	adc	r23, r23
    357a:	88 1f       	adc	r24, r24
    357c:	99 1f       	adc	r25, r25
    357e:	1a f0       	brmi	.+6      	; 0x3586 <__fixunssfsi+0x24>
    3580:	ba 95       	dec	r27
    3582:	c9 f7       	brne	.-14     	; 0x3576 <__fixunssfsi+0x14>
    3584:	14 c0       	rjmp	.+40     	; 0x35ae <__fixunssfsi+0x4c>
    3586:	b1 30       	cpi	r27, 0x01	; 1
    3588:	91 f0       	breq	.+36     	; 0x35ae <__fixunssfsi+0x4c>
    358a:	0e 94 67 1b 	call	0x36ce	; 0x36ce <__fp_zero>
    358e:	b1 e0       	ldi	r27, 0x01	; 1
    3590:	08 95       	ret
    3592:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__fp_zero>
    3596:	67 2f       	mov	r22, r23
    3598:	78 2f       	mov	r23, r24
    359a:	88 27       	eor	r24, r24
    359c:	b8 5f       	subi	r27, 0xF8	; 248
    359e:	39 f0       	breq	.+14     	; 0x35ae <__fixunssfsi+0x4c>
    35a0:	b9 3f       	cpi	r27, 0xF9	; 249
    35a2:	cc f3       	brlt	.-14     	; 0x3596 <__fixunssfsi+0x34>
    35a4:	86 95       	lsr	r24
    35a6:	77 95       	ror	r23
    35a8:	67 95       	ror	r22
    35aa:	b3 95       	inc	r27
    35ac:	d9 f7       	brne	.-10     	; 0x35a4 <__fixunssfsi+0x42>
    35ae:	3e f4       	brtc	.+14     	; 0x35be <__fixunssfsi+0x5c>
    35b0:	90 95       	com	r25
    35b2:	80 95       	com	r24
    35b4:	70 95       	com	r23
    35b6:	61 95       	neg	r22
    35b8:	7f 4f       	sbci	r23, 0xFF	; 255
    35ba:	8f 4f       	sbci	r24, 0xFF	; 255
    35bc:	9f 4f       	sbci	r25, 0xFF	; 255
    35be:	08 95       	ret

000035c0 <__floatunsisf>:
    35c0:	e8 94       	clt
    35c2:	09 c0       	rjmp	.+18     	; 0x35d6 <__floatsisf+0x12>

000035c4 <__floatsisf>:
    35c4:	97 fb       	bst	r25, 7
    35c6:	3e f4       	brtc	.+14     	; 0x35d6 <__floatsisf+0x12>
    35c8:	90 95       	com	r25
    35ca:	80 95       	com	r24
    35cc:	70 95       	com	r23
    35ce:	61 95       	neg	r22
    35d0:	7f 4f       	sbci	r23, 0xFF	; 255
    35d2:	8f 4f       	sbci	r24, 0xFF	; 255
    35d4:	9f 4f       	sbci	r25, 0xFF	; 255
    35d6:	99 23       	and	r25, r25
    35d8:	a9 f0       	breq	.+42     	; 0x3604 <__floatsisf+0x40>
    35da:	f9 2f       	mov	r31, r25
    35dc:	96 e9       	ldi	r25, 0x96	; 150
    35de:	bb 27       	eor	r27, r27
    35e0:	93 95       	inc	r25
    35e2:	f6 95       	lsr	r31
    35e4:	87 95       	ror	r24
    35e6:	77 95       	ror	r23
    35e8:	67 95       	ror	r22
    35ea:	b7 95       	ror	r27
    35ec:	f1 11       	cpse	r31, r1
    35ee:	f8 cf       	rjmp	.-16     	; 0x35e0 <__floatsisf+0x1c>
    35f0:	fa f4       	brpl	.+62     	; 0x3630 <__floatsisf+0x6c>
    35f2:	bb 0f       	add	r27, r27
    35f4:	11 f4       	brne	.+4      	; 0x35fa <__floatsisf+0x36>
    35f6:	60 ff       	sbrs	r22, 0
    35f8:	1b c0       	rjmp	.+54     	; 0x3630 <__floatsisf+0x6c>
    35fa:	6f 5f       	subi	r22, 0xFF	; 255
    35fc:	7f 4f       	sbci	r23, 0xFF	; 255
    35fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3600:	9f 4f       	sbci	r25, 0xFF	; 255
    3602:	16 c0       	rjmp	.+44     	; 0x3630 <__floatsisf+0x6c>
    3604:	88 23       	and	r24, r24
    3606:	11 f0       	breq	.+4      	; 0x360c <__floatsisf+0x48>
    3608:	96 e9       	ldi	r25, 0x96	; 150
    360a:	11 c0       	rjmp	.+34     	; 0x362e <__floatsisf+0x6a>
    360c:	77 23       	and	r23, r23
    360e:	21 f0       	breq	.+8      	; 0x3618 <__floatsisf+0x54>
    3610:	9e e8       	ldi	r25, 0x8E	; 142
    3612:	87 2f       	mov	r24, r23
    3614:	76 2f       	mov	r23, r22
    3616:	05 c0       	rjmp	.+10     	; 0x3622 <__floatsisf+0x5e>
    3618:	66 23       	and	r22, r22
    361a:	71 f0       	breq	.+28     	; 0x3638 <__floatsisf+0x74>
    361c:	96 e8       	ldi	r25, 0x86	; 134
    361e:	86 2f       	mov	r24, r22
    3620:	70 e0       	ldi	r23, 0x00	; 0
    3622:	60 e0       	ldi	r22, 0x00	; 0
    3624:	2a f0       	brmi	.+10     	; 0x3630 <__floatsisf+0x6c>
    3626:	9a 95       	dec	r25
    3628:	66 0f       	add	r22, r22
    362a:	77 1f       	adc	r23, r23
    362c:	88 1f       	adc	r24, r24
    362e:	da f7       	brpl	.-10     	; 0x3626 <__floatsisf+0x62>
    3630:	88 0f       	add	r24, r24
    3632:	96 95       	lsr	r25
    3634:	87 95       	ror	r24
    3636:	97 f9       	bld	r25, 7
    3638:	08 95       	ret

0000363a <__fp_inf>:
    363a:	97 f9       	bld	r25, 7
    363c:	9f 67       	ori	r25, 0x7F	; 127
    363e:	80 e8       	ldi	r24, 0x80	; 128
    3640:	70 e0       	ldi	r23, 0x00	; 0
    3642:	60 e0       	ldi	r22, 0x00	; 0
    3644:	08 95       	ret

00003646 <__fp_nan>:
    3646:	9f ef       	ldi	r25, 0xFF	; 255
    3648:	80 ec       	ldi	r24, 0xC0	; 192
    364a:	08 95       	ret

0000364c <__fp_pscA>:
    364c:	00 24       	eor	r0, r0
    364e:	0a 94       	dec	r0
    3650:	16 16       	cp	r1, r22
    3652:	17 06       	cpc	r1, r23
    3654:	18 06       	cpc	r1, r24
    3656:	09 06       	cpc	r0, r25
    3658:	08 95       	ret

0000365a <__fp_pscB>:
    365a:	00 24       	eor	r0, r0
    365c:	0a 94       	dec	r0
    365e:	12 16       	cp	r1, r18
    3660:	13 06       	cpc	r1, r19
    3662:	14 06       	cpc	r1, r20
    3664:	05 06       	cpc	r0, r21
    3666:	08 95       	ret

00003668 <__fp_round>:
    3668:	09 2e       	mov	r0, r25
    366a:	03 94       	inc	r0
    366c:	00 0c       	add	r0, r0
    366e:	11 f4       	brne	.+4      	; 0x3674 <__fp_round+0xc>
    3670:	88 23       	and	r24, r24
    3672:	52 f0       	brmi	.+20     	; 0x3688 <__fp_round+0x20>
    3674:	bb 0f       	add	r27, r27
    3676:	40 f4       	brcc	.+16     	; 0x3688 <__fp_round+0x20>
    3678:	bf 2b       	or	r27, r31
    367a:	11 f4       	brne	.+4      	; 0x3680 <__fp_round+0x18>
    367c:	60 ff       	sbrs	r22, 0
    367e:	04 c0       	rjmp	.+8      	; 0x3688 <__fp_round+0x20>
    3680:	6f 5f       	subi	r22, 0xFF	; 255
    3682:	7f 4f       	sbci	r23, 0xFF	; 255
    3684:	8f 4f       	sbci	r24, 0xFF	; 255
    3686:	9f 4f       	sbci	r25, 0xFF	; 255
    3688:	08 95       	ret

0000368a <__fp_split3>:
    368a:	57 fd       	sbrc	r21, 7
    368c:	90 58       	subi	r25, 0x80	; 128
    368e:	44 0f       	add	r20, r20
    3690:	55 1f       	adc	r21, r21
    3692:	59 f0       	breq	.+22     	; 0x36aa <__fp_splitA+0x10>
    3694:	5f 3f       	cpi	r21, 0xFF	; 255
    3696:	71 f0       	breq	.+28     	; 0x36b4 <__fp_splitA+0x1a>
    3698:	47 95       	ror	r20

0000369a <__fp_splitA>:
    369a:	88 0f       	add	r24, r24
    369c:	97 fb       	bst	r25, 7
    369e:	99 1f       	adc	r25, r25
    36a0:	61 f0       	breq	.+24     	; 0x36ba <__fp_splitA+0x20>
    36a2:	9f 3f       	cpi	r25, 0xFF	; 255
    36a4:	79 f0       	breq	.+30     	; 0x36c4 <__fp_splitA+0x2a>
    36a6:	87 95       	ror	r24
    36a8:	08 95       	ret
    36aa:	12 16       	cp	r1, r18
    36ac:	13 06       	cpc	r1, r19
    36ae:	14 06       	cpc	r1, r20
    36b0:	55 1f       	adc	r21, r21
    36b2:	f2 cf       	rjmp	.-28     	; 0x3698 <__fp_split3+0xe>
    36b4:	46 95       	lsr	r20
    36b6:	f1 df       	rcall	.-30     	; 0x369a <__fp_splitA>
    36b8:	08 c0       	rjmp	.+16     	; 0x36ca <__fp_splitA+0x30>
    36ba:	16 16       	cp	r1, r22
    36bc:	17 06       	cpc	r1, r23
    36be:	18 06       	cpc	r1, r24
    36c0:	99 1f       	adc	r25, r25
    36c2:	f1 cf       	rjmp	.-30     	; 0x36a6 <__fp_splitA+0xc>
    36c4:	86 95       	lsr	r24
    36c6:	71 05       	cpc	r23, r1
    36c8:	61 05       	cpc	r22, r1
    36ca:	08 94       	sec
    36cc:	08 95       	ret

000036ce <__fp_zero>:
    36ce:	e8 94       	clt

000036d0 <__fp_szero>:
    36d0:	bb 27       	eor	r27, r27
    36d2:	66 27       	eor	r22, r22
    36d4:	77 27       	eor	r23, r23
    36d6:	cb 01       	movw	r24, r22
    36d8:	97 f9       	bld	r25, 7
    36da:	08 95       	ret

000036dc <__mulsf3>:
    36dc:	0e 94 81 1b 	call	0x3702	; 0x3702 <__mulsf3x>
    36e0:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__fp_round>
    36e4:	0e 94 26 1b 	call	0x364c	; 0x364c <__fp_pscA>
    36e8:	38 f0       	brcs	.+14     	; 0x36f8 <__mulsf3+0x1c>
    36ea:	0e 94 2d 1b 	call	0x365a	; 0x365a <__fp_pscB>
    36ee:	20 f0       	brcs	.+8      	; 0x36f8 <__mulsf3+0x1c>
    36f0:	95 23       	and	r25, r21
    36f2:	11 f0       	breq	.+4      	; 0x36f8 <__mulsf3+0x1c>
    36f4:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <__fp_inf>
    36f8:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__fp_nan>
    36fc:	11 24       	eor	r1, r1
    36fe:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <__fp_szero>

00003702 <__mulsf3x>:
    3702:	0e 94 45 1b 	call	0x368a	; 0x368a <__fp_split3>
    3706:	70 f3       	brcs	.-36     	; 0x36e4 <__mulsf3+0x8>

00003708 <__mulsf3_pse>:
    3708:	95 9f       	mul	r25, r21
    370a:	c1 f3       	breq	.-16     	; 0x36fc <__mulsf3+0x20>
    370c:	95 0f       	add	r25, r21
    370e:	50 e0       	ldi	r21, 0x00	; 0
    3710:	55 1f       	adc	r21, r21
    3712:	62 9f       	mul	r22, r18
    3714:	f0 01       	movw	r30, r0
    3716:	72 9f       	mul	r23, r18
    3718:	bb 27       	eor	r27, r27
    371a:	f0 0d       	add	r31, r0
    371c:	b1 1d       	adc	r27, r1
    371e:	63 9f       	mul	r22, r19
    3720:	aa 27       	eor	r26, r26
    3722:	f0 0d       	add	r31, r0
    3724:	b1 1d       	adc	r27, r1
    3726:	aa 1f       	adc	r26, r26
    3728:	64 9f       	mul	r22, r20
    372a:	66 27       	eor	r22, r22
    372c:	b0 0d       	add	r27, r0
    372e:	a1 1d       	adc	r26, r1
    3730:	66 1f       	adc	r22, r22
    3732:	82 9f       	mul	r24, r18
    3734:	22 27       	eor	r18, r18
    3736:	b0 0d       	add	r27, r0
    3738:	a1 1d       	adc	r26, r1
    373a:	62 1f       	adc	r22, r18
    373c:	73 9f       	mul	r23, r19
    373e:	b0 0d       	add	r27, r0
    3740:	a1 1d       	adc	r26, r1
    3742:	62 1f       	adc	r22, r18
    3744:	83 9f       	mul	r24, r19
    3746:	a0 0d       	add	r26, r0
    3748:	61 1d       	adc	r22, r1
    374a:	22 1f       	adc	r18, r18
    374c:	74 9f       	mul	r23, r20
    374e:	33 27       	eor	r19, r19
    3750:	a0 0d       	add	r26, r0
    3752:	61 1d       	adc	r22, r1
    3754:	23 1f       	adc	r18, r19
    3756:	84 9f       	mul	r24, r20
    3758:	60 0d       	add	r22, r0
    375a:	21 1d       	adc	r18, r1
    375c:	82 2f       	mov	r24, r18
    375e:	76 2f       	mov	r23, r22
    3760:	6a 2f       	mov	r22, r26
    3762:	11 24       	eor	r1, r1
    3764:	9f 57       	subi	r25, 0x7F	; 127
    3766:	50 40       	sbci	r21, 0x00	; 0
    3768:	9a f0       	brmi	.+38     	; 0x3790 <__mulsf3_pse+0x88>
    376a:	f1 f0       	breq	.+60     	; 0x37a8 <__mulsf3_pse+0xa0>
    376c:	88 23       	and	r24, r24
    376e:	4a f0       	brmi	.+18     	; 0x3782 <__mulsf3_pse+0x7a>
    3770:	ee 0f       	add	r30, r30
    3772:	ff 1f       	adc	r31, r31
    3774:	bb 1f       	adc	r27, r27
    3776:	66 1f       	adc	r22, r22
    3778:	77 1f       	adc	r23, r23
    377a:	88 1f       	adc	r24, r24
    377c:	91 50       	subi	r25, 0x01	; 1
    377e:	50 40       	sbci	r21, 0x00	; 0
    3780:	a9 f7       	brne	.-22     	; 0x376c <__mulsf3_pse+0x64>
    3782:	9e 3f       	cpi	r25, 0xFE	; 254
    3784:	51 05       	cpc	r21, r1
    3786:	80 f0       	brcs	.+32     	; 0x37a8 <__mulsf3_pse+0xa0>
    3788:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <__fp_inf>
    378c:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <__fp_szero>
    3790:	5f 3f       	cpi	r21, 0xFF	; 255
    3792:	e4 f3       	brlt	.-8      	; 0x378c <__mulsf3_pse+0x84>
    3794:	98 3e       	cpi	r25, 0xE8	; 232
    3796:	d4 f3       	brlt	.-12     	; 0x378c <__mulsf3_pse+0x84>
    3798:	86 95       	lsr	r24
    379a:	77 95       	ror	r23
    379c:	67 95       	ror	r22
    379e:	b7 95       	ror	r27
    37a0:	f7 95       	ror	r31
    37a2:	e7 95       	ror	r30
    37a4:	9f 5f       	subi	r25, 0xFF	; 255
    37a6:	c1 f7       	brne	.-16     	; 0x3798 <__mulsf3_pse+0x90>
    37a8:	fe 2b       	or	r31, r30
    37aa:	88 0f       	add	r24, r24
    37ac:	91 1d       	adc	r25, r1
    37ae:	96 95       	lsr	r25
    37b0:	87 95       	ror	r24
    37b2:	97 f9       	bld	r25, 7
    37b4:	08 95       	ret

000037b6 <__divmodhi4>:
    37b6:	97 fb       	bst	r25, 7
    37b8:	07 2e       	mov	r0, r23
    37ba:	16 f4       	brtc	.+4      	; 0x37c0 <__divmodhi4+0xa>
    37bc:	00 94       	com	r0
    37be:	07 d0       	rcall	.+14     	; 0x37ce <__divmodhi4_neg1>
    37c0:	77 fd       	sbrc	r23, 7
    37c2:	09 d0       	rcall	.+18     	; 0x37d6 <__divmodhi4_neg2>
    37c4:	0e 94 17 1c 	call	0x382e	; 0x382e <__udivmodhi4>
    37c8:	07 fc       	sbrc	r0, 7
    37ca:	05 d0       	rcall	.+10     	; 0x37d6 <__divmodhi4_neg2>
    37cc:	3e f4       	brtc	.+14     	; 0x37dc <__divmodhi4_exit>

000037ce <__divmodhi4_neg1>:
    37ce:	90 95       	com	r25
    37d0:	81 95       	neg	r24
    37d2:	9f 4f       	sbci	r25, 0xFF	; 255
    37d4:	08 95       	ret

000037d6 <__divmodhi4_neg2>:
    37d6:	70 95       	com	r23
    37d8:	61 95       	neg	r22
    37da:	7f 4f       	sbci	r23, 0xFF	; 255

000037dc <__divmodhi4_exit>:
    37dc:	08 95       	ret

000037de <__udivmodsi4>:
    37de:	a1 e2       	ldi	r26, 0x21	; 33
    37e0:	1a 2e       	mov	r1, r26
    37e2:	aa 1b       	sub	r26, r26
    37e4:	bb 1b       	sub	r27, r27
    37e6:	fd 01       	movw	r30, r26
    37e8:	0d c0       	rjmp	.+26     	; 0x3804 <__udivmodsi4_ep>

000037ea <__udivmodsi4_loop>:
    37ea:	aa 1f       	adc	r26, r26
    37ec:	bb 1f       	adc	r27, r27
    37ee:	ee 1f       	adc	r30, r30
    37f0:	ff 1f       	adc	r31, r31
    37f2:	a2 17       	cp	r26, r18
    37f4:	b3 07       	cpc	r27, r19
    37f6:	e4 07       	cpc	r30, r20
    37f8:	f5 07       	cpc	r31, r21
    37fa:	20 f0       	brcs	.+8      	; 0x3804 <__udivmodsi4_ep>
    37fc:	a2 1b       	sub	r26, r18
    37fe:	b3 0b       	sbc	r27, r19
    3800:	e4 0b       	sbc	r30, r20
    3802:	f5 0b       	sbc	r31, r21

00003804 <__udivmodsi4_ep>:
    3804:	66 1f       	adc	r22, r22
    3806:	77 1f       	adc	r23, r23
    3808:	88 1f       	adc	r24, r24
    380a:	99 1f       	adc	r25, r25
    380c:	1a 94       	dec	r1
    380e:	69 f7       	brne	.-38     	; 0x37ea <__udivmodsi4_loop>
    3810:	60 95       	com	r22
    3812:	70 95       	com	r23
    3814:	80 95       	com	r24
    3816:	90 95       	com	r25
    3818:	9b 01       	movw	r18, r22
    381a:	ac 01       	movw	r20, r24
    381c:	bd 01       	movw	r22, r26
    381e:	cf 01       	movw	r24, r30
    3820:	08 95       	ret

00003822 <__tablejump2__>:
    3822:	ee 0f       	add	r30, r30
    3824:	ff 1f       	adc	r31, r31
    3826:	05 90       	lpm	r0, Z+
    3828:	f4 91       	lpm	r31, Z
    382a:	e0 2d       	mov	r30, r0
    382c:	09 94       	ijmp

0000382e <__udivmodhi4>:
    382e:	aa 1b       	sub	r26, r26
    3830:	bb 1b       	sub	r27, r27
    3832:	51 e1       	ldi	r21, 0x11	; 17
    3834:	07 c0       	rjmp	.+14     	; 0x3844 <__udivmodhi4_ep>

00003836 <__udivmodhi4_loop>:
    3836:	aa 1f       	adc	r26, r26
    3838:	bb 1f       	adc	r27, r27
    383a:	a6 17       	cp	r26, r22
    383c:	b7 07       	cpc	r27, r23
    383e:	10 f0       	brcs	.+4      	; 0x3844 <__udivmodhi4_ep>
    3840:	a6 1b       	sub	r26, r22
    3842:	b7 0b       	sbc	r27, r23

00003844 <__udivmodhi4_ep>:
    3844:	88 1f       	adc	r24, r24
    3846:	99 1f       	adc	r25, r25
    3848:	5a 95       	dec	r21
    384a:	a9 f7       	brne	.-22     	; 0x3836 <__udivmodhi4_loop>
    384c:	80 95       	com	r24
    384e:	90 95       	com	r25
    3850:	bc 01       	movw	r22, r24
    3852:	cd 01       	movw	r24, r26
    3854:	08 95       	ret

00003856 <memcpy_P>:
    3856:	fb 01       	movw	r30, r22
    3858:	dc 01       	movw	r26, r24
    385a:	02 c0       	rjmp	.+4      	; 0x3860 <memcpy_P+0xa>
    385c:	05 90       	lpm	r0, Z+
    385e:	0d 92       	st	X+, r0
    3860:	41 50       	subi	r20, 0x01	; 1
    3862:	50 40       	sbci	r21, 0x00	; 0
    3864:	d8 f7       	brcc	.-10     	; 0x385c <memcpy_P+0x6>
    3866:	08 95       	ret

00003868 <eeprom_read_byte>:
    3868:	f9 99       	sbic	0x1f, 1	; 31
    386a:	fe cf       	rjmp	.-4      	; 0x3868 <eeprom_read_byte>
    386c:	92 bd       	out	0x22, r25	; 34
    386e:	81 bd       	out	0x21, r24	; 33
    3870:	f8 9a       	sbi	0x1f, 0	; 31
    3872:	99 27       	eor	r25, r25
    3874:	80 b5       	in	r24, 0x20	; 32
    3876:	08 95       	ret

00003878 <eeprom_write_byte>:
    3878:	26 2f       	mov	r18, r22

0000387a <eeprom_write_r18>:
    387a:	f9 99       	sbic	0x1f, 1	; 31
    387c:	fe cf       	rjmp	.-4      	; 0x387a <eeprom_write_r18>
    387e:	1f ba       	out	0x1f, r1	; 31
    3880:	92 bd       	out	0x22, r25	; 34
    3882:	81 bd       	out	0x21, r24	; 33
    3884:	20 bd       	out	0x20, r18	; 32
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	fa 9a       	sbi	0x1f, 2	; 31
    388c:	f9 9a       	sbi	0x1f, 1	; 31
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	01 96       	adiw	r24, 0x01	; 1
    3892:	08 95       	ret

00003894 <_exit>:
    3894:	f8 94       	cli

00003896 <__stop_program>:
    3896:	ff cf       	rjmp	.-2      	; 0x3896 <__stop_program>
