
MicroNumitron.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00002834  000028c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002834  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000190  00800150  00800150  00002918  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002948  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000790  00000000  00000000  00002988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001043c  00000000  00000000  00003118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c28  00000000  00000000  00013554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002876  00000000  00000000  0001617c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017ac  00000000  00000000  000189f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000033ca  00000000  00000000  0001a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008db0  00000000  00000000  0001d56a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e8  00000000  00000000  0002631a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8a 01 	jmp	0x314	; 0x314 <__ctors_end>
       4:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__vector_1>
       8:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__vector_2>
       c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      10:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      14:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      18:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      1c:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__vector_7>
      20:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      24:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      28:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      2c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      30:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      34:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      38:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      3c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      40:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_16>
      44:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      48:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__vector_18>
      4c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__vector_19>
      50:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      54:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      58:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      5c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      60:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__vector_24>
      64:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      68:	64 0b       	sbc	r22, r20
      6a:	85 0b       	sbc	r24, r21
      6c:	85 0b       	sbc	r24, r21
      6e:	82 0b       	sbc	r24, r18
      70:	85 0b       	sbc	r24, r21
      72:	60 0b       	sbc	r22, r16
      74:	85 0b       	sbc	r24, r21
      76:	85 0b       	sbc	r24, r21
      78:	85 0b       	sbc	r24, r21
      7a:	52 0b       	sbc	r21, r18
      7c:	85 0b       	sbc	r24, r21
      7e:	85 0b       	sbc	r24, r21
      80:	6d 0b       	sbc	r22, r29
      82:	7e 0b       	sbc	r23, r30
      84:	7a 0b       	sbc	r23, r26
      86:	85 0b       	sbc	r24, r21
      88:	85 0b       	sbc	r24, r21
      8a:	85 0b       	sbc	r24, r21
      8c:	76 0b       	sbc	r23, r22
      8e:	4d 0e       	add	r4, r29
      90:	51 0e       	add	r5, r17
      92:	51 0e       	add	r5, r17
      94:	51 0e       	add	r5, r17
      96:	51 0e       	add	r5, r17
      98:	51 0e       	add	r5, r17
      9a:	51 0e       	add	r5, r17
      9c:	51 0e       	add	r5, r17
      9e:	5f 0d       	add	r21, r15
      a0:	51 0e       	add	r5, r17
      a2:	51 0e       	add	r5, r17
      a4:	51 0e       	add	r5, r17
      a6:	51 0e       	add	r5, r17
      a8:	51 0e       	add	r5, r17
      aa:	51 0e       	add	r5, r17
      ac:	51 0e       	add	r5, r17
      ae:	5f 0d       	add	r21, r15
      b0:	51 0e       	add	r5, r17
      b2:	51 0e       	add	r5, r17
      b4:	51 0e       	add	r5, r17
      b6:	51 0e       	add	r5, r17
      b8:	51 0e       	add	r5, r17
      ba:	51 0e       	add	r5, r17
      bc:	51 0e       	add	r5, r17
      be:	67 0d       	add	r22, r7
      c0:	51 0e       	add	r5, r17
      c2:	51 0e       	add	r5, r17
      c4:	51 0e       	add	r5, r17
      c6:	51 0e       	add	r5, r17
      c8:	51 0e       	add	r5, r17
      ca:	51 0e       	add	r5, r17
      cc:	51 0e       	add	r5, r17
      ce:	8d 0d       	add	r24, r13
      d0:	51 0e       	add	r5, r17
      d2:	51 0e       	add	r5, r17
      d4:	51 0e       	add	r5, r17
      d6:	51 0e       	add	r5, r17
      d8:	51 0e       	add	r5, r17
      da:	51 0e       	add	r5, r17
      dc:	51 0e       	add	r5, r17
      de:	67 0d       	add	r22, r7
      e0:	51 0e       	add	r5, r17
      e2:	51 0e       	add	r5, r17
      e4:	51 0e       	add	r5, r17
      e6:	51 0e       	add	r5, r17
      e8:	51 0e       	add	r5, r17
      ea:	51 0e       	add	r5, r17
      ec:	51 0e       	add	r5, r17
      ee:	93 0d       	add	r25, r3
      f0:	51 0e       	add	r5, r17
      f2:	51 0e       	add	r5, r17
      f4:	51 0e       	add	r5, r17
      f6:	51 0e       	add	r5, r17
      f8:	51 0e       	add	r5, r17
      fa:	51 0e       	add	r5, r17
      fc:	51 0e       	add	r5, r17
      fe:	99 0d       	add	r25, r9
     100:	51 0e       	add	r5, r17
     102:	51 0e       	add	r5, r17
     104:	51 0e       	add	r5, r17
     106:	51 0e       	add	r5, r17
     108:	51 0e       	add	r5, r17
     10a:	51 0e       	add	r5, r17
     10c:	51 0e       	add	r5, r17
     10e:	ab 0d       	add	r26, r11
     110:	51 0e       	add	r5, r17
     112:	51 0e       	add	r5, r17
     114:	51 0e       	add	r5, r17
     116:	51 0e       	add	r5, r17
     118:	51 0e       	add	r5, r17
     11a:	51 0e       	add	r5, r17
     11c:	51 0e       	add	r5, r17
     11e:	d5 0d       	add	r29, r5
     120:	51 0e       	add	r5, r17
     122:	51 0e       	add	r5, r17
     124:	51 0e       	add	r5, r17
     126:	51 0e       	add	r5, r17
     128:	51 0e       	add	r5, r17
     12a:	51 0e       	add	r5, r17
     12c:	51 0e       	add	r5, r17
     12e:	9f 0d       	add	r25, r15
     130:	51 0e       	add	r5, r17
     132:	51 0e       	add	r5, r17
     134:	51 0e       	add	r5, r17
     136:	51 0e       	add	r5, r17
     138:	51 0e       	add	r5, r17
     13a:	51 0e       	add	r5, r17
     13c:	51 0e       	add	r5, r17
     13e:	b9 0d       	add	r27, r9
     140:	51 0e       	add	r5, r17
     142:	51 0e       	add	r5, r17
     144:	51 0e       	add	r5, r17
     146:	51 0e       	add	r5, r17
     148:	51 0e       	add	r5, r17
     14a:	51 0e       	add	r5, r17
     14c:	51 0e       	add	r5, r17
     14e:	d8 0d       	add	r29, r8
     150:	51 0e       	add	r5, r17
     152:	51 0e       	add	r5, r17
     154:	51 0e       	add	r5, r17
     156:	51 0e       	add	r5, r17
     158:	51 0e       	add	r5, r17
     15a:	51 0e       	add	r5, r17
     15c:	51 0e       	add	r5, r17
     15e:	d8 0d       	add	r29, r8
     160:	51 0e       	add	r5, r17
     162:	51 0e       	add	r5, r17
     164:	51 0e       	add	r5, r17
     166:	51 0e       	add	r5, r17
     168:	51 0e       	add	r5, r17
     16a:	51 0e       	add	r5, r17
     16c:	51 0e       	add	r5, r17
     16e:	d8 0d       	add	r29, r8
     170:	51 0e       	add	r5, r17
     172:	51 0e       	add	r5, r17
     174:	51 0e       	add	r5, r17
     176:	51 0e       	add	r5, r17
     178:	51 0e       	add	r5, r17
     17a:	51 0e       	add	r5, r17
     17c:	51 0e       	add	r5, r17
     17e:	d8 0d       	add	r29, r8
     180:	51 0e       	add	r5, r17
     182:	51 0e       	add	r5, r17
     184:	51 0e       	add	r5, r17
     186:	51 0e       	add	r5, r17
     188:	51 0e       	add	r5, r17
     18a:	51 0e       	add	r5, r17
     18c:	51 0e       	add	r5, r17
     18e:	e1 0d       	add	r30, r1
     190:	51 0e       	add	r5, r17
     192:	51 0e       	add	r5, r17
     194:	51 0e       	add	r5, r17
     196:	51 0e       	add	r5, r17
     198:	51 0e       	add	r5, r17
     19a:	51 0e       	add	r5, r17
     19c:	51 0e       	add	r5, r17
     19e:	14 0e       	add	r1, r20
     1a0:	51 0e       	add	r5, r17
     1a2:	51 0e       	add	r5, r17
     1a4:	51 0e       	add	r5, r17
     1a6:	51 0e       	add	r5, r17
     1a8:	51 0e       	add	r5, r17
     1aa:	51 0e       	add	r5, r17
     1ac:	51 0e       	add	r5, r17
     1ae:	e1 0d       	add	r30, r1
     1b0:	51 0e       	add	r5, r17
     1b2:	51 0e       	add	r5, r17
     1b4:	51 0e       	add	r5, r17
     1b6:	51 0e       	add	r5, r17
     1b8:	51 0e       	add	r5, r17
     1ba:	51 0e       	add	r5, r17
     1bc:	51 0e       	add	r5, r17
     1be:	14 0e       	add	r1, r20
     1c0:	51 0e       	add	r5, r17
     1c2:	51 0e       	add	r5, r17
     1c4:	51 0e       	add	r5, r17
     1c6:	51 0e       	add	r5, r17
     1c8:	51 0e       	add	r5, r17
     1ca:	51 0e       	add	r5, r17
     1cc:	51 0e       	add	r5, r17
     1ce:	f9 0d       	add	r31, r9
     1d0:	51 0e       	add	r5, r17
     1d2:	51 0e       	add	r5, r17
     1d4:	51 0e       	add	r5, r17
     1d6:	51 0e       	add	r5, r17
     1d8:	51 0e       	add	r5, r17
     1da:	51 0e       	add	r5, r17
     1dc:	51 0e       	add	r5, r17
     1de:	18 0e       	add	r1, r24
     1e0:	51 0e       	add	r5, r17
     1e2:	51 0e       	add	r5, r17
     1e4:	51 0e       	add	r5, r17
     1e6:	51 0e       	add	r5, r17
     1e8:	51 0e       	add	r5, r17
     1ea:	51 0e       	add	r5, r17
     1ec:	51 0e       	add	r5, r17
     1ee:	18 0e       	add	r1, r24
     1f0:	51 0e       	add	r5, r17
     1f2:	51 0e       	add	r5, r17
     1f4:	51 0e       	add	r5, r17
     1f6:	51 0e       	add	r5, r17
     1f8:	51 0e       	add	r5, r17
     1fa:	51 0e       	add	r5, r17
     1fc:	51 0e       	add	r5, r17
     1fe:	2d 0e       	add	r2, r29
     200:	51 0e       	add	r5, r17
     202:	51 0e       	add	r5, r17
     204:	51 0e       	add	r5, r17
     206:	51 0e       	add	r5, r17
     208:	51 0e       	add	r5, r17
     20a:	51 0e       	add	r5, r17
     20c:	51 0e       	add	r5, r17
     20e:	47 0e       	add	r4, r23
     210:	51 0e       	add	r5, r17
     212:	51 0e       	add	r5, r17
     214:	51 0e       	add	r5, r17
     216:	51 0e       	add	r5, r17
     218:	51 0e       	add	r5, r17
     21a:	51 0e       	add	r5, r17
     21c:	51 0e       	add	r5, r17
     21e:	47 0e       	add	r4, r23

00000220 <__trampolines_end>:
     220:	c2 b0       	in	r12, 0x02	; 2
     222:	43 20       	and	r4, r3
	...

00000225 <_ZZ15Internal_UpdatevE3__c_1>:
     225:	50 4d 00                                            PM.

00000228 <_ZZ15Internal_UpdatevE3__c_0>:
     228:	41 4d 00                                            AM.

0000022b <_ZZ15Internal_UpdatevE3__c>:
     22b:	20 54 69 6d 65 2f 44 61 74 65 3a 20 00               Time/Date: .

00000238 <_ZZ4InitvE3__c_3>:
     238:	54 69 6d 65 20 73 68 6f 75 6c 64 20 62 65 20 73     Time should be s
     248:	65 74 2e 0d 0a 00                                   et....

0000024e <_ZZ4InitvE3__c_2>:
     24e:	54 69 6d 65 20 64 69 64 20 6e 6f 74 20 73 65 74     Time did not set
     25e:	20 63 6f 72 72 65 63 74 6c 79 2c 20 63 68 65 63      correctly, chec
     26e:	6b 20 77 69 72 69 6e 67 2e 0d 0a 00                 k wiring....

0000027a <_ZZ4InitvE3__c_1>:
     27a:	52 54 43 20 69 73 20 4e 4f 54 20 72 75 6e 6e 69     RTC is NOT runni
     28a:	6e 67 21 2c 20 53 65 74 74 69 6e 67 20 74 6f 20     ng!, Setting to 
	...

0000029b <_ZZ4InitvE3__c>:
     29b:	4f 63 74 20 32 34 20 32 30 31 35 00                 Oct 24 2015.

000002a7 <_ZZ4InitvE3__c_0>:
     2a7:	32 32 3a 35 34 3a 30 31 00                          22:54:01.

000002b0 <_ZL21tone_pin_to_timer_PGM>:
     2b0:	02                                                  .

000002b1 <digital_pin_to_timer_PGM>:
     2b1:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     2c1:	00 00 00 00                                         ....

000002c5 <digital_pin_to_bit_mask_PGM>:
     2c5:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     2d5:	04 08 10 20                                         ... 

000002d9 <digital_pin_to_port_PGM>:
     2d9:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     2e9:	03 03 03 03                                         ....

000002ed <port_to_input_PGM>:
     2ed:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002f7 <port_to_output_PGM>:
     2f7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000301 <port_to_mode_PGM>:
     301:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000030c <__ctors_start>:
     30c:	dd 04       	cpc	r13, r13
     30e:	36 08       	sbc	r3, r6
     310:	a6 08       	sbc	r10, r6
     312:	bc 0f       	add	r27, r28

00000314 <__ctors_end>:
     314:	11 24       	eor	r1, r1
     316:	1f be       	out	0x3f, r1	; 63
     318:	cf ef       	ldi	r28, 0xFF	; 255
     31a:	d4 e0       	ldi	r29, 0x04	; 4
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	cd bf       	out	0x3d, r28	; 61

00000320 <__do_copy_data>:
     320:	11 e0       	ldi	r17, 0x01	; 1
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b1 e0       	ldi	r27, 0x01	; 1
     326:	e4 e3       	ldi	r30, 0x34	; 52
     328:	f8 e2       	ldi	r31, 0x28	; 40
     32a:	02 c0       	rjmp	.+4      	; 0x330 <__do_copy_data+0x10>
     32c:	05 90       	lpm	r0, Z+
     32e:	0d 92       	st	X+, r0
     330:	a0 35       	cpi	r26, 0x50	; 80
     332:	b1 07       	cpc	r27, r17
     334:	d9 f7       	brne	.-10     	; 0x32c <__do_copy_data+0xc>

00000336 <__do_clear_bss>:
     336:	22 e0       	ldi	r18, 0x02	; 2
     338:	a0 e5       	ldi	r26, 0x50	; 80
     33a:	b1 e0       	ldi	r27, 0x01	; 1
     33c:	01 c0       	rjmp	.+2      	; 0x340 <.do_clear_bss_start>

0000033e <.do_clear_bss_loop>:
     33e:	1d 92       	st	X+, r1

00000340 <.do_clear_bss_start>:
     340:	a0 3e       	cpi	r26, 0xE0	; 224
     342:	b2 07       	cpc	r27, r18
     344:	e1 f7       	brne	.-8      	; 0x33e <.do_clear_bss_loop>

00000346 <__do_global_ctors>:
     346:	11 e0       	ldi	r17, 0x01	; 1
     348:	ca e8       	ldi	r28, 0x8A	; 138
     34a:	d1 e0       	ldi	r29, 0x01	; 1
     34c:	04 c0       	rjmp	.+8      	; 0x356 <__do_global_ctors+0x10>
     34e:	21 97       	sbiw	r28, 0x01	; 1
     350:	fe 01       	movw	r30, r28
     352:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__tablejump2__>
     356:	c6 38       	cpi	r28, 0x86	; 134
     358:	d1 07       	cpc	r29, r17
     35a:	c9 f7       	brne	.-14     	; 0x34e <__do_global_ctors+0x8>
     35c:	0e 94 b2 08 	call	0x1164	; 0x1164 <main>
     360:	0c 94 18 14 	jmp	0x2830	; 0x2830 <_exit>

00000364 <__bad_interrupt>:
     364:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000368 <_ZN6DS1337C1Ev>:
   rtc_bcd[DS1337_HR] = bin2bcd(hour);
   rtc_bcd[DS1337_DATE] = bin2bcd(day);
   rtc_bcd[DS1337_DOW] = bin2bcd(day_of_week);
   rtc_bcd[DS1337_MTH] = bin2bcd(month);
   rtc_bcd[DS1337_YR] = bin2bcd(year);
}
     368:	85 e8       	ldi	r24, 0x85	; 133
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <_ZN7TwoWire5beginEv>
     370:	08 95       	ret

00000372 <_ZN6DS133710getSecondsEv>:
     372:	fc 01       	movw	r30, r24
     374:	92 81       	ldd	r25, Z+2	; 0x02
     376:	89 2f       	mov	r24, r25
     378:	86 95       	lsr	r24
     37a:	86 95       	lsr	r24
     37c:	86 95       	lsr	r24

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     37e:	8e 71       	andi	r24, 0x1E	; 30
     380:	28 2f       	mov	r18, r24
     382:	22 0f       	add	r18, r18
     384:	22 0f       	add	r18, r18
     386:	82 0f       	add	r24, r18
     388:	9f 70       	andi	r25, 0x0F	; 15
}

unsigned char DS1337::getSeconds()
{
    return bcd2bin(rtc_bcd[DS1337_SEC]);
}
     38a:	89 0f       	add	r24, r25
     38c:	08 95       	ret

0000038e <_ZN6DS133710getMinutesEv>:

unsigned char DS1337::getMinutes()
{
    return bcd2bin(rtc_bcd[DS1337_MIN]);
     38e:	fc 01       	movw	r30, r24
     390:	93 81       	ldd	r25, Z+3	; 0x03

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     392:	89 2f       	mov	r24, r25
     394:	86 95       	lsr	r24
     396:	86 95       	lsr	r24
     398:	86 95       	lsr	r24
     39a:	8e 71       	andi	r24, 0x1E	; 30
     39c:	28 2f       	mov	r18, r24
     39e:	22 0f       	add	r18, r18
     3a0:	22 0f       	add	r18, r18
     3a2:	82 0f       	add	r24, r18
     3a4:	9f 70       	andi	r25, 0x0F	; 15
}

unsigned char DS1337::getMinutes()
{
    return bcd2bin(rtc_bcd[DS1337_MIN]);
}
     3a6:	89 0f       	add	r24, r25
     3a8:	08 95       	ret

000003aa <_ZN6DS13378getHoursEv>:
unsigned char DS1337::getHours()
{
    return bcd2bin(rtc_bcd[DS1337_HR]);
     3aa:	fc 01       	movw	r30, r24
     3ac:	94 81       	ldd	r25, Z+4	; 0x04

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     3ae:	89 2f       	mov	r24, r25
     3b0:	86 95       	lsr	r24
     3b2:	86 95       	lsr	r24
     3b4:	86 95       	lsr	r24
     3b6:	8e 71       	andi	r24, 0x1E	; 30
     3b8:	28 2f       	mov	r18, r24
     3ba:	22 0f       	add	r18, r18
     3bc:	22 0f       	add	r18, r18
     3be:	82 0f       	add	r24, r18
     3c0:	9f 70       	andi	r25, 0x0F	; 15
    return bcd2bin(rtc_bcd[DS1337_MIN]);
}
unsigned char DS1337::getHours()
{
    return bcd2bin(rtc_bcd[DS1337_HR]);
}
     3c2:	89 0f       	add	r24, r25
     3c4:	08 95       	ret

000003c6 <_ZN6DS13377getDaysEv>:
unsigned char DS1337::getDays()
{
    return bcd2bin(rtc_bcd[DS1337_DATE]);
     3c6:	fc 01       	movw	r30, r24
     3c8:	96 81       	ldd	r25, Z+6	; 0x06

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     3ca:	89 2f       	mov	r24, r25
     3cc:	86 95       	lsr	r24
     3ce:	86 95       	lsr	r24
     3d0:	86 95       	lsr	r24
     3d2:	8e 71       	andi	r24, 0x1E	; 30
     3d4:	28 2f       	mov	r18, r24
     3d6:	22 0f       	add	r18, r18
     3d8:	22 0f       	add	r18, r18
     3da:	82 0f       	add	r24, r18
     3dc:	9f 70       	andi	r25, 0x0F	; 15
    return bcd2bin(rtc_bcd[DS1337_HR]);
}
unsigned char DS1337::getDays()
{
    return bcd2bin(rtc_bcd[DS1337_DATE]);
}
     3de:	89 0f       	add	r24, r25
     3e0:	08 95       	ret

000003e2 <_ZN6DS13379getMonthsEv>:
{
    return bcd2bin(rtc_bcd[DS1337_DOW]);
}
unsigned char DS1337::getMonths()
{
    return bcd2bin(rtc_bcd[DS1337_MTH]);
     3e2:	fc 01       	movw	r30, r24
     3e4:	97 81       	ldd	r25, Z+7	; 0x07

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     3e6:	89 2f       	mov	r24, r25
     3e8:	86 95       	lsr	r24
     3ea:	86 95       	lsr	r24
     3ec:	86 95       	lsr	r24
     3ee:	8e 71       	andi	r24, 0x1E	; 30
     3f0:	28 2f       	mov	r18, r24
     3f2:	22 0f       	add	r18, r18
     3f4:	22 0f       	add	r18, r18
     3f6:	82 0f       	add	r24, r18
     3f8:	9f 70       	andi	r25, 0x0F	; 15
    return bcd2bin(rtc_bcd[DS1337_DOW]);
}
unsigned char DS1337::getMonths()
{
    return bcd2bin(rtc_bcd[DS1337_MTH]);
}
     3fa:	89 0f       	add	r24, r25
     3fc:	08 95       	ret

000003fe <_ZN6DS13378getYearsEv>:
unsigned int DS1337::getYears()
{
    return 2000 + bcd2bin(rtc_bcd[DS1337_YR]);
     3fe:	fc 01       	movw	r30, r24
     400:	90 85       	ldd	r25, Z+8	; 0x08

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     402:	89 2f       	mov	r24, r25
     404:	86 95       	lsr	r24
     406:	86 95       	lsr	r24
     408:	86 95       	lsr	r24
     40a:	8e 71       	andi	r24, 0x1E	; 30
     40c:	28 2f       	mov	r18, r24
     40e:	22 0f       	add	r18, r18
     410:	22 0f       	add	r18, r18
     412:	82 0f       	add	r24, r18
     414:	9f 70       	andi	r25, 0x0F	; 15
     416:	98 0f       	add	r25, r24
{
    return bcd2bin(rtc_bcd[DS1337_MTH]);
}
unsigned int DS1337::getYears()
{
    return 2000 + bcd2bin(rtc_bcd[DS1337_YR]);
     418:	89 2f       	mov	r24, r25
     41a:	90 e0       	ldi	r25, 0x00	; 0
}
     41c:	80 53       	subi	r24, 0x30	; 48
     41e:	98 4f       	sbci	r25, 0xF8	; 248
     420:	08 95       	ret

00000422 <_ZN6DS133710setSecondsEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     422:	2d ec       	ldi	r18, 0xCD	; 205
     424:	62 9f       	mul	r22, r18
     426:	21 2d       	mov	r18, r1
     428:	11 24       	eor	r1, r1
     42a:	26 95       	lsr	r18
     42c:	26 95       	lsr	r18
     42e:	26 95       	lsr	r18
     430:	42 2f       	mov	r20, r18
     432:	44 0f       	add	r20, r20
     434:	34 2f       	mov	r19, r20
     436:	33 0f       	add	r19, r19
     438:	33 0f       	add	r19, r19
     43a:	34 0f       	add	r19, r20
     43c:	63 1b       	sub	r22, r19
     43e:	30 e1       	ldi	r19, 0x10	; 16
     440:	23 9f       	mul	r18, r19
     442:	60 0d       	add	r22, r0
     444:	11 24       	eor	r1, r1
}


void DS1337::setSeconds(unsigned char v)
{
    rtc_bcd[DS1337_SEC] = bin2bcd(v);
     446:	fc 01       	movw	r30, r24
     448:	62 83       	std	Z+2, r22	; 0x02
     44a:	08 95       	ret

0000044c <_ZN6DS133710setMinutesEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     44c:	2d ec       	ldi	r18, 0xCD	; 205
     44e:	62 9f       	mul	r22, r18
     450:	21 2d       	mov	r18, r1
     452:	11 24       	eor	r1, r1
     454:	26 95       	lsr	r18
     456:	26 95       	lsr	r18
     458:	26 95       	lsr	r18
     45a:	42 2f       	mov	r20, r18
     45c:	44 0f       	add	r20, r20
     45e:	34 2f       	mov	r19, r20
     460:	33 0f       	add	r19, r19
     462:	33 0f       	add	r19, r19
     464:	34 0f       	add	r19, r20
     466:	63 1b       	sub	r22, r19
     468:	30 e1       	ldi	r19, 0x10	; 16
     46a:	23 9f       	mul	r18, r19
     46c:	60 0d       	add	r22, r0
     46e:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_SEC] = bin2bcd(v);

}
void DS1337::setMinutes(unsigned char v)
{
    rtc_bcd[DS1337_MIN] = bin2bcd(v);
     470:	fc 01       	movw	r30, r24
     472:	63 83       	std	Z+3, r22	; 0x03
     474:	08 95       	ret

00000476 <_ZN6DS13378setHoursEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     476:	2d ec       	ldi	r18, 0xCD	; 205
     478:	62 9f       	mul	r22, r18
     47a:	21 2d       	mov	r18, r1
     47c:	11 24       	eor	r1, r1
     47e:	26 95       	lsr	r18
     480:	26 95       	lsr	r18
     482:	26 95       	lsr	r18
     484:	42 2f       	mov	r20, r18
     486:	44 0f       	add	r20, r20
     488:	34 2f       	mov	r19, r20
     48a:	33 0f       	add	r19, r19
     48c:	33 0f       	add	r19, r19
     48e:	34 0f       	add	r19, r20
     490:	63 1b       	sub	r22, r19
     492:	30 e1       	ldi	r19, 0x10	; 16
     494:	23 9f       	mul	r18, r19
     496:	60 0d       	add	r22, r0
     498:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_MIN] = bin2bcd(v);

}
void DS1337::setHours(unsigned char v)
{
    rtc_bcd[DS1337_HR] = bin2bcd(v);
     49a:	fc 01       	movw	r30, r24
     49c:	64 83       	std	Z+4, r22	; 0x04
     49e:	08 95       	ret

000004a0 <_ZN6DS13377setDaysEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     4a0:	2d ec       	ldi	r18, 0xCD	; 205
     4a2:	62 9f       	mul	r22, r18
     4a4:	21 2d       	mov	r18, r1
     4a6:	11 24       	eor	r1, r1
     4a8:	26 95       	lsr	r18
     4aa:	26 95       	lsr	r18
     4ac:	26 95       	lsr	r18
     4ae:	42 2f       	mov	r20, r18
     4b0:	44 0f       	add	r20, r20
     4b2:	34 2f       	mov	r19, r20
     4b4:	33 0f       	add	r19, r19
     4b6:	33 0f       	add	r19, r19
     4b8:	34 0f       	add	r19, r20
     4ba:	63 1b       	sub	r22, r19
     4bc:	30 e1       	ldi	r19, 0x10	; 16
     4be:	23 9f       	mul	r18, r19
     4c0:	60 0d       	add	r22, r0
     4c2:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_HR] = bin2bcd(v);

}
void DS1337::setDays(unsigned char v)
{
    rtc_bcd[DS1337_DATE] = bin2bcd(v);
     4c4:	fc 01       	movw	r30, r24
     4c6:	66 83       	std	Z+6, r22	; 0x06
     4c8:	08 95       	ret

000004ca <_ZN6DS13379setMonthsEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     4ca:	2d ec       	ldi	r18, 0xCD	; 205
     4cc:	62 9f       	mul	r22, r18
     4ce:	21 2d       	mov	r18, r1
     4d0:	11 24       	eor	r1, r1
     4d2:	26 95       	lsr	r18
     4d4:	26 95       	lsr	r18
     4d6:	26 95       	lsr	r18
     4d8:	42 2f       	mov	r20, r18
     4da:	44 0f       	add	r20, r20
     4dc:	34 2f       	mov	r19, r20
     4de:	33 0f       	add	r19, r19
     4e0:	33 0f       	add	r19, r19
     4e2:	34 0f       	add	r19, r20
     4e4:	63 1b       	sub	r22, r19
     4e6:	30 e1       	ldi	r19, 0x10	; 16
     4e8:	23 9f       	mul	r18, r19
     4ea:	60 0d       	add	r22, r0
     4ec:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_DOW] = bin2bcd(v);

}
void DS1337::setMonths(unsigned char v)
{
    rtc_bcd[DS1337_MTH] = bin2bcd(v);
     4ee:	fc 01       	movw	r30, r24
     4f0:	67 83       	std	Z+7, r22	; 0x07
     4f2:	08 95       	ret

000004f4 <_ZN6DS13378setYearsEj>:

}
void DS1337::setYears(unsigned int v)
{
     4f4:	fc 01       	movw	r30, r24
    if (v>1999)
     4f6:	60 3d       	cpi	r22, 0xD0	; 208
     4f8:	87 e0       	ldi	r24, 0x07	; 7
     4fa:	78 07       	cpc	r23, r24
     4fc:	10 f0       	brcs	.+4      	; 0x502 <__stack+0x3>
    {
        v -= 2000;
     4fe:	60 5d       	subi	r22, 0xD0	; 208
     500:	77 40       	sbci	r23, 0x07	; 7
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     502:	9d ec       	ldi	r25, 0xCD	; 205
     504:	69 9f       	mul	r22, r25
     506:	91 2d       	mov	r25, r1
     508:	11 24       	eor	r1, r1
     50a:	96 95       	lsr	r25
     50c:	96 95       	lsr	r25
     50e:	96 95       	lsr	r25
     510:	39 2f       	mov	r19, r25
     512:	33 0f       	add	r19, r19
     514:	23 2f       	mov	r18, r19
     516:	22 0f       	add	r18, r18
     518:	22 0f       	add	r18, r18
     51a:	23 0f       	add	r18, r19
     51c:	62 1b       	sub	r22, r18
     51e:	80 e1       	ldi	r24, 0x10	; 16
     520:	98 9f       	mul	r25, r24
     522:	60 0d       	add	r22, r0
     524:	11 24       	eor	r1, r1
{
    if (v>1999)
    {
        v -= 2000;
    }
    rtc_bcd[DS1337_YR] = bin2bcd(v);
     526:	60 87       	std	Z+8, r22	; 0x08
     528:	08 95       	ret

0000052a <_ZN6DS13378readTimeEv>:
}

// Aquire data from the RTC chip in BCD format
// refresh the buffer
void DS1337::readTime(void)
{
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	8c 01       	movw	r16, r24
// use the Wire lib to connect to tho rtc
// reset the register pointer to zero
	Wire.beginTransmission(DS1337_CTRL_ID);
     534:	68 e6       	ldi	r22, 0x68	; 104
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	85 e8       	ldi	r24, 0x85	; 133
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_ZN7TwoWire17beginTransmissionEi>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     540:	e0 91 85 02 	lds	r30, 0x0285
     544:	f0 91 86 02 	lds	r31, 0x0286
     548:	01 90       	ld	r0, Z+
     54a:	f0 81       	ld	r31, Z
     54c:	e0 2d       	mov	r30, r0
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	85 e8       	ldi	r24, 0x85	; 133
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	09 95       	icall
	Wire.write(0x00);
	Wire.endTransmission();
     556:	85 e8       	ldi	r24, 0x85	; 133
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <_ZN7TwoWire15endTransmissionEv>

// request the 7 bytes of data    (secs, min, hr, dow, date. mth, yr)
	Wire.requestFrom(DS1337_CTRL_ID, 7);
     55e:	47 e0       	ldi	r20, 0x07	; 7
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	68 e6       	ldi	r22, 0x68	; 104
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	85 e8       	ldi	r24, 0x85	; 133
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_ZN7TwoWire11requestFromEii>
     56e:	e8 01       	movw	r28, r16
     570:	22 96       	adiw	r28, 0x02	; 2
     572:	07 5f       	subi	r16, 0xF7	; 247
     574:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int i=0; i<7; i++)
	{
	// store data in raw bcd format
		if (Wire.available())
     576:	85 e8       	ldi	r24, 0x85	; 133
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN7TwoWire9availableEv>
     57e:	89 2b       	or	r24, r25
     580:	29 f0       	breq	.+10     	; 0x58c <_ZN6DS13378readTimeEv+0x62>
			rtc_bcd[i]=Wire.read();
     582:	85 e8       	ldi	r24, 0x85	; 133
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire4readEv>
     58a:	88 83       	st	Y, r24
     58c:	21 96       	adiw	r28, 0x01	; 1
	Wire.write(0x00);
	Wire.endTransmission();

// request the 7 bytes of data    (secs, min, hr, dow, date. mth, yr)
	Wire.requestFrom(DS1337_CTRL_ID, 7);
	for(int i=0; i<7; i++)
     58e:	c0 17       	cp	r28, r16
     590:	d1 07       	cpc	r29, r17
     592:	89 f7       	brne	.-30     	; 0x576 <_ZN6DS13378readTimeEv+0x4c>
	{
	// store data in raw bcd format
		if (Wire.available())
			rtc_bcd[i]=Wire.read();
	}
}
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	08 95       	ret

0000059e <_ZN6DS133711getRegisterEh>:
...
} */


unsigned char DS1337::getRegister(unsigned char registerNumber)
{
     59e:	cf 93       	push	r28
     5a0:	c6 2f       	mov	r28, r22
	Wire.beginTransmission(DS1337_CTRL_ID);
     5a2:	68 e6       	ldi	r22, 0x68	; 104
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	85 e8       	ldi	r24, 0x85	; 133
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(registerNumber);
     5ae:	6c 2f       	mov	r22, r28
     5b0:	85 e8       	ldi	r24, 0x85	; 133
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     5b8:	85 e8       	ldi	r24, 0x85	; 133
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <_ZN7TwoWire15endTransmissionEv>

	Wire.requestFrom(DS1337_CTRL_ID, 1);
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	68 e6       	ldi	r22, 0x68	; 104
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	85 e8       	ldi	r24, 0x85	; 133
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_ZN7TwoWire11requestFromEii>

	return Wire.read();
     5d0:	85 e8       	ldi	r24, 0x85	; 133
     5d2:	92 e0       	ldi	r25, 0x02	; 2
     5d4:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire4readEv>
}
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <_ZN6DS133711time_is_setEv>:
}

unsigned char DS1337::time_is_set()
{
  // Return TRUE if Oscillator Stop Flag is clear (osc. not stopped since last time setting), FALSE otherwise
  byte asdf = ((getRegister(DS1337_STATUS) & DS1337_STATUS_OSF) == 0);
     5dc:	6f e0       	ldi	r22, 0x0F	; 15
     5de:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN6DS133711getRegisterEh>
     5e2:	80 95       	com	r24
  return asdf;
}
     5e4:	88 1f       	adc	r24, r24
     5e6:	88 27       	eor	r24, r24
     5e8:	88 1f       	adc	r24, r24
     5ea:	08 95       	ret

000005ec <_ZN6DS133711setRegisterEhh>:

	return Wire.read();
}

void DS1337::setRegister(unsigned char registerNumber, unsigned char value)
{
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	d6 2f       	mov	r29, r22
     5f2:	c4 2f       	mov	r28, r20
	Wire.beginTransmission(DS1337_CTRL_ID);
     5f4:	68 e6       	ldi	r22, 0x68	; 104
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	85 e8       	ldi	r24, 0x85	; 133
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(registerNumber); // set register pointer
     600:	6d 2f       	mov	r22, r29
     602:	85 e8       	ldi	r24, 0x85	; 133
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZN7TwoWire5writeEh>

	Wire.write(value);
     60a:	6c 2f       	mov	r22, r28
     60c:	85 e8       	ldi	r24, 0x85	; 133
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZN7TwoWire5writeEh>

	Wire.endTransmission();
     614:	85 e8       	ldi	r24, 0x85	; 133
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <_ZN7TwoWire15endTransmissionEv>
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <_ZN6DS13375startEv>:
{
	setRegister(DS1337_SP, getRegister(DS1337_SP) | DS1337_SP_EOSC);
}

void DS1337::start(void)
{
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	ec 01       	movw	r28, r24
	setRegister(DS1337_SP, getRegister(DS1337_SP) & !DS1337_SP_EOSC);
     628:	6e e0       	ldi	r22, 0x0E	; 14
     62a:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN6DS133711getRegisterEh>
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	6e e0       	ldi	r22, 0x0E	; 14
     632:	ce 01       	movw	r24, r28
     634:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN6DS133711setRegisterEhh>
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <_ZN6DS13379writeTimeEv>:
}

// update the data on the IC from the bcd formatted data in the buffer

void DS1337::writeTime(void)
{
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	7c 01       	movw	r14, r24
        //byte temp;
	Wire.beginTransmission(DS1337_CTRL_ID);
     64c:	68 e6       	ldi	r22, 0x68	; 104
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	85 e8       	ldi	r24, 0x85	; 133
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_ZN7TwoWire17beginTransmissionEi>
     658:	e0 91 85 02 	lds	r30, 0x0285
     65c:	f0 91 86 02 	lds	r31, 0x0286
     660:	01 90       	ld	r0, Z+
     662:	f0 81       	ld	r31, Z
     664:	e0 2d       	mov	r30, r0
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	85 e8       	ldi	r24, 0x85	; 133
     66a:	92 e0       	ldi	r25, 0x02	; 2
     66c:	09 95       	icall
     66e:	e7 01       	movw	r28, r14
     670:	22 96       	adiw	r28, 0x02	; 2
     672:	87 01       	movw	r16, r14
     674:	07 5f       	subi	r16, 0xF7	; 247
     676:	1f 4f       	sbci	r17, 0xFF	; 255
	Wire.write(0x00); // reset register pointer
	for(int i=0; i<7; i++)
	{
		Wire.write(rtc_bcd[i]);
     678:	69 91       	ld	r22, Y+
     67a:	85 e8       	ldi	r24, 0x85	; 133
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZN7TwoWire5writeEh>
void DS1337::writeTime(void)
{
        //byte temp;
	Wire.beginTransmission(DS1337_CTRL_ID);
	Wire.write(0x00); // reset register pointer
	for(int i=0; i<7; i++)
     682:	c0 17       	cp	r28, r16
     684:	d1 07       	cpc	r29, r17
     686:	c1 f7       	brne	.-16     	; 0x678 <_ZN6DS13379writeTimeEv+0x3a>
	{
		Wire.write(rtc_bcd[i]);
	}
	Wire.endTransmission();
     688:	85 e8       	ldi	r24, 0x85	; 133
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <_ZN7TwoWire15endTransmissionEv>

	// clear the Oscillator Stop Flag
        setRegister(DS1337_STATUS, getRegister(DS1337_STATUS) & !DS1337_STATUS_OSF);
     690:	6f e0       	ldi	r22, 0x0F	; 15
     692:	c7 01       	movw	r24, r14
     694:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN6DS133711getRegisterEh>
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	6f e0       	ldi	r22, 0x0F	; 15
     69c:	c7 01       	movw	r24, r14
     69e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN6DS133711setRegisterEhh>
        //temp = getRegister(DS1337_STATUS);
        //temp &= (!DS1337_STATUS_OSF);
        //setRegister(DS1337_STATUS, temp);
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	08 95       	ret

000006b0 <_Z16Interrupt_Updatev>:
	//every time the cpu comes out of sleep or things go
	//for a toss.
	delay(_delay);	//<- this delay is only used to allow the crystal to settle if needed.
}

void Interrupt_Update(){} //This is just to attach an interrupt
     6b0:	08 95       	ret

000006b2 <_Z9gotoSleepi>:
	count+=1;
	
}

void gotoSleep(int _delay)
{
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	ec 01       	movw	r28, r24
	//allow for any tx buffer to be sent to the 
	//computer.
	delay(5);		// the only delays used in this code.
     6b8:	65 e0       	ldi	r22, 0x05	; 5
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 31 10 	call	0x2062	; 0x2062 <delay>
	//go to sleep.
	sleep_cpu();
     6c4:	88 95       	sleep
	//upon system boot the clock is set to 65ms
	//settling time. It seems we may need to do this 
	//every time the cpu comes out of sleep or things go
	//for a toss.
	delay(_delay);	//<- this delay is only used to allow the crystal to settle if needed.
     6c6:	be 01       	movw	r22, r28
     6c8:	dd 0f       	add	r29, r29
     6ca:	88 0b       	sbc	r24, r24
     6cc:	99 0b       	sbc	r25, r25
     6ce:	0e 94 31 10 	call	0x2062	; 0x2062 <delay>
}
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <_Z8readTempi>:
		}
	}
}

float readTemp (int internal)
{
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
	//We are oversampling the temp sensor by 100 cycles
	//for better overall average temperature, this gives
	//us a more stable reading.

	Temperature = 0;
     6e4:	10 92 61 01 	sts	0x0161, r1
     6e8:	10 92 62 01 	sts	0x0162, r1
     6ec:	10 92 63 01 	sts	0x0163, r1
     6f0:	10 92 64 01 	sts	0x0164, r1
	if (!internal) //if internal == 0
     6f4:	89 2b       	or	r24, r25
     6f6:	09 f0       	breq	.+2      	; 0x6fa <_Z8readTempi+0x22>
     6f8:	4d c0       	rjmp	.+154    	; 0x794 <_Z8readTempi+0xbc>
     6fa:	c4 e6       	ldi	r28, 0x64	; 100
     6fc:	d0 e0       	ldi	r29, 0x00	; 0
	{//Temperature += analogRead(LM35);

		for(int x = 0; x <= 99; x++)
		{
			Temperature += analogRead(LM35);
     6fe:	02 e0       	ldi	r16, 0x02	; 2
     700:	11 e0       	ldi	r17, 0x01	; 1
     702:	f8 01       	movw	r30, r16
     704:	80 81       	ld	r24, Z
     706:	0e 94 98 10 	call	0x2130	; 0x2130 <analogRead>
     70a:	bc 01       	movw	r22, r24
     70c:	99 0f       	add	r25, r25
     70e:	88 0b       	sbc	r24, r24
     710:	99 0b       	sbc	r25, r25
     712:	0e 94 98 12 	call	0x2530	; 0x2530 <__floatsisf>
     716:	20 91 61 01 	lds	r18, 0x0161
     71a:	30 91 62 01 	lds	r19, 0x0162
     71e:	40 91 63 01 	lds	r20, 0x0163
     722:	50 91 64 01 	lds	r21, 0x0164
     726:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__addsf3>
     72a:	60 93 61 01 	sts	0x0161, r22
     72e:	70 93 62 01 	sts	0x0162, r23
     732:	80 93 63 01 	sts	0x0163, r24
     736:	90 93 64 01 	sts	0x0164, r25
     73a:	21 97       	sbiw	r28, 0x01	; 1

	Temperature = 0;
	if (!internal) //if internal == 0
	{//Temperature += analogRead(LM35);

		for(int x = 0; x <= 99; x++)
     73c:	11 f7       	brne	.-60     	; 0x702 <_Z8readTempi+0x2a>
		// -11.69mv/C
		//The LM20 degree per C is inversely proportional
		//to its output at 1.574V T = 25C @ 303mV T = 130C
		//this equation has been calibrated for my office. Thus the
		//-7.4C.
		Temperature_C = (((11.69/Temperature)*(1024))*100)-7.4;//(1024))*100;
     73e:	9b 01       	movw	r18, r22
     740:	ac 01       	movw	r20, r24
     742:	6d e3       	ldi	r22, 0x3D	; 61
     744:	7a e0       	ldi	r23, 0x0A	; 10
     746:	8b e3       	ldi	r24, 0x3B	; 59
     748:	91 e4       	ldi	r25, 0x41	; 65
     74a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divsf3>
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e8       	ldi	r20, 0x80	; 128
     754:	54 e4       	ldi	r21, 0x44	; 68
     756:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	48 ec       	ldi	r20, 0xC8	; 200
     760:	52 e4       	ldi	r21, 0x42	; 66
     762:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     766:	2d ec       	ldi	r18, 0xCD	; 205
     768:	3c ec       	ldi	r19, 0xCC	; 204
     76a:	4c ee       	ldi	r20, 0xEC	; 236
     76c:	50 e4       	ldi	r21, 0x40	; 64
     76e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
     772:	06 2f       	mov	r16, r22
     774:	17 2f       	mov	r17, r23
     776:	28 2f       	mov	r18, r24
     778:	39 2f       	mov	r19, r25
     77a:	00 93 65 01 	sts	0x0165, r16
     77e:	10 93 66 01 	sts	0x0166, r17
     782:	20 93 67 01 	sts	0x0167, r18
     786:	30 93 68 01 	sts	0x0168, r19
		return Temperature_C;
     78a:	56 2f       	mov	r21, r22
     78c:	47 2f       	mov	r20, r23
     78e:	38 2f       	mov	r19, r24
     790:	29 2f       	mov	r18, r25
     792:	35 c0       	rjmp	.+106    	; 0x7fe <_Z8readTempi+0x126>
     794:	c4 e6       	ldi	r28, 0x64	; 100
     796:	d0 e0       	ldi	r29, 0x00	; 0
     798:	00 e0       	ldi	r16, 0x00	; 0
     79a:	10 e0       	ldi	r17, 0x00	; 0
	{
		int iTemp_C = 0;
		int iTemperature = 0;
		for(int x = 0; x <= 99; x++)
		{
			iTemperature += analogRead(LM35);
     79c:	0f 2e       	mov	r0, r31
     79e:	f2 e0       	ldi	r31, 0x02	; 2
     7a0:	ef 2e       	mov	r14, r31
     7a2:	f1 e0       	ldi	r31, 0x01	; 1
     7a4:	ff 2e       	mov	r15, r31
     7a6:	f0 2d       	mov	r31, r0
     7a8:	f7 01       	movw	r30, r14
     7aa:	80 81       	ld	r24, Z
     7ac:	0e 94 98 10 	call	0x2130	; 0x2130 <analogRead>
     7b0:	08 0f       	add	r16, r24
     7b2:	19 1f       	adc	r17, r25
     7b4:	21 97       	sbiw	r28, 0x01	; 1
	}
	else
	{
		int iTemp_C = 0;
		int iTemperature = 0;
		for(int x = 0; x <= 99; x++)
     7b6:	c1 f7       	brne	.-16     	; 0x7a8 <_Z8readTempi+0xd0>
		{
			iTemperature += analogRead(LM35);
		}
		iTemperature = iTemperature/100;
     7b8:	c8 01       	movw	r24, r16
     7ba:	64 e6       	ldi	r22, 0x64	; 100
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	0e 94 bf 13 	call	0x277e	; 0x277e <__divmodhi4>
		
		//same equation as above but we add 10 to the
		//final calculation since the display only displays
		//ints and not floats, we loose some accuracy, about
		//10degrees C.
		iTemp_C = iTemperature * ((5.0*1000/1024)) + 10;
     7c2:	07 2e       	mov	r0, r23
     7c4:	00 0c       	add	r0, r0
     7c6:	88 0b       	sbc	r24, r24
     7c8:	99 0b       	sbc	r25, r25
     7ca:	0e 94 98 12 	call	0x2530	; 0x2530 <__floatsisf>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e4       	ldi	r19, 0x40	; 64
     7d2:	4c e9       	ldi	r20, 0x9C	; 156
     7d4:	50 e4       	ldi	r21, 0x40	; 64
     7d6:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e2       	ldi	r20, 0x20	; 32
     7e0:	51 e4       	ldi	r21, 0x41	; 65
     7e2:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__addsf3>
     7e6:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__fixsfsi>

		return iTemp_C;
     7ea:	07 2e       	mov	r0, r23
     7ec:	00 0c       	add	r0, r0
     7ee:	88 0b       	sbc	r24, r24
     7f0:	99 0b       	sbc	r25, r25
     7f2:	0e 94 98 12 	call	0x2530	; 0x2530 <__floatsisf>
     7f6:	56 2f       	mov	r21, r22
     7f8:	47 2f       	mov	r20, r23
     7fa:	38 2f       	mov	r19, r24
     7fc:	29 2f       	mov	r18, r25
	}
}
     7fe:	65 2f       	mov	r22, r21
     800:	74 2f       	mov	r23, r20
     802:	83 2f       	mov	r24, r19
     804:	92 2f       	mov	r25, r18
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	08 95       	ret

00000814 <_Z11convertTimei>:
{
	//This function is used to convert
	//a time eg a 24hr clock into a 12 hr
	//clock.
	
	if (value > 12)
     814:	8d 30       	cpi	r24, 0x0D	; 13
     816:	91 05       	cpc	r25, r1
     818:	24 f0       	brlt	.+8      	; 0x822 <_Z11convertTimei+0xe>
	{
		value -= 12;
		return value;
     81a:	9c 01       	movw	r18, r24
     81c:	2c 50       	subi	r18, 0x0C	; 12
     81e:	31 09       	sbc	r19, r1
     820:	05 c0       	rjmp	.+10     	; 0x82c <_Z11convertTimei+0x18>
	}
	else if (!value)
     822:	89 2b       	or	r24, r25
     824:	09 f0       	breq	.+2      	; 0x828 <_Z11convertTimei+0x14>
     826:	08 95       	ret
	{
		value = 12;
		return value;
     828:	2c e0       	ldi	r18, 0x0C	; 12
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	82 2f       	mov	r24, r18
     82e:	93 2f       	mov	r25, r19
	}
}
     830:	08 95       	ret

00000832 <_Z15Internal_Updatev>:
	//This function internally updates everything.
	///////////////////////////////////////////////////////////
	int HR = 0;
	
	//DateTime now = rtc.now();
	RTC.readTime();
     832:	80 e5       	ldi	r24, 0x50	; 80
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6DS13378readTimeEv>
	
	//This is mostly for debug purposes.
	Serial.print(F(" Time/Date: "));
     83a:	6b e2       	ldi	r22, 0x2B	; 43
     83c:	72 e0       	ldi	r23, 0x02	; 2
     83e:	89 e6       	ldi	r24, 0x69	; 105
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(RTC.getYears(), DEC);
     846:	80 e5       	ldi	r24, 0x50	; 80
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN6DS13378getYearsEv>
     84e:	4a e0       	ldi	r20, 0x0A	; 10
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	bc 01       	movw	r22, r24
     854:	89 e6       	ldi	r24, 0x69	; 105
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN5Print5printEji>
	Serial.print('/');
     85c:	6f e2       	ldi	r22, 0x2F	; 47
     85e:	89 e6       	ldi	r24, 0x69	; 105
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print5printEc>
	Serial.print(RTC.getMonths(), DEC);
     866:	80 e5       	ldi	r24, 0x50	; 80
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN6DS13379getMonthsEv>
     86e:	4a e0       	ldi	r20, 0x0A	; 10
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	68 2f       	mov	r22, r24
     874:	89 e6       	ldi	r24, 0x69	; 105
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN5Print5printEhi>
	Serial.print('/');
     87c:	6f e2       	ldi	r22, 0x2F	; 47
     87e:	89 e6       	ldi	r24, 0x69	; 105
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print5printEc>
	Serial.print(RTC.getDays(), DEC);
     886:	80 e5       	ldi	r24, 0x50	; 80
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN6DS13377getDaysEv>
     88e:	4a e0       	ldi	r20, 0x0A	; 10
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	68 2f       	mov	r22, r24
     894:	89 e6       	ldi	r24, 0x69	; 105
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN5Print5printEhi>
	Serial.print(' ');
     89c:	60 e2       	ldi	r22, 0x20	; 32
     89e:	89 e6       	ldi	r24, 0x69	; 105
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print5printEc>
	//Converting from 24hr to 12hr time.
	HR = RTC.getHours();
     8a6:	80 e5       	ldi	r24, 0x50	; 80
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN6DS13378getHoursEv>
     8ae:	90 e0       	ldi	r25, 0x00	; 0
	
	//This tells us if its AM or PM
	//clock defaults to AM when first
	//started until stored in eeprom.
	if((HR <= 23) && (HR > 11))
     8b0:	9c 01       	movw	r18, r24
     8b2:	2c 50       	subi	r18, 0x0C	; 12
     8b4:	31 09       	sbc	r19, r1
     8b6:	2c 30       	cpi	r18, 0x0C	; 12
     8b8:	31 05       	cpc	r19, r1
     8ba:	38 f4       	brcc	.+14     	; 0x8ca <_Z15Internal_Updatev+0x98>
	{
		AM_PM = 1;
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	30 93 60 01 	sts	0x0160, r19
     8c4:	20 93 5f 01 	sts	0x015F, r18
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <_Z15Internal_Updatev+0xa0>
	}
	else
	{
		AM_PM = 0;
     8ca:	10 92 60 01 	sts	0x0160, r1
     8ce:	10 92 5f 01 	sts	0x015F, r1
	}
	
	//convert 24hr clock to 12hr clock
	HR = convertTime(HR);
     8d2:	0e 94 0a 04 	call	0x814	; 0x814 <_Z11convertTimei>
	
	Serial.print(HR, DEC);
     8d6:	4a e0       	ldi	r20, 0x0A	; 10
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	bc 01       	movw	r22, r24
     8dc:	89 e6       	ldi	r24, 0x69	; 105
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN5Print5printEii>
	Serial.print(':');
     8e4:	6a e3       	ldi	r22, 0x3A	; 58
     8e6:	89 e6       	ldi	r24, 0x69	; 105
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print5printEc>
	//Serial.print(now.minute(), DEC);
	Serial.print(RTC.getMinutes(), DEC);
     8ee:	80 e5       	ldi	r24, 0x50	; 80
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN6DS133710getMinutesEv>
     8f6:	4a e0       	ldi	r20, 0x0A	; 10
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	68 2f       	mov	r22, r24
     8fc:	89 e6       	ldi	r24, 0x69	; 105
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN5Print5printEhi>
	Serial.print(':');
     904:	6a e3       	ldi	r22, 0x3A	; 58
     906:	89 e6       	ldi	r24, 0x69	; 105
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print5printEc>
	//Serial.print(now.second(), DEC);
	Serial.print(RTC.getSeconds(), DEC);
     90e:	80 e5       	ldi	r24, 0x50	; 80
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN6DS133710getSecondsEv>
     916:	4a e0       	ldi	r20, 0x0A	; 10
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	68 2f       	mov	r22, r24
     91c:	89 e6       	ldi	r24, 0x69	; 105
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN5Print5printEhi>
	Serial.print(" ");
     924:	62 e1       	ldi	r22, 0x12	; 18
     926:	71 e0       	ldi	r23, 0x01	; 1
     928:	89 e6       	ldi	r24, 0x69	; 105
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
	if(AM_PM == 0)
     930:	80 91 5f 01 	lds	r24, 0x015F
     934:	90 91 60 01 	lds	r25, 0x0160
     938:	89 2b       	or	r24, r25
     93a:	39 f4       	brne	.+14     	; 0x94a <_Z15Internal_Updatev+0x118>
	{
		Serial.print(F("AM"));
     93c:	68 e2       	ldi	r22, 0x28	; 40
     93e:	72 e0       	ldi	r23, 0x02	; 2
     940:	89 e6       	ldi	r24, 0x69	; 105
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN5Print5printEPK19__FlashStringHelper>
     948:	06 c0       	rjmp	.+12     	; 0x956 <_Z15Internal_Updatev+0x124>
	}
	else{Serial.print(F("PM"));}
     94a:	65 e2       	ldi	r22, 0x25	; 37
     94c:	72 e0       	ldi	r23, 0x02	; 2
     94e:	89 e6       	ldi	r24, 0x69	; 105
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN5Print5printEPK19__FlashStringHelper>
	
	//outputting temp.
	Serial.print(" ");
     956:	62 e1       	ldi	r22, 0x12	; 18
     958:	71 e0       	ldi	r23, 0x01	; 1
     95a:	89 e6       	ldi	r24, 0x69	; 105
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
	//Temperature_C = readTemp(0);
	Serial.print(readTemp(0));
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_Z8readTempi>
     96a:	ab 01       	movw	r20, r22
     96c:	bc 01       	movw	r22, r24
     96e:	22 e0       	ldi	r18, 0x02	; 2
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	89 e6       	ldi	r24, 0x69	; 105
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN5Print5printEdi>
	//Serial.print(Temperature_C);
	Serial.print(F("°C "));
     97a:	60 e2       	ldi	r22, 0x20	; 32
     97c:	72 e0       	ldi	r23, 0x02	; 2
     97e:	89 e6       	ldi	r24, 0x69	; 105
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN5Print5printEPK19__FlashStringHelper>
*/
	//Clearing the Terminal screen
	//This is hacked.
	//Serial.write(27);
	//Serial.print("[H");
	Serial.print(count_internal);
     986:	60 91 59 01 	lds	r22, 0x0159
     98a:	70 91 5a 01 	lds	r23, 0x015A
     98e:	4a e0       	ldi	r20, 0x0A	; 10
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	89 e6       	ldi	r24, 0x69	; 105
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN5Print5printEii>
	count_internal +=1;
     99a:	80 91 59 01 	lds	r24, 0x0159
     99e:	90 91 5a 01 	lds	r25, 0x015A
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	90 93 5a 01 	sts	0x015A, r25
     9a8:	80 93 59 01 	sts	0x0159, r24
	Serial.print("\r\n");
     9ac:	64 e1       	ldi	r22, 0x14	; 20
     9ae:	71 e0       	ldi	r23, 0x01	; 1
     9b0:	89 e6       	ldi	r24, 0x69	; 105
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
     9b8:	08 95       	ret

000009ba <_GLOBAL__sub_I_INTERUPT_0>:
int SECONDS_LAST = 0;
int count = 0;
int count_internal = 0;

//RTC_DS1307 rtc;             //Creating a new RTC object.
DS1337 RTC = DS1337();
     9ba:	80 e5       	ldi	r24, 0x50	; 80
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6DS1337C1Ev>
     9c2:	08 95       	ret

000009c4 <loop>:
void loop()
{
	//Serial.print("Im awake.\r\n");
	
	//update the RTC buffers
	RTC.readTime();
     9c4:	80 e5       	ldi	r24, 0x50	; 80
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6DS13378readTimeEv>
	if(RTC.getSeconds() < PPS_TIMER){SECONDS_LAST = 0;}
     9cc:	80 e5       	ldi	r24, 0x50	; 80
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN6DS133710getSecondsEv>
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	20 91 00 01 	lds	r18, 0x0100
     9da:	30 91 01 01 	lds	r19, 0x0101
     9de:	82 17       	cp	r24, r18
     9e0:	93 07       	cpc	r25, r19
     9e2:	24 f4       	brge	.+8      	; 0x9ec <loop+0x28>
     9e4:	10 92 5e 01 	sts	0x015E, r1
     9e8:	10 92 5d 01 	sts	0x015D, r1
		
	if(RTC.getSeconds() - SECONDS_LAST >= PPS_TIMER)
     9ec:	80 e5       	ldi	r24, 0x50	; 80
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN6DS133710getSecondsEv>
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	20 91 5d 01 	lds	r18, 0x015D
     9fa:	30 91 5e 01 	lds	r19, 0x015E
     9fe:	82 1b       	sub	r24, r18
     a00:	93 0b       	sbc	r25, r19
     a02:	20 91 00 01 	lds	r18, 0x0100
     a06:	30 91 01 01 	lds	r19, 0x0101
     a0a:	82 17       	cp	r24, r18
     a0c:	93 07       	cpc	r25, r19
     a0e:	7c f0       	brlt	.+30     	; 0xa2e <loop+0x6a>
	{
		//detachInterrupt(0);
		//Start the internal update
		Internal_Update();
     a10:	0e 94 19 04 	call	0x832	; 0x832 <_Z15Internal_Updatev>
		
		//Update the VFD display
		//Update_Display();
		
		SECONDS_LAST = RTC.getSeconds();
     a14:	80 e5       	ldi	r24, 0x50	; 80
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN6DS133710getSecondsEv>
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	90 93 5e 01 	sts	0x015E, r25
     a22:	80 93 5d 01 	sts	0x015D, r24
		//Flush the serial buffer for good measure.
		Serial.flush();
     a26:	89 e6       	ldi	r24, 0x69	; 105
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN14HardwareSerial5flushEv>
	}
	
	if (digitalRead(Select_BTN)==HIGH)
     a2e:	80 91 0c 01 	lds	r24, 0x010C
     a32:	0e 94 53 11 	call	0x22a6	; 0x22a6 <digitalRead>
	{
		//setTime();
	}
	
	if(digitalRead(Next_BTN)==HIGH)
     a36:	80 91 0a 01 	lds	r24, 0x010A
     a3a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <digitalRead>
	//attachInterrupt(0, Interrupt_Update, FALLING); // set our interrupt backup.
	
	//set the clock to sleep
	//Serial.print("Going to sleep.\r\n");

	gotoSleep(0);
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_Z9gotoSleepi>
	Serial.print(count,DEC);
     a46:	60 91 5b 01 	lds	r22, 0x015B
     a4a:	70 91 5c 01 	lds	r23, 0x015C
     a4e:	4a e0       	ldi	r20, 0x0A	; 10
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	89 e6       	ldi	r24, 0x69	; 105
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN5Print5printEii>
	if(count == 9){count = 0;}
     a5a:	80 91 5b 01 	lds	r24, 0x015B
     a5e:	90 91 5c 01 	lds	r25, 0x015C
     a62:	09 97       	sbiw	r24, 0x09	; 9
     a64:	21 f4       	brne	.+8      	; 0xa6e <loop+0xaa>
     a66:	10 92 5c 01 	sts	0x015C, r1
     a6a:	10 92 5b 01 	sts	0x015B, r1
	count+=1;
     a6e:	80 91 5b 01 	lds	r24, 0x015B
     a72:	90 91 5c 01 	lds	r25, 0x015C
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	90 93 5c 01 	sts	0x015C, r25
     a7c:	80 93 5b 01 	sts	0x015B, r24
     a80:	08 95       	ret

00000a82 <_Z9i2c_writehPhh>:
 * \param buf A pointer to a buffer from which to read the data. 
 * \param num The number of bytes to write. 
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t i2c_write(uint8_t addr, uint8_t* buf, uint8_t num) {
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	7b 01       	movw	r14, r22
     a90:	14 2f       	mov	r17, r20
  Wire.beginTransmission(addr);
     a92:	68 2f       	mov	r22, r24
     a94:	85 e8       	ldi	r24, 0x85	; 133
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <_ZN7TwoWire17beginTransmissionEh>
  for (uint8_t i = 0; i < num; i++) {
     a9c:	11 23       	and	r17, r17
     a9e:	81 f0       	breq	.+32     	; 0xac0 <_Z9i2c_writehPhh+0x3e>
     aa0:	e7 01       	movw	r28, r14
     aa2:	11 50       	subi	r17, 0x01	; 1
     aa4:	01 2f       	mov	r16, r17
     aa6:	10 e0       	ldi	r17, 0x00	; 0
     aa8:	0f 5f       	subi	r16, 0xFF	; 255
     aaa:	1f 4f       	sbci	r17, 0xFF	; 255
     aac:	0e 0d       	add	r16, r14
     aae:	1f 1d       	adc	r17, r15
    Wire.write(buf[i]);
     ab0:	69 91       	ld	r22, Y+
     ab2:	85 e8       	ldi	r24, 0x85	; 133
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZN7TwoWire5writeEh>
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t i2c_write(uint8_t addr, uint8_t* buf, uint8_t num) {
  Wire.beginTransmission(addr);
  for (uint8_t i = 0; i < num; i++) {
     aba:	c0 17       	cp	r28, r16
     abc:	d1 07       	cpc	r29, r17
     abe:	c1 f7       	brne	.-16     	; 0xab0 <_Z9i2c_writehPhh+0x2e>
    Wire.write(buf[i]);
  }
  return Wire.endTransmission();
     ac0:	85 e8       	ldi	r24, 0x85	; 133
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <_ZN7TwoWire15endTransmissionEv>
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	08 95       	ret

00000ad6 <_Z18ds1337_set_controlh>:
 *
 * \param ctrl The value to set. 
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t ds1337_set_control(uint8_t ctrl) {
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	00 d0       	rcall	.+0      	; 0xadc <_Z18ds1337_set_controlh+0x6>
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
   uint8_t buf[2];
   buf[0] = DS1337_REG_CONTROL;
     ae0:	9e e0       	ldi	r25, 0x0E	; 14
     ae2:	99 83       	std	Y+1, r25	; 0x01
   buf[1] = ctrl;
     ae4:	8a 83       	std	Y+2, r24	; 0x02
   return i2c_write(DS1337_ADDR, buf, 2);
     ae6:	42 e0       	ldi	r20, 0x02	; 2
     ae8:	be 01       	movw	r22, r28
     aea:	6f 5f       	subi	r22, 0xFF	; 255
     aec:	7f 4f       	sbci	r23, 0xFF	; 255
     aee:	88 e6       	ldi	r24, 0x68	; 104
     af0:	0e 94 41 05 	call	0xa82	; 0xa82 <_Z9i2c_writehPhh>
}
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <_Z25ds1337_clear_control_bitsh>:
 * \param mask A mask specifying which bits to clear. (High bits will be cleared.) 
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t ds1337_clear_control_bits(uint8_t mask) {
	return ds1337_set_control(~mask);
     afe:	80 95       	com	r24
     b00:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z18ds1337_set_controlh>
     b04:	08 95       	ret

00000b06 <_Z4Initv>:
}

void Interrupt_Update(){} //This is just to attach an interrupt

void Init()
{
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <_Z4Initv+0x6>
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <_Z4Initv+0x8>
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <_Z4Initv+0xa>
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     b14:	26 e0       	ldi	r18, 0x06	; 6
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	52 ec       	ldi	r21, 0xC2	; 194
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	89 e6       	ldi	r24, 0x69	; 105
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN14HardwareSerial5beginEmh>
	///////////////////////////////////////////////////////////
	
	//Coms will be setup later.
	Serial.begin(115200);
	
	Wire.begin();
     b26:	85 e8       	ldi	r24, 0x85	; 133
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <_ZN7TwoWire5beginEv>
	//pullups on the SDA(), and SCL() pins.
	
	SCL_PORT |= _BV(SCL_BIT);   // enable pull up on TWI clock line
	SDA_PORT |= _BV(SDA_BIT);   // enable pull up on TWI data line
	#else
	SCL_PORT &= _BV(SCL_BIT);   // disable pull up on TWI clock line
     b2e:	88 b1       	in	r24, 0x08	; 8
     b30:	80 72       	andi	r24, 0x20	; 32
     b32:	88 b9       	out	0x08, r24	; 8
	SDA_PORT &= _BV(SDA_BIT);   // disable pull up on TWI data line
     b34:	88 b1       	in	r24, 0x08	; 8
     b36:	80 71       	andi	r24, 0x10	; 16
     b38:	88 b9       	out	0x08, r24	; 8
	#endif
	
	RTC.start(); //starts the DS1337
     b3a:	80 e5       	ldi	r24, 0x50	; 80
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 11 03 	call	0x622	; 0x622 <_ZN6DS13375startEv>
	///////////////////////////////////////////////////////////
	//Pin Functions
	///////////////////////////////////////////////////////////

	//pinMode(Freq_Adj, INPUT);
	pinMode(INTERUPT_0, INPUT);
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	80 91 0e 01 	lds	r24, 0x010E
     b48:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <pinMode>
	pinMode(DATA_PIN, OUTPUT);
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	80 91 08 01 	lds	r24, 0x0108
     b52:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <pinMode>
	pinMode(CLOCK, OUTPUT);
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	80 91 04 01 	lds	r24, 0x0104
     b5c:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <pinMode>
	pinMode(LATCH, OUTPUT);
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	80 91 06 01 	lds	r24, 0x0106
     b66:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <pinMode>
	pinMode(Select_BTN, INPUT);
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	80 91 0c 01 	lds	r24, 0x010C
     b70:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <pinMode>
	pinMode(Next_BTN, INPUT);
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	80 91 0a 01 	lds	r24, 0x010A
     b7a:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <pinMode>
	pinMode(LM35, INPUT);
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	80 91 02 01 	lds	r24, 0x0102
     b84:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <pinMode>
	
	///////////////////////////////////////////////////////////
	//If the RTC is not currently set to the correct time set the time
	//based on the time used when compiling this firmware.
	///////////////////////////////////////////////////////////
	if(!RTC.time_is_set())
     b88:	80 e5       	ldi	r24, 0x50	; 80
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN6DS133711time_is_setEv>
     b90:	81 11       	cpse	r24, r1
     b92:	84 c0       	rjmp	.+264    	; 0xc9c <_Z4Initv+0x196>
	{
		DateTime now = DateTime(F(__DATE__),F(__TIME__));
     b94:	47 ea       	ldi	r20, 0xA7	; 167
     b96:	52 e0       	ldi	r21, 0x02	; 2
     b98:	6b e9       	ldi	r22, 0x9B	; 155
     b9a:	72 e0       	ldi	r23, 0x02	; 2
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
		Serial.print(F("RTC is NOT running!, Setting to "));
     ba4:	6a e7       	ldi	r22, 0x7A	; 122
     ba6:	72 e0       	ldi	r23, 0x02	; 2
     ba8:	89 e6       	ldi	r24, 0x69	; 105
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(now.day(),DEC);
     bb0:	4a e0       	ldi	r20, 0x0A	; 10
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	6b 81       	ldd	r22, Y+3	; 0x03
     bb6:	89 e6       	ldi	r24, 0x69	; 105
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN5Print5printEhi>
		Serial.print("/");
     bbe:	67 e1       	ldi	r22, 0x17	; 23
     bc0:	71 e0       	ldi	r23, 0x01	; 1
     bc2:	89 e6       	ldi	r24, 0x69	; 105
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
		Serial.print(now.month(),DEC);
     bca:	4a e0       	ldi	r20, 0x0A	; 10
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	6a 81       	ldd	r22, Y+2	; 0x02
     bd0:	89 e6       	ldi	r24, 0x69	; 105
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN5Print5printEhi>
		Serial.print("/");
     bd8:	67 e1       	ldi	r22, 0x17	; 23
     bda:	71 e0       	ldi	r23, 0x01	; 1
     bdc:	89 e6       	ldi	r24, 0x69	; 105
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
    DateTime (uint16_t year, uint8_t month, uint8_t day,
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
     be4:	69 81       	ldd	r22, Y+1	; 0x01
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	60 53       	subi	r22, 0x30	; 48
     bea:	78 4f       	sbci	r23, 0xF8	; 248
		Serial.print(now.year(),DEC);
     bec:	4a e0       	ldi	r20, 0x0A	; 10
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	89 e6       	ldi	r24, 0x69	; 105
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN5Print5printEji>
		Serial.print(" ");
     bf8:	62 e1       	ldi	r22, 0x12	; 18
     bfa:	71 e0       	ldi	r23, 0x01	; 1
     bfc:	89 e6       	ldi	r24, 0x69	; 105
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
		Serial.print(now.hour(),DEC);
     c04:	4a e0       	ldi	r20, 0x0A	; 10
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	6c 81       	ldd	r22, Y+4	; 0x04
     c0a:	89 e6       	ldi	r24, 0x69	; 105
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN5Print5printEhi>
		Serial.print(":");
     c12:	69 e1       	ldi	r22, 0x19	; 25
     c14:	71 e0       	ldi	r23, 0x01	; 1
     c16:	89 e6       	ldi	r24, 0x69	; 105
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
		Serial.print(now.minute(),DEC);
     c1e:	4a e0       	ldi	r20, 0x0A	; 10
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	6d 81       	ldd	r22, Y+5	; 0x05
     c24:	89 e6       	ldi	r24, 0x69	; 105
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN5Print5printEhi>
		Serial.print(":");
     c2c:	69 e1       	ldi	r22, 0x19	; 25
     c2e:	71 e0       	ldi	r23, 0x01	; 1
     c30:	89 e6       	ldi	r24, 0x69	; 105
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
		Serial.print(now.second(),DEC);
     c38:	4a e0       	ldi	r20, 0x0A	; 10
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	6e 81       	ldd	r22, Y+6	; 0x06
     c3e:	89 e6       	ldi	r24, 0x69	; 105
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN5Print5printEhi>
		Serial.print("\r\n");
     c46:	64 e1       	ldi	r22, 0x14	; 20
     c48:	71 e0       	ldi	r23, 0x01	; 1
     c4a:	89 e6       	ldi	r24, 0x69	; 105
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
		//setting to build header time.
		RTC.setSeconds(now.second());
     c52:	6e 81       	ldd	r22, Y+6	; 0x06
     c54:	80 e5       	ldi	r24, 0x50	; 80
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 11 02 	call	0x422	; 0x422 <_ZN6DS133710setSecondsEh>
		RTC.setMinutes(now.minute());
     c5c:	6d 81       	ldd	r22, Y+5	; 0x05
     c5e:	80 e5       	ldi	r24, 0x50	; 80
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN6DS133710setMinutesEh>
		RTC.setHours(now.hour());
     c66:	6c 81       	ldd	r22, Y+4	; 0x04
     c68:	80 e5       	ldi	r24, 0x50	; 80
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6DS13378setHoursEh>
		RTC.setDays(now.day());
     c70:	6b 81       	ldd	r22, Y+3	; 0x03
     c72:	80 e5       	ldi	r24, 0x50	; 80
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN6DS13377setDaysEh>
		RTC.setMonths(now.month());
     c7a:	6a 81       	ldd	r22, Y+2	; 0x02
     c7c:	80 e5       	ldi	r24, 0x50	; 80
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN6DS13379setMonthsEh>
     c84:	69 81       	ldd	r22, Y+1	; 0x01
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	60 53       	subi	r22, 0x30	; 48
     c8a:	78 4f       	sbci	r23, 0xF8	; 248
		RTC.setYears(now.year());
     c8c:	80 e5       	ldi	r24, 0x50	; 80
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN6DS13378setYearsEj>
		RTC.writeTime();
     c94:	80 e5       	ldi	r24, 0x50	; 80
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 1f 03 	call	0x63e	; 0x63e <_ZN6DS13379writeTimeEv>
	}
	
	delay(10);
     c9c:	6a e0       	ldi	r22, 0x0A	; 10
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 31 10 	call	0x2062	; 0x2062 <delay>
	
	if(!RTC.time_is_set())
     ca8:	80 e5       	ldi	r24, 0x50	; 80
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN6DS133711time_is_setEv>
     cb0:	81 11       	cpse	r24, r1
     cb2:	07 c0       	rjmp	.+14     	; 0xcc2 <_Z4Initv+0x1bc>
	{
		Serial.print(F("Time did not set correctly, check wiring.\r\n"));
     cb4:	6e e4       	ldi	r22, 0x4E	; 78
     cb6:	72 e0       	ldi	r23, 0x02	; 2
     cb8:	89 e6       	ldi	r24, 0x69	; 105
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN5Print5printEPK19__FlashStringHelper>
     cc0:	06 c0       	rjmp	.+12     	; 0xcce <_Z4Initv+0x1c8>
	}
	else
	{
		Serial.print(F("Time should be set.\r\n"));
     cc2:	68 e3       	ldi	r22, 0x38	; 56
     cc4:	72 e0       	ldi	r23, 0x02	; 2
     cc6:	89 e6       	ldi	r24, 0x69	; 105
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN5Print5printEPK19__FlashStringHelper>
	
	//rtc.writeSqwPinMode(modes[0]);
	//RTC.enable_interrupt();
	//RTC.setAlarmRepeat(EVERY_SECOND);
	//RTC.writeAlarm();
	ds1337_clear_control_bits(DS1337_SQW_MASK);
     cce:	8c e0       	ldi	r24, 0x0C	; 12
     cd0:	0e 94 7f 05 	call	0xafe	; 0xafe <_Z25ds1337_clear_control_bitsh>
	ds1337_set_control(DS1337_SQW_1HZ);
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z18ds1337_set_controlh>
	delay(10);
     cda:	6a e0       	ldi	r22, 0x0A	; 10
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 31 10 	call	0x2062	; 0x2062 <delay>
	///////////////////////////////////////////////////////////
	
	// Setting up sleep mode.
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     ce6:	83 b7       	in	r24, 0x33	; 51
     ce8:	81 7f       	andi	r24, 0xF1	; 241
     cea:	84 60       	ori	r24, 0x04	; 4
     cec:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     cee:	83 b7       	in	r24, 0x33	; 51
     cf0:	81 60       	ori	r24, 0x01	; 1
     cf2:	83 bf       	out	0x33, r24	; 51
}
     cf4:	26 96       	adiw	r28, 0x06	; 6
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <setup>:

void setup()
{
		
	//Initialize the clock
	Init();
     d06:	0e 94 83 05 	call	0xb06	; 0xb06 <_Z4Initv>
	
	//clear display at start up.
	//BlankDisplay();

	//allow interrupts
	sei();
     d0a:	78 94       	sei
	
	//Interrupts
	attachInterrupt(0, Interrupt_Update, RISING);
     d0c:	43 e0       	ldi	r20, 0x03	; 3
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	68 e5       	ldi	r22, 0x58	; 88
     d12:	73 e0       	ldi	r23, 0x03	; 3
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <attachInterrupt>
     d1a:	08 95       	ret

00000d1c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     d1c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     d1e:	91 8d       	ldd	r25, Z+25	; 0x19
     d20:	22 8d       	ldd	r18, Z+26	; 0x1a
     d22:	89 2f       	mov	r24, r25
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	80 5c       	subi	r24, 0xC0	; 192
     d28:	9f 4f       	sbci	r25, 0xFF	; 255
     d2a:	82 1b       	sub	r24, r18
     d2c:	91 09       	sbc	r25, r1
}
     d2e:	8f 73       	andi	r24, 0x3F	; 63
     d30:	99 27       	eor	r25, r25
     d32:	08 95       	ret

00000d34 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     d34:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     d36:	91 8d       	ldd	r25, Z+25	; 0x19
     d38:	82 8d       	ldd	r24, Z+26	; 0x1a
     d3a:	98 17       	cp	r25, r24
     d3c:	31 f0       	breq	.+12     	; 0xd4a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     d3e:	82 8d       	ldd	r24, Z+26	; 0x1a
     d40:	e8 0f       	add	r30, r24
     d42:	f1 1d       	adc	r31, r1
     d44:	85 8d       	ldd	r24, Z+29	; 0x1d
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     d4e:	08 95       	ret

00000d50 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     d50:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     d52:	91 8d       	ldd	r25, Z+25	; 0x19
     d54:	82 8d       	ldd	r24, Z+26	; 0x1a
     d56:	98 17       	cp	r25, r24
     d58:	61 f0       	breq	.+24     	; 0xd72 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     d5a:	82 8d       	ldd	r24, Z+26	; 0x1a
     d5c:	df 01       	movw	r26, r30
     d5e:	a8 0f       	add	r26, r24
     d60:	b1 1d       	adc	r27, r1
     d62:	5d 96       	adiw	r26, 0x1d	; 29
     d64:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     d66:	92 8d       	ldd	r25, Z+26	; 0x1a
     d68:	9f 5f       	subi	r25, 0xFF	; 255
     d6a:	9f 73       	andi	r25, 0x3F	; 63
     d6c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     d76:	08 95       	ret

00000d78 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     d78:	8c e2       	ldi	r24, 0x2C	; 44
     d7a:	98 e0       	ldi	r25, 0x08	; 8
     d7c:	89 2b       	or	r24, r25
     d7e:	49 f0       	breq	.+18     	; 0xd92 <_Z14serialEventRunv+0x1a>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	89 2b       	or	r24, r25
     d86:	29 f0       	breq	.+10     	; 0xd92 <_Z14serialEventRunv+0x1a>
     d88:	0e 94 2c 08 	call	0x1058	; 0x1058 <_Z17Serial0_availablev>
     d8c:	81 11       	cpse	r24, r1
     d8e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     d92:	08 95       	ret

00000d94 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     d94:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     d96:	84 8d       	ldd	r24, Z+28	; 0x1c
     d98:	df 01       	movw	r26, r30
     d9a:	a8 0f       	add	r26, r24
     d9c:	b1 1d       	adc	r27, r1
     d9e:	a3 5a       	subi	r26, 0xA3	; 163
     da0:	bf 4f       	sbci	r27, 0xFF	; 255
     da2:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     da4:	24 8d       	ldd	r18, Z+28	; 0x1c
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	2f 5f       	subi	r18, 0xFF	; 255
     daa:	3f 4f       	sbci	r19, 0xFF	; 255
     dac:	2f 73       	andi	r18, 0x3F	; 63
     dae:	30 78       	andi	r19, 0x80	; 128
     db0:	33 23       	and	r19, r19
     db2:	34 f4       	brge	.+12     	; 0xdc0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     db4:	21 50       	subi	r18, 0x01	; 1
     db6:	31 09       	sbc	r19, r1
     db8:	20 6c       	ori	r18, 0xC0	; 192
     dba:	3f 6f       	ori	r19, 0xFF	; 255
     dbc:	2f 5f       	subi	r18, 0xFF	; 255
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255
     dc0:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     dc2:	a6 89       	ldd	r26, Z+22	; 0x16
     dc4:	b7 89       	ldd	r27, Z+23	; 0x17
     dc6:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     dc8:	a0 89       	ldd	r26, Z+16	; 0x10
     dca:	b1 89       	ldd	r27, Z+17	; 0x11
     dcc:	8c 91       	ld	r24, X
     dce:	80 64       	ori	r24, 0x40	; 64
     dd0:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     dd2:	93 8d       	ldd	r25, Z+27	; 0x1b
     dd4:	84 8d       	ldd	r24, Z+28	; 0x1c
     dd6:	98 13       	cpse	r25, r24
     dd8:	06 c0       	rjmp	.+12     	; 0xde6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     dda:	02 88       	ldd	r0, Z+18	; 0x12
     ddc:	f3 89       	ldd	r31, Z+19	; 0x13
     dde:	e0 2d       	mov	r30, r0
     de0:	80 81       	ld	r24, Z
     de2:	8f 7d       	andi	r24, 0xDF	; 223
     de4:	80 83       	st	Z, r24
     de6:	08 95       	ret

00000de8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     dee:	88 8d       	ldd	r24, Y+24	; 0x18
     df0:	81 11       	cpse	r24, r1
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <_ZN14HardwareSerial5flushEv+0x2a>
     df4:	18 c0       	rjmp	.+48     	; 0xe26 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	07 fc       	sbrc	r0, 7
     dfa:	0d c0       	rjmp	.+26     	; 0xe16 <_ZN14HardwareSerial5flushEv+0x2e>
     dfc:	90 81       	ld	r25, Z
     dfe:	95 ff       	sbrs	r25, 5
     e00:	0a c0       	rjmp	.+20     	; 0xe16 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     e02:	a8 89       	ldd	r26, Y+16	; 0x10
     e04:	b9 89       	ldd	r27, Y+17	; 0x11
     e06:	8c 91       	ld	r24, X
     e08:	85 ff       	sbrs	r24, 5
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
     e0c:	ce 01       	movw	r24, r28
     e0e:	0e 94 ca 06 	call	0xd94	; 0xd94 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     e12:	ea 89       	ldd	r30, Y+18	; 0x12
     e14:	fb 89       	ldd	r31, Y+19	; 0x13
     e16:	90 81       	ld	r25, Z
     e18:	95 fd       	sbrc	r25, 5
     e1a:	ed cf       	rjmp	.-38     	; 0xdf6 <_ZN14HardwareSerial5flushEv+0xe>
     e1c:	a8 89       	ldd	r26, Y+16	; 0x10
     e1e:	b9 89       	ldd	r27, Y+17	; 0x11
     e20:	8c 91       	ld	r24, X
     e22:	86 ff       	sbrs	r24, 6
     e24:	e8 cf       	rjmp	.-48     	; 0xdf6 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	fc 01       	movw	r30, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     e36:	93 8d       	ldd	r25, Z+27	; 0x1b
     e38:	84 8d       	ldd	r24, Z+28	; 0x1c
     e3a:	98 13       	cpse	r25, r24
     e3c:	24 c0       	rjmp	.+72     	; 0xe86 <_ZN14HardwareSerial5writeEh+0x5a>
     e3e:	a0 89       	ldd	r26, Z+16	; 0x10
     e40:	b1 89       	ldd	r27, Z+17	; 0x11
     e42:	8c 91       	ld	r24, X
     e44:	85 fd       	sbrc	r24, 5
     e46:	31 c0       	rjmp	.+98     	; 0xeaa <_ZN14HardwareSerial5writeEh+0x7e>
     e48:	1e c0       	rjmp	.+60     	; 0xe86 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	07 fc       	sbrc	r0, 7
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     e50:	e8 89       	ldd	r30, Y+16	; 0x10
     e52:	f9 89       	ldd	r31, Y+17	; 0x11
     e54:	80 81       	ld	r24, Z
     e56:	85 ff       	sbrs	r24, 5
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     e5a:	ce 01       	movw	r24, r28
     e5c:	0e 94 ca 06 	call	0xd94	; 0xd94 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     e60:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e62:	09 17       	cp	r16, r25
     e64:	91 f3       	breq	.-28     	; 0xe4a <_ZN14HardwareSerial5writeEh+0x1e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     e66:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e68:	fe 01       	movw	r30, r28
     e6a:	e8 0f       	add	r30, r24
     e6c:	f1 1d       	adc	r31, r1
     e6e:	e3 5a       	subi	r30, 0xA3	; 163
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     e74:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     e76:	ea 89       	ldd	r30, Y+18	; 0x12
     e78:	fb 89       	ldd	r31, Y+19	; 0x13
     e7a:	80 81       	ld	r24, Z
     e7c:	80 62       	ori	r24, 0x20	; 32
     e7e:	80 83       	st	Z, r24
  _written = true;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
     e84:	1b c0       	rjmp	.+54     	; 0xebc <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     e86:	23 8d       	ldd	r18, Z+27	; 0x1b
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	2f 5f       	subi	r18, 0xFF	; 255
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
     e8e:	2f 73       	andi	r18, 0x3F	; 63
     e90:	30 78       	andi	r19, 0x80	; 128
     e92:	33 23       	and	r19, r19
     e94:	34 f4       	brge	.+12     	; 0xea2 <_ZN14HardwareSerial5writeEh+0x76>
     e96:	21 50       	subi	r18, 0x01	; 1
     e98:	31 09       	sbc	r19, r1
     e9a:	20 6c       	ori	r18, 0xC0	; 192
     e9c:	3f 6f       	ori	r19, 0xFF	; 255
     e9e:	2f 5f       	subi	r18, 0xFF	; 255
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255
     ea2:	16 2f       	mov	r17, r22
     ea4:	ef 01       	movw	r28, r30
     ea6:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     ea8:	db cf       	rjmp	.-74     	; 0xe60 <_ZN14HardwareSerial5writeEh+0x34>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     eaa:	a6 89       	ldd	r26, Z+22	; 0x16
     eac:	b7 89       	ldd	r27, Z+23	; 0x17
     eae:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     eb0:	00 88       	ldd	r0, Z+16	; 0x10
     eb2:	f1 89       	ldd	r31, Z+17	; 0x11
     eb4:	e0 2d       	mov	r30, r0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 64       	ori	r24, 0x40	; 64
     eba:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	08 95       	ret

00000eca <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     eca:	bf 92       	push	r11
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	ec 01       	movw	r28, r24
     ede:	6a 01       	movw	r12, r20
     ee0:	7b 01       	movw	r14, r22
     ee2:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     ee4:	e8 89       	ldd	r30, Y+16	; 0x10
     ee6:	f9 89       	ldd	r31, Y+17	; 0x11
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     eec:	41 15       	cp	r20, r1
     eee:	51 4e       	sbci	r21, 0xE1	; 225
     ef0:	61 05       	cpc	r22, r1
     ef2:	71 05       	cpc	r23, r1
     ef4:	b1 f0       	breq	.+44     	; 0xf22 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	79 e0       	ldi	r23, 0x09	; 9
     efa:	8d e3       	ldi	r24, 0x3D	; 61
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	a7 01       	movw	r20, r14
     f00:	96 01       	movw	r18, r12
     f02:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__udivmodsi4>
     f06:	89 01       	movw	r16, r18
     f08:	9a 01       	movw	r18, r20
     f0a:	01 50       	subi	r16, 0x01	; 1
     f0c:	11 09       	sbc	r17, r1
     f0e:	21 09       	sbc	r18, r1
     f10:	31 09       	sbc	r19, r1
     f12:	36 95       	lsr	r19
     f14:	27 95       	ror	r18
     f16:	17 95       	ror	r17
     f18:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f1a:	01 15       	cp	r16, r1
     f1c:	80 e1       	ldi	r24, 0x10	; 16
     f1e:	18 07       	cpc	r17, r24
     f20:	a8 f0       	brcs	.+42     	; 0xf4c <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
     f22:	e8 89       	ldd	r30, Y+16	; 0x10
     f24:	f9 89       	ldd	r31, Y+17	; 0x11
     f26:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     f28:	60 e8       	ldi	r22, 0x80	; 128
     f2a:	74 e8       	ldi	r23, 0x84	; 132
     f2c:	8e e1       	ldi	r24, 0x1E	; 30
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	a7 01       	movw	r20, r14
     f32:	96 01       	movw	r18, r12
     f34:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__udivmodsi4>
     f38:	da 01       	movw	r26, r20
     f3a:	c9 01       	movw	r24, r18
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	a1 09       	sbc	r26, r1
     f40:	b1 09       	sbc	r27, r1
     f42:	b6 95       	lsr	r27
     f44:	a7 95       	ror	r26
     f46:	97 95       	ror	r25
     f48:	87 95       	ror	r24
     f4a:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     f4c:	ec 85       	ldd	r30, Y+12	; 0x0c
     f4e:	fd 85       	ldd	r31, Y+13	; 0x0d
     f50:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
     f52:	ee 85       	ldd	r30, Y+14	; 0x0e
     f54:	ff 85       	ldd	r31, Y+15	; 0x0f
     f56:	00 83       	st	Z, r16

  _written = false;
     f58:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     f5a:	ec 89       	ldd	r30, Y+20	; 0x14
     f5c:	fd 89       	ldd	r31, Y+21	; 0x15
     f5e:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     f60:	ea 89       	ldd	r30, Y+18	; 0x12
     f62:	fb 89       	ldd	r31, Y+19	; 0x13
     f64:	80 81       	ld	r24, Z
     f66:	80 61       	ori	r24, 0x10	; 16
     f68:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     f6a:	ea 89       	ldd	r30, Y+18	; 0x12
     f6c:	fb 89       	ldd	r31, Y+19	; 0x13
     f6e:	80 81       	ld	r24, Z
     f70:	88 60       	ori	r24, 0x08	; 8
     f72:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     f74:	ea 89       	ldd	r30, Y+18	; 0x12
     f76:	fb 89       	ldd	r31, Y+19	; 0x13
     f78:	80 81       	ld	r24, Z
     f7a:	80 68       	ori	r24, 0x80	; 128
     f7c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     f7e:	ea 89       	ldd	r30, Y+18	; 0x12
     f80:	fb 89       	ldd	r31, Y+19	; 0x13
     f82:	80 81       	ld	r24, Z
     f84:	8f 7d       	andi	r24, 0xDF	; 223
     f86:	80 83       	st	Z, r24
}
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	df 90       	pop	r13
     f96:	cf 90       	pop	r12
     f98:	bf 90       	pop	r11
     f9a:	08 95       	ret

00000f9c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     f9c:	1f 92       	push	r1
     f9e:	0f 92       	push	r0
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	2f 93       	push	r18
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     fb4:	e0 91 79 01 	lds	r30, 0x0179
     fb8:	f0 91 7a 01 	lds	r31, 0x017A
     fbc:	80 81       	ld	r24, Z
     fbe:	82 fd       	sbrc	r24, 2
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     fc2:	e9 e6       	ldi	r30, 0x69	; 105
     fc4:	f1 e0       	ldi	r31, 0x01	; 1
     fc6:	a6 89       	ldd	r26, Z+22	; 0x16
     fc8:	b7 89       	ldd	r27, Z+23	; 0x17
     fca:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     fcc:	81 8d       	ldd	r24, Z+25	; 0x19
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     fd2:	92 8d       	ldd	r25, Z+26	; 0x1a
     fd4:	89 17       	cp	r24, r25
     fd6:	71 f0       	breq	.+28     	; 0xff4 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
     fd8:	df 01       	movw	r26, r30
     fda:	e1 8d       	ldd	r30, Z+25	; 0x19
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	e7 59       	subi	r30, 0x97	; 151
     fe0:	fe 4f       	sbci	r31, 0xFE	; 254
     fe2:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     fe4:	59 96       	adiw	r26, 0x19	; 25
     fe6:	8c 93       	st	X, r24
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     fea:	e0 91 7f 01 	lds	r30, 0x017F
     fee:	f0 91 80 01 	lds	r31, 0x0180
     ff2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     ff4:	ff 91       	pop	r31
     ff6:	ef 91       	pop	r30
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	2f 91       	pop	r18
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	0f 90       	pop	r0
    1008:	1f 90       	pop	r1
    100a:	18 95       	reti

0000100c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    100c:	1f 92       	push	r1
    100e:	0f 92       	push	r0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	0f 92       	push	r0
    1014:	11 24       	eor	r1, r1
    1016:	2f 93       	push	r18
    1018:	3f 93       	push	r19
    101a:	4f 93       	push	r20
    101c:	5f 93       	push	r21
    101e:	6f 93       	push	r22
    1020:	7f 93       	push	r23
    1022:	8f 93       	push	r24
    1024:	9f 93       	push	r25
    1026:	af 93       	push	r26
    1028:	bf 93       	push	r27
    102a:	ef 93       	push	r30
    102c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    102e:	89 e6       	ldi	r24, 0x69	; 105
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 ca 06 	call	0xd94	; 0xd94 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	0f 90       	pop	r0
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	0f 90       	pop	r0
    1054:	1f 90       	pop	r1
    1056:	18 95       	reti

00001058 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1058:	89 e6       	ldi	r24, 0x69	; 105
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_ZN14HardwareSerial9availableEv>
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	89 2b       	or	r24, r25
    1064:	09 f4       	brne	.+2      	; 0x1068 <_Z17Serial0_availablev+0x10>
    1066:	20 e0       	ldi	r18, 0x00	; 0
}
    1068:	82 2f       	mov	r24, r18
    106a:	08 95       	ret

0000106c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    106c:	e9 e6       	ldi	r30, 0x69	; 105
    106e:	f1 e0       	ldi	r31, 0x01	; 1
    1070:	13 82       	std	Z+3, r1	; 0x03
    1072:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1074:	88 ee       	ldi	r24, 0xE8	; 232
    1076:	93 e0       	ldi	r25, 0x03	; 3
    1078:	a0 e0       	ldi	r26, 0x00	; 0
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	84 83       	std	Z+4, r24	; 0x04
    107e:	95 83       	std	Z+5, r25	; 0x05
    1080:	a6 83       	std	Z+6, r26	; 0x06
    1082:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1084:	8f e1       	ldi	r24, 0x1F	; 31
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	80 83       	st	Z, r24
    108c:	85 ec       	ldi	r24, 0xC5	; 197
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	95 87       	std	Z+13, r25	; 0x0d
    1092:	84 87       	std	Z+12, r24	; 0x0c
    1094:	84 ec       	ldi	r24, 0xC4	; 196
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	97 87       	std	Z+15, r25	; 0x0f
    109a:	86 87       	std	Z+14, r24	; 0x0e
    109c:	80 ec       	ldi	r24, 0xC0	; 192
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	91 8b       	std	Z+17, r25	; 0x11
    10a2:	80 8b       	std	Z+16, r24	; 0x10
    10a4:	81 ec       	ldi	r24, 0xC1	; 193
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	93 8b       	std	Z+19, r25	; 0x13
    10aa:	82 8b       	std	Z+18, r24	; 0x12
    10ac:	82 ec       	ldi	r24, 0xC2	; 194
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	95 8b       	std	Z+21, r25	; 0x15
    10b2:	84 8b       	std	Z+20, r24	; 0x14
    10b4:	86 ec       	ldi	r24, 0xC6	; 198
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	97 8b       	std	Z+23, r25	; 0x17
    10ba:	86 8b       	std	Z+22, r24	; 0x16
    10bc:	11 8e       	std	Z+25, r1	; 0x19
    10be:	12 8e       	std	Z+26, r1	; 0x1a
    10c0:	13 8e       	std	Z+27, r1	; 0x1b
    10c2:	14 8e       	std	Z+28, r1	; 0x1c
    10c4:	08 95       	ret

000010c6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    10c6:	08 95       	ret

000010c8 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    10c8:	8f 92       	push	r8
    10ca:	9f 92       	push	r9
    10cc:	af 92       	push	r10
    10ce:	bf 92       	push	r11
    10d0:	cf 92       	push	r12
    10d2:	df 92       	push	r13
    10d4:	ef 92       	push	r14
    10d6:	ff 92       	push	r15
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	5c 01       	movw	r10, r24
    10e2:	7b 01       	movw	r14, r22
    10e4:	4c 01       	movw	r8, r24
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	88 0e       	add	r8, r24
    10ea:	91 1c       	adc	r9, r1
    10ec:	65 01       	movw	r12, r10
    10ee:	e5 e0       	ldi	r30, 0x05	; 5
    10f0:	ce 0e       	add	r12, r30
    10f2:	d1 1c       	adc	r13, r1
    size_t n = 0;
    10f4:	00 e0       	ldi	r16, 0x00	; 0
    10f6:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    10f8:	f4 01       	movw	r30, r8
    10fa:	61 91       	ld	r22, Z+
    10fc:	4f 01       	movw	r8, r30
    10fe:	4a e0       	ldi	r20, 0x0A	; 10
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	c7 01       	movw	r24, r14
    1104:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN5Print5printEhi>
    1108:	ec 01       	movw	r28, r24
        n += p.print('.');
    110a:	6e e2       	ldi	r22, 0x2E	; 46
    110c:	c7 01       	movw	r24, r14
    110e:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print5printEc>
    1112:	8c 0f       	add	r24, r28
    1114:	9d 1f       	adc	r25, r29
    1116:	08 0f       	add	r16, r24
    1118:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    111a:	8c 14       	cp	r8, r12
    111c:	9d 04       	cpc	r9, r13
    111e:	61 f7       	brne	.-40     	; 0x10f8 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    1120:	4a e0       	ldi	r20, 0x0A	; 10
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	f5 01       	movw	r30, r10
    1126:	65 81       	ldd	r22, Z+5	; 0x05
    1128:	c7 01       	movw	r24, r14
    112a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN5Print5printEhi>
    return n;
}
    112e:	80 0f       	add	r24, r16
    1130:	91 1f       	adc	r25, r17
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	cf 90       	pop	r12
    1142:	bf 90       	pop	r11
    1144:	af 90       	pop	r10
    1146:	9f 90       	pop	r9
    1148:	8f 90       	pop	r8
    114a:	08 95       	ret

0000114c <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    114c:	e6 e0       	ldi	r30, 0x06	; 6
    114e:	f2 e0       	ldi	r31, 0x02	; 2
    1150:	8f e2       	ldi	r24, 0x2F	; 47
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    1158:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    115a:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    115c:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    115e:	15 82       	std	Z+5, r1	; 0x05
    1160:	08 95       	ret

00001162 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1162:	08 95       	ret

00001164 <main>:

int main(void)
{
	init();
    1164:	0e 94 5d 10 	call	0x20ba	; 0x20ba <init>

	initVariant();
    1168:	0e 94 b1 08 	call	0x1162	; 0x1162 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    116c:	0e 94 83 06 	call	0xd06	; 0xd06 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1170:	cc eb       	ldi	r28, 0xBC	; 188
    1172:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    1174:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <loop>
		if (serialEventRun) serialEventRun();
    1178:	20 97       	sbiw	r28, 0x00	; 0
    117a:	e1 f3       	breq	.-8      	; 0x1174 <main+0x10>
    117c:	0e 94 bc 06 	call	0xd78	; 0xd78 <_Z14serialEventRunv>
    1180:	f9 cf       	rjmp	.-14     	; 0x1174 <main+0x10>

00001182 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1182:	cf 92       	push	r12
    1184:	df 92       	push	r13
    1186:	ef 92       	push	r14
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
    1192:	41 15       	cp	r20, r1
    1194:	51 05       	cpc	r21, r1
    1196:	b1 f0       	breq	.+44     	; 0x11c4 <_ZN5Print5writeEPKhj+0x42>
    1198:	8c 01       	movw	r16, r24
    119a:	e6 2e       	mov	r14, r22
    119c:	f7 2e       	mov	r15, r23
    119e:	ea 01       	movw	r28, r20
    11a0:	c1 2c       	mov	r12, r1
    11a2:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
    11a4:	d7 01       	movw	r26, r14
    11a6:	6d 91       	ld	r22, X+
    11a8:	7d 01       	movw	r14, r26
    11aa:	d8 01       	movw	r26, r16
    11ac:	ed 91       	ld	r30, X+
    11ae:	fc 91       	ld	r31, X
    11b0:	01 90       	ld	r0, Z+
    11b2:	f0 81       	ld	r31, Z
    11b4:	e0 2d       	mov	r30, r0
    11b6:	c8 01       	movw	r24, r16
    11b8:	09 95       	icall
    11ba:	c8 0e       	add	r12, r24
    11bc:	d9 1e       	adc	r13, r25
    11be:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    11c0:	89 f7       	brne	.-30     	; 0x11a4 <_ZN5Print5writeEPKhj+0x22>
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    11c4:	c1 2c       	mov	r12, r1
    11c6:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    11c8:	c6 01       	movw	r24, r12
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	df 90       	pop	r13
    11d8:	cf 90       	pop	r12
    11da:	08 95       	ret

000011dc <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    11e8:	eb 01       	movw	r28, r22
    11ea:	21 96       	adiw	r28, 0x01	; 1
    11ec:	fb 01       	movw	r30, r22
    11ee:	64 91       	lpm	r22, Z
    if (c == 0) break;
    11f0:	66 23       	and	r22, r22
    11f2:	99 f0       	breq	.+38     	; 0x121a <_ZN5Print5printEPK19__FlashStringHelper+0x3e>
    11f4:	8c 01       	movw	r16, r24
    11f6:	e1 2c       	mov	r14, r1
    11f8:	f1 2c       	mov	r15, r1
    n += write(c);
    11fa:	d8 01       	movw	r26, r16
    11fc:	ed 91       	ld	r30, X+
    11fe:	fc 91       	ld	r31, X
    1200:	01 90       	ld	r0, Z+
    1202:	f0 81       	ld	r31, Z
    1204:	e0 2d       	mov	r30, r0
    1206:	c8 01       	movw	r24, r16
    1208:	09 95       	icall
    120a:	e8 0e       	add	r14, r24
    120c:	f9 1e       	adc	r15, r25
size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    120e:	fe 01       	movw	r30, r28
    1210:	64 91       	lpm	r22, Z
    1212:	21 96       	adiw	r28, 0x01	; 1
    if (c == 0) break;
    1214:	61 11       	cpse	r22, r1
    1216:	f1 cf       	rjmp	.-30     	; 0x11fa <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
    1218:	02 c0       	rjmp	.+4      	; 0x121e <_ZN5Print5printEPK19__FlashStringHelper+0x42>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    121a:	e1 2c       	mov	r14, r1
    121c:	f1 2c       	mov	r15, r1
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    121e:	c7 01       	movw	r24, r14
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	08 95       	ret

0000122e <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    122e:	61 15       	cp	r22, r1
    1230:	71 05       	cpc	r23, r1
    1232:	81 f0       	breq	.+32     	; 0x1254 <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    1234:	fb 01       	movw	r30, r22
    1236:	01 90       	ld	r0, Z+
    1238:	00 20       	and	r0, r0
    123a:	e9 f7       	brne	.-6      	; 0x1236 <_ZN5Print5printEPKc+0x8>
    123c:	31 97       	sbiw	r30, 0x01	; 1
    123e:	af 01       	movw	r20, r30
    1240:	46 1b       	sub	r20, r22
    1242:	57 0b       	sbc	r21, r23
    1244:	dc 01       	movw	r26, r24
    1246:	ed 91       	ld	r30, X+
    1248:	fc 91       	ld	r31, X
    124a:	02 80       	ldd	r0, Z+2	; 0x02
    124c:	f3 81       	ldd	r31, Z+3	; 0x03
    124e:	e0 2d       	mov	r30, r0
    1250:	09 95       	icall
    1252:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
    1258:	08 95       	ret

0000125a <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    125a:	dc 01       	movw	r26, r24
    125c:	ed 91       	ld	r30, X+
    125e:	fc 91       	ld	r31, X
    1260:	01 90       	ld	r0, Z+
    1262:	f0 81       	ld	r31, Z
    1264:	e0 2d       	mov	r30, r0
    1266:	09 95       	icall
}
    1268:	08 95       	ret

0000126a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    126a:	4f 92       	push	r4
    126c:	5f 92       	push	r5
    126e:	6f 92       	push	r6
    1270:	7f 92       	push	r7
    1272:	9f 92       	push	r9
    1274:	af 92       	push	r10
    1276:	bf 92       	push	r11
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	a1 97       	sbiw	r28, 0x21	; 33
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	5c 01       	movw	r10, r24
    129a:	6a 01       	movw	r12, r20
    129c:	7b 01       	movw	r14, r22
    129e:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    12a0:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	82 17       	cp	r24, r18
    12a6:	20 f0       	brcs	.+8      	; 0x12b0 <_ZN5Print11printNumberEmh+0x46>
    12a8:	0f 2e       	mov	r0, r31
    12aa:	fa e0       	ldi	r31, 0x0A	; 10
    12ac:	9f 2e       	mov	r9, r31
    12ae:	f0 2d       	mov	r31, r0
    12b0:	8e 01       	movw	r16, r28
    12b2:	0f 5d       	subi	r16, 0xDF	; 223
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
    12b6:	49 2c       	mov	r4, r9
    12b8:	51 2c       	mov	r5, r1
    12ba:	61 2c       	mov	r6, r1
    12bc:	71 2c       	mov	r7, r1
    12be:	c7 01       	movw	r24, r14
    12c0:	b6 01       	movw	r22, r12
    12c2:	a3 01       	movw	r20, r6
    12c4:	92 01       	movw	r18, r4
    12c6:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__udivmodsi4>
    char c = m - base * n;
    12ca:	8c 2d       	mov	r24, r12
    12cc:	92 9e       	mul	r9, r18
    12ce:	80 19       	sub	r24, r0
    12d0:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    12d2:	01 50       	subi	r16, 0x01	; 1
    12d4:	11 09       	sbc	r17, r1
    12d6:	8a 30       	cpi	r24, 0x0A	; 10
    12d8:	10 f4       	brcc	.+4      	; 0x12de <_ZN5Print11printNumberEmh+0x74>
    12da:	80 5d       	subi	r24, 0xD0	; 208
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <_ZN5Print11printNumberEmh+0x76>
    12de:	89 5c       	subi	r24, 0xC9	; 201
    12e0:	d8 01       	movw	r26, r16
    12e2:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    12e4:	c2 2e       	mov	r12, r18
    12e6:	d3 2e       	mov	r13, r19
    12e8:	e4 2e       	mov	r14, r20
    12ea:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    12ec:	c1 14       	cp	r12, r1
    12ee:	d1 04       	cpc	r13, r1
    12f0:	e1 04       	cpc	r14, r1
    12f2:	f1 04       	cpc	r15, r1
    12f4:	21 f7       	brne	.-56     	; 0x12be <_ZN5Print11printNumberEmh+0x54>
    12f6:	01 15       	cp	r16, r1
    12f8:	11 05       	cpc	r17, r1
    12fa:	91 f0       	breq	.+36     	; 0x1320 <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
    12fc:	f8 01       	movw	r30, r16
    12fe:	01 90       	ld	r0, Z+
    1300:	00 20       	and	r0, r0
    1302:	e9 f7       	brne	.-6      	; 0x12fe <_ZN5Print11printNumberEmh+0x94>
    1304:	31 97       	sbiw	r30, 0x01	; 1
    1306:	af 01       	movw	r20, r30
    1308:	40 1b       	sub	r20, r16
    130a:	51 0b       	sbc	r21, r17
    130c:	d5 01       	movw	r26, r10
    130e:	ed 91       	ld	r30, X+
    1310:	fc 91       	ld	r31, X
    1312:	02 80       	ldd	r0, Z+2	; 0x02
    1314:	f3 81       	ldd	r31, Z+3	; 0x03
    1316:	e0 2d       	mov	r30, r0
    1318:	b8 01       	movw	r22, r16
    131a:	c5 01       	movw	r24, r10
    131c:	09 95       	icall
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    1324:	a1 96       	adiw	r28, 0x21	; 33
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	bf 90       	pop	r11
    1342:	af 90       	pop	r10
    1344:	9f 90       	pop	r9
    1346:	7f 90       	pop	r7
    1348:	6f 90       	pop	r6
    134a:	5f 90       	pop	r5
    134c:	4f 90       	pop	r4
    134e:	08 95       	ret

00001350 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1350:	cf 92       	push	r12
    1352:	df 92       	push	r13
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	ec 01       	movw	r28, r24
    1362:	6a 01       	movw	r12, r20
    1364:	7b 01       	movw	r14, r22
  if (base == 0) {
    1366:	21 15       	cp	r18, r1
    1368:	31 05       	cpc	r19, r1
    136a:	41 f4       	brne	.+16     	; 0x137c <_ZN5Print5printEli+0x2c>
    return write(n);
    136c:	e8 81       	ld	r30, Y
    136e:	f9 81       	ldd	r31, Y+1	; 0x01
    1370:	01 90       	ld	r0, Z+
    1372:	f0 81       	ld	r31, Z
    1374:	e0 2d       	mov	r30, r0
    1376:	64 2f       	mov	r22, r20
    1378:	09 95       	icall
    137a:	1d c0       	rjmp	.+58     	; 0x13b6 <_ZN5Print5printEli+0x66>
  } else if (base == 10) {
    137c:	2a 30       	cpi	r18, 0x0A	; 10
    137e:	31 05       	cpc	r19, r1
    1380:	c1 f4       	brne	.+48     	; 0x13b2 <_ZN5Print5printEli+0x62>
    if (n < 0) {
    1382:	77 23       	and	r23, r23
    1384:	94 f4       	brge	.+36     	; 0x13aa <_ZN5Print5printEli+0x5a>
      int t = print('-');
    1386:	6d e2       	ldi	r22, 0x2D	; 45
    1388:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print5printEc>
    138c:	8c 01       	movw	r16, r24
      n = -n;
    138e:	44 27       	eor	r20, r20
    1390:	55 27       	eor	r21, r21
    1392:	ba 01       	movw	r22, r20
    1394:	4c 19       	sub	r20, r12
    1396:	5d 09       	sbc	r21, r13
    1398:	6e 09       	sbc	r22, r14
    139a:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    139c:	2a e0       	ldi	r18, 0x0A	; 10
    139e:	ce 01       	movw	r24, r28
    13a0:	0e 94 35 09 	call	0x126a	; 0x126a <_ZN5Print11printNumberEmh>
    13a4:	80 0f       	add	r24, r16
    13a6:	91 1f       	adc	r25, r17
    13a8:	06 c0       	rjmp	.+12     	; 0x13b6 <_ZN5Print5printEli+0x66>
    }
    return printNumber(n, 10);
    13aa:	2a e0       	ldi	r18, 0x0A	; 10
    13ac:	0e 94 35 09 	call	0x126a	; 0x126a <_ZN5Print11printNumberEmh>
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <_ZN5Print5printEli+0x66>
  } else {
    return printNumber(n, base);
    13b2:	0e 94 35 09 	call	0x126a	; 0x126a <_ZN5Print11printNumberEmh>
  }
}
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	df 90       	pop	r13
    13c4:	cf 90       	pop	r12
    13c6:	08 95       	ret

000013c8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    13c8:	9a 01       	movw	r18, r20
  return print((long) n, base);
    13ca:	ab 01       	movw	r20, r22
    13cc:	77 0f       	add	r23, r23
    13ce:	66 0b       	sbc	r22, r22
    13d0:	77 0b       	sbc	r23, r23
    13d2:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN5Print5printEli>
}
    13d6:	08 95       	ret

000013d8 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    13d8:	21 15       	cp	r18, r1
    13da:	31 05       	cpc	r19, r1
    13dc:	49 f4       	brne	.+18     	; 0x13f0 <_ZN5Print5printEmi+0x18>
    13de:	dc 01       	movw	r26, r24
    13e0:	ed 91       	ld	r30, X+
    13e2:	fc 91       	ld	r31, X
    13e4:	01 90       	ld	r0, Z+
    13e6:	f0 81       	ld	r31, Z
    13e8:	e0 2d       	mov	r30, r0
    13ea:	64 2f       	mov	r22, r20
    13ec:	09 95       	icall
    13ee:	08 95       	ret
  else return printNumber(n, base);
    13f0:	0e 94 35 09 	call	0x126a	; 0x126a <_ZN5Print11printNumberEmh>
}
    13f4:	08 95       	ret

000013f6 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    13f6:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    13f8:	46 2f       	mov	r20, r22
    13fa:	50 e0       	ldi	r21, 0x00	; 0
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN5Print5printEmi>
}
    1404:	08 95       	ret

00001406 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    1406:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    1408:	ab 01       	movw	r20, r22
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN5Print5printEmi>
}
    1412:	08 95       	ret

00001414 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1414:	4f 92       	push	r4
    1416:	5f 92       	push	r5
    1418:	7f 92       	push	r7
    141a:	8f 92       	push	r8
    141c:	9f 92       	push	r9
    141e:	af 92       	push	r10
    1420:	bf 92       	push	r11
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	00 d0       	rcall	.+0      	; 0x1434 <_ZN5Print10printFloatEdh+0x20>
    1434:	00 d0       	rcall	.+0      	; 0x1436 <_ZN5Print10printFloatEdh+0x22>
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	8c 01       	movw	r16, r24
    143c:	4a 01       	movw	r8, r20
    143e:	5b 01       	movw	r10, r22
    1440:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1442:	9a 01       	movw	r18, r20
    1444:	ab 01       	movw	r20, r22
    1446:	c5 01       	movw	r24, r10
    1448:	b4 01       	movw	r22, r8
    144a:	0e 94 ba 13 	call	0x2774	; 0x2774 <__unordsf2>
    144e:	88 23       	and	r24, r24
    1450:	31 f0       	breq	.+12     	; 0x145e <_ZN5Print10printFloatEdh+0x4a>
    1452:	61 e3       	ldi	r22, 0x31	; 49
    1454:	71 e0       	ldi	r23, 0x01	; 1
    1456:	c8 01       	movw	r24, r16
    1458:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
    145c:	d2 c0       	rjmp	.+420    	; 0x1602 <_ZN5Print10printFloatEdh+0x1ee>
  if (isinf(number)) return print("inf");
    145e:	75 01       	movw	r14, r10
    1460:	64 01       	movw	r12, r8
    1462:	e8 94       	clt
    1464:	f7 f8       	bld	r15, 7
    1466:	2f ef       	ldi	r18, 0xFF	; 255
    1468:	3f ef       	ldi	r19, 0xFF	; 255
    146a:	4f e7       	ldi	r20, 0x7F	; 127
    146c:	5f e7       	ldi	r21, 0x7F	; 127
    146e:	c7 01       	movw	r24, r14
    1470:	b6 01       	movw	r22, r12
    1472:	0e 94 ba 13 	call	0x2774	; 0x2774 <__unordsf2>
    1476:	81 11       	cpse	r24, r1
    1478:	10 c0       	rjmp	.+32     	; 0x149a <_ZN5Print10printFloatEdh+0x86>
    147a:	2f ef       	ldi	r18, 0xFF	; 255
    147c:	3f ef       	ldi	r19, 0xFF	; 255
    147e:	4f e7       	ldi	r20, 0x7F	; 127
    1480:	5f e7       	ldi	r21, 0x7F	; 127
    1482:	c7 01       	movw	r24, r14
    1484:	b6 01       	movw	r22, r12
    1486:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__cmpsf2>
    148a:	18 16       	cp	r1, r24
    148c:	34 f4       	brge	.+12     	; 0x149a <_ZN5Print10printFloatEdh+0x86>
    148e:	65 e3       	ldi	r22, 0x35	; 53
    1490:	71 e0       	ldi	r23, 0x01	; 1
    1492:	c8 01       	movw	r24, r16
    1494:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
    1498:	b4 c0       	rjmp	.+360    	; 0x1602 <_ZN5Print10printFloatEdh+0x1ee>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    149a:	2f ef       	ldi	r18, 0xFF	; 255
    149c:	3f ef       	ldi	r19, 0xFF	; 255
    149e:	4f e7       	ldi	r20, 0x7F	; 127
    14a0:	5f e4       	ldi	r21, 0x4F	; 79
    14a2:	c5 01       	movw	r24, r10
    14a4:	b4 01       	movw	r22, r8
    14a6:	0e 94 48 13 	call	0x2690	; 0x2690 <__gesf2>
    14aa:	18 16       	cp	r1, r24
    14ac:	34 f4       	brge	.+12     	; 0x14ba <_ZN5Print10printFloatEdh+0xa6>
    14ae:	69 e3       	ldi	r22, 0x39	; 57
    14b0:	71 e0       	ldi	r23, 0x01	; 1
    14b2:	c8 01       	movw	r24, r16
    14b4:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
    14b8:	a4 c0       	rjmp	.+328    	; 0x1602 <_ZN5Print10printFloatEdh+0x1ee>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    14ba:	2f ef       	ldi	r18, 0xFF	; 255
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	5f ec       	ldi	r21, 0xCF	; 207
    14c2:	c5 01       	movw	r24, r10
    14c4:	b4 01       	movw	r22, r8
    14c6:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__cmpsf2>
    14ca:	88 23       	and	r24, r24
    14cc:	34 f4       	brge	.+12     	; 0x14da <_ZN5Print10printFloatEdh+0xc6>
    14ce:	69 e3       	ldi	r22, 0x39	; 57
    14d0:	71 e0       	ldi	r23, 0x01	; 1
    14d2:	c8 01       	movw	r24, r16
    14d4:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
    14d8:	94 c0       	rjmp	.+296    	; 0x1602 <_ZN5Print10printFloatEdh+0x1ee>
  
  // Handle negative numbers
  if (number < 0.0)
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	a9 01       	movw	r20, r18
    14e0:	c5 01       	movw	r24, r10
    14e2:	b4 01       	movw	r22, r8
    14e4:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__cmpsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	54 f4       	brge	.+20     	; 0x1500 <_ZN5Print10printFloatEdh+0xec>
  {
     n += print('-');
    14ec:	6d e2       	ldi	r22, 0x2D	; 45
    14ee:	c8 01       	movw	r24, r16
    14f0:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print5printEc>
    14f4:	7c 01       	movw	r14, r24
     number = -number;
    14f6:	b7 fa       	bst	r11, 7
    14f8:	b0 94       	com	r11
    14fa:	b7 f8       	bld	r11, 7
    14fc:	b0 94       	com	r11
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <_ZN5Print10printFloatEdh+0xf0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1500:	e1 2c       	mov	r14, r1
    1502:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1504:	77 20       	and	r7, r7
    1506:	09 f4       	brne	.+2      	; 0x150a <_ZN5Print10printFloatEdh+0xf6>
    1508:	67 c0       	rjmp	.+206    	; 0x15d8 <_ZN5Print10printFloatEdh+0x1c4>
    150a:	d1 2c       	mov	r13, r1
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1520:	d3 94       	inc	r13
    1522:	d7 10       	cpse	r13, r7
    1524:	f7 cf       	rjmp	.-18     	; 0x1514 <_ZN5Print10printFloatEdh+0x100>
    1526:	2b c0       	rjmp	.+86     	; 0x157e <_ZN5Print10printFloatEdh+0x16a>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e2       	ldi	r20, 0x20	; 32
    152e:	51 e4       	ldi	r21, 0x41	; 65
    1530:	c5 01       	movw	r24, r10
    1532:	b4 01       	movw	r22, r8
    1534:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1538:	4b 01       	movw	r8, r22
    153a:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    153c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1540:	6b 01       	movw	r12, r22
    1542:	77 0f       	add	r23, r23
    1544:	ee 08       	sbc	r14, r14
    1546:	ff 08       	sbc	r15, r15
    1548:	2a e0       	ldi	r18, 0x0A	; 10
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	b7 01       	movw	r22, r14
    154e:	a6 01       	movw	r20, r12
    1550:	c8 01       	movw	r24, r16
    1552:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1556:	48 0e       	add	r4, r24
    1558:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    155a:	c7 01       	movw	r24, r14
    155c:	b6 01       	movw	r22, r12
    155e:	0e 94 98 12 	call	0x2530	; 0x2530 <__floatsisf>
    1562:	9b 01       	movw	r18, r22
    1564:	ac 01       	movw	r20, r24
    1566:	c5 01       	movw	r24, r10
    1568:	b4 01       	movw	r22, r8
    156a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
    156e:	4b 01       	movw	r8, r22
    1570:	5c 01       	movw	r10, r24
    1572:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1574:	71 10       	cpse	r7, r1
    1576:	d8 cf       	rjmp	.-80     	; 0x1528 <_ZN5Print10printFloatEdh+0x114>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    1578:	84 2d       	mov	r24, r4
    157a:	95 2d       	mov	r25, r5
    157c:	42 c0       	rjmp	.+132    	; 0x1602 <_ZN5Print10printFloatEdh+0x1ee>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    157e:	9b 01       	movw	r18, r22
    1580:	ac 01       	movw	r20, r24
    1582:	c5 01       	movw	r24, r10
    1584:	b4 01       	movw	r22, r8
    1586:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__addsf3>
    158a:	4b 01       	movw	r8, r22
    158c:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    158e:	0e 94 67 12 	call	0x24ce	; 0x24ce <__fixunssfsi>
    1592:	69 83       	std	Y+1, r22	; 0x01
    1594:	7a 83       	std	Y+2, r23	; 0x02
    1596:	8b 83       	std	Y+3, r24	; 0x03
    1598:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    159a:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
    159e:	9b 01       	movw	r18, r22
    15a0:	ac 01       	movw	r20, r24
    15a2:	c5 01       	movw	r24, r10
    15a4:	b4 01       	movw	r22, r8
    15a6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
    15aa:	4b 01       	movw	r8, r22
    15ac:	5c 01       	movw	r10, r24
  n += print(int_part);
    15ae:	2a e0       	ldi	r18, 0x0A	; 10
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	49 81       	ldd	r20, Y+1	; 0x01
    15b4:	5a 81       	ldd	r21, Y+2	; 0x02
    15b6:	6b 81       	ldd	r22, Y+3	; 0x03
    15b8:	7c 81       	ldd	r23, Y+4	; 0x04
    15ba:	c8 01       	movw	r24, r16
    15bc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN5Print5printEmi>
    15c0:	6c 01       	movw	r12, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    15c2:	6d e3       	ldi	r22, 0x3D	; 61
    15c4:	71 e0       	ldi	r23, 0x01	; 1
    15c6:	c8 01       	movw	r24, r16
    15c8:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5Print5printEPKc>
    15cc:	8c 0d       	add	r24, r12
    15ce:	9d 1d       	adc	r25, r13
    15d0:	2c 01       	movw	r4, r24
    15d2:	4e 0c       	add	r4, r14
    15d4:	5f 1c       	adc	r5, r15
    15d6:	a8 cf       	rjmp	.-176    	; 0x1528 <_ZN5Print10printFloatEdh+0x114>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	5f e3       	ldi	r21, 0x3F	; 63
    15e0:	c5 01       	movw	r24, r10
    15e2:	b4 01       	movw	r22, r8
    15e4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    15e8:	0e 94 67 12 	call	0x24ce	; 0x24ce <__fixunssfsi>
    15ec:	ab 01       	movw	r20, r22
    15ee:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    15f0:	2a e0       	ldi	r18, 0x0A	; 10
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	c8 01       	movw	r24, r16
    15f6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN5Print5printEmi>
    15fa:	2c 01       	movw	r4, r24
    15fc:	4e 0c       	add	r4, r14
    15fe:	5f 1c       	adc	r5, r15
    1600:	bb cf       	rjmp	.-138    	; 0x1578 <_ZN5Print10printFloatEdh+0x164>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
    161a:	bf 90       	pop	r11
    161c:	af 90       	pop	r10
    161e:	9f 90       	pop	r9
    1620:	8f 90       	pop	r8
    1622:	7f 90       	pop	r7
    1624:	5f 90       	pop	r5
    1626:	4f 90       	pop	r4
    1628:	08 95       	ret

0000162a <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    162a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN5Print10printFloatEdh>
}
    162e:	08 95       	ret

00001630 <_ZL6conv2dPKc>:
  hh(copy.hh),
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    1630:	fc 01       	movw	r30, r24
    uint8_t v = 0;
    if ('0' <= *p && *p <= '9')
    1632:	90 81       	ld	r25, Z
    1634:	90 53       	subi	r25, 0x30	; 48
    1636:	9a 30       	cpi	r25, 0x0A	; 10
    1638:	08 f0       	brcs	.+2      	; 0x163c <_ZL6conv2dPKc+0xc>
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    uint8_t v = 0;
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	81 81       	ldd	r24, Z+1	; 0x01
    163e:	80 53       	subi	r24, 0x30	; 48
    if ('0' <= *p && *p <= '9')
        v = *p - '0';
    return 10 * v + *++p - '0';
    1640:	99 0f       	add	r25, r25
    1642:	29 2f       	mov	r18, r25
    1644:	22 0f       	add	r18, r18
    1646:	22 0f       	add	r18, r18
    1648:	92 0f       	add	r25, r18
}
    164a:	89 0f       	add	r24, r25
    164c:	08 95       	ret

0000164e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
}

// A convenient constructor for using "the compiler's time":
// This version will save RAM by using PROGMEM to store it by using the F macro.
//   DateTime now (F(__DATE__), F(__TIME__));
DateTime::DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time) {
    164e:	cf 92       	push	r12
    1650:	df 92       	push	r13
    1652:	ef 92       	push	r14
    1654:	ff 92       	push	r15
    1656:	0f 93       	push	r16
    1658:	1f 93       	push	r17
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	2b 97       	sbiw	r28, 0x0b	; 11
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	7c 01       	movw	r14, r24
    1670:	6a 01       	movw	r12, r20
    // sample input: date = "Dec 26 2009", time = "12:34:56"
    char buff[11];
    memcpy_P(buff, date, 11);
    1672:	4b e0       	ldi	r20, 0x0B	; 11
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	ce 01       	movw	r24, r28
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	0e 94 0f 14 	call	0x281e	; 0x281e <memcpy_P>
    yOff = conv2d(buff + 9);
    167e:	ce 01       	movw	r24, r28
    1680:	0a 96       	adiw	r24, 0x0a	; 10
    1682:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZL6conv2dPKc>
    1686:	f7 01       	movw	r30, r14
    1688:	80 83       	st	Z, r24
    // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
    switch (buff[0]) {
    168a:	e9 81       	ldd	r30, Y+1	; 0x01
    168c:	0e 2f       	mov	r16, r30
    168e:	10 e0       	ldi	r17, 0x00	; 0
    1690:	f8 01       	movw	r30, r16
    1692:	e1 54       	subi	r30, 0x41	; 65
    1694:	f1 09       	sbc	r31, r1
    1696:	e3 31       	cpi	r30, 0x13	; 19
    1698:	f1 05       	cpc	r31, r1
    169a:	b8 f5       	brcc	.+110    	; 0x170a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
    169c:	ec 5c       	subi	r30, 0xCC	; 204
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__tablejump2__>
        case 'J': m = buff[1] == 'a' ? 1 : m = buff[2] == 'n' ? 6 : 7; break;
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	81 36       	cpi	r24, 0x61	; 97
    16a8:	39 f0       	breq	.+14     	; 0x16b8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6a>
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	8e 36       	cpi	r24, 0x6E	; 110
    16ae:	11 f0       	breq	.+4      	; 0x16b4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x66>
    16b0:	87 e0       	ldi	r24, 0x07	; 7
    16b2:	03 c0       	rjmp	.+6      	; 0x16ba <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6c>
    16b4:	86 e0       	ldi	r24, 0x06	; 6
    16b6:	01 c0       	rjmp	.+2      	; 0x16ba <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6c>
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	f7 01       	movw	r30, r14
    16bc:	81 83       	std	Z+1, r24	; 0x01
    16be:	25 c0       	rjmp	.+74     	; 0x170a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'F': m = 2; break;
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	f7 01       	movw	r30, r14
    16c4:	81 83       	std	Z+1, r24	; 0x01
    16c6:	21 c0       	rjmp	.+66     	; 0x170a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'A': m = buff[2] == 'r' ? 4 : 8; break;
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	82 37       	cpi	r24, 0x72	; 114
    16cc:	11 f0       	breq	.+4      	; 0x16d2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    16ce:	88 e0       	ldi	r24, 0x08	; 8
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x86>
    16d2:	84 e0       	ldi	r24, 0x04	; 4
    16d4:	f7 01       	movw	r30, r14
    16d6:	81 83       	std	Z+1, r24	; 0x01
    16d8:	18 c0       	rjmp	.+48     	; 0x170a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'M': m = buff[2] == 'r' ? 3 : 5; break;
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	82 37       	cpi	r24, 0x72	; 114
    16de:	11 f0       	breq	.+4      	; 0x16e4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    16e0:	85 e0       	ldi	r24, 0x05	; 5
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	f7 01       	movw	r30, r14
    16e8:	81 83       	std	Z+1, r24	; 0x01
    16ea:	0f c0       	rjmp	.+30     	; 0x170a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'S': m = 9; break;
    16ec:	89 e0       	ldi	r24, 0x09	; 9
    16ee:	f7 01       	movw	r30, r14
    16f0:	81 83       	std	Z+1, r24	; 0x01
    16f2:	0b c0       	rjmp	.+22     	; 0x170a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'O': m = 10; break;
    16f4:	8a e0       	ldi	r24, 0x0A	; 10
    16f6:	f7 01       	movw	r30, r14
    16f8:	81 83       	std	Z+1, r24	; 0x01
    16fa:	07 c0       	rjmp	.+14     	; 0x170a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'N': m = 11; break;
    16fc:	8b e0       	ldi	r24, 0x0B	; 11
    16fe:	f7 01       	movw	r30, r14
    1700:	81 83       	std	Z+1, r24	; 0x01
    1702:	03 c0       	rjmp	.+6      	; 0x170a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'D': m = 12; break;
    1704:	8c e0       	ldi	r24, 0x0C	; 12
    1706:	f7 01       	movw	r30, r14
    1708:	81 83       	std	Z+1, r24	; 0x01
    }
    d = conv2d(buff + 4);
    170a:	ce 01       	movw	r24, r28
    170c:	05 96       	adiw	r24, 0x05	; 5
    170e:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZL6conv2dPKc>
    1712:	f7 01       	movw	r30, r14
    1714:	82 83       	std	Z+2, r24	; 0x02
    memcpy_P(buff, time, 8);
    1716:	48 e0       	ldi	r20, 0x08	; 8
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	b6 01       	movw	r22, r12
    171c:	ce 01       	movw	r24, r28
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	0e 94 0f 14 	call	0x281e	; 0x281e <memcpy_P>
    hh = conv2d(buff);
    1724:	ce 01       	movw	r24, r28
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZL6conv2dPKc>
    172c:	f7 01       	movw	r30, r14
    172e:	83 83       	std	Z+3, r24	; 0x03
    mm = conv2d(buff + 3);
    1730:	ce 01       	movw	r24, r28
    1732:	04 96       	adiw	r24, 0x04	; 4
    1734:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZL6conv2dPKc>
    1738:	f7 01       	movw	r30, r14
    173a:	84 83       	std	Z+4, r24	; 0x04
    ss = conv2d(buff + 6);
    173c:	ce 01       	movw	r24, r28
    173e:	07 96       	adiw	r24, 0x07	; 7
    1740:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZL6conv2dPKc>
    1744:	f7 01       	movw	r30, r14
    1746:	85 83       	std	Z+5, r24	; 0x05
}
    1748:	2b 96       	adiw	r28, 0x0b	; 11
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	df 90       	pop	r13
    1762:	cf 90       	pop	r12
    1764:	08 95       	ret

00001766 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	39 f0       	breq	.+14     	; 0x1778 <_Z12disableTimerh+0x12>
    176a:	18 f0       	brcs	.+6      	; 0x1772 <_Z12disableTimerh+0xc>
    176c:	82 30       	cpi	r24, 0x02	; 2
    176e:	51 f0       	breq	.+20     	; 0x1784 <_Z12disableTimerh+0x1e>
    1770:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    1772:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    1776:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    1778:	ef e6       	ldi	r30, 0x6F	; 111
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	8d 7f       	andi	r24, 0xFD	; 253
    1780:	80 83       	st	Z, r24
      break;
    1782:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    1784:	e0 e7       	ldi	r30, 0x70	; 112
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8d 7f       	andi	r24, 0xFD	; 253
    178c:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    1794:	e1 eb       	ldi	r30, 0xB1	; 177
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	88 7f       	andi	r24, 0xF8	; 248
    179c:	84 60       	ori	r24, 0x04	; 4
    179e:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    17a0:	10 92 b3 00 	sts	0x00B3, r1
    17a4:	08 95       	ret

000017a6 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    17a6:	cf 93       	push	r28
    17a8:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    17aa:	80 91 10 01 	lds	r24, 0x0110
    17ae:	8c 13       	cpse	r24, r28
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    17b2:	e0 eb       	ldi	r30, 0xB0	; 176
    17b4:	f2 e0       	ldi	r31, 0x02	; 2
    17b6:	e4 91       	lpm	r30, Z
    17b8:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    17ba:	9f ef       	ldi	r25, 0xFF	; 255
    17bc:	90 93 10 01 	sts	0x0110, r25
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <_Z6noToneh+0x1e>
    17c2:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    17c4:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	8c 2f       	mov	r24, r28
    17cc:	0e 94 22 11 	call	0x2244	; 0x2244 <digitalWrite>
}
    17d0:	cf 91       	pop	r28
    17d2:	08 95       	ret

000017d4 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    17d4:	1f 92       	push	r1
    17d6:	0f 92       	push	r0
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	0f 92       	push	r0
    17dc:	11 24       	eor	r1, r1
    17de:	2f 93       	push	r18
    17e0:	3f 93       	push	r19
    17e2:	4f 93       	push	r20
    17e4:	5f 93       	push	r21
    17e6:	6f 93       	push	r22
    17e8:	7f 93       	push	r23
    17ea:	8f 93       	push	r24
    17ec:	9f 93       	push	r25
    17ee:	af 93       	push	r26
    17f0:	bf 93       	push	r27
    17f2:	ef 93       	push	r30
    17f4:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    17f6:	80 91 0f 02 	lds	r24, 0x020F
    17fa:	90 91 10 02 	lds	r25, 0x0210
    17fe:	a0 91 11 02 	lds	r26, 0x0211
    1802:	b0 91 12 02 	lds	r27, 0x0212
    1806:	89 2b       	or	r24, r25
    1808:	8a 2b       	or	r24, r26
    180a:	8b 2b       	or	r24, r27
    180c:	51 f1       	breq	.+84     	; 0x1862 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    180e:	80 91 0c 02 	lds	r24, 0x020C
    1812:	e0 91 0d 02 	lds	r30, 0x020D
    1816:	f0 91 0e 02 	lds	r31, 0x020E
    181a:	90 81       	ld	r25, Z
    181c:	89 27       	eor	r24, r25
    181e:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    1820:	80 91 0f 02 	lds	r24, 0x020F
    1824:	90 91 10 02 	lds	r25, 0x0210
    1828:	a0 91 11 02 	lds	r26, 0x0211
    182c:	b0 91 12 02 	lds	r27, 0x0212
    1830:	18 16       	cp	r1, r24
    1832:	19 06       	cpc	r1, r25
    1834:	1a 06       	cpc	r1, r26
    1836:	1b 06       	cpc	r1, r27
    1838:	c4 f4       	brge	.+48     	; 0x186a <__vector_7+0x96>
      timer2_toggle_count--;
    183a:	80 91 0f 02 	lds	r24, 0x020F
    183e:	90 91 10 02 	lds	r25, 0x0210
    1842:	a0 91 11 02 	lds	r26, 0x0211
    1846:	b0 91 12 02 	lds	r27, 0x0212
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	a1 09       	sbc	r26, r1
    184e:	b1 09       	sbc	r27, r1
    1850:	80 93 0f 02 	sts	0x020F, r24
    1854:	90 93 10 02 	sts	0x0210, r25
    1858:	a0 93 11 02 	sts	0x0211, r26
    185c:	b0 93 12 02 	sts	0x0212, r27
    1860:	04 c0       	rjmp	.+8      	; 0x186a <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    1862:	80 91 10 01 	lds	r24, 0x0110
    1866:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    186a:	ff 91       	pop	r31
    186c:	ef 91       	pop	r30
    186e:	bf 91       	pop	r27
    1870:	af 91       	pop	r26
    1872:	9f 91       	pop	r25
    1874:	8f 91       	pop	r24
    1876:	7f 91       	pop	r23
    1878:	6f 91       	pop	r22
    187a:	5f 91       	pop	r21
    187c:	4f 91       	pop	r20
    187e:	3f 91       	pop	r19
    1880:	2f 91       	pop	r18
    1882:	0f 90       	pop	r0
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	0f 90       	pop	r0
    1888:	1f 90       	pop	r1
    188a:	18 95       	reti

0000188c <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    188c:	10 92 80 02 	sts	0x0280, r1
  twi_sendStop = true;		// default value
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	80 93 7e 02 	sts	0x027E, r24
  twi_inRepStart = false;
    1896:	10 92 7d 02 	sts	0x027D, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	82 e1       	ldi	r24, 0x12	; 18
    189e:	0e 94 22 11 	call	0x2244	; 0x2244 <digitalWrite>
  digitalWrite(SCL, 1);
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	83 e1       	ldi	r24, 0x13	; 19
    18a6:	0e 94 22 11 	call	0x2244	; 0x2244 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    18aa:	e9 eb       	ldi	r30, 0xB9	; 185
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	8e 7f       	andi	r24, 0xFE	; 254
    18b2:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    18b4:	80 81       	ld	r24, Z
    18b6:	8d 7f       	andi	r24, 0xFD	; 253
    18b8:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    18ba:	88 e4       	ldi	r24, 0x48	; 72
    18bc:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    18c0:	85 e4       	ldi	r24, 0x45	; 69
    18c2:	80 93 bc 00 	sts	0x00BC, r24
    18c6:	08 95       	ret

000018c8 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    18c8:	41 32       	cpi	r20, 0x21	; 33
    18ca:	08 f0       	brcs	.+2      	; 0x18ce <twi_readFrom+0x6>
    18cc:	46 c0       	rjmp	.+140    	; 0x195a <twi_readFrom+0x92>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    18ce:	90 91 80 02 	lds	r25, 0x0280
    18d2:	91 11       	cpse	r25, r1
    18d4:	fc cf       	rjmp	.-8      	; 0x18ce <twi_readFrom+0x6>
    continue;
  }
  twi_state = TWI_MRX;
    18d6:	31 e0       	ldi	r19, 0x01	; 1
    18d8:	30 93 80 02 	sts	0x0280, r19
  twi_sendStop = sendStop;
    18dc:	20 93 7e 02 	sts	0x027E, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    18e0:	2f ef       	ldi	r18, 0xFF	; 255
    18e2:	20 93 13 02 	sts	0x0213, r18

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    18e6:	10 92 58 02 	sts	0x0258, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    18ea:	24 0f       	add	r18, r20
    18ec:	20 93 57 02 	sts	0x0257, r18
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    18f0:	30 93 7f 02 	sts	0x027F, r19
  twi_slarw |= address << 1;
    18f4:	20 91 7f 02 	lds	r18, 0x027F
    18f8:	88 0f       	add	r24, r24
    18fa:	82 2b       	or	r24, r18
    18fc:	80 93 7f 02 	sts	0x027F, r24

  if (true == twi_inRepStart) {
    1900:	80 91 7d 02 	lds	r24, 0x027D
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	51 f4       	brne	.+20     	; 0x191c <twi_readFrom+0x54>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    1908:	10 92 7d 02 	sts	0x027D, r1
    TWDR = twi_slarw;
    190c:	80 91 7f 02 	lds	r24, 0x027F
    1910:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1914:	85 ec       	ldi	r24, 0xC5	; 197
    1916:	80 93 bc 00 	sts	0x00BC, r24
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <twi_readFrom+0x5a>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    191c:	85 ee       	ldi	r24, 0xE5	; 229
    191e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    1922:	80 91 80 02 	lds	r24, 0x0280
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	e1 f3       	breq	.-8      	; 0x1922 <twi_readFrom+0x5a>
    continue;
  }

  if (twi_masterBufferIndex < length)
    192a:	80 91 58 02 	lds	r24, 0x0258
    192e:	84 17       	cp	r24, r20
    1930:	10 f4       	brcc	.+4      	; 0x1936 <twi_readFrom+0x6e>
    length = twi_masterBufferIndex;
    1932:	40 91 58 02 	lds	r20, 0x0258

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1936:	44 23       	and	r20, r20
    1938:	89 f0       	breq	.+34     	; 0x195c <twi_readFrom+0x94>
    193a:	a9 e5       	ldi	r26, 0x59	; 89
    193c:	b2 e0       	ldi	r27, 0x02	; 2
    193e:	fb 01       	movw	r30, r22
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	84 0f       	add	r24, r20
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	68 0f       	add	r22, r24
    194a:	79 1f       	adc	r23, r25
    data[i] = twi_masterBuffer[i];
    194c:	8d 91       	ld	r24, X+
    194e:	81 93       	st	Z+, r24

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1950:	e6 17       	cp	r30, r22
    1952:	f7 07       	cpc	r31, r23
    1954:	d9 f7       	brne	.-10     	; 0x194c <twi_readFrom+0x84>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    1956:	94 2f       	mov	r25, r20
    1958:	01 c0       	rjmp	.+2      	; 0x195c <twi_readFrom+0x94>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
    195a:	90 e0       	ldi	r25, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    195c:	89 2f       	mov	r24, r25
    195e:	08 95       	ret

00001960 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    1960:	0f 93       	push	r16
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    1962:	41 32       	cpi	r20, 0x21	; 33
    1964:	08 f0       	brcs	.+2      	; 0x1968 <twi_writeTo+0x8>
    1966:	51 c0       	rjmp	.+162    	; 0x1a0a <twi_writeTo+0xaa>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    1968:	30 91 80 02 	lds	r19, 0x0280
    196c:	31 11       	cpse	r19, r1
    196e:	fc cf       	rjmp	.-8      	; 0x1968 <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
    1970:	92 e0       	ldi	r25, 0x02	; 2
    1972:	90 93 80 02 	sts	0x0280, r25
  twi_sendStop = sendStop;
    1976:	00 93 7e 02 	sts	0x027E, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    197a:	9f ef       	ldi	r25, 0xFF	; 255
    197c:	90 93 13 02 	sts	0x0213, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    1980:	10 92 58 02 	sts	0x0258, r1
  twi_masterBufferLength = length;
    1984:	40 93 57 02 	sts	0x0257, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    1988:	44 23       	and	r20, r20
    198a:	71 f0       	breq	.+28     	; 0x19a8 <twi_writeTo+0x48>
    198c:	fb 01       	movw	r30, r22
    198e:	a9 e5       	ldi	r26, 0x59	; 89
    1990:	b2 e0       	ldi	r27, 0x02	; 2
    1992:	41 50       	subi	r20, 0x01	; 1
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	4f 5f       	subi	r20, 0xFF	; 255
    1998:	5f 4f       	sbci	r21, 0xFF	; 255
    199a:	64 0f       	add	r22, r20
    199c:	75 1f       	adc	r23, r21
    twi_masterBuffer[i] = data[i];
    199e:	91 91       	ld	r25, Z+
    19a0:	9d 93       	st	X+, r25
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    19a2:	e6 17       	cp	r30, r22
    19a4:	f7 07       	cpc	r31, r23
    19a6:	d9 f7       	brne	.-10     	; 0x199e <twi_writeTo+0x3e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    19a8:	10 92 7f 02 	sts	0x027F, r1
  twi_slarw |= address << 1;
    19ac:	90 91 7f 02 	lds	r25, 0x027F
    19b0:	88 0f       	add	r24, r24
    19b2:	89 2b       	or	r24, r25
    19b4:	80 93 7f 02 	sts	0x027F, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    19b8:	80 91 7d 02 	lds	r24, 0x027D
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	51 f4       	brne	.+20     	; 0x19d4 <twi_writeTo+0x74>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    19c0:	10 92 7d 02 	sts	0x027D, r1
    TWDR = twi_slarw;				
    19c4:	80 91 7f 02 	lds	r24, 0x027F
    19c8:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    19cc:	85 ec       	ldi	r24, 0xC5	; 197
    19ce:	80 93 bc 00 	sts	0x00BC, r24
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <twi_writeTo+0x7a>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    19d4:	85 ee       	ldi	r24, 0xE5	; 229
    19d6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    19da:	22 23       	and	r18, r18
    19dc:	41 f0       	breq	.+16     	; 0x19ee <twi_writeTo+0x8e>
    19de:	80 91 80 02 	lds	r24, 0x0280
    19e2:	82 30       	cpi	r24, 0x02	; 2
    19e4:	21 f4       	brne	.+8      	; 0x19ee <twi_writeTo+0x8e>
    19e6:	80 91 80 02 	lds	r24, 0x0280
    19ea:	82 30       	cpi	r24, 0x02	; 2
    19ec:	e1 f3       	breq	.-8      	; 0x19e6 <twi_writeTo+0x86>
    continue;
  }
  
  if (twi_error == 0xFF)
    19ee:	80 91 13 02 	lds	r24, 0x0213
    19f2:	8f 3f       	cpi	r24, 0xFF	; 255
    19f4:	79 f0       	breq	.+30     	; 0x1a14 <twi_writeTo+0xb4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    19f6:	80 91 13 02 	lds	r24, 0x0213
    19fa:	80 32       	cpi	r24, 0x20	; 32
    19fc:	41 f0       	breq	.+16     	; 0x1a0e <twi_writeTo+0xae>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    19fe:	80 91 13 02 	lds	r24, 0x0213
    1a02:	80 33       	cpi	r24, 0x30	; 48
    1a04:	31 f0       	breq	.+12     	; 0x1a12 <twi_writeTo+0xb2>
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
    1a06:	34 e0       	ldi	r19, 0x04	; 4
    1a08:	05 c0       	rjmp	.+10     	; 0x1a14 <twi_writeTo+0xb4>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    1a0a:	31 e0       	ldi	r19, 0x01	; 1
    1a0c:	03 c0       	rjmp	.+6      	; 0x1a14 <twi_writeTo+0xb4>
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
    1a0e:	32 e0       	ldi	r19, 0x02	; 2
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <twi_writeTo+0xb4>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
    1a12:	33 e0       	ldi	r19, 0x03	; 3
  else
    return 4;	// other twi error
}
    1a14:	83 2f       	mov	r24, r19
    1a16:	0f 91       	pop	r16
    1a18:	08 95       	ret

00001a1a <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    1a1a:	61 32       	cpi	r22, 0x21	; 33
    1a1c:	c8 f4       	brcc	.+50     	; 0x1a50 <twi_transmit+0x36>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    1a1e:	20 91 80 02 	lds	r18, 0x0280
    1a22:	24 30       	cpi	r18, 0x04	; 4
    1a24:	b9 f4       	brne	.+46     	; 0x1a54 <twi_transmit+0x3a>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    1a26:	60 93 35 02 	sts	0x0235, r22
  for(i = 0; i < length; ++i){
    1a2a:	66 23       	and	r22, r22
    1a2c:	a9 f0       	breq	.+42     	; 0x1a58 <twi_transmit+0x3e>
    1a2e:	fc 01       	movw	r30, r24
    1a30:	a7 e3       	ldi	r26, 0x37	; 55
    1a32:	b2 e0       	ldi	r27, 0x02	; 2
    1a34:	61 50       	subi	r22, 0x01	; 1
    1a36:	26 2f       	mov	r18, r22
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	2f 5f       	subi	r18, 0xFF	; 255
    1a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3e:	28 0f       	add	r18, r24
    1a40:	39 1f       	adc	r19, r25
    twi_txBuffer[i] = data[i];
    1a42:	91 91       	ld	r25, Z+
    1a44:	9d 93       	st	X+, r25
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    1a46:	e2 17       	cp	r30, r18
    1a48:	f3 07       	cpc	r31, r19
    1a4a:	d9 f7       	brne	.-10     	; 0x1a42 <twi_transmit+0x28>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	08 95       	ret
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    1a58:	80 e0       	ldi	r24, 0x00	; 0
}
    1a5a:	08 95       	ret

00001a5c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1a5c:	85 ed       	ldi	r24, 0xD5	; 213
    1a5e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1a62:	ec eb       	ldi	r30, 0xBC	; 188
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	84 fd       	sbrc	r24, 4
    1a6a:	fd cf       	rjmp	.-6      	; 0x1a66 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1a6c:	10 92 80 02 	sts	0x0280, r1
    1a70:	08 95       	ret

00001a72 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1a72:	85 ec       	ldi	r24, 0xC5	; 197
    1a74:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    1a78:	10 92 80 02 	sts	0x0280, r1
    1a7c:	08 95       	ret

00001a7e <__vector_24>:
}

ISR(TWI_vect)
{
    1a7e:	1f 92       	push	r1
    1a80:	0f 92       	push	r0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	0f 92       	push	r0
    1a86:	11 24       	eor	r1, r1
    1a88:	2f 93       	push	r18
    1a8a:	3f 93       	push	r19
    1a8c:	4f 93       	push	r20
    1a8e:	5f 93       	push	r21
    1a90:	6f 93       	push	r22
    1a92:	7f 93       	push	r23
    1a94:	8f 93       	push	r24
    1a96:	9f 93       	push	r25
    1a98:	af 93       	push	r26
    1a9a:	bf 93       	push	r27
    1a9c:	ef 93       	push	r30
    1a9e:	ff 93       	push	r31
  switch(TW_STATUS){
    1aa0:	80 91 b9 00 	lds	r24, 0x00B9
    1aa4:	e8 2f       	mov	r30, r24
    1aa6:	e8 7f       	andi	r30, 0xF8	; 248
    1aa8:	8e 2f       	mov	r24, r30
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	89 3c       	cpi	r24, 0xC9	; 201
    1aae:	91 05       	cpc	r25, r1
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <__vector_24+0x36>
    1ab2:	f7 c0       	rjmp	.+494    	; 0x1ca2 <__vector_24+0x224>
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	e9 5b       	subi	r30, 0xB9	; 185
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1abe:	80 91 7f 02 	lds	r24, 0x027F
    1ac2:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ac6:	85 ec       	ldi	r24, 0xC5	; 197
    1ac8:	80 93 bc 00 	sts	0x00BC, r24
    1acc:	ea c0       	rjmp	.+468    	; 0x1ca2 <__vector_24+0x224>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1ace:	90 91 58 02 	lds	r25, 0x0258
    1ad2:	80 91 57 02 	lds	r24, 0x0257
    1ad6:	98 17       	cp	r25, r24
    1ad8:	80 f4       	brcc	.+32     	; 0x1afa <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1ada:	e0 91 58 02 	lds	r30, 0x0258
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	8e 0f       	add	r24, r30
    1ae2:	80 93 58 02 	sts	0x0258, r24
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	e7 5a       	subi	r30, 0xA7	; 167
    1aea:	fd 4f       	sbci	r31, 0xFD	; 253
    1aec:	80 81       	ld	r24, Z
    1aee:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1af2:	85 ec       	ldi	r24, 0xC5	; 197
    1af4:	80 93 bc 00 	sts	0x00BC, r24
    1af8:	d4 c0       	rjmp	.+424    	; 0x1ca2 <__vector_24+0x224>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    1afa:	80 91 7e 02 	lds	r24, 0x027E
    1afe:	88 23       	and	r24, r24
    1b00:	19 f0       	breq	.+6      	; 0x1b08 <__vector_24+0x8a>
          twi_stop();
    1b02:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <twi_stop>
    1b06:	cd c0       	rjmp	.+410    	; 0x1ca2 <__vector_24+0x224>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	80 93 7d 02 	sts	0x027D, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1b0e:	84 ea       	ldi	r24, 0xA4	; 164
    1b10:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    1b14:	10 92 80 02 	sts	0x0280, r1
    1b18:	c4 c0       	rjmp	.+392    	; 0x1ca2 <__vector_24+0x224>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    1b1a:	80 e2       	ldi	r24, 0x20	; 32
    1b1c:	80 93 13 02 	sts	0x0213, r24
      twi_stop();
    1b20:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <twi_stop>
      break;
    1b24:	be c0       	rjmp	.+380    	; 0x1ca2 <__vector_24+0x224>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1b26:	80 e3       	ldi	r24, 0x30	; 48
    1b28:	80 93 13 02 	sts	0x0213, r24
      twi_stop();
    1b2c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <twi_stop>
      break;
    1b30:	b8 c0       	rjmp	.+368    	; 0x1ca2 <__vector_24+0x224>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1b32:	88 e3       	ldi	r24, 0x38	; 56
    1b34:	80 93 13 02 	sts	0x0213, r24
      twi_releaseBus();
    1b38:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <twi_releaseBus>
      break;
    1b3c:	b2 c0       	rjmp	.+356    	; 0x1ca2 <__vector_24+0x224>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1b3e:	e0 91 58 02 	lds	r30, 0x0258
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	8e 0f       	add	r24, r30
    1b46:	80 93 58 02 	sts	0x0258, r24
    1b4a:	80 91 bb 00 	lds	r24, 0x00BB
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	e7 5a       	subi	r30, 0xA7	; 167
    1b52:	fd 4f       	sbci	r31, 0xFD	; 253
    1b54:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1b56:	90 91 58 02 	lds	r25, 0x0258
    1b5a:	80 91 57 02 	lds	r24, 0x0257
    1b5e:	98 17       	cp	r25, r24
    1b60:	20 f4       	brcc	.+8      	; 0x1b6a <__vector_24+0xec>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1b62:	85 ec       	ldi	r24, 0xC5	; 197
    1b64:	80 93 bc 00 	sts	0x00BC, r24
    1b68:	9c c0       	rjmp	.+312    	; 0x1ca2 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1b6a:	85 e8       	ldi	r24, 0x85	; 133
    1b6c:	80 93 bc 00 	sts	0x00BC, r24
    1b70:	98 c0       	rjmp	.+304    	; 0x1ca2 <__vector_24+0x224>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1b72:	e0 91 58 02 	lds	r30, 0x0258
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	8e 0f       	add	r24, r30
    1b7a:	80 93 58 02 	sts	0x0258, r24
    1b7e:	80 91 bb 00 	lds	r24, 0x00BB
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	e7 5a       	subi	r30, 0xA7	; 167
    1b86:	fd 4f       	sbci	r31, 0xFD	; 253
    1b88:	80 83       	st	Z, r24
	if (twi_sendStop)
    1b8a:	80 91 7e 02 	lds	r24, 0x027E
    1b8e:	88 23       	and	r24, r24
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <__vector_24+0x11a>
          twi_stop();
    1b92:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <twi_stop>
    1b96:	85 c0       	rjmp	.+266    	; 0x1ca2 <__vector_24+0x224>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	80 93 7d 02 	sts	0x027D, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1b9e:	84 ea       	ldi	r24, 0xA4	; 164
    1ba0:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    1ba4:	10 92 80 02 	sts	0x0280, r1
    1ba8:	7c c0       	rjmp	.+248    	; 0x1ca2 <__vector_24+0x224>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    1baa:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <twi_stop>
      break;
    1bae:	79 c0       	rjmp	.+242    	; 0x1ca2 <__vector_24+0x224>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1bb0:	83 e0       	ldi	r24, 0x03	; 3
    1bb2:	80 93 80 02 	sts	0x0280, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1bb6:	10 92 14 02 	sts	0x0214, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1bba:	85 ec       	ldi	r24, 0xC5	; 197
    1bbc:	80 93 bc 00 	sts	0x00BC, r24
    1bc0:	70 c0       	rjmp	.+224    	; 0x1ca2 <__vector_24+0x224>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1bc2:	80 91 14 02 	lds	r24, 0x0214
    1bc6:	80 32       	cpi	r24, 0x20	; 32
    1bc8:	80 f4       	brcc	.+32     	; 0x1bea <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1bca:	e0 91 14 02 	lds	r30, 0x0214
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	8e 0f       	add	r24, r30
    1bd2:	80 93 14 02 	sts	0x0214, r24
    1bd6:	80 91 bb 00 	lds	r24, 0x00BB
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	eb 5e       	subi	r30, 0xEB	; 235
    1bde:	fd 4f       	sbci	r31, 0xFD	; 253
    1be0:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1be2:	85 ec       	ldi	r24, 0xC5	; 197
    1be4:	80 93 bc 00 	sts	0x00BC, r24
    1be8:	5c c0       	rjmp	.+184    	; 0x1ca2 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1bea:	85 e8       	ldi	r24, 0x85	; 133
    1bec:	80 93 bc 00 	sts	0x00BC, r24
    1bf0:	58 c0       	rjmp	.+176    	; 0x1ca2 <__vector_24+0x224>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1bf2:	80 91 14 02 	lds	r24, 0x0214
    1bf6:	80 32       	cpi	r24, 0x20	; 32
    1bf8:	30 f4       	brcc	.+12     	; 0x1c06 <__vector_24+0x188>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1bfa:	e0 91 14 02 	lds	r30, 0x0214
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	eb 5e       	subi	r30, 0xEB	; 235
    1c02:	fd 4f       	sbci	r31, 0xFD	; 253
    1c04:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    1c06:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1c0a:	60 91 14 02 	lds	r22, 0x0214
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	e0 91 79 02 	lds	r30, 0x0279
    1c14:	f0 91 7a 02 	lds	r31, 0x027A
    1c18:	85 e1       	ldi	r24, 0x15	; 21
    1c1a:	92 e0       	ldi	r25, 0x02	; 2
    1c1c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1c1e:	10 92 14 02 	sts	0x0214, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1c22:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <twi_releaseBus>
      break;
    1c26:	3d c0       	rjmp	.+122    	; 0x1ca2 <__vector_24+0x224>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1c28:	85 e8       	ldi	r24, 0x85	; 133
    1c2a:	80 93 bc 00 	sts	0x00BC, r24
    1c2e:	39 c0       	rjmp	.+114    	; 0x1ca2 <__vector_24+0x224>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1c30:	84 e0       	ldi	r24, 0x04	; 4
    1c32:	80 93 80 02 	sts	0x0280, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1c36:	10 92 36 02 	sts	0x0236, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1c3a:	10 92 35 02 	sts	0x0235, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1c3e:	e0 91 7b 02 	lds	r30, 0x027B
    1c42:	f0 91 7c 02 	lds	r31, 0x027C
    1c46:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1c48:	80 91 35 02 	lds	r24, 0x0235
    1c4c:	81 11       	cpse	r24, r1
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <__vector_24+0x1dc>
        twi_txBufferLength = 1;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	80 93 35 02 	sts	0x0235, r24
        twi_txBuffer[0] = 0x00;
    1c56:	10 92 37 02 	sts	0x0237, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1c5a:	e0 91 36 02 	lds	r30, 0x0236
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	8e 0f       	add	r24, r30
    1c62:	80 93 36 02 	sts	0x0236, r24
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	e9 5c       	subi	r30, 0xC9	; 201
    1c6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1c72:	90 91 36 02 	lds	r25, 0x0236
    1c76:	80 91 35 02 	lds	r24, 0x0235
    1c7a:	98 17       	cp	r25, r24
    1c7c:	20 f4       	brcc	.+8      	; 0x1c86 <__vector_24+0x208>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1c7e:	85 ec       	ldi	r24, 0xC5	; 197
    1c80:	80 93 bc 00 	sts	0x00BC, r24
    1c84:	0e c0       	rjmp	.+28     	; 0x1ca2 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1c86:	85 e8       	ldi	r24, 0x85	; 133
    1c88:	80 93 bc 00 	sts	0x00BC, r24
    1c8c:	0a c0       	rjmp	.+20     	; 0x1ca2 <__vector_24+0x224>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1c8e:	85 ec       	ldi	r24, 0xC5	; 197
    1c90:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1c94:	10 92 80 02 	sts	0x0280, r1
      break;
    1c98:	04 c0       	rjmp	.+8      	; 0x1ca2 <__vector_24+0x224>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1c9a:	10 92 13 02 	sts	0x0213, r1
      twi_stop();
    1c9e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <twi_stop>
      break;
  }
}
    1ca2:	ff 91       	pop	r31
    1ca4:	ef 91       	pop	r30
    1ca6:	bf 91       	pop	r27
    1ca8:	af 91       	pop	r26
    1caa:	9f 91       	pop	r25
    1cac:	8f 91       	pop	r24
    1cae:	7f 91       	pop	r23
    1cb0:	6f 91       	pop	r22
    1cb2:	5f 91       	pop	r21
    1cb4:	4f 91       	pop	r20
    1cb6:	3f 91       	pop	r19
    1cb8:	2f 91       	pop	r18
    1cba:	0f 90       	pop	r0
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	0f 90       	pop	r0
    1cc0:	1f 90       	pop	r1
    1cc2:	18 95       	reti

00001cc4 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1cc4:	82 30       	cpi	r24, 0x02	; 2
    1cc6:	00 f5       	brcc	.+64     	; 0x1d08 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    1cc8:	e8 2f       	mov	r30, r24
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	ee 0f       	add	r30, r30
    1cce:	ff 1f       	adc	r31, r31
    1cd0:	ef 57       	subi	r30, 0x7F	; 127
    1cd2:	fd 4f       	sbci	r31, 0xFD	; 253
    1cd4:	71 83       	std	Z+1, r23	; 0x01
    1cd6:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1cd8:	88 23       	and	r24, r24
    1cda:	19 f0       	breq	.+6      	; 0x1ce2 <attachInterrupt+0x1e>
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	49 f0       	breq	.+18     	; 0x1cf2 <attachInterrupt+0x2e>
    1ce0:	08 95       	ret
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1ce2:	e9 e6       	ldi	r30, 0x69	; 105
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8c 7f       	andi	r24, 0xFC	; 252
    1cea:	48 2b       	or	r20, r24
    1cec:	40 83       	st	Z, r20
      EIMSK |= (1 << INT0);
    1cee:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    1cf0:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1cf2:	e9 e6       	ldi	r30, 0x69	; 105
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	44 0f       	add	r20, r20
    1cfa:	55 1f       	adc	r21, r21
    1cfc:	44 0f       	add	r20, r20
    1cfe:	55 1f       	adc	r21, r21
    1d00:	83 7f       	andi	r24, 0xF3	; 243
    1d02:	48 2b       	or	r20, r24
    1d04:	40 83       	st	Z, r20
      EIMSK |= (1 << INT1);
    1d06:	e9 9a       	sbi	0x1d, 1	; 29
    1d08:	08 95       	ret

00001d0a <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    1d0a:	1f 92       	push	r1
    1d0c:	0f 92       	push	r0
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	0f 92       	push	r0
    1d12:	11 24       	eor	r1, r1
    1d14:	2f 93       	push	r18
    1d16:	3f 93       	push	r19
    1d18:	4f 93       	push	r20
    1d1a:	5f 93       	push	r21
    1d1c:	6f 93       	push	r22
    1d1e:	7f 93       	push	r23
    1d20:	8f 93       	push	r24
    1d22:	9f 93       	push	r25
    1d24:	af 93       	push	r26
    1d26:	bf 93       	push	r27
    1d28:	ef 93       	push	r30
    1d2a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    1d2c:	80 91 81 02 	lds	r24, 0x0281
    1d30:	90 91 82 02 	lds	r25, 0x0282
    1d34:	89 2b       	or	r24, r25
    1d36:	29 f0       	breq	.+10     	; 0x1d42 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    1d38:	e0 91 81 02 	lds	r30, 0x0281
    1d3c:	f0 91 82 02 	lds	r31, 0x0282
    1d40:	09 95       	icall
}
    1d42:	ff 91       	pop	r31
    1d44:	ef 91       	pop	r30
    1d46:	bf 91       	pop	r27
    1d48:	af 91       	pop	r26
    1d4a:	9f 91       	pop	r25
    1d4c:	8f 91       	pop	r24
    1d4e:	7f 91       	pop	r23
    1d50:	6f 91       	pop	r22
    1d52:	5f 91       	pop	r21
    1d54:	4f 91       	pop	r20
    1d56:	3f 91       	pop	r19
    1d58:	2f 91       	pop	r18
    1d5a:	0f 90       	pop	r0
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	0f 90       	pop	r0
    1d60:	1f 90       	pop	r1
    1d62:	18 95       	reti

00001d64 <__vector_2>:

ISR(INT1_vect) {
    1d64:	1f 92       	push	r1
    1d66:	0f 92       	push	r0
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	0f 92       	push	r0
    1d6c:	11 24       	eor	r1, r1
    1d6e:	2f 93       	push	r18
    1d70:	3f 93       	push	r19
    1d72:	4f 93       	push	r20
    1d74:	5f 93       	push	r21
    1d76:	6f 93       	push	r22
    1d78:	7f 93       	push	r23
    1d7a:	8f 93       	push	r24
    1d7c:	9f 93       	push	r25
    1d7e:	af 93       	push	r26
    1d80:	bf 93       	push	r27
    1d82:	ef 93       	push	r30
    1d84:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    1d86:	80 91 83 02 	lds	r24, 0x0283
    1d8a:	90 91 84 02 	lds	r25, 0x0284
    1d8e:	89 2b       	or	r24, r25
    1d90:	29 f0       	breq	.+10     	; 0x1d9c <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    1d92:	e0 91 83 02 	lds	r30, 0x0283
    1d96:	f0 91 84 02 	lds	r31, 0x0284
    1d9a:	09 95       	icall
}
    1d9c:	ff 91       	pop	r31
    1d9e:	ef 91       	pop	r30
    1da0:	bf 91       	pop	r27
    1da2:	af 91       	pop	r26
    1da4:	9f 91       	pop	r25
    1da6:	8f 91       	pop	r24
    1da8:	7f 91       	pop	r23
    1daa:	6f 91       	pop	r22
    1dac:	5f 91       	pop	r21
    1dae:	4f 91       	pop	r20
    1db0:	3f 91       	pop	r19
    1db2:	2f 91       	pop	r18
    1db4:	0f 90       	pop	r0
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	0f 90       	pop	r0
    1dba:	1f 90       	pop	r1
    1dbc:	18 95       	reti

00001dbe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    1dbe:	80 91 b5 02 	lds	r24, 0x02B5
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	20 91 b6 02 	lds	r18, 0x02B6
}
    1dc8:	82 1b       	sub	r24, r18
    1dca:	91 09       	sbc	r25, r1
    1dcc:	08 95       	ret

00001dce <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1dce:	90 91 b6 02 	lds	r25, 0x02B6
    1dd2:	80 91 b5 02 	lds	r24, 0x02B5
    1dd6:	98 17       	cp	r25, r24
    1dd8:	50 f4       	brcc	.+20     	; 0x1dee <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    1dda:	e9 2f       	mov	r30, r25
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	e9 54       	subi	r30, 0x49	; 73
    1de0:	fd 4f       	sbci	r31, 0xFD	; 253
    1de2:	20 81       	ld	r18, Z
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    1de6:	9f 5f       	subi	r25, 0xFF	; 255
    1de8:	90 93 b6 02 	sts	0x02B6, r25
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    1dee:	2f ef       	ldi	r18, 0xFF	; 255
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    1df2:	c9 01       	movw	r24, r18
    1df4:	08 95       	ret

00001df6 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    1df6:	e0 91 b6 02 	lds	r30, 0x02B6
    1dfa:	80 91 b5 02 	lds	r24, 0x02B5
    1dfe:	e8 17       	cp	r30, r24
    1e00:	30 f4       	brcc	.+12     	; 0x1e0e <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	e9 54       	subi	r30, 0x49	; 73
    1e06:	fd 4f       	sbci	r31, 0xFD	; 253
    1e08:	80 81       	ld	r24, Z
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    1e0e:	8f ef       	ldi	r24, 0xFF	; 255
    1e10:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    1e12:	08 95       	ret

00001e14 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    1e14:	08 95       	ret

00001e16 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1e16:	cf 92       	push	r12
    1e18:	df 92       	push	r13
    1e1a:	ef 92       	push	r14
    1e1c:	ff 92       	push	r15
    1e1e:	0f 93       	push	r16
    1e20:	1f 93       	push	r17
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	8c 01       	movw	r16, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	6a 01       	movw	r12, r20
  if(transmitting){
    1e2c:	20 91 91 02 	lds	r18, 0x0291
    1e30:	22 23       	and	r18, r18
    1e32:	a1 f0       	breq	.+40     	; 0x1e5c <_ZN7TwoWire5writeEPKhj+0x46>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1e34:	41 15       	cp	r20, r1
    1e36:	51 05       	cpc	r21, r1
    1e38:	a1 f0       	breq	.+40     	; 0x1e62 <_ZN7TwoWire5writeEPKhj+0x4c>
    1e3a:	eb 01       	movw	r28, r22
    1e3c:	7b 01       	movw	r14, r22
    1e3e:	e4 0e       	add	r14, r20
    1e40:	f5 1e       	adc	r15, r21
      write(data[i]);
    1e42:	69 91       	ld	r22, Y+
    1e44:	d8 01       	movw	r26, r16
    1e46:	ed 91       	ld	r30, X+
    1e48:	fc 91       	ld	r31, X
    1e4a:	01 90       	ld	r0, Z+
    1e4c:	f0 81       	ld	r31, Z
    1e4e:	e0 2d       	mov	r30, r0
    1e50:	c8 01       	movw	r24, r16
    1e52:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1e54:	ce 15       	cp	r28, r14
    1e56:	df 05       	cpc	r29, r15
    1e58:	a1 f7       	brne	.-24     	; 0x1e42 <_ZN7TwoWire5writeEPKhj+0x2c>
    1e5a:	03 c0       	rjmp	.+6      	; 0x1e62 <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    1e5c:	64 2f       	mov	r22, r20
    1e5e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <twi_transmit>
  }
  return quantity;
}
    1e62:	c6 01       	movw	r24, r12
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	1f 91       	pop	r17
    1e6a:	0f 91       	pop	r16
    1e6c:	ff 90       	pop	r15
    1e6e:	ef 90       	pop	r14
    1e70:	df 90       	pop	r13
    1e72:	cf 90       	pop	r12
    1e74:	08 95       	ret

00001e76 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	1f 92       	push	r1
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	fc 01       	movw	r30, r24
    1e82:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    1e84:	90 91 91 02 	lds	r25, 0x0291
    1e88:	99 23       	and	r25, r25
    1e8a:	d9 f0       	breq	.+54     	; 0x1ec2 <_ZN7TwoWire5writeEh+0x4c>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    1e8c:	90 91 92 02 	lds	r25, 0x0292
    1e90:	90 32       	cpi	r25, 0x20	; 32
    1e92:	38 f0       	brcs	.+14     	; 0x1ea2 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	93 83       	std	Z+3, r25	; 0x03
    1e9a:	82 83       	std	Z+2, r24	; 0x02
      setWriteError();
      return 0;
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	17 c0       	rjmp	.+46     	; 0x1ed0 <_ZN7TwoWire5writeEh+0x5a>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    1ea2:	80 91 93 02 	lds	r24, 0x0293
    1ea6:	e8 2f       	mov	r30, r24
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	ec 56       	subi	r30, 0x6C	; 108
    1eac:	fd 4f       	sbci	r31, 0xFD	; 253
    1eae:	99 81       	ldd	r25, Y+1	; 0x01
    1eb0:	90 83       	st	Z, r25
    ++txBufferIndex;
    1eb2:	8f 5f       	subi	r24, 0xFF	; 255
    1eb4:	80 93 93 02 	sts	0x0293, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    1eb8:	80 93 92 02 	sts	0x0292, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	07 c0       	rjmp	.+14     	; 0x1ed0 <_ZN7TwoWire5writeEh+0x5a>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    1ec2:	61 e0       	ldi	r22, 0x01	; 1
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <twi_transmit>
  }
  return 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
}
    1ed0:	0f 90       	pop	r0
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	08 95       	ret

00001ed8 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1ed8:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    1eda:	13 82       	std	Z+3, r1	; 0x03
    1edc:	12 82       	std	Z+2, r1	; 0x02
    1ede:	88 ee       	ldi	r24, 0xE8	; 232
    1ee0:	93 e0       	ldi	r25, 0x03	; 3
    1ee2:	a0 e0       	ldi	r26, 0x00	; 0
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	84 83       	std	Z+4, r24	; 0x04
    1ee8:	95 83       	std	Z+5, r25	; 0x05
    1eea:	a6 83       	std	Z+6, r26	; 0x06
    1eec:	b7 83       	std	Z+7, r27	; 0x07
    1eee:	83 e4       	ldi	r24, 0x43	; 67
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	91 83       	std	Z+1, r25	; 0x01
    1ef4:	80 83       	st	Z, r24
    1ef6:	08 95       	ret

00001ef8 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    1ef8:	10 92 b6 02 	sts	0x02B6, r1
  rxBufferLength = 0;
    1efc:	10 92 b5 02 	sts	0x02B5, r1

  txBufferIndex = 0;
    1f00:	10 92 93 02 	sts	0x0293, r1
  txBufferLength = 0;
    1f04:	10 92 92 02 	sts	0x0292, r1

  twi_init();
    1f08:	0e 94 46 0c 	call	0x188c	; 0x188c <twi_init>
    1f0c:	08 95       	ret

00001f0e <_ZN7TwoWire11requestFromEhhh>:
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
    1f0e:	86 2f       	mov	r24, r22
    1f10:	41 32       	cpi	r20, 0x21	; 33
    1f12:	08 f0       	brcs	.+2      	; 0x1f16 <_ZN7TwoWire11requestFromEhhh+0x8>
    1f14:	40 e2       	ldi	r20, 0x20	; 32
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    1f16:	67 eb       	ldi	r22, 0xB7	; 183
    1f18:	72 e0       	ldi	r23, 0x02	; 2
    1f1a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    1f1e:	10 92 b6 02 	sts	0x02B6, r1
  rxBufferLength = read;
    1f22:	80 93 b5 02 	sts	0x02B5, r24

  return read;
}
    1f26:	08 95       	ret

00001f28 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    1f28:	21 e0       	ldi	r18, 0x01	; 1
    1f2a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN7TwoWire11requestFromEhhh>
}
    1f2e:	08 95       	ret

00001f30 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	80 93 91 02 	sts	0x0291, r24
  // set address of targeted slave
  txAddress = address;
    1f36:	60 93 b4 02 	sts	0x02B4, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1f3a:	10 92 93 02 	sts	0x0293, r1
  txBufferLength = 0;
    1f3e:	10 92 92 02 	sts	0x0292, r1
    1f42:	08 95       	ret

00001f44 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    1f44:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <_ZN7TwoWire17beginTransmissionEh>
    1f48:	08 95       	ret

00001f4a <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    1f4a:	0f 93       	push	r16
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    1f4c:	06 2f       	mov	r16, r22
    1f4e:	21 e0       	ldi	r18, 0x01	; 1
    1f50:	40 91 92 02 	lds	r20, 0x0292
    1f54:	64 e9       	ldi	r22, 0x94	; 148
    1f56:	72 e0       	ldi	r23, 0x02	; 2
    1f58:	80 91 b4 02 	lds	r24, 0x02B4
    1f5c:	0e 94 b0 0c 	call	0x1960	; 0x1960 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1f60:	10 92 93 02 	sts	0x0293, r1
  txBufferLength = 0;
    1f64:	10 92 92 02 	sts	0x0292, r1
  // indicate that we are done transmitting
  transmitting = 0;
    1f68:	10 92 91 02 	sts	0x0291, r1
  return ret;
}
    1f6c:	0f 91       	pop	r16
    1f6e:	08 95       	ret

00001f70 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    1f70:	61 e0       	ldi	r22, 0x01	; 1
    1f72:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire15endTransmissionEh>
}
    1f76:	08 95       	ret

00001f78 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1f78:	85 e8       	ldi	r24, 0x85	; 133
    1f7a:	92 e0       	ldi	r25, 0x02	; 2
    1f7c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN7TwoWireC1Ev>
    1f80:	08 95       	ret

00001f82 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1f82:	1f 92       	push	r1
    1f84:	0f 92       	push	r0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	0f 92       	push	r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	2f 93       	push	r18
    1f8e:	3f 93       	push	r19
    1f90:	8f 93       	push	r24
    1f92:	9f 93       	push	r25
    1f94:	af 93       	push	r26
    1f96:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1f98:	80 91 d8 02 	lds	r24, 0x02D8
    1f9c:	90 91 d9 02 	lds	r25, 0x02D9
    1fa0:	a0 91 da 02 	lds	r26, 0x02DA
    1fa4:	b0 91 db 02 	lds	r27, 0x02DB
	unsigned char f = timer0_fract;
    1fa8:	30 91 d7 02 	lds	r19, 0x02D7

	m += MILLIS_INC;
	f += FRACT_INC;
    1fac:	23 e0       	ldi	r18, 0x03	; 3
    1fae:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1fb0:	2d 37       	cpi	r18, 0x7D	; 125
    1fb2:	20 f4       	brcc	.+8      	; 0x1fbc <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1fb4:	01 96       	adiw	r24, 0x01	; 1
    1fb6:	a1 1d       	adc	r26, r1
    1fb8:	b1 1d       	adc	r27, r1
    1fba:	05 c0       	rjmp	.+10     	; 0x1fc6 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1fbc:	26 e8       	ldi	r18, 0x86	; 134
    1fbe:	23 0f       	add	r18, r19
		m += 1;
    1fc0:	02 96       	adiw	r24, 0x02	; 2
    1fc2:	a1 1d       	adc	r26, r1
    1fc4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1fc6:	20 93 d7 02 	sts	0x02D7, r18
	timer0_millis = m;
    1fca:	80 93 d8 02 	sts	0x02D8, r24
    1fce:	90 93 d9 02 	sts	0x02D9, r25
    1fd2:	a0 93 da 02 	sts	0x02DA, r26
    1fd6:	b0 93 db 02 	sts	0x02DB, r27
	timer0_overflow_count++;
    1fda:	80 91 dc 02 	lds	r24, 0x02DC
    1fde:	90 91 dd 02 	lds	r25, 0x02DD
    1fe2:	a0 91 de 02 	lds	r26, 0x02DE
    1fe6:	b0 91 df 02 	lds	r27, 0x02DF
    1fea:	01 96       	adiw	r24, 0x01	; 1
    1fec:	a1 1d       	adc	r26, r1
    1fee:	b1 1d       	adc	r27, r1
    1ff0:	80 93 dc 02 	sts	0x02DC, r24
    1ff4:	90 93 dd 02 	sts	0x02DD, r25
    1ff8:	a0 93 de 02 	sts	0x02DE, r26
    1ffc:	b0 93 df 02 	sts	0x02DF, r27
}
    2000:	bf 91       	pop	r27
    2002:	af 91       	pop	r26
    2004:	9f 91       	pop	r25
    2006:	8f 91       	pop	r24
    2008:	3f 91       	pop	r19
    200a:	2f 91       	pop	r18
    200c:	0f 90       	pop	r0
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	0f 90       	pop	r0
    2012:	1f 90       	pop	r1
    2014:	18 95       	reti

00002016 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2016:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2018:	f8 94       	cli
	m = timer0_overflow_count;
    201a:	80 91 dc 02 	lds	r24, 0x02DC
    201e:	90 91 dd 02 	lds	r25, 0x02DD
    2022:	a0 91 de 02 	lds	r26, 0x02DE
    2026:	b0 91 df 02 	lds	r27, 0x02DF
#if defined(TCNT0)
	t = TCNT0;
    202a:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    202c:	a8 9b       	sbis	0x15, 0	; 21
    202e:	05 c0       	rjmp	.+10     	; 0x203a <micros+0x24>
    2030:	2f 3f       	cpi	r18, 0xFF	; 255
    2032:	19 f0       	breq	.+6      	; 0x203a <micros+0x24>
		m++;
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	a1 1d       	adc	r26, r1
    2038:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    203a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    203c:	ba 2f       	mov	r27, r26
    203e:	a9 2f       	mov	r26, r25
    2040:	98 2f       	mov	r25, r24
    2042:	88 27       	eor	r24, r24
    2044:	82 0f       	add	r24, r18
    2046:	91 1d       	adc	r25, r1
    2048:	a1 1d       	adc	r26, r1
    204a:	b1 1d       	adc	r27, r1
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	66 0f       	add	r22, r22
    2052:	77 1f       	adc	r23, r23
    2054:	88 1f       	adc	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	66 0f       	add	r22, r22
    205a:	77 1f       	adc	r23, r23
    205c:	88 1f       	adc	r24, r24
    205e:	99 1f       	adc	r25, r25
}
    2060:	08 95       	ret

00002062 <delay>:

void delay(unsigned long ms)
{
    2062:	cf 92       	push	r12
    2064:	df 92       	push	r13
    2066:	ef 92       	push	r14
    2068:	ff 92       	push	r15
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	6b 01       	movw	r12, r22
    2070:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    2072:	0e 94 0b 10 	call	0x2016	; 0x2016 <micros>
    2076:	eb 01       	movw	r28, r22

	while (ms > 0) {
    2078:	c1 14       	cp	r12, r1
    207a:	d1 04       	cpc	r13, r1
    207c:	e1 04       	cpc	r14, r1
    207e:	f1 04       	cpc	r15, r1
    2080:	a9 f0       	breq	.+42     	; 0x20ac <delay+0x4a>
		yield();
    2082:	0e 94 63 08 	call	0x10c6	; 0x10c6 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    2086:	0e 94 0b 10 	call	0x2016	; 0x2016 <micros>
    208a:	6c 1b       	sub	r22, r28
    208c:	7d 0b       	sbc	r23, r29
    208e:	68 3e       	cpi	r22, 0xE8	; 232
    2090:	73 40       	sbci	r23, 0x03	; 3
    2092:	38 f0       	brcs	.+14     	; 0x20a2 <delay+0x40>
			ms--;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	c8 1a       	sub	r12, r24
    2098:	d1 08       	sbc	r13, r1
    209a:	e1 08       	sbc	r14, r1
    209c:	f1 08       	sbc	r15, r1
			start += 1000;
    209e:	c8 51       	subi	r28, 0x18	; 24
    20a0:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    20a2:	c1 14       	cp	r12, r1
    20a4:	d1 04       	cpc	r13, r1
    20a6:	e1 04       	cpc	r14, r1
    20a8:	f1 04       	cpc	r15, r1
    20aa:	59 f7       	brne	.-42     	; 0x2082 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	df 90       	pop	r13
    20b6:	cf 90       	pop	r12
    20b8:	08 95       	ret

000020ba <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    20ba:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    20bc:	84 b5       	in	r24, 0x24	; 36
    20be:	82 60       	ori	r24, 0x02	; 2
    20c0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    20c2:	84 b5       	in	r24, 0x24	; 36
    20c4:	81 60       	ori	r24, 0x01	; 1
    20c6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    20c8:	85 b5       	in	r24, 0x25	; 37
    20ca:	82 60       	ori	r24, 0x02	; 2
    20cc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    20ce:	85 b5       	in	r24, 0x25	; 37
    20d0:	81 60       	ori	r24, 0x01	; 1
    20d2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    20d4:	ee e6       	ldi	r30, 0x6E	; 110
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	81 60       	ori	r24, 0x01	; 1
    20dc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    20de:	e1 e8       	ldi	r30, 0x81	; 129
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    20e4:	80 81       	ld	r24, Z
    20e6:	82 60       	ori	r24, 0x02	; 2
    20e8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    20ea:	80 81       	ld	r24, Z
    20ec:	81 60       	ori	r24, 0x01	; 1
    20ee:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    20f0:	e0 e8       	ldi	r30, 0x80	; 128
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	81 60       	ori	r24, 0x01	; 1
    20f8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    20fa:	e1 eb       	ldi	r30, 0xB1	; 177
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	84 60       	ori	r24, 0x04	; 4
    2102:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2104:	e0 eb       	ldi	r30, 0xB0	; 176
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	81 60       	ori	r24, 0x01	; 1
    210c:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    210e:	ea e7       	ldi	r30, 0x7A	; 122
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	84 60       	ori	r24, 0x04	; 4
    2116:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2118:	80 81       	ld	r24, Z
    211a:	82 60       	ori	r24, 0x02	; 2
    211c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    211e:	80 81       	ld	r24, Z
    2120:	81 60       	ori	r24, 0x01	; 1
    2122:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2124:	80 81       	ld	r24, Z
    2126:	80 68       	ori	r24, 0x80	; 128
    2128:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    212a:	10 92 c1 00 	sts	0x00C1, r1
    212e:	08 95       	ret

00002130 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2130:	8e 30       	cpi	r24, 0x0E	; 14
    2132:	08 f0       	brcs	.+2      	; 0x2136 <analogRead+0x6>
    2134:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2136:	87 70       	andi	r24, 0x07	; 7
    2138:	90 91 11 01 	lds	r25, 0x0111
    213c:	40 e4       	ldi	r20, 0x40	; 64
    213e:	94 9f       	mul	r25, r20
    2140:	90 01       	movw	r18, r0
    2142:	11 24       	eor	r1, r1
    2144:	28 2b       	or	r18, r24
    2146:	20 93 7c 00 	sts	0x007C, r18
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    214a:	ea e7       	ldi	r30, 0x7A	; 122
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	80 64       	ori	r24, 0x40	; 64
    2152:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2154:	80 81       	ld	r24, Z
    2156:	86 fd       	sbrc	r24, 6
    2158:	fd cf       	rjmp	.-6      	; 0x2154 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    215a:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    215e:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2162:	90 e0       	ldi	r25, 0x00	; 0
}
    2164:	92 2b       	or	r25, r18
    2166:	08 95       	ret

00002168 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2168:	83 30       	cpi	r24, 0x03	; 3
    216a:	69 f0       	breq	.+26     	; 0x2186 <turnOffPWM+0x1e>
    216c:	28 f4       	brcc	.+10     	; 0x2178 <turnOffPWM+0x10>
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	b1 f0       	breq	.+44     	; 0x219e <turnOffPWM+0x36>
    2172:	82 30       	cpi	r24, 0x02	; 2
    2174:	c1 f0       	breq	.+48     	; 0x21a6 <turnOffPWM+0x3e>
    2176:	08 95       	ret
    2178:	87 30       	cpi	r24, 0x07	; 7
    217a:	c9 f0       	breq	.+50     	; 0x21ae <turnOffPWM+0x46>
    217c:	88 30       	cpi	r24, 0x08	; 8
    217e:	e9 f0       	breq	.+58     	; 0x21ba <turnOffPWM+0x52>
    2180:	84 30       	cpi	r24, 0x04	; 4
    2182:	01 f5       	brne	.+64     	; 0x21c4 <turnOffPWM+0x5c>
    2184:	06 c0       	rjmp	.+12     	; 0x2192 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2186:	e0 e8       	ldi	r30, 0x80	; 128
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	8f 77       	andi	r24, 0x7F	; 127
    218e:	80 83       	st	Z, r24
    2190:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2192:	e0 e8       	ldi	r30, 0x80	; 128
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8f 7d       	andi	r24, 0xDF	; 223
    219a:	80 83       	st	Z, r24
    219c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    219e:	84 b5       	in	r24, 0x24	; 36
    21a0:	8f 77       	andi	r24, 0x7F	; 127
    21a2:	84 bd       	out	0x24, r24	; 36
    21a4:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    21a6:	84 b5       	in	r24, 0x24	; 36
    21a8:	8f 7d       	andi	r24, 0xDF	; 223
    21aa:	84 bd       	out	0x24, r24	; 36
    21ac:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    21ae:	e0 eb       	ldi	r30, 0xB0	; 176
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	8f 77       	andi	r24, 0x7F	; 127
    21b6:	80 83       	st	Z, r24
    21b8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    21ba:	e0 eb       	ldi	r30, 0xB0	; 176
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	8f 7d       	andi	r24, 0xDF	; 223
    21c2:	80 83       	st	Z, r24
    21c4:	08 95       	ret

000021c6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	fc 01       	movw	r30, r24
    21ce:	eb 53       	subi	r30, 0x3B	; 59
    21d0:	fd 4f       	sbci	r31, 0xFD	; 253
    21d2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    21d4:	fc 01       	movw	r30, r24
    21d6:	e7 52       	subi	r30, 0x27	; 39
    21d8:	fd 4f       	sbci	r31, 0xFD	; 253
    21da:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    21dc:	88 23       	and	r24, r24
    21de:	79 f1       	breq	.+94     	; 0x223e <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	fc 01       	movw	r30, r24
    21e8:	ef 5f       	subi	r30, 0xFF	; 255
    21ea:	fc 4f       	sbci	r31, 0xFC	; 252
    21ec:	a5 91       	lpm	r26, Z+
    21ee:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    21f0:	fc 01       	movw	r30, r24
    21f2:	e9 50       	subi	r30, 0x09	; 9
    21f4:	fd 4f       	sbci	r31, 0xFD	; 253
    21f6:	c5 91       	lpm	r28, Z+
    21f8:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    21fa:	61 11       	cpse	r22, r1
    21fc:	0c c0       	rjmp	.+24     	; 0x2216 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    21fe:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2200:	f8 94       	cli
		*reg &= ~bit;
    2202:	8c 91       	ld	r24, X
    2204:	e2 2f       	mov	r30, r18
    2206:	e0 95       	com	r30
    2208:	8e 23       	and	r24, r30
    220a:	8c 93       	st	X, r24
		*out &= ~bit;
    220c:	28 81       	ld	r18, Y
    220e:	e2 23       	and	r30, r18
    2210:	e8 83       	st	Y, r30
		SREG = oldSREG;
    2212:	9f bf       	out	0x3f, r25	; 63
    2214:	14 c0       	rjmp	.+40     	; 0x223e <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    2216:	62 30       	cpi	r22, 0x02	; 2
    2218:	61 f4       	brne	.+24     	; 0x2232 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    221a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    221c:	f8 94       	cli
		*reg &= ~bit;
    221e:	3c 91       	ld	r19, X
    2220:	82 2f       	mov	r24, r18
    2222:	80 95       	com	r24
    2224:	83 23       	and	r24, r19
    2226:	8c 93       	st	X, r24
		*out |= bit;
    2228:	e8 81       	ld	r30, Y
    222a:	e2 2b       	or	r30, r18
    222c:	e8 83       	st	Y, r30
		SREG = oldSREG;
    222e:	9f bf       	out	0x3f, r25	; 63
    2230:	06 c0       	rjmp	.+12     	; 0x223e <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    2232:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2234:	f8 94       	cli
		*reg |= bit;
    2236:	ec 91       	ld	r30, X
    2238:	e2 2b       	or	r30, r18
    223a:	ec 93       	st	X, r30
		SREG = oldSREG;
    223c:	8f bf       	out	0x3f, r24	; 63
	}
}
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	08 95       	ret

00002244 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2244:	1f 93       	push	r17
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	f9 01       	movw	r30, r18
    2250:	ef 54       	subi	r30, 0x4F	; 79
    2252:	fd 4f       	sbci	r31, 0xFD	; 253
    2254:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2256:	f9 01       	movw	r30, r18
    2258:	eb 53       	subi	r30, 0x3B	; 59
    225a:	fd 4f       	sbci	r31, 0xFD	; 253
    225c:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    225e:	f9 01       	movw	r30, r18
    2260:	e7 52       	subi	r30, 0x27	; 39
    2262:	fd 4f       	sbci	r31, 0xFD	; 253
    2264:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2266:	cc 23       	and	r28, r28
    2268:	d1 f0       	breq	.+52     	; 0x229e <digitalWrite+0x5a>
    226a:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    226c:	81 11       	cpse	r24, r1
    226e:	0e 94 b4 10 	call	0x2168	; 0x2168 <turnOffPWM>

	out = portOutputRegister(port);
    2272:	ec 2f       	mov	r30, r28
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	ee 0f       	add	r30, r30
    2278:	ff 1f       	adc	r31, r31
    227a:	e9 50       	subi	r30, 0x09	; 9
    227c:	fd 4f       	sbci	r31, 0xFD	; 253
    227e:	a5 91       	lpm	r26, Z+
    2280:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2282:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2284:	f8 94       	cli

	if (val == LOW) {
    2286:	d1 11       	cpse	r29, r1
    2288:	06 c0       	rjmp	.+12     	; 0x2296 <digitalWrite+0x52>
		*out &= ~bit;
    228a:	9c 91       	ld	r25, X
    228c:	e1 2f       	mov	r30, r17
    228e:	e0 95       	com	r30
    2290:	e9 23       	and	r30, r25
    2292:	ec 93       	st	X, r30
    2294:	03 c0       	rjmp	.+6      	; 0x229c <digitalWrite+0x58>
	} else {
		*out |= bit;
    2296:	ec 91       	ld	r30, X
    2298:	e1 2b       	or	r30, r17
    229a:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    229c:	8f bf       	out	0x3f, r24	; 63
}
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	08 95       	ret

000022a6 <digitalRead>:

int digitalRead(uint8_t pin)
{
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	f9 01       	movw	r30, r18
    22b0:	ef 54       	subi	r30, 0x4F	; 79
    22b2:	fd 4f       	sbci	r31, 0xFD	; 253
    22b4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    22b6:	f9 01       	movw	r30, r18
    22b8:	eb 53       	subi	r30, 0x3B	; 59
    22ba:	fd 4f       	sbci	r31, 0xFD	; 253
    22bc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    22be:	f9 01       	movw	r30, r18
    22c0:	e7 52       	subi	r30, 0x27	; 39
    22c2:	fd 4f       	sbci	r31, 0xFD	; 253
    22c4:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    22c6:	cc 23       	and	r28, r28
    22c8:	91 f0       	breq	.+36     	; 0x22ee <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    22ca:	81 11       	cpse	r24, r1
    22cc:	0e 94 b4 10 	call	0x2168	; 0x2168 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    22d0:	ec 2f       	mov	r30, r28
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	e3 51       	subi	r30, 0x13	; 19
    22da:	fd 4f       	sbci	r31, 0xFD	; 253
    22dc:	a5 91       	lpm	r26, Z+
    22de:	b4 91       	lpm	r27, Z
    22e0:	ec 91       	ld	r30, X
    22e2:	ed 23       	and	r30, r29
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	21 f4       	brne	.+8      	; 0x22f2 <digitalRead+0x4c>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	08 95       	ret

000022f8 <__subsf3>:
    22f8:	50 58       	subi	r21, 0x80	; 128

000022fa <__addsf3>:
    22fa:	bb 27       	eor	r27, r27
    22fc:	aa 27       	eor	r26, r26
    22fe:	0e 94 94 11 	call	0x2328	; 0x2328 <__addsf3x>
    2302:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__fp_round>
    2306:	0e 94 00 13 	call	0x2600	; 0x2600 <__fp_pscA>
    230a:	38 f0       	brcs	.+14     	; 0x231a <__addsf3+0x20>
    230c:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscB>
    2310:	20 f0       	brcs	.+8      	; 0x231a <__addsf3+0x20>
    2312:	39 f4       	brne	.+14     	; 0x2322 <__addsf3+0x28>
    2314:	9f 3f       	cpi	r25, 0xFF	; 255
    2316:	19 f4       	brne	.+6      	; 0x231e <__addsf3+0x24>
    2318:	26 f4       	brtc	.+8      	; 0x2322 <__addsf3+0x28>
    231a:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__fp_nan>
    231e:	0e f4       	brtc	.+2      	; 0x2322 <__addsf3+0x28>
    2320:	e0 95       	com	r30
    2322:	e7 fb       	bst	r30, 7
    2324:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>

00002328 <__addsf3x>:
    2328:	e9 2f       	mov	r30, r25
    232a:	0e 94 1f 13 	call	0x263e	; 0x263e <__fp_split3>
    232e:	58 f3       	brcs	.-42     	; 0x2306 <__addsf3+0xc>
    2330:	ba 17       	cp	r27, r26
    2332:	62 07       	cpc	r22, r18
    2334:	73 07       	cpc	r23, r19
    2336:	84 07       	cpc	r24, r20
    2338:	95 07       	cpc	r25, r21
    233a:	20 f0       	brcs	.+8      	; 0x2344 <__addsf3x+0x1c>
    233c:	79 f4       	brne	.+30     	; 0x235c <__addsf3x+0x34>
    233e:	a6 f5       	brtc	.+104    	; 0x23a8 <__addsf3x+0x80>
    2340:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__fp_zero>
    2344:	0e f4       	brtc	.+2      	; 0x2348 <__addsf3x+0x20>
    2346:	e0 95       	com	r30
    2348:	0b 2e       	mov	r0, r27
    234a:	ba 2f       	mov	r27, r26
    234c:	a0 2d       	mov	r26, r0
    234e:	0b 01       	movw	r0, r22
    2350:	b9 01       	movw	r22, r18
    2352:	90 01       	movw	r18, r0
    2354:	0c 01       	movw	r0, r24
    2356:	ca 01       	movw	r24, r20
    2358:	a0 01       	movw	r20, r0
    235a:	11 24       	eor	r1, r1
    235c:	ff 27       	eor	r31, r31
    235e:	59 1b       	sub	r21, r25
    2360:	99 f0       	breq	.+38     	; 0x2388 <__addsf3x+0x60>
    2362:	59 3f       	cpi	r21, 0xF9	; 249
    2364:	50 f4       	brcc	.+20     	; 0x237a <__addsf3x+0x52>
    2366:	50 3e       	cpi	r21, 0xE0	; 224
    2368:	68 f1       	brcs	.+90     	; 0x23c4 <__addsf3x+0x9c>
    236a:	1a 16       	cp	r1, r26
    236c:	f0 40       	sbci	r31, 0x00	; 0
    236e:	a2 2f       	mov	r26, r18
    2370:	23 2f       	mov	r18, r19
    2372:	34 2f       	mov	r19, r20
    2374:	44 27       	eor	r20, r20
    2376:	58 5f       	subi	r21, 0xF8	; 248
    2378:	f3 cf       	rjmp	.-26     	; 0x2360 <__addsf3x+0x38>
    237a:	46 95       	lsr	r20
    237c:	37 95       	ror	r19
    237e:	27 95       	ror	r18
    2380:	a7 95       	ror	r26
    2382:	f0 40       	sbci	r31, 0x00	; 0
    2384:	53 95       	inc	r21
    2386:	c9 f7       	brne	.-14     	; 0x237a <__addsf3x+0x52>
    2388:	7e f4       	brtc	.+30     	; 0x23a8 <__addsf3x+0x80>
    238a:	1f 16       	cp	r1, r31
    238c:	ba 0b       	sbc	r27, r26
    238e:	62 0b       	sbc	r22, r18
    2390:	73 0b       	sbc	r23, r19
    2392:	84 0b       	sbc	r24, r20
    2394:	ba f0       	brmi	.+46     	; 0x23c4 <__addsf3x+0x9c>
    2396:	91 50       	subi	r25, 0x01	; 1
    2398:	a1 f0       	breq	.+40     	; 0x23c2 <__addsf3x+0x9a>
    239a:	ff 0f       	add	r31, r31
    239c:	bb 1f       	adc	r27, r27
    239e:	66 1f       	adc	r22, r22
    23a0:	77 1f       	adc	r23, r23
    23a2:	88 1f       	adc	r24, r24
    23a4:	c2 f7       	brpl	.-16     	; 0x2396 <__addsf3x+0x6e>
    23a6:	0e c0       	rjmp	.+28     	; 0x23c4 <__addsf3x+0x9c>
    23a8:	ba 0f       	add	r27, r26
    23aa:	62 1f       	adc	r22, r18
    23ac:	73 1f       	adc	r23, r19
    23ae:	84 1f       	adc	r24, r20
    23b0:	48 f4       	brcc	.+18     	; 0x23c4 <__addsf3x+0x9c>
    23b2:	87 95       	ror	r24
    23b4:	77 95       	ror	r23
    23b6:	67 95       	ror	r22
    23b8:	b7 95       	ror	r27
    23ba:	f7 95       	ror	r31
    23bc:	9e 3f       	cpi	r25, 0xFE	; 254
    23be:	08 f0       	brcs	.+2      	; 0x23c2 <__addsf3x+0x9a>
    23c0:	b0 cf       	rjmp	.-160    	; 0x2322 <__addsf3+0x28>
    23c2:	93 95       	inc	r25
    23c4:	88 0f       	add	r24, r24
    23c6:	08 f0       	brcs	.+2      	; 0x23ca <__addsf3x+0xa2>
    23c8:	99 27       	eor	r25, r25
    23ca:	ee 0f       	add	r30, r30
    23cc:	97 95       	ror	r25
    23ce:	87 95       	ror	r24
    23d0:	08 95       	ret

000023d2 <__cmpsf2>:
    23d2:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__fp_cmp>
    23d6:	08 f4       	brcc	.+2      	; 0x23da <__cmpsf2+0x8>
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	08 95       	ret

000023dc <__divsf3>:
    23dc:	0e 94 02 12 	call	0x2404	; 0x2404 <__divsf3x>
    23e0:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__fp_round>
    23e4:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscB>
    23e8:	58 f0       	brcs	.+22     	; 0x2400 <__divsf3+0x24>
    23ea:	0e 94 00 13 	call	0x2600	; 0x2600 <__fp_pscA>
    23ee:	40 f0       	brcs	.+16     	; 0x2400 <__divsf3+0x24>
    23f0:	29 f4       	brne	.+10     	; 0x23fc <__divsf3+0x20>
    23f2:	5f 3f       	cpi	r21, 0xFF	; 255
    23f4:	29 f0       	breq	.+10     	; 0x2400 <__divsf3+0x24>
    23f6:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>
    23fa:	51 11       	cpse	r21, r1
    23fc:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>
    2400:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__fp_nan>

00002404 <__divsf3x>:
    2404:	0e 94 1f 13 	call	0x263e	; 0x263e <__fp_split3>
    2408:	68 f3       	brcs	.-38     	; 0x23e4 <__divsf3+0x8>

0000240a <__divsf3_pse>:
    240a:	99 23       	and	r25, r25
    240c:	b1 f3       	breq	.-20     	; 0x23fa <__divsf3+0x1e>
    240e:	55 23       	and	r21, r21
    2410:	91 f3       	breq	.-28     	; 0x23f6 <__divsf3+0x1a>
    2412:	95 1b       	sub	r25, r21
    2414:	55 0b       	sbc	r21, r21
    2416:	bb 27       	eor	r27, r27
    2418:	aa 27       	eor	r26, r26
    241a:	62 17       	cp	r22, r18
    241c:	73 07       	cpc	r23, r19
    241e:	84 07       	cpc	r24, r20
    2420:	38 f0       	brcs	.+14     	; 0x2430 <__divsf3_pse+0x26>
    2422:	9f 5f       	subi	r25, 0xFF	; 255
    2424:	5f 4f       	sbci	r21, 0xFF	; 255
    2426:	22 0f       	add	r18, r18
    2428:	33 1f       	adc	r19, r19
    242a:	44 1f       	adc	r20, r20
    242c:	aa 1f       	adc	r26, r26
    242e:	a9 f3       	breq	.-22     	; 0x241a <__divsf3_pse+0x10>
    2430:	35 d0       	rcall	.+106    	; 0x249c <__divsf3_pse+0x92>
    2432:	0e 2e       	mov	r0, r30
    2434:	3a f0       	brmi	.+14     	; 0x2444 <__divsf3_pse+0x3a>
    2436:	e0 e8       	ldi	r30, 0x80	; 128
    2438:	32 d0       	rcall	.+100    	; 0x249e <__divsf3_pse+0x94>
    243a:	91 50       	subi	r25, 0x01	; 1
    243c:	50 40       	sbci	r21, 0x00	; 0
    243e:	e6 95       	lsr	r30
    2440:	00 1c       	adc	r0, r0
    2442:	ca f7       	brpl	.-14     	; 0x2436 <__divsf3_pse+0x2c>
    2444:	2b d0       	rcall	.+86     	; 0x249c <__divsf3_pse+0x92>
    2446:	fe 2f       	mov	r31, r30
    2448:	29 d0       	rcall	.+82     	; 0x249c <__divsf3_pse+0x92>
    244a:	66 0f       	add	r22, r22
    244c:	77 1f       	adc	r23, r23
    244e:	88 1f       	adc	r24, r24
    2450:	bb 1f       	adc	r27, r27
    2452:	26 17       	cp	r18, r22
    2454:	37 07       	cpc	r19, r23
    2456:	48 07       	cpc	r20, r24
    2458:	ab 07       	cpc	r26, r27
    245a:	b0 e8       	ldi	r27, 0x80	; 128
    245c:	09 f0       	breq	.+2      	; 0x2460 <__divsf3_pse+0x56>
    245e:	bb 0b       	sbc	r27, r27
    2460:	80 2d       	mov	r24, r0
    2462:	bf 01       	movw	r22, r30
    2464:	ff 27       	eor	r31, r31
    2466:	93 58       	subi	r25, 0x83	; 131
    2468:	5f 4f       	sbci	r21, 0xFF	; 255
    246a:	3a f0       	brmi	.+14     	; 0x247a <__divsf3_pse+0x70>
    246c:	9e 3f       	cpi	r25, 0xFE	; 254
    246e:	51 05       	cpc	r21, r1
    2470:	78 f0       	brcs	.+30     	; 0x2490 <__divsf3_pse+0x86>
    2472:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>
    2476:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>
    247a:	5f 3f       	cpi	r21, 0xFF	; 255
    247c:	e4 f3       	brlt	.-8      	; 0x2476 <__divsf3_pse+0x6c>
    247e:	98 3e       	cpi	r25, 0xE8	; 232
    2480:	d4 f3       	brlt	.-12     	; 0x2476 <__divsf3_pse+0x6c>
    2482:	86 95       	lsr	r24
    2484:	77 95       	ror	r23
    2486:	67 95       	ror	r22
    2488:	b7 95       	ror	r27
    248a:	f7 95       	ror	r31
    248c:	9f 5f       	subi	r25, 0xFF	; 255
    248e:	c9 f7       	brne	.-14     	; 0x2482 <__divsf3_pse+0x78>
    2490:	88 0f       	add	r24, r24
    2492:	91 1d       	adc	r25, r1
    2494:	96 95       	lsr	r25
    2496:	87 95       	ror	r24
    2498:	97 f9       	bld	r25, 7
    249a:	08 95       	ret
    249c:	e1 e0       	ldi	r30, 0x01	; 1
    249e:	66 0f       	add	r22, r22
    24a0:	77 1f       	adc	r23, r23
    24a2:	88 1f       	adc	r24, r24
    24a4:	bb 1f       	adc	r27, r27
    24a6:	62 17       	cp	r22, r18
    24a8:	73 07       	cpc	r23, r19
    24aa:	84 07       	cpc	r24, r20
    24ac:	ba 07       	cpc	r27, r26
    24ae:	20 f0       	brcs	.+8      	; 0x24b8 <__divsf3_pse+0xae>
    24b0:	62 1b       	sub	r22, r18
    24b2:	73 0b       	sbc	r23, r19
    24b4:	84 0b       	sbc	r24, r20
    24b6:	ba 0b       	sbc	r27, r26
    24b8:	ee 1f       	adc	r30, r30
    24ba:	88 f7       	brcc	.-30     	; 0x249e <__divsf3_pse+0x94>
    24bc:	e0 95       	com	r30
    24be:	08 95       	ret

000024c0 <__fixsfsi>:
    24c0:	0e 94 67 12 	call	0x24ce	; 0x24ce <__fixunssfsi>
    24c4:	68 94       	set
    24c6:	b1 11       	cpse	r27, r1
    24c8:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>
    24cc:	08 95       	ret

000024ce <__fixunssfsi>:
    24ce:	0e 94 27 13 	call	0x264e	; 0x264e <__fp_splitA>
    24d2:	88 f0       	brcs	.+34     	; 0x24f6 <__fixunssfsi+0x28>
    24d4:	9f 57       	subi	r25, 0x7F	; 127
    24d6:	98 f0       	brcs	.+38     	; 0x24fe <__fixunssfsi+0x30>
    24d8:	b9 2f       	mov	r27, r25
    24da:	99 27       	eor	r25, r25
    24dc:	b7 51       	subi	r27, 0x17	; 23
    24de:	b0 f0       	brcs	.+44     	; 0x250c <__fixunssfsi+0x3e>
    24e0:	e1 f0       	breq	.+56     	; 0x251a <__fixunssfsi+0x4c>
    24e2:	66 0f       	add	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	88 1f       	adc	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	1a f0       	brmi	.+6      	; 0x24f2 <__fixunssfsi+0x24>
    24ec:	ba 95       	dec	r27
    24ee:	c9 f7       	brne	.-14     	; 0x24e2 <__fixunssfsi+0x14>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <__fixunssfsi+0x4c>
    24f2:	b1 30       	cpi	r27, 0x01	; 1
    24f4:	91 f0       	breq	.+36     	; 0x251a <__fixunssfsi+0x4c>
    24f6:	0e 94 41 13 	call	0x2682	; 0x2682 <__fp_zero>
    24fa:	b1 e0       	ldi	r27, 0x01	; 1
    24fc:	08 95       	ret
    24fe:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__fp_zero>
    2502:	67 2f       	mov	r22, r23
    2504:	78 2f       	mov	r23, r24
    2506:	88 27       	eor	r24, r24
    2508:	b8 5f       	subi	r27, 0xF8	; 248
    250a:	39 f0       	breq	.+14     	; 0x251a <__fixunssfsi+0x4c>
    250c:	b9 3f       	cpi	r27, 0xF9	; 249
    250e:	cc f3       	brlt	.-14     	; 0x2502 <__fixunssfsi+0x34>
    2510:	86 95       	lsr	r24
    2512:	77 95       	ror	r23
    2514:	67 95       	ror	r22
    2516:	b3 95       	inc	r27
    2518:	d9 f7       	brne	.-10     	; 0x2510 <__fixunssfsi+0x42>
    251a:	3e f4       	brtc	.+14     	; 0x252a <__fixunssfsi+0x5c>
    251c:	90 95       	com	r25
    251e:	80 95       	com	r24
    2520:	70 95       	com	r23
    2522:	61 95       	neg	r22
    2524:	7f 4f       	sbci	r23, 0xFF	; 255
    2526:	8f 4f       	sbci	r24, 0xFF	; 255
    2528:	9f 4f       	sbci	r25, 0xFF	; 255
    252a:	08 95       	ret

0000252c <__floatunsisf>:
    252c:	e8 94       	clt
    252e:	09 c0       	rjmp	.+18     	; 0x2542 <__floatsisf+0x12>

00002530 <__floatsisf>:
    2530:	97 fb       	bst	r25, 7
    2532:	3e f4       	brtc	.+14     	; 0x2542 <__floatsisf+0x12>
    2534:	90 95       	com	r25
    2536:	80 95       	com	r24
    2538:	70 95       	com	r23
    253a:	61 95       	neg	r22
    253c:	7f 4f       	sbci	r23, 0xFF	; 255
    253e:	8f 4f       	sbci	r24, 0xFF	; 255
    2540:	9f 4f       	sbci	r25, 0xFF	; 255
    2542:	99 23       	and	r25, r25
    2544:	a9 f0       	breq	.+42     	; 0x2570 <__floatsisf+0x40>
    2546:	f9 2f       	mov	r31, r25
    2548:	96 e9       	ldi	r25, 0x96	; 150
    254a:	bb 27       	eor	r27, r27
    254c:	93 95       	inc	r25
    254e:	f6 95       	lsr	r31
    2550:	87 95       	ror	r24
    2552:	77 95       	ror	r23
    2554:	67 95       	ror	r22
    2556:	b7 95       	ror	r27
    2558:	f1 11       	cpse	r31, r1
    255a:	f8 cf       	rjmp	.-16     	; 0x254c <__floatsisf+0x1c>
    255c:	fa f4       	brpl	.+62     	; 0x259c <__floatsisf+0x6c>
    255e:	bb 0f       	add	r27, r27
    2560:	11 f4       	brne	.+4      	; 0x2566 <__floatsisf+0x36>
    2562:	60 ff       	sbrs	r22, 0
    2564:	1b c0       	rjmp	.+54     	; 0x259c <__floatsisf+0x6c>
    2566:	6f 5f       	subi	r22, 0xFF	; 255
    2568:	7f 4f       	sbci	r23, 0xFF	; 255
    256a:	8f 4f       	sbci	r24, 0xFF	; 255
    256c:	9f 4f       	sbci	r25, 0xFF	; 255
    256e:	16 c0       	rjmp	.+44     	; 0x259c <__floatsisf+0x6c>
    2570:	88 23       	and	r24, r24
    2572:	11 f0       	breq	.+4      	; 0x2578 <__floatsisf+0x48>
    2574:	96 e9       	ldi	r25, 0x96	; 150
    2576:	11 c0       	rjmp	.+34     	; 0x259a <__floatsisf+0x6a>
    2578:	77 23       	and	r23, r23
    257a:	21 f0       	breq	.+8      	; 0x2584 <__floatsisf+0x54>
    257c:	9e e8       	ldi	r25, 0x8E	; 142
    257e:	87 2f       	mov	r24, r23
    2580:	76 2f       	mov	r23, r22
    2582:	05 c0       	rjmp	.+10     	; 0x258e <__floatsisf+0x5e>
    2584:	66 23       	and	r22, r22
    2586:	71 f0       	breq	.+28     	; 0x25a4 <__floatsisf+0x74>
    2588:	96 e8       	ldi	r25, 0x86	; 134
    258a:	86 2f       	mov	r24, r22
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	2a f0       	brmi	.+10     	; 0x259c <__floatsisf+0x6c>
    2592:	9a 95       	dec	r25
    2594:	66 0f       	add	r22, r22
    2596:	77 1f       	adc	r23, r23
    2598:	88 1f       	adc	r24, r24
    259a:	da f7       	brpl	.-10     	; 0x2592 <__floatsisf+0x62>
    259c:	88 0f       	add	r24, r24
    259e:	96 95       	lsr	r25
    25a0:	87 95       	ror	r24
    25a2:	97 f9       	bld	r25, 7
    25a4:	08 95       	ret

000025a6 <__fp_cmp>:
    25a6:	99 0f       	add	r25, r25
    25a8:	00 08       	sbc	r0, r0
    25aa:	55 0f       	add	r21, r21
    25ac:	aa 0b       	sbc	r26, r26
    25ae:	e0 e8       	ldi	r30, 0x80	; 128
    25b0:	fe ef       	ldi	r31, 0xFE	; 254
    25b2:	16 16       	cp	r1, r22
    25b4:	17 06       	cpc	r1, r23
    25b6:	e8 07       	cpc	r30, r24
    25b8:	f9 07       	cpc	r31, r25
    25ba:	c0 f0       	brcs	.+48     	; 0x25ec <__fp_cmp+0x46>
    25bc:	12 16       	cp	r1, r18
    25be:	13 06       	cpc	r1, r19
    25c0:	e4 07       	cpc	r30, r20
    25c2:	f5 07       	cpc	r31, r21
    25c4:	98 f0       	brcs	.+38     	; 0x25ec <__fp_cmp+0x46>
    25c6:	62 1b       	sub	r22, r18
    25c8:	73 0b       	sbc	r23, r19
    25ca:	84 0b       	sbc	r24, r20
    25cc:	95 0b       	sbc	r25, r21
    25ce:	39 f4       	brne	.+14     	; 0x25de <__fp_cmp+0x38>
    25d0:	0a 26       	eor	r0, r26
    25d2:	61 f0       	breq	.+24     	; 0x25ec <__fp_cmp+0x46>
    25d4:	23 2b       	or	r18, r19
    25d6:	24 2b       	or	r18, r20
    25d8:	25 2b       	or	r18, r21
    25da:	21 f4       	brne	.+8      	; 0x25e4 <__fp_cmp+0x3e>
    25dc:	08 95       	ret
    25de:	0a 26       	eor	r0, r26
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <__fp_cmp+0x3e>
    25e2:	a1 40       	sbci	r26, 0x01	; 1
    25e4:	a6 95       	lsr	r26
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	81 1d       	adc	r24, r1
    25ea:	81 1d       	adc	r24, r1
    25ec:	08 95       	ret

000025ee <__fp_inf>:
    25ee:	97 f9       	bld	r25, 7
    25f0:	9f 67       	ori	r25, 0x7F	; 127
    25f2:	80 e8       	ldi	r24, 0x80	; 128
    25f4:	70 e0       	ldi	r23, 0x00	; 0
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	08 95       	ret

000025fa <__fp_nan>:
    25fa:	9f ef       	ldi	r25, 0xFF	; 255
    25fc:	80 ec       	ldi	r24, 0xC0	; 192
    25fe:	08 95       	ret

00002600 <__fp_pscA>:
    2600:	00 24       	eor	r0, r0
    2602:	0a 94       	dec	r0
    2604:	16 16       	cp	r1, r22
    2606:	17 06       	cpc	r1, r23
    2608:	18 06       	cpc	r1, r24
    260a:	09 06       	cpc	r0, r25
    260c:	08 95       	ret

0000260e <__fp_pscB>:
    260e:	00 24       	eor	r0, r0
    2610:	0a 94       	dec	r0
    2612:	12 16       	cp	r1, r18
    2614:	13 06       	cpc	r1, r19
    2616:	14 06       	cpc	r1, r20
    2618:	05 06       	cpc	r0, r21
    261a:	08 95       	ret

0000261c <__fp_round>:
    261c:	09 2e       	mov	r0, r25
    261e:	03 94       	inc	r0
    2620:	00 0c       	add	r0, r0
    2622:	11 f4       	brne	.+4      	; 0x2628 <__fp_round+0xc>
    2624:	88 23       	and	r24, r24
    2626:	52 f0       	brmi	.+20     	; 0x263c <__fp_round+0x20>
    2628:	bb 0f       	add	r27, r27
    262a:	40 f4       	brcc	.+16     	; 0x263c <__fp_round+0x20>
    262c:	bf 2b       	or	r27, r31
    262e:	11 f4       	brne	.+4      	; 0x2634 <__fp_round+0x18>
    2630:	60 ff       	sbrs	r22, 0
    2632:	04 c0       	rjmp	.+8      	; 0x263c <__fp_round+0x20>
    2634:	6f 5f       	subi	r22, 0xFF	; 255
    2636:	7f 4f       	sbci	r23, 0xFF	; 255
    2638:	8f 4f       	sbci	r24, 0xFF	; 255
    263a:	9f 4f       	sbci	r25, 0xFF	; 255
    263c:	08 95       	ret

0000263e <__fp_split3>:
    263e:	57 fd       	sbrc	r21, 7
    2640:	90 58       	subi	r25, 0x80	; 128
    2642:	44 0f       	add	r20, r20
    2644:	55 1f       	adc	r21, r21
    2646:	59 f0       	breq	.+22     	; 0x265e <__fp_splitA+0x10>
    2648:	5f 3f       	cpi	r21, 0xFF	; 255
    264a:	71 f0       	breq	.+28     	; 0x2668 <__fp_splitA+0x1a>
    264c:	47 95       	ror	r20

0000264e <__fp_splitA>:
    264e:	88 0f       	add	r24, r24
    2650:	97 fb       	bst	r25, 7
    2652:	99 1f       	adc	r25, r25
    2654:	61 f0       	breq	.+24     	; 0x266e <__fp_splitA+0x20>
    2656:	9f 3f       	cpi	r25, 0xFF	; 255
    2658:	79 f0       	breq	.+30     	; 0x2678 <__fp_splitA+0x2a>
    265a:	87 95       	ror	r24
    265c:	08 95       	ret
    265e:	12 16       	cp	r1, r18
    2660:	13 06       	cpc	r1, r19
    2662:	14 06       	cpc	r1, r20
    2664:	55 1f       	adc	r21, r21
    2666:	f2 cf       	rjmp	.-28     	; 0x264c <__fp_split3+0xe>
    2668:	46 95       	lsr	r20
    266a:	f1 df       	rcall	.-30     	; 0x264e <__fp_splitA>
    266c:	08 c0       	rjmp	.+16     	; 0x267e <__fp_splitA+0x30>
    266e:	16 16       	cp	r1, r22
    2670:	17 06       	cpc	r1, r23
    2672:	18 06       	cpc	r1, r24
    2674:	99 1f       	adc	r25, r25
    2676:	f1 cf       	rjmp	.-30     	; 0x265a <__fp_splitA+0xc>
    2678:	86 95       	lsr	r24
    267a:	71 05       	cpc	r23, r1
    267c:	61 05       	cpc	r22, r1
    267e:	08 94       	sec
    2680:	08 95       	ret

00002682 <__fp_zero>:
    2682:	e8 94       	clt

00002684 <__fp_szero>:
    2684:	bb 27       	eor	r27, r27
    2686:	66 27       	eor	r22, r22
    2688:	77 27       	eor	r23, r23
    268a:	cb 01       	movw	r24, r22
    268c:	97 f9       	bld	r25, 7
    268e:	08 95       	ret

00002690 <__gesf2>:
    2690:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__fp_cmp>
    2694:	08 f4       	brcc	.+2      	; 0x2698 <__gesf2+0x8>
    2696:	8f ef       	ldi	r24, 0xFF	; 255
    2698:	08 95       	ret

0000269a <__mulsf3>:
    269a:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__mulsf3x>
    269e:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__fp_round>
    26a2:	0e 94 00 13 	call	0x2600	; 0x2600 <__fp_pscA>
    26a6:	38 f0       	brcs	.+14     	; 0x26b6 <__mulsf3+0x1c>
    26a8:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscB>
    26ac:	20 f0       	brcs	.+8      	; 0x26b6 <__mulsf3+0x1c>
    26ae:	95 23       	and	r25, r21
    26b0:	11 f0       	breq	.+4      	; 0x26b6 <__mulsf3+0x1c>
    26b2:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>
    26b6:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__fp_nan>
    26ba:	11 24       	eor	r1, r1
    26bc:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>

000026c0 <__mulsf3x>:
    26c0:	0e 94 1f 13 	call	0x263e	; 0x263e <__fp_split3>
    26c4:	70 f3       	brcs	.-36     	; 0x26a2 <__mulsf3+0x8>

000026c6 <__mulsf3_pse>:
    26c6:	95 9f       	mul	r25, r21
    26c8:	c1 f3       	breq	.-16     	; 0x26ba <__mulsf3+0x20>
    26ca:	95 0f       	add	r25, r21
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	55 1f       	adc	r21, r21
    26d0:	62 9f       	mul	r22, r18
    26d2:	f0 01       	movw	r30, r0
    26d4:	72 9f       	mul	r23, r18
    26d6:	bb 27       	eor	r27, r27
    26d8:	f0 0d       	add	r31, r0
    26da:	b1 1d       	adc	r27, r1
    26dc:	63 9f       	mul	r22, r19
    26de:	aa 27       	eor	r26, r26
    26e0:	f0 0d       	add	r31, r0
    26e2:	b1 1d       	adc	r27, r1
    26e4:	aa 1f       	adc	r26, r26
    26e6:	64 9f       	mul	r22, r20
    26e8:	66 27       	eor	r22, r22
    26ea:	b0 0d       	add	r27, r0
    26ec:	a1 1d       	adc	r26, r1
    26ee:	66 1f       	adc	r22, r22
    26f0:	82 9f       	mul	r24, r18
    26f2:	22 27       	eor	r18, r18
    26f4:	b0 0d       	add	r27, r0
    26f6:	a1 1d       	adc	r26, r1
    26f8:	62 1f       	adc	r22, r18
    26fa:	73 9f       	mul	r23, r19
    26fc:	b0 0d       	add	r27, r0
    26fe:	a1 1d       	adc	r26, r1
    2700:	62 1f       	adc	r22, r18
    2702:	83 9f       	mul	r24, r19
    2704:	a0 0d       	add	r26, r0
    2706:	61 1d       	adc	r22, r1
    2708:	22 1f       	adc	r18, r18
    270a:	74 9f       	mul	r23, r20
    270c:	33 27       	eor	r19, r19
    270e:	a0 0d       	add	r26, r0
    2710:	61 1d       	adc	r22, r1
    2712:	23 1f       	adc	r18, r19
    2714:	84 9f       	mul	r24, r20
    2716:	60 0d       	add	r22, r0
    2718:	21 1d       	adc	r18, r1
    271a:	82 2f       	mov	r24, r18
    271c:	76 2f       	mov	r23, r22
    271e:	6a 2f       	mov	r22, r26
    2720:	11 24       	eor	r1, r1
    2722:	9f 57       	subi	r25, 0x7F	; 127
    2724:	50 40       	sbci	r21, 0x00	; 0
    2726:	9a f0       	brmi	.+38     	; 0x274e <__mulsf3_pse+0x88>
    2728:	f1 f0       	breq	.+60     	; 0x2766 <__mulsf3_pse+0xa0>
    272a:	88 23       	and	r24, r24
    272c:	4a f0       	brmi	.+18     	; 0x2740 <__mulsf3_pse+0x7a>
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	bb 1f       	adc	r27, r27
    2734:	66 1f       	adc	r22, r22
    2736:	77 1f       	adc	r23, r23
    2738:	88 1f       	adc	r24, r24
    273a:	91 50       	subi	r25, 0x01	; 1
    273c:	50 40       	sbci	r21, 0x00	; 0
    273e:	a9 f7       	brne	.-22     	; 0x272a <__mulsf3_pse+0x64>
    2740:	9e 3f       	cpi	r25, 0xFE	; 254
    2742:	51 05       	cpc	r21, r1
    2744:	80 f0       	brcs	.+32     	; 0x2766 <__mulsf3_pse+0xa0>
    2746:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>
    274a:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>
    274e:	5f 3f       	cpi	r21, 0xFF	; 255
    2750:	e4 f3       	brlt	.-8      	; 0x274a <__mulsf3_pse+0x84>
    2752:	98 3e       	cpi	r25, 0xE8	; 232
    2754:	d4 f3       	brlt	.-12     	; 0x274a <__mulsf3_pse+0x84>
    2756:	86 95       	lsr	r24
    2758:	77 95       	ror	r23
    275a:	67 95       	ror	r22
    275c:	b7 95       	ror	r27
    275e:	f7 95       	ror	r31
    2760:	e7 95       	ror	r30
    2762:	9f 5f       	subi	r25, 0xFF	; 255
    2764:	c1 f7       	brne	.-16     	; 0x2756 <__mulsf3_pse+0x90>
    2766:	fe 2b       	or	r31, r30
    2768:	88 0f       	add	r24, r24
    276a:	91 1d       	adc	r25, r1
    276c:	96 95       	lsr	r25
    276e:	87 95       	ror	r24
    2770:	97 f9       	bld	r25, 7
    2772:	08 95       	ret

00002774 <__unordsf2>:
    2774:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__fp_cmp>
    2778:	88 0b       	sbc	r24, r24
    277a:	99 0b       	sbc	r25, r25
    277c:	08 95       	ret

0000277e <__divmodhi4>:
    277e:	97 fb       	bst	r25, 7
    2780:	07 2e       	mov	r0, r23
    2782:	16 f4       	brtc	.+4      	; 0x2788 <__divmodhi4+0xa>
    2784:	00 94       	com	r0
    2786:	07 d0       	rcall	.+14     	; 0x2796 <__divmodhi4_neg1>
    2788:	77 fd       	sbrc	r23, 7
    278a:	09 d0       	rcall	.+18     	; 0x279e <__divmodhi4_neg2>
    278c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__udivmodhi4>
    2790:	07 fc       	sbrc	r0, 7
    2792:	05 d0       	rcall	.+10     	; 0x279e <__divmodhi4_neg2>
    2794:	3e f4       	brtc	.+14     	; 0x27a4 <__divmodhi4_exit>

00002796 <__divmodhi4_neg1>:
    2796:	90 95       	com	r25
    2798:	81 95       	neg	r24
    279a:	9f 4f       	sbci	r25, 0xFF	; 255
    279c:	08 95       	ret

0000279e <__divmodhi4_neg2>:
    279e:	70 95       	com	r23
    27a0:	61 95       	neg	r22
    27a2:	7f 4f       	sbci	r23, 0xFF	; 255

000027a4 <__divmodhi4_exit>:
    27a4:	08 95       	ret

000027a6 <__udivmodsi4>:
    27a6:	a1 e2       	ldi	r26, 0x21	; 33
    27a8:	1a 2e       	mov	r1, r26
    27aa:	aa 1b       	sub	r26, r26
    27ac:	bb 1b       	sub	r27, r27
    27ae:	fd 01       	movw	r30, r26
    27b0:	0d c0       	rjmp	.+26     	; 0x27cc <__udivmodsi4_ep>

000027b2 <__udivmodsi4_loop>:
    27b2:	aa 1f       	adc	r26, r26
    27b4:	bb 1f       	adc	r27, r27
    27b6:	ee 1f       	adc	r30, r30
    27b8:	ff 1f       	adc	r31, r31
    27ba:	a2 17       	cp	r26, r18
    27bc:	b3 07       	cpc	r27, r19
    27be:	e4 07       	cpc	r30, r20
    27c0:	f5 07       	cpc	r31, r21
    27c2:	20 f0       	brcs	.+8      	; 0x27cc <__udivmodsi4_ep>
    27c4:	a2 1b       	sub	r26, r18
    27c6:	b3 0b       	sbc	r27, r19
    27c8:	e4 0b       	sbc	r30, r20
    27ca:	f5 0b       	sbc	r31, r21

000027cc <__udivmodsi4_ep>:
    27cc:	66 1f       	adc	r22, r22
    27ce:	77 1f       	adc	r23, r23
    27d0:	88 1f       	adc	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	1a 94       	dec	r1
    27d6:	69 f7       	brne	.-38     	; 0x27b2 <__udivmodsi4_loop>
    27d8:	60 95       	com	r22
    27da:	70 95       	com	r23
    27dc:	80 95       	com	r24
    27de:	90 95       	com	r25
    27e0:	9b 01       	movw	r18, r22
    27e2:	ac 01       	movw	r20, r24
    27e4:	bd 01       	movw	r22, r26
    27e6:	cf 01       	movw	r24, r30
    27e8:	08 95       	ret

000027ea <__tablejump2__>:
    27ea:	ee 0f       	add	r30, r30
    27ec:	ff 1f       	adc	r31, r31
    27ee:	05 90       	lpm	r0, Z+
    27f0:	f4 91       	lpm	r31, Z
    27f2:	e0 2d       	mov	r30, r0
    27f4:	09 94       	ijmp

000027f6 <__udivmodhi4>:
    27f6:	aa 1b       	sub	r26, r26
    27f8:	bb 1b       	sub	r27, r27
    27fa:	51 e1       	ldi	r21, 0x11	; 17
    27fc:	07 c0       	rjmp	.+14     	; 0x280c <__udivmodhi4_ep>

000027fe <__udivmodhi4_loop>:
    27fe:	aa 1f       	adc	r26, r26
    2800:	bb 1f       	adc	r27, r27
    2802:	a6 17       	cp	r26, r22
    2804:	b7 07       	cpc	r27, r23
    2806:	10 f0       	brcs	.+4      	; 0x280c <__udivmodhi4_ep>
    2808:	a6 1b       	sub	r26, r22
    280a:	b7 0b       	sbc	r27, r23

0000280c <__udivmodhi4_ep>:
    280c:	88 1f       	adc	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	5a 95       	dec	r21
    2812:	a9 f7       	brne	.-22     	; 0x27fe <__udivmodhi4_loop>
    2814:	80 95       	com	r24
    2816:	90 95       	com	r25
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	08 95       	ret

0000281e <memcpy_P>:
    281e:	fb 01       	movw	r30, r22
    2820:	dc 01       	movw	r26, r24
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <memcpy_P+0xa>
    2824:	05 90       	lpm	r0, Z+
    2826:	0d 92       	st	X+, r0
    2828:	41 50       	subi	r20, 0x01	; 1
    282a:	50 40       	sbci	r21, 0x00	; 0
    282c:	d8 f7       	brcc	.-10     	; 0x2824 <memcpy_P+0x6>
    282e:	08 95       	ret

00002830 <_exit>:
    2830:	f8 94       	cli

00002832 <__stop_program>:
    2832:	ff cf       	rjmp	.-2      	; 0x2832 <__stop_program>
