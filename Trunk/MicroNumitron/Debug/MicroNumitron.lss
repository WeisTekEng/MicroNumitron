
MicroNumitron.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00002842  000028d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002842  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000190  00800150  00800150  00002926  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002926  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002958  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000790  00000000  00000000  00002998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010436  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c52  00000000  00000000  0001355e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000288b  00000000  00000000  000161b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017a0  00000000  00000000  00018a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000033d5  00000000  00000000  0001a1dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008d94  00000000  00000000  0001d5b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e8  00000000  00000000  00026345  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8a 01 	jmp	0x314	; 0x314 <__ctors_end>
       4:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__vector_1>
       8:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__vector_2>
       c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      10:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      14:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      18:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      1c:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__vector_7>
      20:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      24:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      28:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      2c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      30:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      34:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      38:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      3c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      40:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__vector_16>
      44:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      48:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__vector_18>
      4c:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__vector_19>
      50:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      54:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      58:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      5c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      60:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__vector_24>
      64:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      68:	6b 0b       	sbc	r22, r27
      6a:	8c 0b       	sbc	r24, r28
      6c:	8c 0b       	sbc	r24, r28
      6e:	89 0b       	sbc	r24, r25
      70:	8c 0b       	sbc	r24, r28
      72:	67 0b       	sbc	r22, r23
      74:	8c 0b       	sbc	r24, r28
      76:	8c 0b       	sbc	r24, r28
      78:	8c 0b       	sbc	r24, r28
      7a:	59 0b       	sbc	r21, r25
      7c:	8c 0b       	sbc	r24, r28
      7e:	8c 0b       	sbc	r24, r28
      80:	74 0b       	sbc	r23, r20
      82:	85 0b       	sbc	r24, r21
      84:	81 0b       	sbc	r24, r17
      86:	8c 0b       	sbc	r24, r28
      88:	8c 0b       	sbc	r24, r28
      8a:	8c 0b       	sbc	r24, r28
      8c:	7d 0b       	sbc	r23, r29
      8e:	54 0e       	add	r5, r20
      90:	58 0e       	add	r5, r24
      92:	58 0e       	add	r5, r24
      94:	58 0e       	add	r5, r24
      96:	58 0e       	add	r5, r24
      98:	58 0e       	add	r5, r24
      9a:	58 0e       	add	r5, r24
      9c:	58 0e       	add	r5, r24
      9e:	66 0d       	add	r22, r6
      a0:	58 0e       	add	r5, r24
      a2:	58 0e       	add	r5, r24
      a4:	58 0e       	add	r5, r24
      a6:	58 0e       	add	r5, r24
      a8:	58 0e       	add	r5, r24
      aa:	58 0e       	add	r5, r24
      ac:	58 0e       	add	r5, r24
      ae:	66 0d       	add	r22, r6
      b0:	58 0e       	add	r5, r24
      b2:	58 0e       	add	r5, r24
      b4:	58 0e       	add	r5, r24
      b6:	58 0e       	add	r5, r24
      b8:	58 0e       	add	r5, r24
      ba:	58 0e       	add	r5, r24
      bc:	58 0e       	add	r5, r24
      be:	6e 0d       	add	r22, r14
      c0:	58 0e       	add	r5, r24
      c2:	58 0e       	add	r5, r24
      c4:	58 0e       	add	r5, r24
      c6:	58 0e       	add	r5, r24
      c8:	58 0e       	add	r5, r24
      ca:	58 0e       	add	r5, r24
      cc:	58 0e       	add	r5, r24
      ce:	94 0d       	add	r25, r4
      d0:	58 0e       	add	r5, r24
      d2:	58 0e       	add	r5, r24
      d4:	58 0e       	add	r5, r24
      d6:	58 0e       	add	r5, r24
      d8:	58 0e       	add	r5, r24
      da:	58 0e       	add	r5, r24
      dc:	58 0e       	add	r5, r24
      de:	6e 0d       	add	r22, r14
      e0:	58 0e       	add	r5, r24
      e2:	58 0e       	add	r5, r24
      e4:	58 0e       	add	r5, r24
      e6:	58 0e       	add	r5, r24
      e8:	58 0e       	add	r5, r24
      ea:	58 0e       	add	r5, r24
      ec:	58 0e       	add	r5, r24
      ee:	9a 0d       	add	r25, r10
      f0:	58 0e       	add	r5, r24
      f2:	58 0e       	add	r5, r24
      f4:	58 0e       	add	r5, r24
      f6:	58 0e       	add	r5, r24
      f8:	58 0e       	add	r5, r24
      fa:	58 0e       	add	r5, r24
      fc:	58 0e       	add	r5, r24
      fe:	a0 0d       	add	r26, r0
     100:	58 0e       	add	r5, r24
     102:	58 0e       	add	r5, r24
     104:	58 0e       	add	r5, r24
     106:	58 0e       	add	r5, r24
     108:	58 0e       	add	r5, r24
     10a:	58 0e       	add	r5, r24
     10c:	58 0e       	add	r5, r24
     10e:	b2 0d       	add	r27, r2
     110:	58 0e       	add	r5, r24
     112:	58 0e       	add	r5, r24
     114:	58 0e       	add	r5, r24
     116:	58 0e       	add	r5, r24
     118:	58 0e       	add	r5, r24
     11a:	58 0e       	add	r5, r24
     11c:	58 0e       	add	r5, r24
     11e:	dc 0d       	add	r29, r12
     120:	58 0e       	add	r5, r24
     122:	58 0e       	add	r5, r24
     124:	58 0e       	add	r5, r24
     126:	58 0e       	add	r5, r24
     128:	58 0e       	add	r5, r24
     12a:	58 0e       	add	r5, r24
     12c:	58 0e       	add	r5, r24
     12e:	a6 0d       	add	r26, r6
     130:	58 0e       	add	r5, r24
     132:	58 0e       	add	r5, r24
     134:	58 0e       	add	r5, r24
     136:	58 0e       	add	r5, r24
     138:	58 0e       	add	r5, r24
     13a:	58 0e       	add	r5, r24
     13c:	58 0e       	add	r5, r24
     13e:	c0 0d       	add	r28, r0
     140:	58 0e       	add	r5, r24
     142:	58 0e       	add	r5, r24
     144:	58 0e       	add	r5, r24
     146:	58 0e       	add	r5, r24
     148:	58 0e       	add	r5, r24
     14a:	58 0e       	add	r5, r24
     14c:	58 0e       	add	r5, r24
     14e:	df 0d       	add	r29, r15
     150:	58 0e       	add	r5, r24
     152:	58 0e       	add	r5, r24
     154:	58 0e       	add	r5, r24
     156:	58 0e       	add	r5, r24
     158:	58 0e       	add	r5, r24
     15a:	58 0e       	add	r5, r24
     15c:	58 0e       	add	r5, r24
     15e:	df 0d       	add	r29, r15
     160:	58 0e       	add	r5, r24
     162:	58 0e       	add	r5, r24
     164:	58 0e       	add	r5, r24
     166:	58 0e       	add	r5, r24
     168:	58 0e       	add	r5, r24
     16a:	58 0e       	add	r5, r24
     16c:	58 0e       	add	r5, r24
     16e:	df 0d       	add	r29, r15
     170:	58 0e       	add	r5, r24
     172:	58 0e       	add	r5, r24
     174:	58 0e       	add	r5, r24
     176:	58 0e       	add	r5, r24
     178:	58 0e       	add	r5, r24
     17a:	58 0e       	add	r5, r24
     17c:	58 0e       	add	r5, r24
     17e:	df 0d       	add	r29, r15
     180:	58 0e       	add	r5, r24
     182:	58 0e       	add	r5, r24
     184:	58 0e       	add	r5, r24
     186:	58 0e       	add	r5, r24
     188:	58 0e       	add	r5, r24
     18a:	58 0e       	add	r5, r24
     18c:	58 0e       	add	r5, r24
     18e:	e8 0d       	add	r30, r8
     190:	58 0e       	add	r5, r24
     192:	58 0e       	add	r5, r24
     194:	58 0e       	add	r5, r24
     196:	58 0e       	add	r5, r24
     198:	58 0e       	add	r5, r24
     19a:	58 0e       	add	r5, r24
     19c:	58 0e       	add	r5, r24
     19e:	1b 0e       	add	r1, r27
     1a0:	58 0e       	add	r5, r24
     1a2:	58 0e       	add	r5, r24
     1a4:	58 0e       	add	r5, r24
     1a6:	58 0e       	add	r5, r24
     1a8:	58 0e       	add	r5, r24
     1aa:	58 0e       	add	r5, r24
     1ac:	58 0e       	add	r5, r24
     1ae:	e8 0d       	add	r30, r8
     1b0:	58 0e       	add	r5, r24
     1b2:	58 0e       	add	r5, r24
     1b4:	58 0e       	add	r5, r24
     1b6:	58 0e       	add	r5, r24
     1b8:	58 0e       	add	r5, r24
     1ba:	58 0e       	add	r5, r24
     1bc:	58 0e       	add	r5, r24
     1be:	1b 0e       	add	r1, r27
     1c0:	58 0e       	add	r5, r24
     1c2:	58 0e       	add	r5, r24
     1c4:	58 0e       	add	r5, r24
     1c6:	58 0e       	add	r5, r24
     1c8:	58 0e       	add	r5, r24
     1ca:	58 0e       	add	r5, r24
     1cc:	58 0e       	add	r5, r24
     1ce:	00 0e       	add	r0, r16
     1d0:	58 0e       	add	r5, r24
     1d2:	58 0e       	add	r5, r24
     1d4:	58 0e       	add	r5, r24
     1d6:	58 0e       	add	r5, r24
     1d8:	58 0e       	add	r5, r24
     1da:	58 0e       	add	r5, r24
     1dc:	58 0e       	add	r5, r24
     1de:	1f 0e       	add	r1, r31
     1e0:	58 0e       	add	r5, r24
     1e2:	58 0e       	add	r5, r24
     1e4:	58 0e       	add	r5, r24
     1e6:	58 0e       	add	r5, r24
     1e8:	58 0e       	add	r5, r24
     1ea:	58 0e       	add	r5, r24
     1ec:	58 0e       	add	r5, r24
     1ee:	1f 0e       	add	r1, r31
     1f0:	58 0e       	add	r5, r24
     1f2:	58 0e       	add	r5, r24
     1f4:	58 0e       	add	r5, r24
     1f6:	58 0e       	add	r5, r24
     1f8:	58 0e       	add	r5, r24
     1fa:	58 0e       	add	r5, r24
     1fc:	58 0e       	add	r5, r24
     1fe:	34 0e       	add	r3, r20
     200:	58 0e       	add	r5, r24
     202:	58 0e       	add	r5, r24
     204:	58 0e       	add	r5, r24
     206:	58 0e       	add	r5, r24
     208:	58 0e       	add	r5, r24
     20a:	58 0e       	add	r5, r24
     20c:	58 0e       	add	r5, r24
     20e:	4e 0e       	add	r4, r30
     210:	58 0e       	add	r5, r24
     212:	58 0e       	add	r5, r24
     214:	58 0e       	add	r5, r24
     216:	58 0e       	add	r5, r24
     218:	58 0e       	add	r5, r24
     21a:	58 0e       	add	r5, r24
     21c:	58 0e       	add	r5, r24
     21e:	4e 0e       	add	r4, r30

00000220 <__trampolines_end>:
     220:	c2 b0       	in	r12, 0x02	; 2
     222:	43 20       	and	r4, r3
	...

00000225 <_ZZ15Internal_UpdatevE3__c_1>:
     225:	50 4d 00                                            PM.

00000228 <_ZZ15Internal_UpdatevE3__c_0>:
     228:	41 4d 00                                            AM.

0000022b <_ZZ15Internal_UpdatevE3__c>:
     22b:	20 54 69 6d 65 2f 44 61 74 65 3a 20 00               Time/Date: .

00000238 <_ZZ4InitvE3__c_3>:
     238:	54 69 6d 65 20 73 68 6f 75 6c 64 20 62 65 20 73     Time should be s
     248:	65 74 2e 0d 0a 00                                   et....

0000024e <_ZZ4InitvE3__c_2>:
     24e:	54 69 6d 65 20 64 69 64 20 6e 6f 74 20 73 65 74     Time did not set
     25e:	20 63 6f 72 72 65 63 74 6c 79 2c 20 63 68 65 63      correctly, chec
     26e:	6b 20 77 69 72 69 6e 67 2e 0d 0a 00                 k wiring....

0000027a <_ZZ4InitvE3__c_1>:
     27a:	52 54 43 20 69 73 20 4e 4f 54 20 72 75 6e 6e 69     RTC is NOT runni
     28a:	6e 67 21 2c 20 53 65 74 74 69 6e 67 20 74 6f 20     ng!, Setting to 
	...

0000029b <_ZZ4InitvE3__c>:
     29b:	4f 63 74 20 32 35 20 32 30 31 35 00                 Oct 25 2015.

000002a7 <_ZZ4InitvE3__c_0>:
     2a7:	32 33 3a 32 32 3a 33 34 00                          23:22:34.

000002b0 <_ZL21tone_pin_to_timer_PGM>:
     2b0:	02                                                  .

000002b1 <digital_pin_to_timer_PGM>:
     2b1:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     2c1:	00 00 00 00                                         ....

000002c5 <digital_pin_to_bit_mask_PGM>:
     2c5:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     2d5:	04 08 10 20                                         ... 

000002d9 <digital_pin_to_port_PGM>:
     2d9:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     2e9:	03 03 03 03                                         ....

000002ed <port_to_input_PGM>:
     2ed:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002f7 <port_to_output_PGM>:
     2f7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000301 <port_to_mode_PGM>:
     301:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000030c <__ctors_start>:
     30c:	e4 04       	cpc	r14, r4
     30e:	3d 08       	sbc	r3, r13
     310:	ad 08       	sbc	r10, r13
     312:	c3 0f       	add	r28, r19

00000314 <__ctors_end>:
     314:	11 24       	eor	r1, r1
     316:	1f be       	out	0x3f, r1	; 63
     318:	cf ef       	ldi	r28, 0xFF	; 255
     31a:	d4 e0       	ldi	r29, 0x04	; 4
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	cd bf       	out	0x3d, r28	; 61

00000320 <__do_copy_data>:
     320:	11 e0       	ldi	r17, 0x01	; 1
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b1 e0       	ldi	r27, 0x01	; 1
     326:	e2 e4       	ldi	r30, 0x42	; 66
     328:	f8 e2       	ldi	r31, 0x28	; 40
     32a:	02 c0       	rjmp	.+4      	; 0x330 <__do_copy_data+0x10>
     32c:	05 90       	lpm	r0, Z+
     32e:	0d 92       	st	X+, r0
     330:	a0 35       	cpi	r26, 0x50	; 80
     332:	b1 07       	cpc	r27, r17
     334:	d9 f7       	brne	.-10     	; 0x32c <__do_copy_data+0xc>

00000336 <__do_clear_bss>:
     336:	22 e0       	ldi	r18, 0x02	; 2
     338:	a0 e5       	ldi	r26, 0x50	; 80
     33a:	b1 e0       	ldi	r27, 0x01	; 1
     33c:	01 c0       	rjmp	.+2      	; 0x340 <.do_clear_bss_start>

0000033e <.do_clear_bss_loop>:
     33e:	1d 92       	st	X+, r1

00000340 <.do_clear_bss_start>:
     340:	a0 3e       	cpi	r26, 0xE0	; 224
     342:	b2 07       	cpc	r27, r18
     344:	e1 f7       	brne	.-8      	; 0x33e <.do_clear_bss_loop>

00000346 <__do_global_ctors>:
     346:	11 e0       	ldi	r17, 0x01	; 1
     348:	ca e8       	ldi	r28, 0x8A	; 138
     34a:	d1 e0       	ldi	r29, 0x01	; 1
     34c:	04 c0       	rjmp	.+8      	; 0x356 <__do_global_ctors+0x10>
     34e:	21 97       	sbiw	r28, 0x01	; 1
     350:	fe 01       	movw	r30, r28
     352:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__tablejump2__>
     356:	c6 38       	cpi	r28, 0x86	; 134
     358:	d1 07       	cpc	r29, r17
     35a:	c9 f7       	brne	.-14     	; 0x34e <__do_global_ctors+0x8>
     35c:	0e 94 b9 08 	call	0x1172	; 0x1172 <main>
     360:	0c 94 1f 14 	jmp	0x283e	; 0x283e <_exit>

00000364 <__bad_interrupt>:
     364:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000368 <_ZN6DS1337C1Ev>:
   rtc_bcd[DS1337_HR] = bin2bcd(hour);
   rtc_bcd[DS1337_DATE] = bin2bcd(day);
   rtc_bcd[DS1337_DOW] = bin2bcd(day_of_week);
   rtc_bcd[DS1337_MTH] = bin2bcd(month);
   rtc_bcd[DS1337_YR] = bin2bcd(year);
}
     368:	85 e8       	ldi	r24, 0x85	; 133
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN7TwoWire5beginEv>
     370:	08 95       	ret

00000372 <_ZN6DS133710getSecondsEv>:
     372:	fc 01       	movw	r30, r24
     374:	92 81       	ldd	r25, Z+2	; 0x02
     376:	89 2f       	mov	r24, r25
     378:	86 95       	lsr	r24
     37a:	86 95       	lsr	r24
     37c:	86 95       	lsr	r24

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     37e:	8e 71       	andi	r24, 0x1E	; 30
     380:	28 2f       	mov	r18, r24
     382:	22 0f       	add	r18, r18
     384:	22 0f       	add	r18, r18
     386:	82 0f       	add	r24, r18
     388:	9f 70       	andi	r25, 0x0F	; 15
}

unsigned char DS1337::getSeconds()
{
    return bcd2bin(rtc_bcd[DS1337_SEC]);
}
     38a:	89 0f       	add	r24, r25
     38c:	08 95       	ret

0000038e <_ZN6DS133710getMinutesEv>:

unsigned char DS1337::getMinutes()
{
    return bcd2bin(rtc_bcd[DS1337_MIN]);
     38e:	fc 01       	movw	r30, r24
     390:	93 81       	ldd	r25, Z+3	; 0x03

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     392:	89 2f       	mov	r24, r25
     394:	86 95       	lsr	r24
     396:	86 95       	lsr	r24
     398:	86 95       	lsr	r24
     39a:	8e 71       	andi	r24, 0x1E	; 30
     39c:	28 2f       	mov	r18, r24
     39e:	22 0f       	add	r18, r18
     3a0:	22 0f       	add	r18, r18
     3a2:	82 0f       	add	r24, r18
     3a4:	9f 70       	andi	r25, 0x0F	; 15
}

unsigned char DS1337::getMinutes()
{
    return bcd2bin(rtc_bcd[DS1337_MIN]);
}
     3a6:	89 0f       	add	r24, r25
     3a8:	08 95       	ret

000003aa <_ZN6DS13378getHoursEv>:
unsigned char DS1337::getHours()
{
    return bcd2bin(rtc_bcd[DS1337_HR]);
     3aa:	fc 01       	movw	r30, r24
     3ac:	94 81       	ldd	r25, Z+4	; 0x04

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     3ae:	89 2f       	mov	r24, r25
     3b0:	86 95       	lsr	r24
     3b2:	86 95       	lsr	r24
     3b4:	86 95       	lsr	r24
     3b6:	8e 71       	andi	r24, 0x1E	; 30
     3b8:	28 2f       	mov	r18, r24
     3ba:	22 0f       	add	r18, r18
     3bc:	22 0f       	add	r18, r18
     3be:	82 0f       	add	r24, r18
     3c0:	9f 70       	andi	r25, 0x0F	; 15
    return bcd2bin(rtc_bcd[DS1337_MIN]);
}
unsigned char DS1337::getHours()
{
    return bcd2bin(rtc_bcd[DS1337_HR]);
}
     3c2:	89 0f       	add	r24, r25
     3c4:	08 95       	ret

000003c6 <_ZN6DS13377getDaysEv>:
unsigned char DS1337::getDays()
{
    return bcd2bin(rtc_bcd[DS1337_DATE]);
     3c6:	fc 01       	movw	r30, r24
     3c8:	96 81       	ldd	r25, Z+6	; 0x06

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     3ca:	89 2f       	mov	r24, r25
     3cc:	86 95       	lsr	r24
     3ce:	86 95       	lsr	r24
     3d0:	86 95       	lsr	r24
     3d2:	8e 71       	andi	r24, 0x1E	; 30
     3d4:	28 2f       	mov	r18, r24
     3d6:	22 0f       	add	r18, r18
     3d8:	22 0f       	add	r18, r18
     3da:	82 0f       	add	r24, r18
     3dc:	9f 70       	andi	r25, 0x0F	; 15
    return bcd2bin(rtc_bcd[DS1337_HR]);
}
unsigned char DS1337::getDays()
{
    return bcd2bin(rtc_bcd[DS1337_DATE]);
}
     3de:	89 0f       	add	r24, r25
     3e0:	08 95       	ret

000003e2 <_ZN6DS13379getMonthsEv>:
{
    return bcd2bin(rtc_bcd[DS1337_DOW]);
}
unsigned char DS1337::getMonths()
{
    return bcd2bin(rtc_bcd[DS1337_MTH]);
     3e2:	fc 01       	movw	r30, r24
     3e4:	97 81       	ldd	r25, Z+7	; 0x07

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     3e6:	89 2f       	mov	r24, r25
     3e8:	86 95       	lsr	r24
     3ea:	86 95       	lsr	r24
     3ec:	86 95       	lsr	r24
     3ee:	8e 71       	andi	r24, 0x1E	; 30
     3f0:	28 2f       	mov	r18, r24
     3f2:	22 0f       	add	r18, r18
     3f4:	22 0f       	add	r18, r18
     3f6:	82 0f       	add	r24, r18
     3f8:	9f 70       	andi	r25, 0x0F	; 15
    return bcd2bin(rtc_bcd[DS1337_DOW]);
}
unsigned char DS1337::getMonths()
{
    return bcd2bin(rtc_bcd[DS1337_MTH]);
}
     3fa:	89 0f       	add	r24, r25
     3fc:	08 95       	ret

000003fe <_ZN6DS13378getYearsEv>:
unsigned int DS1337::getYears()
{
    return 2000 + bcd2bin(rtc_bcd[DS1337_YR]);
     3fe:	fc 01       	movw	r30, r24
     400:	90 85       	ldd	r25, Z+8	; 0x08

}

byte DS1337::bcd2bin(byte v)
{
   return (v&0x0F) + ((v>>4)*10);
     402:	89 2f       	mov	r24, r25
     404:	86 95       	lsr	r24
     406:	86 95       	lsr	r24
     408:	86 95       	lsr	r24
     40a:	8e 71       	andi	r24, 0x1E	; 30
     40c:	28 2f       	mov	r18, r24
     40e:	22 0f       	add	r18, r18
     410:	22 0f       	add	r18, r18
     412:	82 0f       	add	r24, r18
     414:	9f 70       	andi	r25, 0x0F	; 15
     416:	98 0f       	add	r25, r24
{
    return bcd2bin(rtc_bcd[DS1337_MTH]);
}
unsigned int DS1337::getYears()
{
    return 2000 + bcd2bin(rtc_bcd[DS1337_YR]);
     418:	89 2f       	mov	r24, r25
     41a:	90 e0       	ldi	r25, 0x00	; 0
}
     41c:	80 53       	subi	r24, 0x30	; 48
     41e:	98 4f       	sbci	r25, 0xF8	; 248
     420:	08 95       	ret

00000422 <_ZN6DS133710setSecondsEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     422:	2d ec       	ldi	r18, 0xCD	; 205
     424:	62 9f       	mul	r22, r18
     426:	21 2d       	mov	r18, r1
     428:	11 24       	eor	r1, r1
     42a:	26 95       	lsr	r18
     42c:	26 95       	lsr	r18
     42e:	26 95       	lsr	r18
     430:	42 2f       	mov	r20, r18
     432:	44 0f       	add	r20, r20
     434:	34 2f       	mov	r19, r20
     436:	33 0f       	add	r19, r19
     438:	33 0f       	add	r19, r19
     43a:	34 0f       	add	r19, r20
     43c:	63 1b       	sub	r22, r19
     43e:	30 e1       	ldi	r19, 0x10	; 16
     440:	23 9f       	mul	r18, r19
     442:	60 0d       	add	r22, r0
     444:	11 24       	eor	r1, r1
}


void DS1337::setSeconds(unsigned char v)
{
    rtc_bcd[DS1337_SEC] = bin2bcd(v);
     446:	fc 01       	movw	r30, r24
     448:	62 83       	std	Z+2, r22	; 0x02
     44a:	08 95       	ret

0000044c <_ZN6DS133710setMinutesEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     44c:	2d ec       	ldi	r18, 0xCD	; 205
     44e:	62 9f       	mul	r22, r18
     450:	21 2d       	mov	r18, r1
     452:	11 24       	eor	r1, r1
     454:	26 95       	lsr	r18
     456:	26 95       	lsr	r18
     458:	26 95       	lsr	r18
     45a:	42 2f       	mov	r20, r18
     45c:	44 0f       	add	r20, r20
     45e:	34 2f       	mov	r19, r20
     460:	33 0f       	add	r19, r19
     462:	33 0f       	add	r19, r19
     464:	34 0f       	add	r19, r20
     466:	63 1b       	sub	r22, r19
     468:	30 e1       	ldi	r19, 0x10	; 16
     46a:	23 9f       	mul	r18, r19
     46c:	60 0d       	add	r22, r0
     46e:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_SEC] = bin2bcd(v);

}
void DS1337::setMinutes(unsigned char v)
{
    rtc_bcd[DS1337_MIN] = bin2bcd(v);
     470:	fc 01       	movw	r30, r24
     472:	63 83       	std	Z+3, r22	; 0x03
     474:	08 95       	ret

00000476 <_ZN6DS13378setHoursEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     476:	2d ec       	ldi	r18, 0xCD	; 205
     478:	62 9f       	mul	r22, r18
     47a:	21 2d       	mov	r18, r1
     47c:	11 24       	eor	r1, r1
     47e:	26 95       	lsr	r18
     480:	26 95       	lsr	r18
     482:	26 95       	lsr	r18
     484:	42 2f       	mov	r20, r18
     486:	44 0f       	add	r20, r20
     488:	34 2f       	mov	r19, r20
     48a:	33 0f       	add	r19, r19
     48c:	33 0f       	add	r19, r19
     48e:	34 0f       	add	r19, r20
     490:	63 1b       	sub	r22, r19
     492:	30 e1       	ldi	r19, 0x10	; 16
     494:	23 9f       	mul	r18, r19
     496:	60 0d       	add	r22, r0
     498:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_MIN] = bin2bcd(v);

}
void DS1337::setHours(unsigned char v)
{
    rtc_bcd[DS1337_HR] = bin2bcd(v);
     49a:	fc 01       	movw	r30, r24
     49c:	64 83       	std	Z+4, r22	; 0x04
     49e:	08 95       	ret

000004a0 <_ZN6DS13377setDaysEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     4a0:	2d ec       	ldi	r18, 0xCD	; 205
     4a2:	62 9f       	mul	r22, r18
     4a4:	21 2d       	mov	r18, r1
     4a6:	11 24       	eor	r1, r1
     4a8:	26 95       	lsr	r18
     4aa:	26 95       	lsr	r18
     4ac:	26 95       	lsr	r18
     4ae:	42 2f       	mov	r20, r18
     4b0:	44 0f       	add	r20, r20
     4b2:	34 2f       	mov	r19, r20
     4b4:	33 0f       	add	r19, r19
     4b6:	33 0f       	add	r19, r19
     4b8:	34 0f       	add	r19, r20
     4ba:	63 1b       	sub	r22, r19
     4bc:	30 e1       	ldi	r19, 0x10	; 16
     4be:	23 9f       	mul	r18, r19
     4c0:	60 0d       	add	r22, r0
     4c2:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_HR] = bin2bcd(v);

}
void DS1337::setDays(unsigned char v)
{
    rtc_bcd[DS1337_DATE] = bin2bcd(v);
     4c4:	fc 01       	movw	r30, r24
     4c6:	66 83       	std	Z+6, r22	; 0x06
     4c8:	08 95       	ret

000004ca <_ZN6DS13379setMonthsEh>:
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     4ca:	2d ec       	ldi	r18, 0xCD	; 205
     4cc:	62 9f       	mul	r22, r18
     4ce:	21 2d       	mov	r18, r1
     4d0:	11 24       	eor	r1, r1
     4d2:	26 95       	lsr	r18
     4d4:	26 95       	lsr	r18
     4d6:	26 95       	lsr	r18
     4d8:	42 2f       	mov	r20, r18
     4da:	44 0f       	add	r20, r20
     4dc:	34 2f       	mov	r19, r20
     4de:	33 0f       	add	r19, r19
     4e0:	33 0f       	add	r19, r19
     4e2:	34 0f       	add	r19, r20
     4e4:	63 1b       	sub	r22, r19
     4e6:	30 e1       	ldi	r19, 0x10	; 16
     4e8:	23 9f       	mul	r18, r19
     4ea:	60 0d       	add	r22, r0
     4ec:	11 24       	eor	r1, r1
    rtc_bcd[DS1337_DOW] = bin2bcd(v);

}
void DS1337::setMonths(unsigned char v)
{
    rtc_bcd[DS1337_MTH] = bin2bcd(v);
     4ee:	fc 01       	movw	r30, r24
     4f0:	67 83       	std	Z+7, r22	; 0x07
     4f2:	08 95       	ret

000004f4 <_ZN6DS13378setYearsEj>:

}
void DS1337::setYears(unsigned int v)
{
     4f4:	fc 01       	movw	r30, r24
    if (v>1999)
     4f6:	60 3d       	cpi	r22, 0xD0	; 208
     4f8:	87 e0       	ldi	r24, 0x07	; 7
     4fa:	78 07       	cpc	r23, r24
     4fc:	10 f0       	brcs	.+4      	; 0x502 <__stack+0x3>
    {
        v -= 2000;
     4fe:	60 5d       	subi	r22, 0xD0	; 208
     500:	77 40       	sbci	r23, 0x07	; 7
   return (v&0x0F) + ((v>>4)*10);
}

byte DS1337::bin2bcd(byte v)
{
   return ((v / 10)<<4) + (v % 10);
     502:	9d ec       	ldi	r25, 0xCD	; 205
     504:	69 9f       	mul	r22, r25
     506:	91 2d       	mov	r25, r1
     508:	11 24       	eor	r1, r1
     50a:	96 95       	lsr	r25
     50c:	96 95       	lsr	r25
     50e:	96 95       	lsr	r25
     510:	39 2f       	mov	r19, r25
     512:	33 0f       	add	r19, r19
     514:	23 2f       	mov	r18, r19
     516:	22 0f       	add	r18, r18
     518:	22 0f       	add	r18, r18
     51a:	23 0f       	add	r18, r19
     51c:	62 1b       	sub	r22, r18
     51e:	80 e1       	ldi	r24, 0x10	; 16
     520:	98 9f       	mul	r25, r24
     522:	60 0d       	add	r22, r0
     524:	11 24       	eor	r1, r1
{
    if (v>1999)
    {
        v -= 2000;
    }
    rtc_bcd[DS1337_YR] = bin2bcd(v);
     526:	60 87       	std	Z+8, r22	; 0x08
     528:	08 95       	ret

0000052a <_ZN6DS13378readTimeEv>:
}

// Aquire data from the RTC chip in BCD format
// refresh the buffer
void DS1337::readTime(void)
{
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	8c 01       	movw	r16, r24
// use the Wire lib to connect to tho rtc
// reset the register pointer to zero
	Wire.beginTransmission(DS1337_CTRL_ID);
     534:	68 e6       	ldi	r22, 0x68	; 104
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	85 e8       	ldi	r24, 0x85	; 133
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <_ZN7TwoWire17beginTransmissionEi>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     540:	e0 91 85 02 	lds	r30, 0x0285
     544:	f0 91 86 02 	lds	r31, 0x0286
     548:	01 90       	ld	r0, Z+
     54a:	f0 81       	ld	r31, Z
     54c:	e0 2d       	mov	r30, r0
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	85 e8       	ldi	r24, 0x85	; 133
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	09 95       	icall
	Wire.write(0x00);
	Wire.endTransmission();
     556:	85 e8       	ldi	r24, 0x85	; 133
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN7TwoWire15endTransmissionEv>

// request the 7 bytes of data    (secs, min, hr, dow, date. mth, yr)
	Wire.requestFrom(DS1337_CTRL_ID, 7);
     55e:	47 e0       	ldi	r20, 0x07	; 7
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	68 e6       	ldi	r22, 0x68	; 104
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	85 e8       	ldi	r24, 0x85	; 133
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <_ZN7TwoWire11requestFromEii>
     56e:	e8 01       	movw	r28, r16
     570:	22 96       	adiw	r28, 0x02	; 2
     572:	07 5f       	subi	r16, 0xF7	; 247
     574:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int i=0; i<7; i++)
	{
	// store data in raw bcd format
		if (Wire.available())
     576:	85 e8       	ldi	r24, 0x85	; 133
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <_ZN7TwoWire9availableEv>
     57e:	89 2b       	or	r24, r25
     580:	29 f0       	breq	.+10     	; 0x58c <_ZN6DS13378readTimeEv+0x62>
			rtc_bcd[i]=Wire.read();
     582:	85 e8       	ldi	r24, 0x85	; 133
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN7TwoWire4readEv>
     58a:	88 83       	st	Y, r24
     58c:	21 96       	adiw	r28, 0x01	; 1
	Wire.write(0x00);
	Wire.endTransmission();

// request the 7 bytes of data    (secs, min, hr, dow, date. mth, yr)
	Wire.requestFrom(DS1337_CTRL_ID, 7);
	for(int i=0; i<7; i++)
     58e:	c0 17       	cp	r28, r16
     590:	d1 07       	cpc	r29, r17
     592:	89 f7       	brne	.-30     	; 0x576 <_ZN6DS13378readTimeEv+0x4c>
	{
	// store data in raw bcd format
		if (Wire.available())
			rtc_bcd[i]=Wire.read();
	}
}
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	08 95       	ret

0000059e <_ZN6DS133711getRegisterEh>:
...
} */


unsigned char DS1337::getRegister(unsigned char registerNumber)
{
     59e:	cf 93       	push	r28
     5a0:	c6 2f       	mov	r28, r22
	Wire.beginTransmission(DS1337_CTRL_ID);
     5a2:	68 e6       	ldi	r22, 0x68	; 104
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	85 e8       	ldi	r24, 0x85	; 133
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(registerNumber);
     5ae:	6c 2f       	mov	r22, r28
     5b0:	85 e8       	ldi	r24, 0x85	; 133
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     5b8:	85 e8       	ldi	r24, 0x85	; 133
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN7TwoWire15endTransmissionEv>

	Wire.requestFrom(DS1337_CTRL_ID, 1);
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	68 e6       	ldi	r22, 0x68	; 104
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	85 e8       	ldi	r24, 0x85	; 133
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <_ZN7TwoWire11requestFromEii>

	return Wire.read();
     5d0:	85 e8       	ldi	r24, 0x85	; 133
     5d2:	92 e0       	ldi	r25, 0x02	; 2
     5d4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN7TwoWire4readEv>
}
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <_ZN6DS133711time_is_setEv>:
}

unsigned char DS1337::time_is_set()
{
  // Return TRUE if Oscillator Stop Flag is clear (osc. not stopped since last time setting), FALSE otherwise
  byte asdf = ((getRegister(DS1337_STATUS) & DS1337_STATUS_OSF) == 0);
     5dc:	6f e0       	ldi	r22, 0x0F	; 15
     5de:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN6DS133711getRegisterEh>
     5e2:	80 95       	com	r24
  return asdf;
}
     5e4:	88 1f       	adc	r24, r24
     5e6:	88 27       	eor	r24, r24
     5e8:	88 1f       	adc	r24, r24
     5ea:	08 95       	ret

000005ec <_ZN6DS133711setRegisterEhh>:

	return Wire.read();
}

void DS1337::setRegister(unsigned char registerNumber, unsigned char value)
{
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	d6 2f       	mov	r29, r22
     5f2:	c4 2f       	mov	r28, r20
	Wire.beginTransmission(DS1337_CTRL_ID);
     5f4:	68 e6       	ldi	r22, 0x68	; 104
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	85 e8       	ldi	r24, 0x85	; 133
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(registerNumber); // set register pointer
     600:	6d 2f       	mov	r22, r29
     602:	85 e8       	ldi	r24, 0x85	; 133
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN7TwoWire5writeEh>

	Wire.write(value);
     60a:	6c 2f       	mov	r22, r28
     60c:	85 e8       	ldi	r24, 0x85	; 133
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN7TwoWire5writeEh>

	Wire.endTransmission();
     614:	85 e8       	ldi	r24, 0x85	; 133
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN7TwoWire15endTransmissionEv>
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <_ZN6DS13375startEv>:
{
	setRegister(DS1337_SP, getRegister(DS1337_SP) | DS1337_SP_EOSC);
}

void DS1337::start(void)
{
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	ec 01       	movw	r28, r24
	setRegister(DS1337_SP, getRegister(DS1337_SP) & !DS1337_SP_EOSC);
     628:	6e e0       	ldi	r22, 0x0E	; 14
     62a:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN6DS133711getRegisterEh>
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	6e e0       	ldi	r22, 0x0E	; 14
     632:	ce 01       	movw	r24, r28
     634:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN6DS133711setRegisterEhh>
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <_ZN6DS13379writeTimeEv>:
}

// update the data on the IC from the bcd formatted data in the buffer

void DS1337::writeTime(void)
{
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	7c 01       	movw	r14, r24
        //byte temp;
	Wire.beginTransmission(DS1337_CTRL_ID);
     64c:	68 e6       	ldi	r22, 0x68	; 104
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	85 e8       	ldi	r24, 0x85	; 133
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <_ZN7TwoWire17beginTransmissionEi>
     658:	e0 91 85 02 	lds	r30, 0x0285
     65c:	f0 91 86 02 	lds	r31, 0x0286
     660:	01 90       	ld	r0, Z+
     662:	f0 81       	ld	r31, Z
     664:	e0 2d       	mov	r30, r0
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	85 e8       	ldi	r24, 0x85	; 133
     66a:	92 e0       	ldi	r25, 0x02	; 2
     66c:	09 95       	icall
     66e:	e7 01       	movw	r28, r14
     670:	22 96       	adiw	r28, 0x02	; 2
     672:	87 01       	movw	r16, r14
     674:	07 5f       	subi	r16, 0xF7	; 247
     676:	1f 4f       	sbci	r17, 0xFF	; 255
	Wire.write(0x00); // reset register pointer
	for(int i=0; i<7; i++)
	{
		Wire.write(rtc_bcd[i]);
     678:	69 91       	ld	r22, Y+
     67a:	85 e8       	ldi	r24, 0x85	; 133
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN7TwoWire5writeEh>
void DS1337::writeTime(void)
{
        //byte temp;
	Wire.beginTransmission(DS1337_CTRL_ID);
	Wire.write(0x00); // reset register pointer
	for(int i=0; i<7; i++)
     682:	c0 17       	cp	r28, r16
     684:	d1 07       	cpc	r29, r17
     686:	c1 f7       	brne	.-16     	; 0x678 <_ZN6DS13379writeTimeEv+0x3a>
	{
		Wire.write(rtc_bcd[i]);
	}
	Wire.endTransmission();
     688:	85 e8       	ldi	r24, 0x85	; 133
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN7TwoWire15endTransmissionEv>

	// clear the Oscillator Stop Flag
        setRegister(DS1337_STATUS, getRegister(DS1337_STATUS) & !DS1337_STATUS_OSF);
     690:	6f e0       	ldi	r22, 0x0F	; 15
     692:	c7 01       	movw	r24, r14
     694:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN6DS133711getRegisterEh>
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	6f e0       	ldi	r22, 0x0F	; 15
     69c:	c7 01       	movw	r24, r14
     69e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN6DS133711setRegisterEhh>
        //temp = getRegister(DS1337_STATUS);
        //temp &= (!DS1337_STATUS_OSF);
        //setRegister(DS1337_STATUS, temp);
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	08 95       	ret

000006b0 <_Z16Interrupt_Updatev>:
    ADCSRA = adcsraSave;
	delay(_delay);	
}


void Interrupt_Update(){} //This is just to attach an interrupt
     6b0:	08 95       	ret

000006b2 <_Z9gotoSleepi>:
	count+=1;
	
}

void gotoSleep(int _delay)
{
     6b2:	bc 01       	movw	r22, r24
	sleep_enable();
     6b4:	83 b7       	in	r24, 0x33	; 51
     6b6:	81 60       	ori	r24, 0x01	; 1
     6b8:	83 bf       	out	0x33, r24	; 51
    byte adcsraSave = ADCSRA;
     6ba:	ea e7       	ldi	r30, 0x7A	; 122
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	20 81       	ld	r18, Z
    ADCSRA &= ~ bit(ADEN); // disable the ADC
     6c0:	80 81       	ld	r24, Z
     6c2:	8f 77       	andi	r24, 0x7F	; 127
     6c4:	80 83       	st	Z, r24
    set_sleep_mode(SLEEP_MODE_STANDBY);
     6c6:	93 b7       	in	r25, 0x33	; 51
     6c8:	91 7f       	andi	r25, 0xF1	; 241
     6ca:	9c 60       	ori	r25, 0x0C	; 12
     6cc:	93 bf       	out	0x33, r25	; 51
    sleep_cpu();
     6ce:	88 95       	sleep
    sleep_disable();
     6d0:	83 b7       	in	r24, 0x33	; 51
     6d2:	8e 7f       	andi	r24, 0xFE	; 254
     6d4:	83 bf       	out	0x33, r24	; 51
    // re-enable what we disabled
    ADCSRA = adcsraSave;
     6d6:	20 83       	st	Z, r18
	delay(_delay);	
     6d8:	07 2e       	mov	r0, r23
     6da:	00 0c       	add	r0, r0
     6dc:	88 0b       	sbc	r24, r24
     6de:	99 0b       	sbc	r25, r25
     6e0:	0e 94 38 10 	call	0x2070	; 0x2070 <delay>
     6e4:	08 95       	ret

000006e6 <_Z8readTempi>:
		}
	}
}

float readTemp (int internal)
{
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
	//We are oversampling the temp sensor by 100 cycles
	//for better overall average temperature, this gives
	//us a more stable reading.

	Temperature = 0;
     6f2:	10 92 61 01 	sts	0x0161, r1
     6f6:	10 92 62 01 	sts	0x0162, r1
     6fa:	10 92 63 01 	sts	0x0163, r1
     6fe:	10 92 64 01 	sts	0x0164, r1
	if (!internal) //if internal == 0
     702:	89 2b       	or	r24, r25
     704:	09 f0       	breq	.+2      	; 0x708 <_Z8readTempi+0x22>
     706:	4d c0       	rjmp	.+154    	; 0x7a2 <_Z8readTempi+0xbc>
     708:	c4 e6       	ldi	r28, 0x64	; 100
     70a:	d0 e0       	ldi	r29, 0x00	; 0
	{//Temperature += analogRead(LM35);

		for(int x = 0; x <= 99; x++)
		{
			Temperature += analogRead(LM35);
     70c:	02 e0       	ldi	r16, 0x02	; 2
     70e:	11 e0       	ldi	r17, 0x01	; 1
     710:	f8 01       	movw	r30, r16
     712:	80 81       	ld	r24, Z
     714:	0e 94 9f 10 	call	0x213e	; 0x213e <analogRead>
     718:	bc 01       	movw	r22, r24
     71a:	99 0f       	add	r25, r25
     71c:	88 0b       	sbc	r24, r24
     71e:	99 0b       	sbc	r25, r25
     720:	0e 94 9f 12 	call	0x253e	; 0x253e <__floatsisf>
     724:	20 91 61 01 	lds	r18, 0x0161
     728:	30 91 62 01 	lds	r19, 0x0162
     72c:	40 91 63 01 	lds	r20, 0x0163
     730:	50 91 64 01 	lds	r21, 0x0164
     734:	0e 94 84 11 	call	0x2308	; 0x2308 <__addsf3>
     738:	60 93 61 01 	sts	0x0161, r22
     73c:	70 93 62 01 	sts	0x0162, r23
     740:	80 93 63 01 	sts	0x0163, r24
     744:	90 93 64 01 	sts	0x0164, r25
     748:	21 97       	sbiw	r28, 0x01	; 1

	Temperature = 0;
	if (!internal) //if internal == 0
	{//Temperature += analogRead(LM35);

		for(int x = 0; x <= 99; x++)
     74a:	11 f7       	brne	.-60     	; 0x710 <_Z8readTempi+0x2a>
		// -11.69mv/C
		//The LM20 degree per C is inversely proportional
		//to its output at 1.574V T = 25C @ 303mV T = 130C
		//this equation has been calibrated for my office. Thus the
		//-7.4C.
		Temperature_C = (((11.69/Temperature)*(1024))*100)-7.4;//(1024))*100;
     74c:	9b 01       	movw	r18, r22
     74e:	ac 01       	movw	r20, r24
     750:	6d e3       	ldi	r22, 0x3D	; 61
     752:	7a e0       	ldi	r23, 0x0A	; 10
     754:	8b e3       	ldi	r24, 0x3B	; 59
     756:	91 e4       	ldi	r25, 0x41	; 65
     758:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__divsf3>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	40 e8       	ldi	r20, 0x80	; 128
     762:	54 e4       	ldi	r21, 0x44	; 68
     764:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__mulsf3>
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	48 ec       	ldi	r20, 0xC8	; 200
     76e:	52 e4       	ldi	r21, 0x42	; 66
     770:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__mulsf3>
     774:	2d ec       	ldi	r18, 0xCD	; 205
     776:	3c ec       	ldi	r19, 0xCC	; 204
     778:	4c ee       	ldi	r20, 0xEC	; 236
     77a:	50 e4       	ldi	r21, 0x40	; 64
     77c:	0e 94 83 11 	call	0x2306	; 0x2306 <__subsf3>
     780:	06 2f       	mov	r16, r22
     782:	17 2f       	mov	r17, r23
     784:	28 2f       	mov	r18, r24
     786:	39 2f       	mov	r19, r25
     788:	00 93 65 01 	sts	0x0165, r16
     78c:	10 93 66 01 	sts	0x0166, r17
     790:	20 93 67 01 	sts	0x0167, r18
     794:	30 93 68 01 	sts	0x0168, r19
		return Temperature_C;
     798:	56 2f       	mov	r21, r22
     79a:	47 2f       	mov	r20, r23
     79c:	38 2f       	mov	r19, r24
     79e:	29 2f       	mov	r18, r25
     7a0:	35 c0       	rjmp	.+106    	; 0x80c <_Z8readTempi+0x126>
     7a2:	c4 e6       	ldi	r28, 0x64	; 100
     7a4:	d0 e0       	ldi	r29, 0x00	; 0
     7a6:	00 e0       	ldi	r16, 0x00	; 0
     7a8:	10 e0       	ldi	r17, 0x00	; 0
	{
		int iTemp_C = 0;
		int iTemperature = 0;
		for(int x = 0; x <= 99; x++)
		{
			iTemperature += analogRead(LM35);
     7aa:	0f 2e       	mov	r0, r31
     7ac:	f2 e0       	ldi	r31, 0x02	; 2
     7ae:	ef 2e       	mov	r14, r31
     7b0:	f1 e0       	ldi	r31, 0x01	; 1
     7b2:	ff 2e       	mov	r15, r31
     7b4:	f0 2d       	mov	r31, r0
     7b6:	f7 01       	movw	r30, r14
     7b8:	80 81       	ld	r24, Z
     7ba:	0e 94 9f 10 	call	0x213e	; 0x213e <analogRead>
     7be:	08 0f       	add	r16, r24
     7c0:	19 1f       	adc	r17, r25
     7c2:	21 97       	sbiw	r28, 0x01	; 1
	}
	else
	{
		int iTemp_C = 0;
		int iTemperature = 0;
		for(int x = 0; x <= 99; x++)
     7c4:	c1 f7       	brne	.-16     	; 0x7b6 <_Z8readTempi+0xd0>
		{
			iTemperature += analogRead(LM35);
		}
		iTemperature = iTemperature/100;
     7c6:	c8 01       	movw	r24, r16
     7c8:	64 e6       	ldi	r22, 0x64	; 100
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	0e 94 c6 13 	call	0x278c	; 0x278c <__divmodhi4>
		
		//same equation as above but we add 10 to the
		//final calculation since the display only displays
		//ints and not floats, we loose some accuracy, about
		//10degrees C.
		iTemp_C = iTemperature * ((5.0*1000/1024)) + 10;
     7d0:	07 2e       	mov	r0, r23
     7d2:	00 0c       	add	r0, r0
     7d4:	88 0b       	sbc	r24, r24
     7d6:	99 0b       	sbc	r25, r25
     7d8:	0e 94 9f 12 	call	0x253e	; 0x253e <__floatsisf>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e4       	ldi	r19, 0x40	; 64
     7e0:	4c e9       	ldi	r20, 0x9C	; 156
     7e2:	50 e4       	ldi	r21, 0x40	; 64
     7e4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__mulsf3>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	40 e2       	ldi	r20, 0x20	; 32
     7ee:	51 e4       	ldi	r21, 0x41	; 65
     7f0:	0e 94 84 11 	call	0x2308	; 0x2308 <__addsf3>
     7f4:	0e 94 67 12 	call	0x24ce	; 0x24ce <__fixsfsi>

		return iTemp_C;
     7f8:	07 2e       	mov	r0, r23
     7fa:	00 0c       	add	r0, r0
     7fc:	88 0b       	sbc	r24, r24
     7fe:	99 0b       	sbc	r25, r25
     800:	0e 94 9f 12 	call	0x253e	; 0x253e <__floatsisf>
     804:	56 2f       	mov	r21, r22
     806:	47 2f       	mov	r20, r23
     808:	38 2f       	mov	r19, r24
     80a:	29 2f       	mov	r18, r25
	}
}
     80c:	65 2f       	mov	r22, r21
     80e:	74 2f       	mov	r23, r20
     810:	83 2f       	mov	r24, r19
     812:	92 2f       	mov	r25, r18
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	08 95       	ret

00000822 <_Z11convertTimei>:
{
	//This function is used to convert
	//a time eg a 24hr clock into a 12 hr
	//clock.
	
	if (value > 12)
     822:	8d 30       	cpi	r24, 0x0D	; 13
     824:	91 05       	cpc	r25, r1
     826:	24 f0       	brlt	.+8      	; 0x830 <_Z11convertTimei+0xe>
	{
		value -= 12;
		return value;
     828:	9c 01       	movw	r18, r24
     82a:	2c 50       	subi	r18, 0x0C	; 12
     82c:	31 09       	sbc	r19, r1
     82e:	05 c0       	rjmp	.+10     	; 0x83a <_Z11convertTimei+0x18>
	}
	else if (!value)
     830:	89 2b       	or	r24, r25
     832:	09 f0       	breq	.+2      	; 0x836 <_Z11convertTimei+0x14>
     834:	08 95       	ret
	{
		value = 12;
		return value;
     836:	2c e0       	ldi	r18, 0x0C	; 12
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	82 2f       	mov	r24, r18
     83c:	93 2f       	mov	r25, r19
	}
}
     83e:	08 95       	ret

00000840 <_Z15Internal_Updatev>:
	//This function internally updates everything.
	///////////////////////////////////////////////////////////
	int HR = 0;
	
	//DateTime now = rtc.now();
	RTC.readTime();
     840:	80 e5       	ldi	r24, 0x50	; 80
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6DS13378readTimeEv>
	
	//This is mostly for debug purposes.
	Serial.print(F(" Time/Date: "));
     848:	6b e2       	ldi	r22, 0x2B	; 43
     84a:	72 e0       	ldi	r23, 0x02	; 2
     84c:	89 e6       	ldi	r24, 0x69	; 105
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(RTC.getYears(), DEC);
     854:	80 e5       	ldi	r24, 0x50	; 80
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN6DS13378getYearsEv>
     85c:	4a e0       	ldi	r20, 0x0A	; 10
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	bc 01       	movw	r22, r24
     862:	89 e6       	ldi	r24, 0x69	; 105
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN5Print5printEji>
	Serial.print('/');
     86a:	6f e2       	ldi	r22, 0x2F	; 47
     86c:	89 e6       	ldi	r24, 0x69	; 105
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN5Print5printEc>
	Serial.print(RTC.getMonths(), DEC);
     874:	80 e5       	ldi	r24, 0x50	; 80
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN6DS13379getMonthsEv>
     87c:	4a e0       	ldi	r20, 0x0A	; 10
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	68 2f       	mov	r22, r24
     882:	89 e6       	ldi	r24, 0x69	; 105
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN5Print5printEhi>
	Serial.print('/');
     88a:	6f e2       	ldi	r22, 0x2F	; 47
     88c:	89 e6       	ldi	r24, 0x69	; 105
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN5Print5printEc>
	Serial.print(RTC.getDays(), DEC);
     894:	80 e5       	ldi	r24, 0x50	; 80
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN6DS13377getDaysEv>
     89c:	4a e0       	ldi	r20, 0x0A	; 10
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	68 2f       	mov	r22, r24
     8a2:	89 e6       	ldi	r24, 0x69	; 105
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN5Print5printEhi>
	Serial.print(' ');
     8aa:	60 e2       	ldi	r22, 0x20	; 32
     8ac:	89 e6       	ldi	r24, 0x69	; 105
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN5Print5printEc>
	//Converting from 24hr to 12hr time.
	HR = RTC.getHours();
     8b4:	80 e5       	ldi	r24, 0x50	; 80
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN6DS13378getHoursEv>
     8bc:	90 e0       	ldi	r25, 0x00	; 0
	
	//This tells us if its AM or PM
	//clock defaults to AM when first
	//started until stored in eeprom.
	if((HR <= 23) && (HR > 11))
     8be:	9c 01       	movw	r18, r24
     8c0:	2c 50       	subi	r18, 0x0C	; 12
     8c2:	31 09       	sbc	r19, r1
     8c4:	2c 30       	cpi	r18, 0x0C	; 12
     8c6:	31 05       	cpc	r19, r1
     8c8:	38 f4       	brcc	.+14     	; 0x8d8 <_Z15Internal_Updatev+0x98>
	{
		AM_PM = 1;
     8ca:	21 e0       	ldi	r18, 0x01	; 1
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	30 93 60 01 	sts	0x0160, r19
     8d2:	20 93 5f 01 	sts	0x015F, r18
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <_Z15Internal_Updatev+0xa0>
	}
	else
	{
		AM_PM = 0;
     8d8:	10 92 60 01 	sts	0x0160, r1
     8dc:	10 92 5f 01 	sts	0x015F, r1
	}
	
	//convert 24hr clock to 12hr clock
	HR = convertTime(HR);
     8e0:	0e 94 11 04 	call	0x822	; 0x822 <_Z11convertTimei>
	
	Serial.print(HR, DEC);
     8e4:	4a e0       	ldi	r20, 0x0A	; 10
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	bc 01       	movw	r22, r24
     8ea:	89 e6       	ldi	r24, 0x69	; 105
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN5Print5printEii>
	Serial.print(':');
     8f2:	6a e3       	ldi	r22, 0x3A	; 58
     8f4:	89 e6       	ldi	r24, 0x69	; 105
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN5Print5printEc>
	//Serial.print(now.minute(), DEC);
	Serial.print(RTC.getMinutes(), DEC);
     8fc:	80 e5       	ldi	r24, 0x50	; 80
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN6DS133710getMinutesEv>
     904:	4a e0       	ldi	r20, 0x0A	; 10
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	68 2f       	mov	r22, r24
     90a:	89 e6       	ldi	r24, 0x69	; 105
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN5Print5printEhi>
	Serial.print(':');
     912:	6a e3       	ldi	r22, 0x3A	; 58
     914:	89 e6       	ldi	r24, 0x69	; 105
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN5Print5printEc>
	//Serial.print(now.second(), DEC);
	Serial.print(RTC.getSeconds(), DEC);
     91c:	80 e5       	ldi	r24, 0x50	; 80
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN6DS133710getSecondsEv>
     924:	4a e0       	ldi	r20, 0x0A	; 10
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	68 2f       	mov	r22, r24
     92a:	89 e6       	ldi	r24, 0x69	; 105
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN5Print5printEhi>
	Serial.print(" ");
     932:	62 e1       	ldi	r22, 0x12	; 18
     934:	71 e0       	ldi	r23, 0x01	; 1
     936:	89 e6       	ldi	r24, 0x69	; 105
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
	if(AM_PM == 0)
     93e:	80 91 5f 01 	lds	r24, 0x015F
     942:	90 91 60 01 	lds	r25, 0x0160
     946:	89 2b       	or	r24, r25
     948:	39 f4       	brne	.+14     	; 0x958 <_Z15Internal_Updatev+0x118>
	{
		Serial.print(F("AM"));
     94a:	68 e2       	ldi	r22, 0x28	; 40
     94c:	72 e0       	ldi	r23, 0x02	; 2
     94e:	89 e6       	ldi	r24, 0x69	; 105
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN5Print5printEPK19__FlashStringHelper>
     956:	06 c0       	rjmp	.+12     	; 0x964 <_Z15Internal_Updatev+0x124>
	}
	else{Serial.print(F("PM"));}
     958:	65 e2       	ldi	r22, 0x25	; 37
     95a:	72 e0       	ldi	r23, 0x02	; 2
     95c:	89 e6       	ldi	r24, 0x69	; 105
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN5Print5printEPK19__FlashStringHelper>
	
	//outputting temp.
	Serial.print(" ");
     964:	62 e1       	ldi	r22, 0x12	; 18
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	89 e6       	ldi	r24, 0x69	; 105
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
	//Temperature_C = readTemp(0);
	Serial.print(readTemp(0));
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z8readTempi>
     978:	ab 01       	movw	r20, r22
     97a:	bc 01       	movw	r22, r24
     97c:	22 e0       	ldi	r18, 0x02	; 2
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	89 e6       	ldi	r24, 0x69	; 105
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 1c 0b 	call	0x1638	; 0x1638 <_ZN5Print5printEdi>
	//Serial.print(Temperature_C);
	Serial.print(F("°C "));
     988:	60 e2       	ldi	r22, 0x20	; 32
     98a:	72 e0       	ldi	r23, 0x02	; 2
     98c:	89 e6       	ldi	r24, 0x69	; 105
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN5Print5printEPK19__FlashStringHelper>
*/
	//Clearing the Terminal screen
	//This is hacked.
	//Serial.write(27);
	//Serial.print("[H");
	Serial.print(count_internal);
     994:	60 91 59 01 	lds	r22, 0x0159
     998:	70 91 5a 01 	lds	r23, 0x015A
     99c:	4a e0       	ldi	r20, 0x0A	; 10
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	89 e6       	ldi	r24, 0x69	; 105
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN5Print5printEii>
	count_internal +=1;
     9a8:	80 91 59 01 	lds	r24, 0x0159
     9ac:	90 91 5a 01 	lds	r25, 0x015A
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	90 93 5a 01 	sts	0x015A, r25
     9b6:	80 93 59 01 	sts	0x0159, r24
	Serial.print("\r\n");
     9ba:	64 e1       	ldi	r22, 0x14	; 20
     9bc:	71 e0       	ldi	r23, 0x01	; 1
     9be:	89 e6       	ldi	r24, 0x69	; 105
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
     9c6:	08 95       	ret

000009c8 <_GLOBAL__sub_I_INTERUPT_0>:
int SECONDS_LAST = 0;
int count = 0;
int count_internal = 0;

//RTC_DS1307 rtc;             //Creating a new RTC object.
DS1337 RTC = DS1337();
     9c8:	80 e5       	ldi	r24, 0x50	; 80
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6DS1337C1Ev>
     9d0:	08 95       	ret

000009d2 <loop>:
void loop()
{
	//Serial.print("Im awake.\r\n");
	
	//update the RTC buffers
	RTC.readTime();
     9d2:	80 e5       	ldi	r24, 0x50	; 80
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6DS13378readTimeEv>
	if(RTC.getSeconds() < PPS_TIMER){SECONDS_LAST = 0;}
     9da:	80 e5       	ldi	r24, 0x50	; 80
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN6DS133710getSecondsEv>
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	20 91 00 01 	lds	r18, 0x0100
     9e8:	30 91 01 01 	lds	r19, 0x0101
     9ec:	82 17       	cp	r24, r18
     9ee:	93 07       	cpc	r25, r19
     9f0:	24 f4       	brge	.+8      	; 0x9fa <loop+0x28>
     9f2:	10 92 5e 01 	sts	0x015E, r1
     9f6:	10 92 5d 01 	sts	0x015D, r1
		
	if(RTC.getSeconds() - SECONDS_LAST >= PPS_TIMER)
     9fa:	80 e5       	ldi	r24, 0x50	; 80
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN6DS133710getSecondsEv>
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	20 91 5d 01 	lds	r18, 0x015D
     a08:	30 91 5e 01 	lds	r19, 0x015E
     a0c:	82 1b       	sub	r24, r18
     a0e:	93 0b       	sbc	r25, r19
     a10:	20 91 00 01 	lds	r18, 0x0100
     a14:	30 91 01 01 	lds	r19, 0x0101
     a18:	82 17       	cp	r24, r18
     a1a:	93 07       	cpc	r25, r19
     a1c:	7c f0       	brlt	.+30     	; 0xa3c <loop+0x6a>
	{
		//detachInterrupt(0);
		//Start the internal update
		Internal_Update();
     a1e:	0e 94 20 04 	call	0x840	; 0x840 <_Z15Internal_Updatev>
		
		//Update the VFD display
		//Update_Display();
		
		SECONDS_LAST = RTC.getSeconds();
     a22:	80 e5       	ldi	r24, 0x50	; 80
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN6DS133710getSecondsEv>
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	90 93 5e 01 	sts	0x015E, r25
     a30:	80 93 5d 01 	sts	0x015D, r24
		//Flush the serial buffer for good measure.
		Serial.flush();
     a34:	89 e6       	ldi	r24, 0x69	; 105
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <_ZN14HardwareSerial5flushEv>
	}
	
	if (digitalRead(Select_BTN)==HIGH)
     a3c:	80 91 0c 01 	lds	r24, 0x010C
     a40:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <digitalRead>
	{
		//setTime();
	}
	
	if(digitalRead(Next_BTN)==HIGH)
     a44:	80 91 0a 01 	lds	r24, 0x010A
     a48:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <digitalRead>
	//attachInterrupt(0, Interrupt_Update, FALLING); // set our interrupt backup.
	
	//set the clock to sleep
	//Serial.print("Going to sleep.\r\n");

	gotoSleep(100);
     a4c:	84 e6       	ldi	r24, 0x64	; 100
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_Z9gotoSleepi>
	Serial.print(count,DEC);
     a54:	60 91 5b 01 	lds	r22, 0x015B
     a58:	70 91 5c 01 	lds	r23, 0x015C
     a5c:	4a e0       	ldi	r20, 0x0A	; 10
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	89 e6       	ldi	r24, 0x69	; 105
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN5Print5printEii>
	if(count == 9){count = 0;}
     a68:	80 91 5b 01 	lds	r24, 0x015B
     a6c:	90 91 5c 01 	lds	r25, 0x015C
     a70:	09 97       	sbiw	r24, 0x09	; 9
     a72:	21 f4       	brne	.+8      	; 0xa7c <loop+0xaa>
     a74:	10 92 5c 01 	sts	0x015C, r1
     a78:	10 92 5b 01 	sts	0x015B, r1
	count+=1;
     a7c:	80 91 5b 01 	lds	r24, 0x015B
     a80:	90 91 5c 01 	lds	r25, 0x015C
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	90 93 5c 01 	sts	0x015C, r25
     a8a:	80 93 5b 01 	sts	0x015B, r24
     a8e:	08 95       	ret

00000a90 <_Z9i2c_writehPhh>:
 * \param buf A pointer to a buffer from which to read the data. 
 * \param num The number of bytes to write. 
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t i2c_write(uint8_t addr, uint8_t* buf, uint8_t num) {
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	7b 01       	movw	r14, r22
     a9e:	14 2f       	mov	r17, r20
  Wire.beginTransmission(addr);
     aa0:	68 2f       	mov	r22, r24
     aa2:	85 e8       	ldi	r24, 0x85	; 133
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_ZN7TwoWire17beginTransmissionEh>
  for (uint8_t i = 0; i < num; i++) {
     aaa:	11 23       	and	r17, r17
     aac:	81 f0       	breq	.+32     	; 0xace <_Z9i2c_writehPhh+0x3e>
     aae:	e7 01       	movw	r28, r14
     ab0:	11 50       	subi	r17, 0x01	; 1
     ab2:	01 2f       	mov	r16, r17
     ab4:	10 e0       	ldi	r17, 0x00	; 0
     ab6:	0f 5f       	subi	r16, 0xFF	; 255
     ab8:	1f 4f       	sbci	r17, 0xFF	; 255
     aba:	0e 0d       	add	r16, r14
     abc:	1f 1d       	adc	r17, r15
    Wire.write(buf[i]);
     abe:	69 91       	ld	r22, Y+
     ac0:	85 e8       	ldi	r24, 0x85	; 133
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN7TwoWire5writeEh>
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t i2c_write(uint8_t addr, uint8_t* buf, uint8_t num) {
  Wire.beginTransmission(addr);
  for (uint8_t i = 0; i < num; i++) {
     ac8:	c0 17       	cp	r28, r16
     aca:	d1 07       	cpc	r29, r17
     acc:	c1 f7       	brne	.-16     	; 0xabe <_Z9i2c_writehPhh+0x2e>
    Wire.write(buf[i]);
  }
  return Wire.endTransmission();
     ace:	85 e8       	ldi	r24, 0x85	; 133
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN7TwoWire15endTransmissionEv>
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	08 95       	ret

00000ae4 <_Z18ds1337_set_controlh>:
 *
 * \param ctrl The value to set. 
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t ds1337_set_control(uint8_t ctrl) {
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	00 d0       	rcall	.+0      	; 0xaea <_Z18ds1337_set_controlh+0x6>
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
   uint8_t buf[2];
   buf[0] = DS1337_REG_CONTROL;
     aee:	9e e0       	ldi	r25, 0x0E	; 14
     af0:	99 83       	std	Y+1, r25	; 0x01
   buf[1] = ctrl;
     af2:	8a 83       	std	Y+2, r24	; 0x02
   return i2c_write(DS1337_ADDR, buf, 2);
     af4:	42 e0       	ldi	r20, 0x02	; 2
     af6:	be 01       	movw	r22, r28
     af8:	6f 5f       	subi	r22, 0xFF	; 255
     afa:	7f 4f       	sbci	r23, 0xFF	; 255
     afc:	88 e6       	ldi	r24, 0x68	; 104
     afe:	0e 94 48 05 	call	0xa90	; 0xa90 <_Z9i2c_writehPhh>
}
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	08 95       	ret

00000b0c <_Z25ds1337_clear_control_bitsh>:
 * \param mask A mask specifying which bits to clear. (High bits will be cleared.) 
 *
 * \return 0 on success; otherwise an I2C error.
 */
uint8_t ds1337_clear_control_bits(uint8_t mask) {
	return ds1337_set_control(~mask);
     b0c:	80 95       	com	r24
     b0e:	0e 94 72 05 	call	0xae4	; 0xae4 <_Z18ds1337_set_controlh>
     b12:	08 95       	ret

00000b14 <_Z4Initv>:


void Interrupt_Update(){} //This is just to attach an interrupt

void Init()
{
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	00 d0       	rcall	.+0      	; 0xb1a <_Z4Initv+0x6>
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <_Z4Initv+0x8>
     b1c:	00 d0       	rcall	.+0      	; 0xb1e <_Z4Initv+0xa>
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     b22:	26 e0       	ldi	r18, 0x06	; 6
     b24:	40 e8       	ldi	r20, 0x80	; 128
     b26:	55 e2       	ldi	r21, 0x25	; 37
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	89 e6       	ldi	r24, 0x69	; 105
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN14HardwareSerial5beginEmh>
	
	//Coms will be setup later.
	Serial.begin(9600);
	//Serial.begin(115200);
	
	Wire.begin();
     b34:	85 e8       	ldi	r24, 0x85	; 133
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN7TwoWire5beginEv>
	//pullups on the SDA(), and SCL() pins.
	
	SCL_PORT |= _BV(SCL_BIT);   // enable pull up on TWI clock line
	SDA_PORT |= _BV(SDA_BIT);   // enable pull up on TWI data line
	#else
	SCL_PORT &= _BV(SCL_BIT);   // disable pull up on TWI clock line
     b3c:	88 b1       	in	r24, 0x08	; 8
     b3e:	80 72       	andi	r24, 0x20	; 32
     b40:	88 b9       	out	0x08, r24	; 8
	SDA_PORT &= _BV(SDA_BIT);   // disable pull up on TWI data line
     b42:	88 b1       	in	r24, 0x08	; 8
     b44:	80 71       	andi	r24, 0x10	; 16
     b46:	88 b9       	out	0x08, r24	; 8
	#endif
	
	RTC.start(); //starts the DS1337
     b48:	80 e5       	ldi	r24, 0x50	; 80
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	0e 94 11 03 	call	0x622	; 0x622 <_ZN6DS13375startEv>
	///////////////////////////////////////////////////////////
	//Pin Functions
	///////////////////////////////////////////////////////////

	//pinMode(Freq_Adj, INPUT);
	pinMode(INTERUPT_0, INPUT);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	80 91 0e 01 	lds	r24, 0x010E
     b56:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <pinMode>
	pinMode(DATA_PIN, OUTPUT);
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	80 91 08 01 	lds	r24, 0x0108
     b60:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <pinMode>
	pinMode(CLOCK, OUTPUT);
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	80 91 04 01 	lds	r24, 0x0104
     b6a:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <pinMode>
	pinMode(LATCH, OUTPUT);
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	80 91 06 01 	lds	r24, 0x0106
     b74:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <pinMode>
	pinMode(Select_BTN, INPUT);
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	80 91 0c 01 	lds	r24, 0x010C
     b7e:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <pinMode>
	pinMode(Next_BTN, INPUT);
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	80 91 0a 01 	lds	r24, 0x010A
     b88:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <pinMode>
	pinMode(LM35, INPUT);
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	80 91 02 01 	lds	r24, 0x0102
     b92:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <pinMode>
	
	///////////////////////////////////////////////////////////
	//If the RTC is not currently set to the correct time set the time
	//based on the time used when compiling this firmware.
	///////////////////////////////////////////////////////////
	if(!RTC.time_is_set())
     b96:	80 e5       	ldi	r24, 0x50	; 80
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN6DS133711time_is_setEv>
     b9e:	81 11       	cpse	r24, r1
     ba0:	84 c0       	rjmp	.+264    	; 0xcaa <_Z4Initv+0x196>
	{
		DateTime now = DateTime(F(__DATE__),F(__TIME__));
     ba2:	47 ea       	ldi	r20, 0xA7	; 167
     ba4:	52 e0       	ldi	r21, 0x02	; 2
     ba6:	6b e9       	ldi	r22, 0x9B	; 155
     ba8:	72 e0       	ldi	r23, 0x02	; 2
     baa:	ce 01       	movw	r24, r28
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	0e 94 2e 0b 	call	0x165c	; 0x165c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
		Serial.print(F("RTC is NOT running!, Setting to "));
     bb2:	6a e7       	ldi	r22, 0x7A	; 122
     bb4:	72 e0       	ldi	r23, 0x02	; 2
     bb6:	89 e6       	ldi	r24, 0x69	; 105
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(now.day(),DEC);
     bbe:	4a e0       	ldi	r20, 0x0A	; 10
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	6b 81       	ldd	r22, Y+3	; 0x03
     bc4:	89 e6       	ldi	r24, 0x69	; 105
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN5Print5printEhi>
		Serial.print("/");
     bcc:	67 e1       	ldi	r22, 0x17	; 23
     bce:	71 e0       	ldi	r23, 0x01	; 1
     bd0:	89 e6       	ldi	r24, 0x69	; 105
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
		Serial.print(now.month(),DEC);
     bd8:	4a e0       	ldi	r20, 0x0A	; 10
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	6a 81       	ldd	r22, Y+2	; 0x02
     bde:	89 e6       	ldi	r24, 0x69	; 105
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN5Print5printEhi>
		Serial.print("/");
     be6:	67 e1       	ldi	r22, 0x17	; 23
     be8:	71 e0       	ldi	r23, 0x01	; 1
     bea:	89 e6       	ldi	r24, 0x69	; 105
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
    DateTime (uint16_t year, uint8_t month, uint8_t day,
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
     bf2:	69 81       	ldd	r22, Y+1	; 0x01
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	60 53       	subi	r22, 0x30	; 48
     bf8:	78 4f       	sbci	r23, 0xF8	; 248
		Serial.print(now.year(),DEC);
     bfa:	4a e0       	ldi	r20, 0x0A	; 10
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	89 e6       	ldi	r24, 0x69	; 105
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN5Print5printEji>
		Serial.print(" ");
     c06:	62 e1       	ldi	r22, 0x12	; 18
     c08:	71 e0       	ldi	r23, 0x01	; 1
     c0a:	89 e6       	ldi	r24, 0x69	; 105
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
		Serial.print(now.hour(),DEC);
     c12:	4a e0       	ldi	r20, 0x0A	; 10
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	6c 81       	ldd	r22, Y+4	; 0x04
     c18:	89 e6       	ldi	r24, 0x69	; 105
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN5Print5printEhi>
		Serial.print(":");
     c20:	69 e1       	ldi	r22, 0x19	; 25
     c22:	71 e0       	ldi	r23, 0x01	; 1
     c24:	89 e6       	ldi	r24, 0x69	; 105
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
		Serial.print(now.minute(),DEC);
     c2c:	4a e0       	ldi	r20, 0x0A	; 10
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	6d 81       	ldd	r22, Y+5	; 0x05
     c32:	89 e6       	ldi	r24, 0x69	; 105
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN5Print5printEhi>
		Serial.print(":");
     c3a:	69 e1       	ldi	r22, 0x19	; 25
     c3c:	71 e0       	ldi	r23, 0x01	; 1
     c3e:	89 e6       	ldi	r24, 0x69	; 105
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
		Serial.print(now.second(),DEC);
     c46:	4a e0       	ldi	r20, 0x0A	; 10
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	6e 81       	ldd	r22, Y+6	; 0x06
     c4c:	89 e6       	ldi	r24, 0x69	; 105
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN5Print5printEhi>
		Serial.print("\r\n");
     c54:	64 e1       	ldi	r22, 0x14	; 20
     c56:	71 e0       	ldi	r23, 0x01	; 1
     c58:	89 e6       	ldi	r24, 0x69	; 105
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
		//setting to build header time.
		RTC.setSeconds(now.second());
     c60:	6e 81       	ldd	r22, Y+6	; 0x06
     c62:	80 e5       	ldi	r24, 0x50	; 80
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	0e 94 11 02 	call	0x422	; 0x422 <_ZN6DS133710setSecondsEh>
		RTC.setMinutes(now.minute());
     c6a:	6d 81       	ldd	r22, Y+5	; 0x05
     c6c:	80 e5       	ldi	r24, 0x50	; 80
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN6DS133710setMinutesEh>
		RTC.setHours(now.hour());
     c74:	6c 81       	ldd	r22, Y+4	; 0x04
     c76:	80 e5       	ldi	r24, 0x50	; 80
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6DS13378setHoursEh>
		RTC.setDays(now.day());
     c7e:	6b 81       	ldd	r22, Y+3	; 0x03
     c80:	80 e5       	ldi	r24, 0x50	; 80
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN6DS13377setDaysEh>
		RTC.setMonths(now.month());
     c88:	6a 81       	ldd	r22, Y+2	; 0x02
     c8a:	80 e5       	ldi	r24, 0x50	; 80
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN6DS13379setMonthsEh>
     c92:	69 81       	ldd	r22, Y+1	; 0x01
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	60 53       	subi	r22, 0x30	; 48
     c98:	78 4f       	sbci	r23, 0xF8	; 248
		RTC.setYears(now.year());
     c9a:	80 e5       	ldi	r24, 0x50	; 80
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN6DS13378setYearsEj>
		RTC.writeTime();
     ca2:	80 e5       	ldi	r24, 0x50	; 80
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 1f 03 	call	0x63e	; 0x63e <_ZN6DS13379writeTimeEv>
	}
	
	delay(10);
     caa:	6a e0       	ldi	r22, 0x0A	; 10
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 38 10 	call	0x2070	; 0x2070 <delay>
	
	if(!RTC.time_is_set())
     cb6:	80 e5       	ldi	r24, 0x50	; 80
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN6DS133711time_is_setEv>
     cbe:	81 11       	cpse	r24, r1
     cc0:	07 c0       	rjmp	.+14     	; 0xcd0 <_Z4Initv+0x1bc>
	{
		Serial.print(F("Time did not set correctly, check wiring.\r\n"));
     cc2:	6e e4       	ldi	r22, 0x4E	; 78
     cc4:	72 e0       	ldi	r23, 0x02	; 2
     cc6:	89 e6       	ldi	r24, 0x69	; 105
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN5Print5printEPK19__FlashStringHelper>
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <_Z4Initv+0x1c8>
	}
	else
	{
		Serial.print(F("Time should be set.\r\n"));
     cd0:	68 e3       	ldi	r22, 0x38	; 56
     cd2:	72 e0       	ldi	r23, 0x02	; 2
     cd4:	89 e6       	ldi	r24, 0x69	; 105
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN5Print5printEPK19__FlashStringHelper>
	
	//rtc.writeSqwPinMode(modes[0]);
	//RTC.enable_interrupt();
	//RTC.setAlarmRepeat(EVERY_SECOND);
	//RTC.writeAlarm();
	ds1337_clear_control_bits(DS1337_SQW_MASK);
     cdc:	8c e0       	ldi	r24, 0x0C	; 12
     cde:	0e 94 86 05 	call	0xb0c	; 0xb0c <_Z25ds1337_clear_control_bitsh>
	ds1337_set_control(DS1337_SQW_1HZ);
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0e 94 72 05 	call	0xae4	; 0xae4 <_Z18ds1337_set_controlh>
	delay(10);
     ce8:	6a e0       	ldi	r22, 0x0A	; 10
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 38 10 	call	0x2070	; 0x2070 <delay>
	///////////////////////////////////////////////////////////
	
	// Setting up sleep mode.
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     cf4:	83 b7       	in	r24, 0x33	; 51
     cf6:	81 7f       	andi	r24, 0xF1	; 241
     cf8:	84 60       	ori	r24, 0x04	; 4
     cfa:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     cfc:	83 b7       	in	r24, 0x33	; 51
     cfe:	81 60       	ori	r24, 0x01	; 1
     d00:	83 bf       	out	0x33, r24	; 51
}
     d02:	26 96       	adiw	r28, 0x06	; 6
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <setup>:

void setup()
{
		
	//Initialize the clock
	Init();
     d14:	0e 94 8a 05 	call	0xb14	; 0xb14 <_Z4Initv>
	
	//clear display at start up.
	//BlankDisplay();

	//allow interrupts
	sei();
     d18:	78 94       	sei
	
	//Interrupts
	attachInterrupt(0, Interrupt_Update, RISING);
     d1a:	43 e0       	ldi	r20, 0x03	; 3
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	68 e5       	ldi	r22, 0x58	; 88
     d20:	73 e0       	ldi	r23, 0x03	; 3
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <attachInterrupt>
     d28:	08 95       	ret

00000d2a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     d2a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     d2c:	91 8d       	ldd	r25, Z+25	; 0x19
     d2e:	22 8d       	ldd	r18, Z+26	; 0x1a
     d30:	89 2f       	mov	r24, r25
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	80 5c       	subi	r24, 0xC0	; 192
     d36:	9f 4f       	sbci	r25, 0xFF	; 255
     d38:	82 1b       	sub	r24, r18
     d3a:	91 09       	sbc	r25, r1
}
     d3c:	8f 73       	andi	r24, 0x3F	; 63
     d3e:	99 27       	eor	r25, r25
     d40:	08 95       	ret

00000d42 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     d42:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     d44:	91 8d       	ldd	r25, Z+25	; 0x19
     d46:	82 8d       	ldd	r24, Z+26	; 0x1a
     d48:	98 17       	cp	r25, r24
     d4a:	31 f0       	breq	.+12     	; 0xd58 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     d4c:	82 8d       	ldd	r24, Z+26	; 0x1a
     d4e:	e8 0f       	add	r30, r24
     d50:	f1 1d       	adc	r31, r1
     d52:	85 8d       	ldd	r24, Z+29	; 0x1d
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d58:	8f ef       	ldi	r24, 0xFF	; 255
     d5a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     d5c:	08 95       	ret

00000d5e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     d5e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     d60:	91 8d       	ldd	r25, Z+25	; 0x19
     d62:	82 8d       	ldd	r24, Z+26	; 0x1a
     d64:	98 17       	cp	r25, r24
     d66:	61 f0       	breq	.+24     	; 0xd80 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     d68:	82 8d       	ldd	r24, Z+26	; 0x1a
     d6a:	df 01       	movw	r26, r30
     d6c:	a8 0f       	add	r26, r24
     d6e:	b1 1d       	adc	r27, r1
     d70:	5d 96       	adiw	r26, 0x1d	; 29
     d72:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     d74:	92 8d       	ldd	r25, Z+26	; 0x1a
     d76:	9f 5f       	subi	r25, 0xFF	; 255
     d78:	9f 73       	andi	r25, 0x3F	; 63
     d7a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d80:	8f ef       	ldi	r24, 0xFF	; 255
     d82:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     d84:	08 95       	ret

00000d86 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     d86:	83 e3       	ldi	r24, 0x33	; 51
     d88:	98 e0       	ldi	r25, 0x08	; 8
     d8a:	89 2b       	or	r24, r25
     d8c:	49 f0       	breq	.+18     	; 0xda0 <_Z14serialEventRunv+0x1a>
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	89 2b       	or	r24, r25
     d94:	29 f0       	breq	.+10     	; 0xda0 <_Z14serialEventRunv+0x1a>
     d96:	0e 94 33 08 	call	0x1066	; 0x1066 <_Z17Serial0_availablev>
     d9a:	81 11       	cpse	r24, r1
     d9c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     da0:	08 95       	ret

00000da2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     da2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     da4:	84 8d       	ldd	r24, Z+28	; 0x1c
     da6:	df 01       	movw	r26, r30
     da8:	a8 0f       	add	r26, r24
     daa:	b1 1d       	adc	r27, r1
     dac:	a3 5a       	subi	r26, 0xA3	; 163
     dae:	bf 4f       	sbci	r27, 0xFF	; 255
     db0:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     db2:	24 8d       	ldd	r18, Z+28	; 0x1c
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	2f 5f       	subi	r18, 0xFF	; 255
     db8:	3f 4f       	sbci	r19, 0xFF	; 255
     dba:	2f 73       	andi	r18, 0x3F	; 63
     dbc:	30 78       	andi	r19, 0x80	; 128
     dbe:	33 23       	and	r19, r19
     dc0:	34 f4       	brge	.+12     	; 0xdce <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     dc2:	21 50       	subi	r18, 0x01	; 1
     dc4:	31 09       	sbc	r19, r1
     dc6:	20 6c       	ori	r18, 0xC0	; 192
     dc8:	3f 6f       	ori	r19, 0xFF	; 255
     dca:	2f 5f       	subi	r18, 0xFF	; 255
     dcc:	3f 4f       	sbci	r19, 0xFF	; 255
     dce:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     dd0:	a6 89       	ldd	r26, Z+22	; 0x16
     dd2:	b7 89       	ldd	r27, Z+23	; 0x17
     dd4:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     dd6:	a0 89       	ldd	r26, Z+16	; 0x10
     dd8:	b1 89       	ldd	r27, Z+17	; 0x11
     dda:	8c 91       	ld	r24, X
     ddc:	80 64       	ori	r24, 0x40	; 64
     dde:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     de0:	93 8d       	ldd	r25, Z+27	; 0x1b
     de2:	84 8d       	ldd	r24, Z+28	; 0x1c
     de4:	98 13       	cpse	r25, r24
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     de8:	02 88       	ldd	r0, Z+18	; 0x12
     dea:	f3 89       	ldd	r31, Z+19	; 0x13
     dec:	e0 2d       	mov	r30, r0
     dee:	80 81       	ld	r24, Z
     df0:	8f 7d       	andi	r24, 0xDF	; 223
     df2:	80 83       	st	Z, r24
     df4:	08 95       	ret

00000df6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     dfc:	88 8d       	ldd	r24, Y+24	; 0x18
     dfe:	81 11       	cpse	r24, r1
     e00:	0f c0       	rjmp	.+30     	; 0xe20 <_ZN14HardwareSerial5flushEv+0x2a>
     e02:	18 c0       	rjmp	.+48     	; 0xe34 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	07 fc       	sbrc	r0, 7
     e08:	0d c0       	rjmp	.+26     	; 0xe24 <_ZN14HardwareSerial5flushEv+0x2e>
     e0a:	90 81       	ld	r25, Z
     e0c:	95 ff       	sbrs	r25, 5
     e0e:	0a c0       	rjmp	.+20     	; 0xe24 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     e10:	a8 89       	ldd	r26, Y+16	; 0x10
     e12:	b9 89       	ldd	r27, Y+17	; 0x11
     e14:	8c 91       	ld	r24, X
     e16:	85 ff       	sbrs	r24, 5
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
     e1a:	ce 01       	movw	r24, r28
     e1c:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     e20:	ea 89       	ldd	r30, Y+18	; 0x12
     e22:	fb 89       	ldd	r31, Y+19	; 0x13
     e24:	90 81       	ld	r25, Z
     e26:	95 fd       	sbrc	r25, 5
     e28:	ed cf       	rjmp	.-38     	; 0xe04 <_ZN14HardwareSerial5flushEv+0xe>
     e2a:	a8 89       	ldd	r26, Y+16	; 0x10
     e2c:	b9 89       	ldd	r27, Y+17	; 0x11
     e2e:	8c 91       	ld	r24, X
     e30:	86 ff       	sbrs	r24, 6
     e32:	e8 cf       	rjmp	.-48     	; 0xe04 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	fc 01       	movw	r30, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     e44:	93 8d       	ldd	r25, Z+27	; 0x1b
     e46:	84 8d       	ldd	r24, Z+28	; 0x1c
     e48:	98 13       	cpse	r25, r24
     e4a:	24 c0       	rjmp	.+72     	; 0xe94 <_ZN14HardwareSerial5writeEh+0x5a>
     e4c:	a0 89       	ldd	r26, Z+16	; 0x10
     e4e:	b1 89       	ldd	r27, Z+17	; 0x11
     e50:	8c 91       	ld	r24, X
     e52:	85 fd       	sbrc	r24, 5
     e54:	31 c0       	rjmp	.+98     	; 0xeb8 <_ZN14HardwareSerial5writeEh+0x7e>
     e56:	1e c0       	rjmp	.+60     	; 0xe94 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	07 fc       	sbrc	r0, 7
     e5c:	08 c0       	rjmp	.+16     	; 0xe6e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     e5e:	e8 89       	ldd	r30, Y+16	; 0x10
     e60:	f9 89       	ldd	r31, Y+17	; 0x11
     e62:	80 81       	ld	r24, Z
     e64:	85 ff       	sbrs	r24, 5
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     e68:	ce 01       	movw	r24, r28
     e6a:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e70:	09 17       	cp	r16, r25
     e72:	91 f3       	breq	.-28     	; 0xe58 <_ZN14HardwareSerial5writeEh+0x1e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     e74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e76:	fe 01       	movw	r30, r28
     e78:	e8 0f       	add	r30, r24
     e7a:	f1 1d       	adc	r31, r1
     e7c:	e3 5a       	subi	r30, 0xA3	; 163
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     e82:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     e84:	ea 89       	ldd	r30, Y+18	; 0x12
     e86:	fb 89       	ldd	r31, Y+19	; 0x13
     e88:	80 81       	ld	r24, Z
     e8a:	80 62       	ori	r24, 0x20	; 32
     e8c:	80 83       	st	Z, r24
  _written = true;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
     e92:	1b c0       	rjmp	.+54     	; 0xeca <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     e94:	23 8d       	ldd	r18, Z+27	; 0x1b
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	2f 5f       	subi	r18, 0xFF	; 255
     e9a:	3f 4f       	sbci	r19, 0xFF	; 255
     e9c:	2f 73       	andi	r18, 0x3F	; 63
     e9e:	30 78       	andi	r19, 0x80	; 128
     ea0:	33 23       	and	r19, r19
     ea2:	34 f4       	brge	.+12     	; 0xeb0 <_ZN14HardwareSerial5writeEh+0x76>
     ea4:	21 50       	subi	r18, 0x01	; 1
     ea6:	31 09       	sbc	r19, r1
     ea8:	20 6c       	ori	r18, 0xC0	; 192
     eaa:	3f 6f       	ori	r19, 0xFF	; 255
     eac:	2f 5f       	subi	r18, 0xFF	; 255
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	16 2f       	mov	r17, r22
     eb2:	ef 01       	movw	r28, r30
     eb4:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     eb6:	db cf       	rjmp	.-74     	; 0xe6e <_ZN14HardwareSerial5writeEh+0x34>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     eb8:	a6 89       	ldd	r26, Z+22	; 0x16
     eba:	b7 89       	ldd	r27, Z+23	; 0x17
     ebc:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     ebe:	00 88       	ldd	r0, Z+16	; 0x10
     ec0:	f1 89       	ldd	r31, Z+17	; 0x11
     ec2:	e0 2d       	mov	r30, r0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 64       	ori	r24, 0x40	; 64
     ec8:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	08 95       	ret

00000ed8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     ed8:	bf 92       	push	r11
     eda:	cf 92       	push	r12
     edc:	df 92       	push	r13
     ede:	ef 92       	push	r14
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	ec 01       	movw	r28, r24
     eec:	6a 01       	movw	r12, r20
     eee:	7b 01       	movw	r14, r22
     ef0:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     ef2:	e8 89       	ldd	r30, Y+16	; 0x10
     ef4:	f9 89       	ldd	r31, Y+17	; 0x11
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     efa:	41 15       	cp	r20, r1
     efc:	51 4e       	sbci	r21, 0xE1	; 225
     efe:	61 05       	cpc	r22, r1
     f00:	71 05       	cpc	r23, r1
     f02:	b1 f0       	breq	.+44     	; 0xf30 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	79 e0       	ldi	r23, 0x09	; 9
     f08:	8d e3       	ldi	r24, 0x3D	; 61
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a7 01       	movw	r20, r14
     f0e:	96 01       	movw	r18, r12
     f10:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__udivmodsi4>
     f14:	89 01       	movw	r16, r18
     f16:	9a 01       	movw	r18, r20
     f18:	01 50       	subi	r16, 0x01	; 1
     f1a:	11 09       	sbc	r17, r1
     f1c:	21 09       	sbc	r18, r1
     f1e:	31 09       	sbc	r19, r1
     f20:	36 95       	lsr	r19
     f22:	27 95       	ror	r18
     f24:	17 95       	ror	r17
     f26:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f28:	01 15       	cp	r16, r1
     f2a:	80 e1       	ldi	r24, 0x10	; 16
     f2c:	18 07       	cpc	r17, r24
     f2e:	a8 f0       	brcs	.+42     	; 0xf5a <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
     f30:	e8 89       	ldd	r30, Y+16	; 0x10
     f32:	f9 89       	ldd	r31, Y+17	; 0x11
     f34:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     f36:	60 e8       	ldi	r22, 0x80	; 128
     f38:	74 e8       	ldi	r23, 0x84	; 132
     f3a:	8e e1       	ldi	r24, 0x1E	; 30
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	a7 01       	movw	r20, r14
     f40:	96 01       	movw	r18, r12
     f42:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__udivmodsi4>
     f46:	da 01       	movw	r26, r20
     f48:	c9 01       	movw	r24, r18
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	a1 09       	sbc	r26, r1
     f4e:	b1 09       	sbc	r27, r1
     f50:	b6 95       	lsr	r27
     f52:	a7 95       	ror	r26
     f54:	97 95       	ror	r25
     f56:	87 95       	ror	r24
     f58:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     f5a:	ec 85       	ldd	r30, Y+12	; 0x0c
     f5c:	fd 85       	ldd	r31, Y+13	; 0x0d
     f5e:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
     f60:	ee 85       	ldd	r30, Y+14	; 0x0e
     f62:	ff 85       	ldd	r31, Y+15	; 0x0f
     f64:	00 83       	st	Z, r16

  _written = false;
     f66:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     f68:	ec 89       	ldd	r30, Y+20	; 0x14
     f6a:	fd 89       	ldd	r31, Y+21	; 0x15
     f6c:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     f6e:	ea 89       	ldd	r30, Y+18	; 0x12
     f70:	fb 89       	ldd	r31, Y+19	; 0x13
     f72:	80 81       	ld	r24, Z
     f74:	80 61       	ori	r24, 0x10	; 16
     f76:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     f78:	ea 89       	ldd	r30, Y+18	; 0x12
     f7a:	fb 89       	ldd	r31, Y+19	; 0x13
     f7c:	80 81       	ld	r24, Z
     f7e:	88 60       	ori	r24, 0x08	; 8
     f80:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     f82:	ea 89       	ldd	r30, Y+18	; 0x12
     f84:	fb 89       	ldd	r31, Y+19	; 0x13
     f86:	80 81       	ld	r24, Z
     f88:	80 68       	ori	r24, 0x80	; 128
     f8a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     f8c:	ea 89       	ldd	r30, Y+18	; 0x12
     f8e:	fb 89       	ldd	r31, Y+19	; 0x13
     f90:	80 81       	ld	r24, Z
     f92:	8f 7d       	andi	r24, 0xDF	; 223
     f94:	80 83       	st	Z, r24
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	08 95       	ret

00000faa <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	2f 93       	push	r18
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     fc2:	e0 91 79 01 	lds	r30, 0x0179
     fc6:	f0 91 7a 01 	lds	r31, 0x017A
     fca:	80 81       	ld	r24, Z
     fcc:	82 fd       	sbrc	r24, 2
     fce:	14 c0       	rjmp	.+40     	; 0xff8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     fd0:	e9 e6       	ldi	r30, 0x69	; 105
     fd2:	f1 e0       	ldi	r31, 0x01	; 1
     fd4:	a6 89       	ldd	r26, Z+22	; 0x16
     fd6:	b7 89       	ldd	r27, Z+23	; 0x17
     fd8:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     fda:	81 8d       	ldd	r24, Z+25	; 0x19
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     fe0:	92 8d       	ldd	r25, Z+26	; 0x1a
     fe2:	89 17       	cp	r24, r25
     fe4:	71 f0       	breq	.+28     	; 0x1002 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
     fe6:	df 01       	movw	r26, r30
     fe8:	e1 8d       	ldd	r30, Z+25	; 0x19
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	e7 59       	subi	r30, 0x97	; 151
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     ff2:	59 96       	adiw	r26, 0x19	; 25
     ff4:	8c 93       	st	X, r24
     ff6:	05 c0       	rjmp	.+10     	; 0x1002 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     ff8:	e0 91 7f 01 	lds	r30, 0x017F
     ffc:	f0 91 80 01 	lds	r31, 0x0180
    1000:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1002:	ff 91       	pop	r31
    1004:	ef 91       	pop	r30
    1006:	bf 91       	pop	r27
    1008:	af 91       	pop	r26
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	2f 91       	pop	r18
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	2f 93       	push	r18
    1026:	3f 93       	push	r19
    1028:	4f 93       	push	r20
    102a:	5f 93       	push	r21
    102c:	6f 93       	push	r22
    102e:	7f 93       	push	r23
    1030:	8f 93       	push	r24
    1032:	9f 93       	push	r25
    1034:	af 93       	push	r26
    1036:	bf 93       	push	r27
    1038:	ef 93       	push	r30
    103a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    103c:	89 e6       	ldi	r24, 0x69	; 105
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1044:	ff 91       	pop	r31
    1046:	ef 91       	pop	r30
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti

00001066 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1066:	89 e6       	ldi	r24, 0x69	; 105
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN14HardwareSerial9availableEv>
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	89 2b       	or	r24, r25
    1072:	09 f4       	brne	.+2      	; 0x1076 <_Z17Serial0_availablev+0x10>
    1074:	20 e0       	ldi	r18, 0x00	; 0
}
    1076:	82 2f       	mov	r24, r18
    1078:	08 95       	ret

0000107a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    107a:	e9 e6       	ldi	r30, 0x69	; 105
    107c:	f1 e0       	ldi	r31, 0x01	; 1
    107e:	13 82       	std	Z+3, r1	; 0x03
    1080:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1082:	88 ee       	ldi	r24, 0xE8	; 232
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	a0 e0       	ldi	r26, 0x00	; 0
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	84 83       	std	Z+4, r24	; 0x04
    108c:	95 83       	std	Z+5, r25	; 0x05
    108e:	a6 83       	std	Z+6, r26	; 0x06
    1090:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1092:	8f e1       	ldi	r24, 0x1F	; 31
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
    109a:	85 ec       	ldi	r24, 0xC5	; 197
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	95 87       	std	Z+13, r25	; 0x0d
    10a0:	84 87       	std	Z+12, r24	; 0x0c
    10a2:	84 ec       	ldi	r24, 0xC4	; 196
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	97 87       	std	Z+15, r25	; 0x0f
    10a8:	86 87       	std	Z+14, r24	; 0x0e
    10aa:	80 ec       	ldi	r24, 0xC0	; 192
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	91 8b       	std	Z+17, r25	; 0x11
    10b0:	80 8b       	std	Z+16, r24	; 0x10
    10b2:	81 ec       	ldi	r24, 0xC1	; 193
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	93 8b       	std	Z+19, r25	; 0x13
    10b8:	82 8b       	std	Z+18, r24	; 0x12
    10ba:	82 ec       	ldi	r24, 0xC2	; 194
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	95 8b       	std	Z+21, r25	; 0x15
    10c0:	84 8b       	std	Z+20, r24	; 0x14
    10c2:	86 ec       	ldi	r24, 0xC6	; 198
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	97 8b       	std	Z+23, r25	; 0x17
    10c8:	86 8b       	std	Z+22, r24	; 0x16
    10ca:	11 8e       	std	Z+25, r1	; 0x19
    10cc:	12 8e       	std	Z+26, r1	; 0x1a
    10ce:	13 8e       	std	Z+27, r1	; 0x1b
    10d0:	14 8e       	std	Z+28, r1	; 0x1c
    10d2:	08 95       	ret

000010d4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    10d4:	08 95       	ret

000010d6 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    10d6:	8f 92       	push	r8
    10d8:	9f 92       	push	r9
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	5c 01       	movw	r10, r24
    10f0:	7b 01       	movw	r14, r22
    10f2:	4c 01       	movw	r8, r24
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	88 0e       	add	r8, r24
    10f8:	91 1c       	adc	r9, r1
    10fa:	65 01       	movw	r12, r10
    10fc:	e5 e0       	ldi	r30, 0x05	; 5
    10fe:	ce 0e       	add	r12, r30
    1100:	d1 1c       	adc	r13, r1
    size_t n = 0;
    1102:	00 e0       	ldi	r16, 0x00	; 0
    1104:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    1106:	f4 01       	movw	r30, r8
    1108:	61 91       	ld	r22, Z+
    110a:	4f 01       	movw	r8, r30
    110c:	4a e0       	ldi	r20, 0x0A	; 10
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	c7 01       	movw	r24, r14
    1112:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN5Print5printEhi>
    1116:	ec 01       	movw	r28, r24
        n += p.print('.');
    1118:	6e e2       	ldi	r22, 0x2E	; 46
    111a:	c7 01       	movw	r24, r14
    111c:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN5Print5printEc>
    1120:	8c 0f       	add	r24, r28
    1122:	9d 1f       	adc	r25, r29
    1124:	08 0f       	add	r16, r24
    1126:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    1128:	8c 14       	cp	r8, r12
    112a:	9d 04       	cpc	r9, r13
    112c:	61 f7       	brne	.-40     	; 0x1106 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    112e:	4a e0       	ldi	r20, 0x0A	; 10
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	f5 01       	movw	r30, r10
    1134:	65 81       	ldd	r22, Z+5	; 0x05
    1136:	c7 01       	movw	r24, r14
    1138:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN5Print5printEhi>
    return n;
}
    113c:	80 0f       	add	r24, r16
    113e:	91 1f       	adc	r25, r17
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	ff 90       	pop	r15
    114a:	ef 90       	pop	r14
    114c:	df 90       	pop	r13
    114e:	cf 90       	pop	r12
    1150:	bf 90       	pop	r11
    1152:	af 90       	pop	r10
    1154:	9f 90       	pop	r9
    1156:	8f 90       	pop	r8
    1158:	08 95       	ret

0000115a <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    115a:	e6 e0       	ldi	r30, 0x06	; 6
    115c:	f2 e0       	ldi	r31, 0x02	; 2
    115e:	8f e2       	ldi	r24, 0x2F	; 47
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	91 83       	std	Z+1, r25	; 0x01
    1164:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    1166:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    1168:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    116a:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    116c:	15 82       	std	Z+5, r1	; 0x05
    116e:	08 95       	ret

00001170 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1170:	08 95       	ret

00001172 <main>:

int main(void)
{
	init();
    1172:	0e 94 64 10 	call	0x20c8	; 0x20c8 <init>

	initVariant();
    1176:	0e 94 b8 08 	call	0x1170	; 0x1170 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    117a:	0e 94 8a 06 	call	0xd14	; 0xd14 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    117e:	c3 ec       	ldi	r28, 0xC3	; 195
    1180:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    1182:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <loop>
		if (serialEventRun) serialEventRun();
    1186:	20 97       	sbiw	r28, 0x00	; 0
    1188:	e1 f3       	breq	.-8      	; 0x1182 <main+0x10>
    118a:	0e 94 c3 06 	call	0xd86	; 0xd86 <_Z14serialEventRunv>
    118e:	f9 cf       	rjmp	.-14     	; 0x1182 <main+0x10>

00001190 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
    11a0:	41 15       	cp	r20, r1
    11a2:	51 05       	cpc	r21, r1
    11a4:	b1 f0       	breq	.+44     	; 0x11d2 <_ZN5Print5writeEPKhj+0x42>
    11a6:	8c 01       	movw	r16, r24
    11a8:	e6 2e       	mov	r14, r22
    11aa:	f7 2e       	mov	r15, r23
    11ac:	ea 01       	movw	r28, r20
    11ae:	c1 2c       	mov	r12, r1
    11b0:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
    11b2:	d7 01       	movw	r26, r14
    11b4:	6d 91       	ld	r22, X+
    11b6:	7d 01       	movw	r14, r26
    11b8:	d8 01       	movw	r26, r16
    11ba:	ed 91       	ld	r30, X+
    11bc:	fc 91       	ld	r31, X
    11be:	01 90       	ld	r0, Z+
    11c0:	f0 81       	ld	r31, Z
    11c2:	e0 2d       	mov	r30, r0
    11c4:	c8 01       	movw	r24, r16
    11c6:	09 95       	icall
    11c8:	c8 0e       	add	r12, r24
    11ca:	d9 1e       	adc	r13, r25
    11cc:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    11ce:	89 f7       	brne	.-30     	; 0x11b2 <_ZN5Print5writeEPKhj+0x22>
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    11d2:	c1 2c       	mov	r12, r1
    11d4:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    11d6:	c6 01       	movw	r24, r12
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	ef 90       	pop	r14
    11e4:	df 90       	pop	r13
    11e6:	cf 90       	pop	r12
    11e8:	08 95       	ret

000011ea <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    11f6:	eb 01       	movw	r28, r22
    11f8:	21 96       	adiw	r28, 0x01	; 1
    11fa:	fb 01       	movw	r30, r22
    11fc:	64 91       	lpm	r22, Z
    if (c == 0) break;
    11fe:	66 23       	and	r22, r22
    1200:	99 f0       	breq	.+38     	; 0x1228 <_ZN5Print5printEPK19__FlashStringHelper+0x3e>
    1202:	8c 01       	movw	r16, r24
    1204:	e1 2c       	mov	r14, r1
    1206:	f1 2c       	mov	r15, r1
    n += write(c);
    1208:	d8 01       	movw	r26, r16
    120a:	ed 91       	ld	r30, X+
    120c:	fc 91       	ld	r31, X
    120e:	01 90       	ld	r0, Z+
    1210:	f0 81       	ld	r31, Z
    1212:	e0 2d       	mov	r30, r0
    1214:	c8 01       	movw	r24, r16
    1216:	09 95       	icall
    1218:	e8 0e       	add	r14, r24
    121a:	f9 1e       	adc	r15, r25
size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    121c:	fe 01       	movw	r30, r28
    121e:	64 91       	lpm	r22, Z
    1220:	21 96       	adiw	r28, 0x01	; 1
    if (c == 0) break;
    1222:	61 11       	cpse	r22, r1
    1224:	f1 cf       	rjmp	.-30     	; 0x1208 <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
    1226:	02 c0       	rjmp	.+4      	; 0x122c <_ZN5Print5printEPK19__FlashStringHelper+0x42>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    1228:	e1 2c       	mov	r14, r1
    122a:	f1 2c       	mov	r15, r1
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    122c:	c7 01       	movw	r24, r14
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	08 95       	ret

0000123c <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    123c:	61 15       	cp	r22, r1
    123e:	71 05       	cpc	r23, r1
    1240:	81 f0       	breq	.+32     	; 0x1262 <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    1242:	fb 01       	movw	r30, r22
    1244:	01 90       	ld	r0, Z+
    1246:	00 20       	and	r0, r0
    1248:	e9 f7       	brne	.-6      	; 0x1244 <_ZN5Print5printEPKc+0x8>
    124a:	31 97       	sbiw	r30, 0x01	; 1
    124c:	af 01       	movw	r20, r30
    124e:	46 1b       	sub	r20, r22
    1250:	57 0b       	sbc	r21, r23
    1252:	dc 01       	movw	r26, r24
    1254:	ed 91       	ld	r30, X+
    1256:	fc 91       	ld	r31, X
    1258:	02 80       	ldd	r0, Z+2	; 0x02
    125a:	f3 81       	ldd	r31, Z+3	; 0x03
    125c:	e0 2d       	mov	r30, r0
    125e:	09 95       	icall
    1260:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
    1266:	08 95       	ret

00001268 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    1268:	dc 01       	movw	r26, r24
    126a:	ed 91       	ld	r30, X+
    126c:	fc 91       	ld	r31, X
    126e:	01 90       	ld	r0, Z+
    1270:	f0 81       	ld	r31, Z
    1272:	e0 2d       	mov	r30, r0
    1274:	09 95       	icall
}
    1276:	08 95       	ret

00001278 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1278:	4f 92       	push	r4
    127a:	5f 92       	push	r5
    127c:	6f 92       	push	r6
    127e:	7f 92       	push	r7
    1280:	9f 92       	push	r9
    1282:	af 92       	push	r10
    1284:	bf 92       	push	r11
    1286:	cf 92       	push	r12
    1288:	df 92       	push	r13
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	a1 97       	sbiw	r28, 0x21	; 33
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	5c 01       	movw	r10, r24
    12a8:	6a 01       	movw	r12, r20
    12aa:	7b 01       	movw	r14, r22
    12ac:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    12ae:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	82 17       	cp	r24, r18
    12b4:	20 f0       	brcs	.+8      	; 0x12be <_ZN5Print11printNumberEmh+0x46>
    12b6:	0f 2e       	mov	r0, r31
    12b8:	fa e0       	ldi	r31, 0x0A	; 10
    12ba:	9f 2e       	mov	r9, r31
    12bc:	f0 2d       	mov	r31, r0
    12be:	8e 01       	movw	r16, r28
    12c0:	0f 5d       	subi	r16, 0xDF	; 223
    12c2:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
    12c4:	49 2c       	mov	r4, r9
    12c6:	51 2c       	mov	r5, r1
    12c8:	61 2c       	mov	r6, r1
    12ca:	71 2c       	mov	r7, r1
    12cc:	c7 01       	movw	r24, r14
    12ce:	b6 01       	movw	r22, r12
    12d0:	a3 01       	movw	r20, r6
    12d2:	92 01       	movw	r18, r4
    12d4:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__udivmodsi4>
    char c = m - base * n;
    12d8:	8c 2d       	mov	r24, r12
    12da:	92 9e       	mul	r9, r18
    12dc:	80 19       	sub	r24, r0
    12de:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    12e0:	01 50       	subi	r16, 0x01	; 1
    12e2:	11 09       	sbc	r17, r1
    12e4:	8a 30       	cpi	r24, 0x0A	; 10
    12e6:	10 f4       	brcc	.+4      	; 0x12ec <_ZN5Print11printNumberEmh+0x74>
    12e8:	80 5d       	subi	r24, 0xD0	; 208
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <_ZN5Print11printNumberEmh+0x76>
    12ec:	89 5c       	subi	r24, 0xC9	; 201
    12ee:	d8 01       	movw	r26, r16
    12f0:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    12f2:	c2 2e       	mov	r12, r18
    12f4:	d3 2e       	mov	r13, r19
    12f6:	e4 2e       	mov	r14, r20
    12f8:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    12fa:	c1 14       	cp	r12, r1
    12fc:	d1 04       	cpc	r13, r1
    12fe:	e1 04       	cpc	r14, r1
    1300:	f1 04       	cpc	r15, r1
    1302:	21 f7       	brne	.-56     	; 0x12cc <_ZN5Print11printNumberEmh+0x54>
    1304:	01 15       	cp	r16, r1
    1306:	11 05       	cpc	r17, r1
    1308:	91 f0       	breq	.+36     	; 0x132e <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
    130a:	f8 01       	movw	r30, r16
    130c:	01 90       	ld	r0, Z+
    130e:	00 20       	and	r0, r0
    1310:	e9 f7       	brne	.-6      	; 0x130c <_ZN5Print11printNumberEmh+0x94>
    1312:	31 97       	sbiw	r30, 0x01	; 1
    1314:	af 01       	movw	r20, r30
    1316:	40 1b       	sub	r20, r16
    1318:	51 0b       	sbc	r21, r17
    131a:	d5 01       	movw	r26, r10
    131c:	ed 91       	ld	r30, X+
    131e:	fc 91       	ld	r31, X
    1320:	02 80       	ldd	r0, Z+2	; 0x02
    1322:	f3 81       	ldd	r31, Z+3	; 0x03
    1324:	e0 2d       	mov	r30, r0
    1326:	b8 01       	movw	r22, r16
    1328:	c5 01       	movw	r24, r10
    132a:	09 95       	icall
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    1332:	a1 96       	adiw	r28, 0x21	; 33
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	df 90       	pop	r13
    134c:	cf 90       	pop	r12
    134e:	bf 90       	pop	r11
    1350:	af 90       	pop	r10
    1352:	9f 90       	pop	r9
    1354:	7f 90       	pop	r7
    1356:	6f 90       	pop	r6
    1358:	5f 90       	pop	r5
    135a:	4f 90       	pop	r4
    135c:	08 95       	ret

0000135e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	ec 01       	movw	r28, r24
    1370:	6a 01       	movw	r12, r20
    1372:	7b 01       	movw	r14, r22
  if (base == 0) {
    1374:	21 15       	cp	r18, r1
    1376:	31 05       	cpc	r19, r1
    1378:	41 f4       	brne	.+16     	; 0x138a <_ZN5Print5printEli+0x2c>
    return write(n);
    137a:	e8 81       	ld	r30, Y
    137c:	f9 81       	ldd	r31, Y+1	; 0x01
    137e:	01 90       	ld	r0, Z+
    1380:	f0 81       	ld	r31, Z
    1382:	e0 2d       	mov	r30, r0
    1384:	64 2f       	mov	r22, r20
    1386:	09 95       	icall
    1388:	1d c0       	rjmp	.+58     	; 0x13c4 <_ZN5Print5printEli+0x66>
  } else if (base == 10) {
    138a:	2a 30       	cpi	r18, 0x0A	; 10
    138c:	31 05       	cpc	r19, r1
    138e:	c1 f4       	brne	.+48     	; 0x13c0 <_ZN5Print5printEli+0x62>
    if (n < 0) {
    1390:	77 23       	and	r23, r23
    1392:	94 f4       	brge	.+36     	; 0x13b8 <_ZN5Print5printEli+0x5a>
      int t = print('-');
    1394:	6d e2       	ldi	r22, 0x2D	; 45
    1396:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN5Print5printEc>
    139a:	8c 01       	movw	r16, r24
      n = -n;
    139c:	44 27       	eor	r20, r20
    139e:	55 27       	eor	r21, r21
    13a0:	ba 01       	movw	r22, r20
    13a2:	4c 19       	sub	r20, r12
    13a4:	5d 09       	sbc	r21, r13
    13a6:	6e 09       	sbc	r22, r14
    13a8:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    13aa:	2a e0       	ldi	r18, 0x0A	; 10
    13ac:	ce 01       	movw	r24, r28
    13ae:	0e 94 3c 09 	call	0x1278	; 0x1278 <_ZN5Print11printNumberEmh>
    13b2:	80 0f       	add	r24, r16
    13b4:	91 1f       	adc	r25, r17
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <_ZN5Print5printEli+0x66>
    }
    return printNumber(n, 10);
    13b8:	2a e0       	ldi	r18, 0x0A	; 10
    13ba:	0e 94 3c 09 	call	0x1278	; 0x1278 <_ZN5Print11printNumberEmh>
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <_ZN5Print5printEli+0x66>
  } else {
    return printNumber(n, base);
    13c0:	0e 94 3c 09 	call	0x1278	; 0x1278 <_ZN5Print11printNumberEmh>
  }
}
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	08 95       	ret

000013d6 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    13d6:	9a 01       	movw	r18, r20
  return print((long) n, base);
    13d8:	ab 01       	movw	r20, r22
    13da:	77 0f       	add	r23, r23
    13dc:	66 0b       	sbc	r22, r22
    13de:	77 0b       	sbc	r23, r23
    13e0:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN5Print5printEli>
}
    13e4:	08 95       	ret

000013e6 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    13e6:	21 15       	cp	r18, r1
    13e8:	31 05       	cpc	r19, r1
    13ea:	49 f4       	brne	.+18     	; 0x13fe <_ZN5Print5printEmi+0x18>
    13ec:	dc 01       	movw	r26, r24
    13ee:	ed 91       	ld	r30, X+
    13f0:	fc 91       	ld	r31, X
    13f2:	01 90       	ld	r0, Z+
    13f4:	f0 81       	ld	r31, Z
    13f6:	e0 2d       	mov	r30, r0
    13f8:	64 2f       	mov	r22, r20
    13fa:	09 95       	icall
    13fc:	08 95       	ret
  else return printNumber(n, base);
    13fe:	0e 94 3c 09 	call	0x1278	; 0x1278 <_ZN5Print11printNumberEmh>
}
    1402:	08 95       	ret

00001404 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1404:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    1406:	46 2f       	mov	r20, r22
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN5Print5printEmi>
}
    1412:	08 95       	ret

00001414 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    1414:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    1416:	ab 01       	movw	r20, r22
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN5Print5printEmi>
}
    1420:	08 95       	ret

00001422 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1422:	4f 92       	push	r4
    1424:	5f 92       	push	r5
    1426:	7f 92       	push	r7
    1428:	8f 92       	push	r8
    142a:	9f 92       	push	r9
    142c:	af 92       	push	r10
    142e:	bf 92       	push	r11
    1430:	cf 92       	push	r12
    1432:	df 92       	push	r13
    1434:	ef 92       	push	r14
    1436:	ff 92       	push	r15
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	00 d0       	rcall	.+0      	; 0x1442 <_ZN5Print10printFloatEdh+0x20>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <_ZN5Print10printFloatEdh+0x22>
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	8c 01       	movw	r16, r24
    144a:	4a 01       	movw	r8, r20
    144c:	5b 01       	movw	r10, r22
    144e:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1450:	9a 01       	movw	r18, r20
    1452:	ab 01       	movw	r20, r22
    1454:	c5 01       	movw	r24, r10
    1456:	b4 01       	movw	r22, r8
    1458:	0e 94 c1 13 	call	0x2782	; 0x2782 <__unordsf2>
    145c:	88 23       	and	r24, r24
    145e:	31 f0       	breq	.+12     	; 0x146c <_ZN5Print10printFloatEdh+0x4a>
    1460:	61 e3       	ldi	r22, 0x31	; 49
    1462:	71 e0       	ldi	r23, 0x01	; 1
    1464:	c8 01       	movw	r24, r16
    1466:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
    146a:	d2 c0       	rjmp	.+420    	; 0x1610 <_ZN5Print10printFloatEdh+0x1ee>
  if (isinf(number)) return print("inf");
    146c:	75 01       	movw	r14, r10
    146e:	64 01       	movw	r12, r8
    1470:	e8 94       	clt
    1472:	f7 f8       	bld	r15, 7
    1474:	2f ef       	ldi	r18, 0xFF	; 255
    1476:	3f ef       	ldi	r19, 0xFF	; 255
    1478:	4f e7       	ldi	r20, 0x7F	; 127
    147a:	5f e7       	ldi	r21, 0x7F	; 127
    147c:	c7 01       	movw	r24, r14
    147e:	b6 01       	movw	r22, r12
    1480:	0e 94 c1 13 	call	0x2782	; 0x2782 <__unordsf2>
    1484:	81 11       	cpse	r24, r1
    1486:	10 c0       	rjmp	.+32     	; 0x14a8 <_ZN5Print10printFloatEdh+0x86>
    1488:	2f ef       	ldi	r18, 0xFF	; 255
    148a:	3f ef       	ldi	r19, 0xFF	; 255
    148c:	4f e7       	ldi	r20, 0x7F	; 127
    148e:	5f e7       	ldi	r21, 0x7F	; 127
    1490:	c7 01       	movw	r24, r14
    1492:	b6 01       	movw	r22, r12
    1494:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__cmpsf2>
    1498:	18 16       	cp	r1, r24
    149a:	34 f4       	brge	.+12     	; 0x14a8 <_ZN5Print10printFloatEdh+0x86>
    149c:	65 e3       	ldi	r22, 0x35	; 53
    149e:	71 e0       	ldi	r23, 0x01	; 1
    14a0:	c8 01       	movw	r24, r16
    14a2:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
    14a6:	b4 c0       	rjmp	.+360    	; 0x1610 <_ZN5Print10printFloatEdh+0x1ee>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    14a8:	2f ef       	ldi	r18, 0xFF	; 255
    14aa:	3f ef       	ldi	r19, 0xFF	; 255
    14ac:	4f e7       	ldi	r20, 0x7F	; 127
    14ae:	5f e4       	ldi	r21, 0x4F	; 79
    14b0:	c5 01       	movw	r24, r10
    14b2:	b4 01       	movw	r22, r8
    14b4:	0e 94 4f 13 	call	0x269e	; 0x269e <__gesf2>
    14b8:	18 16       	cp	r1, r24
    14ba:	34 f4       	brge	.+12     	; 0x14c8 <_ZN5Print10printFloatEdh+0xa6>
    14bc:	69 e3       	ldi	r22, 0x39	; 57
    14be:	71 e0       	ldi	r23, 0x01	; 1
    14c0:	c8 01       	movw	r24, r16
    14c2:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
    14c6:	a4 c0       	rjmp	.+328    	; 0x1610 <_ZN5Print10printFloatEdh+0x1ee>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    14c8:	2f ef       	ldi	r18, 0xFF	; 255
    14ca:	3f ef       	ldi	r19, 0xFF	; 255
    14cc:	4f e7       	ldi	r20, 0x7F	; 127
    14ce:	5f ec       	ldi	r21, 0xCF	; 207
    14d0:	c5 01       	movw	r24, r10
    14d2:	b4 01       	movw	r22, r8
    14d4:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__cmpsf2>
    14d8:	88 23       	and	r24, r24
    14da:	34 f4       	brge	.+12     	; 0x14e8 <_ZN5Print10printFloatEdh+0xc6>
    14dc:	69 e3       	ldi	r22, 0x39	; 57
    14de:	71 e0       	ldi	r23, 0x01	; 1
    14e0:	c8 01       	movw	r24, r16
    14e2:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
    14e6:	94 c0       	rjmp	.+296    	; 0x1610 <_ZN5Print10printFloatEdh+0x1ee>
  
  // Handle negative numbers
  if (number < 0.0)
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	a9 01       	movw	r20, r18
    14ee:	c5 01       	movw	r24, r10
    14f0:	b4 01       	movw	r22, r8
    14f2:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__cmpsf2>
    14f6:	88 23       	and	r24, r24
    14f8:	54 f4       	brge	.+20     	; 0x150e <_ZN5Print10printFloatEdh+0xec>
  {
     n += print('-');
    14fa:	6d e2       	ldi	r22, 0x2D	; 45
    14fc:	c8 01       	movw	r24, r16
    14fe:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN5Print5printEc>
    1502:	7c 01       	movw	r14, r24
     number = -number;
    1504:	b7 fa       	bst	r11, 7
    1506:	b0 94       	com	r11
    1508:	b7 f8       	bld	r11, 7
    150a:	b0 94       	com	r11
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <_ZN5Print10printFloatEdh+0xf0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    150e:	e1 2c       	mov	r14, r1
    1510:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1512:	77 20       	and	r7, r7
    1514:	09 f4       	brne	.+2      	; 0x1518 <_ZN5Print10printFloatEdh+0xf6>
    1516:	67 c0       	rjmp	.+206    	; 0x15e6 <_ZN5Print10printFloatEdh+0x1c4>
    1518:	d1 2c       	mov	r13, r1
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    152e:	d3 94       	inc	r13
    1530:	d7 10       	cpse	r13, r7
    1532:	f7 cf       	rjmp	.-18     	; 0x1522 <_ZN5Print10printFloatEdh+0x100>
    1534:	2b c0       	rjmp	.+86     	; 0x158c <_ZN5Print10printFloatEdh+0x16a>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e2       	ldi	r20, 0x20	; 32
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	c5 01       	movw	r24, r10
    1540:	b4 01       	movw	r22, r8
    1542:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__mulsf3>
    1546:	4b 01       	movw	r8, r22
    1548:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    154a:	0e 94 67 12 	call	0x24ce	; 0x24ce <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    154e:	6b 01       	movw	r12, r22
    1550:	77 0f       	add	r23, r23
    1552:	ee 08       	sbc	r14, r14
    1554:	ff 08       	sbc	r15, r15
    1556:	2a e0       	ldi	r18, 0x0A	; 10
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	b7 01       	movw	r22, r14
    155c:	a6 01       	movw	r20, r12
    155e:	c8 01       	movw	r24, r16
    1560:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1564:	48 0e       	add	r4, r24
    1566:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    1568:	c7 01       	movw	r24, r14
    156a:	b6 01       	movw	r22, r12
    156c:	0e 94 9f 12 	call	0x253e	; 0x253e <__floatsisf>
    1570:	9b 01       	movw	r18, r22
    1572:	ac 01       	movw	r20, r24
    1574:	c5 01       	movw	r24, r10
    1576:	b4 01       	movw	r22, r8
    1578:	0e 94 83 11 	call	0x2306	; 0x2306 <__subsf3>
    157c:	4b 01       	movw	r8, r22
    157e:	5c 01       	movw	r10, r24
    1580:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1582:	71 10       	cpse	r7, r1
    1584:	d8 cf       	rjmp	.-80     	; 0x1536 <_ZN5Print10printFloatEdh+0x114>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    1586:	84 2d       	mov	r24, r4
    1588:	95 2d       	mov	r25, r5
    158a:	42 c0       	rjmp	.+132    	; 0x1610 <_ZN5Print10printFloatEdh+0x1ee>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    158c:	9b 01       	movw	r18, r22
    158e:	ac 01       	movw	r20, r24
    1590:	c5 01       	movw	r24, r10
    1592:	b4 01       	movw	r22, r8
    1594:	0e 94 84 11 	call	0x2308	; 0x2308 <__addsf3>
    1598:	4b 01       	movw	r8, r22
    159a:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    159c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__fixunssfsi>
    15a0:	69 83       	std	Y+1, r22	; 0x01
    15a2:	7a 83       	std	Y+2, r23	; 0x02
    15a4:	8b 83       	std	Y+3, r24	; 0x03
    15a6:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    15a8:	0e 94 9d 12 	call	0x253a	; 0x253a <__floatunsisf>
    15ac:	9b 01       	movw	r18, r22
    15ae:	ac 01       	movw	r20, r24
    15b0:	c5 01       	movw	r24, r10
    15b2:	b4 01       	movw	r22, r8
    15b4:	0e 94 83 11 	call	0x2306	; 0x2306 <__subsf3>
    15b8:	4b 01       	movw	r8, r22
    15ba:	5c 01       	movw	r10, r24
  n += print(int_part);
    15bc:	2a e0       	ldi	r18, 0x0A	; 10
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	49 81       	ldd	r20, Y+1	; 0x01
    15c2:	5a 81       	ldd	r21, Y+2	; 0x02
    15c4:	6b 81       	ldd	r22, Y+3	; 0x03
    15c6:	7c 81       	ldd	r23, Y+4	; 0x04
    15c8:	c8 01       	movw	r24, r16
    15ca:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN5Print5printEmi>
    15ce:	6c 01       	movw	r12, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    15d0:	6d e3       	ldi	r22, 0x3D	; 61
    15d2:	71 e0       	ldi	r23, 0x01	; 1
    15d4:	c8 01       	movw	r24, r16
    15d6:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN5Print5printEPKc>
    15da:	8c 0d       	add	r24, r12
    15dc:	9d 1d       	adc	r25, r13
    15de:	2c 01       	movw	r4, r24
    15e0:	4e 0c       	add	r4, r14
    15e2:	5f 1c       	adc	r5, r15
    15e4:	a8 cf       	rjmp	.-176    	; 0x1536 <_ZN5Print10printFloatEdh+0x114>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	5f e3       	ldi	r21, 0x3F	; 63
    15ee:	c5 01       	movw	r24, r10
    15f0:	b4 01       	movw	r22, r8
    15f2:	0e 94 84 11 	call	0x2308	; 0x2308 <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    15f6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__fixunssfsi>
    15fa:	ab 01       	movw	r20, r22
    15fc:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    15fe:	2a e0       	ldi	r18, 0x0A	; 10
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	c8 01       	movw	r24, r16
    1604:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN5Print5printEmi>
    1608:	2c 01       	movw	r4, r24
    160a:	4e 0c       	add	r4, r14
    160c:	5f 1c       	adc	r5, r15
    160e:	bb cf       	rjmp	.-138    	; 0x1586 <_ZN5Print10printFloatEdh+0x164>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	ff 90       	pop	r15
    1622:	ef 90       	pop	r14
    1624:	df 90       	pop	r13
    1626:	cf 90       	pop	r12
    1628:	bf 90       	pop	r11
    162a:	af 90       	pop	r10
    162c:	9f 90       	pop	r9
    162e:	8f 90       	pop	r8
    1630:	7f 90       	pop	r7
    1632:	5f 90       	pop	r5
    1634:	4f 90       	pop	r4
    1636:	08 95       	ret

00001638 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1638:	0e 94 11 0a 	call	0x1422	; 0x1422 <_ZN5Print10printFloatEdh>
}
    163c:	08 95       	ret

0000163e <_ZL6conv2dPKc>:
  hh(copy.hh),
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    163e:	fc 01       	movw	r30, r24
    uint8_t v = 0;
    if ('0' <= *p && *p <= '9')
    1640:	90 81       	ld	r25, Z
    1642:	90 53       	subi	r25, 0x30	; 48
    1644:	9a 30       	cpi	r25, 0x0A	; 10
    1646:	08 f0       	brcs	.+2      	; 0x164a <_ZL6conv2dPKc+0xc>
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    uint8_t v = 0;
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	81 81       	ldd	r24, Z+1	; 0x01
    164c:	80 53       	subi	r24, 0x30	; 48
    if ('0' <= *p && *p <= '9')
        v = *p - '0';
    return 10 * v + *++p - '0';
    164e:	99 0f       	add	r25, r25
    1650:	29 2f       	mov	r18, r25
    1652:	22 0f       	add	r18, r18
    1654:	22 0f       	add	r18, r18
    1656:	92 0f       	add	r25, r18
}
    1658:	89 0f       	add	r24, r25
    165a:	08 95       	ret

0000165c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
}

// A convenient constructor for using "the compiler's time":
// This version will save RAM by using PROGMEM to store it by using the F macro.
//   DateTime now (F(__DATE__), F(__TIME__));
DateTime::DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time) {
    165c:	cf 92       	push	r12
    165e:	df 92       	push	r13
    1660:	ef 92       	push	r14
    1662:	ff 92       	push	r15
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	2b 97       	sbiw	r28, 0x0b	; 11
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	7c 01       	movw	r14, r24
    167e:	6a 01       	movw	r12, r20
    // sample input: date = "Dec 26 2009", time = "12:34:56"
    char buff[11];
    memcpy_P(buff, date, 11);
    1680:	4b e0       	ldi	r20, 0x0B	; 11
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	ce 01       	movw	r24, r28
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	0e 94 16 14 	call	0x282c	; 0x282c <memcpy_P>
    yOff = conv2d(buff + 9);
    168c:	ce 01       	movw	r24, r28
    168e:	0a 96       	adiw	r24, 0x0a	; 10
    1690:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZL6conv2dPKc>
    1694:	f7 01       	movw	r30, r14
    1696:	80 83       	st	Z, r24
    // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
    switch (buff[0]) {
    1698:	e9 81       	ldd	r30, Y+1	; 0x01
    169a:	0e 2f       	mov	r16, r30
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	f8 01       	movw	r30, r16
    16a0:	e1 54       	subi	r30, 0x41	; 65
    16a2:	f1 09       	sbc	r31, r1
    16a4:	e3 31       	cpi	r30, 0x13	; 19
    16a6:	f1 05       	cpc	r31, r1
    16a8:	b8 f5       	brcc	.+110    	; 0x1718 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
    16aa:	ec 5c       	subi	r30, 0xCC	; 204
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__tablejump2__>
        case 'J': m = buff[1] == 'a' ? 1 : m = buff[2] == 'n' ? 6 : 7; break;
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	81 36       	cpi	r24, 0x61	; 97
    16b6:	39 f0       	breq	.+14     	; 0x16c6 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6a>
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	8e 36       	cpi	r24, 0x6E	; 110
    16bc:	11 f0       	breq	.+4      	; 0x16c2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x66>
    16be:	87 e0       	ldi	r24, 0x07	; 7
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6c>
    16c2:	86 e0       	ldi	r24, 0x06	; 6
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x6c>
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	f7 01       	movw	r30, r14
    16ca:	81 83       	std	Z+1, r24	; 0x01
    16cc:	25 c0       	rjmp	.+74     	; 0x1718 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'F': m = 2; break;
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	f7 01       	movw	r30, r14
    16d2:	81 83       	std	Z+1, r24	; 0x01
    16d4:	21 c0       	rjmp	.+66     	; 0x1718 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'A': m = buff[2] == 'r' ? 4 : 8; break;
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	82 37       	cpi	r24, 0x72	; 114
    16da:	11 f0       	breq	.+4      	; 0x16e0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    16dc:	88 e0       	ldi	r24, 0x08	; 8
    16de:	01 c0       	rjmp	.+2      	; 0x16e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x86>
    16e0:	84 e0       	ldi	r24, 0x04	; 4
    16e2:	f7 01       	movw	r30, r14
    16e4:	81 83       	std	Z+1, r24	; 0x01
    16e6:	18 c0       	rjmp	.+48     	; 0x1718 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'M': m = buff[2] == 'r' ? 3 : 5; break;
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	82 37       	cpi	r24, 0x72	; 114
    16ec:	11 f0       	breq	.+4      	; 0x16f2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    16ee:	85 e0       	ldi	r24, 0x05	; 5
    16f0:	01 c0       	rjmp	.+2      	; 0x16f4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    16f2:	83 e0       	ldi	r24, 0x03	; 3
    16f4:	f7 01       	movw	r30, r14
    16f6:	81 83       	std	Z+1, r24	; 0x01
    16f8:	0f c0       	rjmp	.+30     	; 0x1718 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'S': m = 9; break;
    16fa:	89 e0       	ldi	r24, 0x09	; 9
    16fc:	f7 01       	movw	r30, r14
    16fe:	81 83       	std	Z+1, r24	; 0x01
    1700:	0b c0       	rjmp	.+22     	; 0x1718 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'O': m = 10; break;
    1702:	8a e0       	ldi	r24, 0x0A	; 10
    1704:	f7 01       	movw	r30, r14
    1706:	81 83       	std	Z+1, r24	; 0x01
    1708:	07 c0       	rjmp	.+14     	; 0x1718 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'N': m = 11; break;
    170a:	8b e0       	ldi	r24, 0x0B	; 11
    170c:	f7 01       	movw	r30, r14
    170e:	81 83       	std	Z+1, r24	; 0x01
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0xbc>
        case 'D': m = 12; break;
    1712:	8c e0       	ldi	r24, 0x0C	; 12
    1714:	f7 01       	movw	r30, r14
    1716:	81 83       	std	Z+1, r24	; 0x01
    }
    d = conv2d(buff + 4);
    1718:	ce 01       	movw	r24, r28
    171a:	05 96       	adiw	r24, 0x05	; 5
    171c:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZL6conv2dPKc>
    1720:	f7 01       	movw	r30, r14
    1722:	82 83       	std	Z+2, r24	; 0x02
    memcpy_P(buff, time, 8);
    1724:	48 e0       	ldi	r20, 0x08	; 8
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	b6 01       	movw	r22, r12
    172a:	ce 01       	movw	r24, r28
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	0e 94 16 14 	call	0x282c	; 0x282c <memcpy_P>
    hh = conv2d(buff);
    1732:	ce 01       	movw	r24, r28
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZL6conv2dPKc>
    173a:	f7 01       	movw	r30, r14
    173c:	83 83       	std	Z+3, r24	; 0x03
    mm = conv2d(buff + 3);
    173e:	ce 01       	movw	r24, r28
    1740:	04 96       	adiw	r24, 0x04	; 4
    1742:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZL6conv2dPKc>
    1746:	f7 01       	movw	r30, r14
    1748:	84 83       	std	Z+4, r24	; 0x04
    ss = conv2d(buff + 6);
    174a:	ce 01       	movw	r24, r28
    174c:	07 96       	adiw	r24, 0x07	; 7
    174e:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZL6conv2dPKc>
    1752:	f7 01       	movw	r30, r14
    1754:	85 83       	std	Z+5, r24	; 0x05
}
    1756:	2b 96       	adiw	r28, 0x0b	; 11
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	df 90       	pop	r13
    1770:	cf 90       	pop	r12
    1772:	08 95       	ret

00001774 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	39 f0       	breq	.+14     	; 0x1786 <_Z12disableTimerh+0x12>
    1778:	18 f0       	brcs	.+6      	; 0x1780 <_Z12disableTimerh+0xc>
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	51 f0       	breq	.+20     	; 0x1792 <_Z12disableTimerh+0x1e>
    177e:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    1780:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    1784:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    1786:	ef e6       	ldi	r30, 0x6F	; 111
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	8d 7f       	andi	r24, 0xFD	; 253
    178e:	80 83       	st	Z, r24
      break;
    1790:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    1792:	e0 e7       	ldi	r30, 0x70	; 112
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	8d 7f       	andi	r24, 0xFD	; 253
    179a:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    17a2:	e1 eb       	ldi	r30, 0xB1	; 177
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	88 7f       	andi	r24, 0xF8	; 248
    17aa:	84 60       	ori	r24, 0x04	; 4
    17ac:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    17ae:	10 92 b3 00 	sts	0x00B3, r1
    17b2:	08 95       	ret

000017b4 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    17b4:	cf 93       	push	r28
    17b6:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    17b8:	80 91 10 01 	lds	r24, 0x0110
    17bc:	8c 13       	cpse	r24, r28
    17be:	08 c0       	rjmp	.+16     	; 0x17d0 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    17c0:	e0 eb       	ldi	r30, 0xB0	; 176
    17c2:	f2 e0       	ldi	r31, 0x02	; 2
    17c4:	e4 91       	lpm	r30, Z
    17c6:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    17c8:	9f ef       	ldi	r25, 0xFF	; 255
    17ca:	90 93 10 01 	sts	0x0110, r25
    17ce:	01 c0       	rjmp	.+2      	; 0x17d2 <_Z6noToneh+0x1e>
    17d0:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    17d2:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	8c 2f       	mov	r24, r28
    17da:	0e 94 29 11 	call	0x2252	; 0x2252 <digitalWrite>
}
    17de:	cf 91       	pop	r28
    17e0:	08 95       	ret

000017e2 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    17e2:	1f 92       	push	r1
    17e4:	0f 92       	push	r0
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	0f 92       	push	r0
    17ea:	11 24       	eor	r1, r1
    17ec:	2f 93       	push	r18
    17ee:	3f 93       	push	r19
    17f0:	4f 93       	push	r20
    17f2:	5f 93       	push	r21
    17f4:	6f 93       	push	r22
    17f6:	7f 93       	push	r23
    17f8:	8f 93       	push	r24
    17fa:	9f 93       	push	r25
    17fc:	af 93       	push	r26
    17fe:	bf 93       	push	r27
    1800:	ef 93       	push	r30
    1802:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    1804:	80 91 0f 02 	lds	r24, 0x020F
    1808:	90 91 10 02 	lds	r25, 0x0210
    180c:	a0 91 11 02 	lds	r26, 0x0211
    1810:	b0 91 12 02 	lds	r27, 0x0212
    1814:	89 2b       	or	r24, r25
    1816:	8a 2b       	or	r24, r26
    1818:	8b 2b       	or	r24, r27
    181a:	51 f1       	breq	.+84     	; 0x1870 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    181c:	80 91 0c 02 	lds	r24, 0x020C
    1820:	e0 91 0d 02 	lds	r30, 0x020D
    1824:	f0 91 0e 02 	lds	r31, 0x020E
    1828:	90 81       	ld	r25, Z
    182a:	89 27       	eor	r24, r25
    182c:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    182e:	80 91 0f 02 	lds	r24, 0x020F
    1832:	90 91 10 02 	lds	r25, 0x0210
    1836:	a0 91 11 02 	lds	r26, 0x0211
    183a:	b0 91 12 02 	lds	r27, 0x0212
    183e:	18 16       	cp	r1, r24
    1840:	19 06       	cpc	r1, r25
    1842:	1a 06       	cpc	r1, r26
    1844:	1b 06       	cpc	r1, r27
    1846:	c4 f4       	brge	.+48     	; 0x1878 <__vector_7+0x96>
      timer2_toggle_count--;
    1848:	80 91 0f 02 	lds	r24, 0x020F
    184c:	90 91 10 02 	lds	r25, 0x0210
    1850:	a0 91 11 02 	lds	r26, 0x0211
    1854:	b0 91 12 02 	lds	r27, 0x0212
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	a1 09       	sbc	r26, r1
    185c:	b1 09       	sbc	r27, r1
    185e:	80 93 0f 02 	sts	0x020F, r24
    1862:	90 93 10 02 	sts	0x0210, r25
    1866:	a0 93 11 02 	sts	0x0211, r26
    186a:	b0 93 12 02 	sts	0x0212, r27
    186e:	04 c0       	rjmp	.+8      	; 0x1878 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    1870:	80 91 10 01 	lds	r24, 0x0110
    1874:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    1878:	ff 91       	pop	r31
    187a:	ef 91       	pop	r30
    187c:	bf 91       	pop	r27
    187e:	af 91       	pop	r26
    1880:	9f 91       	pop	r25
    1882:	8f 91       	pop	r24
    1884:	7f 91       	pop	r23
    1886:	6f 91       	pop	r22
    1888:	5f 91       	pop	r21
    188a:	4f 91       	pop	r20
    188c:	3f 91       	pop	r19
    188e:	2f 91       	pop	r18
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	0f 90       	pop	r0
    1896:	1f 90       	pop	r1
    1898:	18 95       	reti

0000189a <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    189a:	10 92 80 02 	sts	0x0280, r1
  twi_sendStop = true;		// default value
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	80 93 7e 02 	sts	0x027E, r24
  twi_inRepStart = false;
    18a4:	10 92 7d 02 	sts	0x027D, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    18a8:	61 e0       	ldi	r22, 0x01	; 1
    18aa:	82 e1       	ldi	r24, 0x12	; 18
    18ac:	0e 94 29 11 	call	0x2252	; 0x2252 <digitalWrite>
  digitalWrite(SCL, 1);
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	83 e1       	ldi	r24, 0x13	; 19
    18b4:	0e 94 29 11 	call	0x2252	; 0x2252 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    18b8:	e9 eb       	ldi	r30, 0xB9	; 185
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	8e 7f       	andi	r24, 0xFE	; 254
    18c0:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    18c2:	80 81       	ld	r24, Z
    18c4:	8d 7f       	andi	r24, 0xFD	; 253
    18c6:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    18c8:	88 e4       	ldi	r24, 0x48	; 72
    18ca:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    18ce:	85 e4       	ldi	r24, 0x45	; 69
    18d0:	80 93 bc 00 	sts	0x00BC, r24
    18d4:	08 95       	ret

000018d6 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    18d6:	41 32       	cpi	r20, 0x21	; 33
    18d8:	08 f0       	brcs	.+2      	; 0x18dc <twi_readFrom+0x6>
    18da:	46 c0       	rjmp	.+140    	; 0x1968 <twi_readFrom+0x92>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    18dc:	90 91 80 02 	lds	r25, 0x0280
    18e0:	91 11       	cpse	r25, r1
    18e2:	fc cf       	rjmp	.-8      	; 0x18dc <twi_readFrom+0x6>
    continue;
  }
  twi_state = TWI_MRX;
    18e4:	31 e0       	ldi	r19, 0x01	; 1
    18e6:	30 93 80 02 	sts	0x0280, r19
  twi_sendStop = sendStop;
    18ea:	20 93 7e 02 	sts	0x027E, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    18ee:	2f ef       	ldi	r18, 0xFF	; 255
    18f0:	20 93 13 02 	sts	0x0213, r18

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    18f4:	10 92 58 02 	sts	0x0258, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    18f8:	24 0f       	add	r18, r20
    18fa:	20 93 57 02 	sts	0x0257, r18
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    18fe:	30 93 7f 02 	sts	0x027F, r19
  twi_slarw |= address << 1;
    1902:	20 91 7f 02 	lds	r18, 0x027F
    1906:	88 0f       	add	r24, r24
    1908:	82 2b       	or	r24, r18
    190a:	80 93 7f 02 	sts	0x027F, r24

  if (true == twi_inRepStart) {
    190e:	80 91 7d 02 	lds	r24, 0x027D
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	51 f4       	brne	.+20     	; 0x192a <twi_readFrom+0x54>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    1916:	10 92 7d 02 	sts	0x027D, r1
    TWDR = twi_slarw;
    191a:	80 91 7f 02 	lds	r24, 0x027F
    191e:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1922:	85 ec       	ldi	r24, 0xC5	; 197
    1924:	80 93 bc 00 	sts	0x00BC, r24
    1928:	03 c0       	rjmp	.+6      	; 0x1930 <twi_readFrom+0x5a>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    192a:	85 ee       	ldi	r24, 0xE5	; 229
    192c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    1930:	80 91 80 02 	lds	r24, 0x0280
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	e1 f3       	breq	.-8      	; 0x1930 <twi_readFrom+0x5a>
    continue;
  }

  if (twi_masterBufferIndex < length)
    1938:	80 91 58 02 	lds	r24, 0x0258
    193c:	84 17       	cp	r24, r20
    193e:	10 f4       	brcc	.+4      	; 0x1944 <twi_readFrom+0x6e>
    length = twi_masterBufferIndex;
    1940:	40 91 58 02 	lds	r20, 0x0258

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1944:	44 23       	and	r20, r20
    1946:	89 f0       	breq	.+34     	; 0x196a <twi_readFrom+0x94>
    1948:	a9 e5       	ldi	r26, 0x59	; 89
    194a:	b2 e0       	ldi	r27, 0x02	; 2
    194c:	fb 01       	movw	r30, r22
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	84 0f       	add	r24, r20
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	68 0f       	add	r22, r24
    1958:	79 1f       	adc	r23, r25
    data[i] = twi_masterBuffer[i];
    195a:	8d 91       	ld	r24, X+
    195c:	81 93       	st	Z+, r24

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    195e:	e6 17       	cp	r30, r22
    1960:	f7 07       	cpc	r31, r23
    1962:	d9 f7       	brne	.-10     	; 0x195a <twi_readFrom+0x84>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    1964:	94 2f       	mov	r25, r20
    1966:	01 c0       	rjmp	.+2      	; 0x196a <twi_readFrom+0x94>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
    1968:	90 e0       	ldi	r25, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    196a:	89 2f       	mov	r24, r25
    196c:	08 95       	ret

0000196e <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    196e:	0f 93       	push	r16
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    1970:	41 32       	cpi	r20, 0x21	; 33
    1972:	08 f0       	brcs	.+2      	; 0x1976 <twi_writeTo+0x8>
    1974:	51 c0       	rjmp	.+162    	; 0x1a18 <twi_writeTo+0xaa>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    1976:	30 91 80 02 	lds	r19, 0x0280
    197a:	31 11       	cpse	r19, r1
    197c:	fc cf       	rjmp	.-8      	; 0x1976 <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
    197e:	92 e0       	ldi	r25, 0x02	; 2
    1980:	90 93 80 02 	sts	0x0280, r25
  twi_sendStop = sendStop;
    1984:	00 93 7e 02 	sts	0x027E, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    1988:	9f ef       	ldi	r25, 0xFF	; 255
    198a:	90 93 13 02 	sts	0x0213, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    198e:	10 92 58 02 	sts	0x0258, r1
  twi_masterBufferLength = length;
    1992:	40 93 57 02 	sts	0x0257, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    1996:	44 23       	and	r20, r20
    1998:	71 f0       	breq	.+28     	; 0x19b6 <twi_writeTo+0x48>
    199a:	fb 01       	movw	r30, r22
    199c:	a9 e5       	ldi	r26, 0x59	; 89
    199e:	b2 e0       	ldi	r27, 0x02	; 2
    19a0:	41 50       	subi	r20, 0x01	; 1
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	4f 5f       	subi	r20, 0xFF	; 255
    19a6:	5f 4f       	sbci	r21, 0xFF	; 255
    19a8:	64 0f       	add	r22, r20
    19aa:	75 1f       	adc	r23, r21
    twi_masterBuffer[i] = data[i];
    19ac:	91 91       	ld	r25, Z+
    19ae:	9d 93       	st	X+, r25
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    19b0:	e6 17       	cp	r30, r22
    19b2:	f7 07       	cpc	r31, r23
    19b4:	d9 f7       	brne	.-10     	; 0x19ac <twi_writeTo+0x3e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    19b6:	10 92 7f 02 	sts	0x027F, r1
  twi_slarw |= address << 1;
    19ba:	90 91 7f 02 	lds	r25, 0x027F
    19be:	88 0f       	add	r24, r24
    19c0:	89 2b       	or	r24, r25
    19c2:	80 93 7f 02 	sts	0x027F, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    19c6:	80 91 7d 02 	lds	r24, 0x027D
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	51 f4       	brne	.+20     	; 0x19e2 <twi_writeTo+0x74>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    19ce:	10 92 7d 02 	sts	0x027D, r1
    TWDR = twi_slarw;				
    19d2:	80 91 7f 02 	lds	r24, 0x027F
    19d6:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    19da:	85 ec       	ldi	r24, 0xC5	; 197
    19dc:	80 93 bc 00 	sts	0x00BC, r24
    19e0:	03 c0       	rjmp	.+6      	; 0x19e8 <twi_writeTo+0x7a>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    19e2:	85 ee       	ldi	r24, 0xE5	; 229
    19e4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    19e8:	22 23       	and	r18, r18
    19ea:	41 f0       	breq	.+16     	; 0x19fc <twi_writeTo+0x8e>
    19ec:	80 91 80 02 	lds	r24, 0x0280
    19f0:	82 30       	cpi	r24, 0x02	; 2
    19f2:	21 f4       	brne	.+8      	; 0x19fc <twi_writeTo+0x8e>
    19f4:	80 91 80 02 	lds	r24, 0x0280
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	e1 f3       	breq	.-8      	; 0x19f4 <twi_writeTo+0x86>
    continue;
  }
  
  if (twi_error == 0xFF)
    19fc:	80 91 13 02 	lds	r24, 0x0213
    1a00:	8f 3f       	cpi	r24, 0xFF	; 255
    1a02:	79 f0       	breq	.+30     	; 0x1a22 <twi_writeTo+0xb4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    1a04:	80 91 13 02 	lds	r24, 0x0213
    1a08:	80 32       	cpi	r24, 0x20	; 32
    1a0a:	41 f0       	breq	.+16     	; 0x1a1c <twi_writeTo+0xae>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    1a0c:	80 91 13 02 	lds	r24, 0x0213
    1a10:	80 33       	cpi	r24, 0x30	; 48
    1a12:	31 f0       	breq	.+12     	; 0x1a20 <twi_writeTo+0xb2>
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
    1a14:	34 e0       	ldi	r19, 0x04	; 4
    1a16:	05 c0       	rjmp	.+10     	; 0x1a22 <twi_writeTo+0xb4>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    1a18:	31 e0       	ldi	r19, 0x01	; 1
    1a1a:	03 c0       	rjmp	.+6      	; 0x1a22 <twi_writeTo+0xb4>
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
    1a1c:	32 e0       	ldi	r19, 0x02	; 2
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <twi_writeTo+0xb4>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
    1a20:	33 e0       	ldi	r19, 0x03	; 3
  else
    return 4;	// other twi error
}
    1a22:	83 2f       	mov	r24, r19
    1a24:	0f 91       	pop	r16
    1a26:	08 95       	ret

00001a28 <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    1a28:	61 32       	cpi	r22, 0x21	; 33
    1a2a:	c8 f4       	brcc	.+50     	; 0x1a5e <twi_transmit+0x36>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    1a2c:	20 91 80 02 	lds	r18, 0x0280
    1a30:	24 30       	cpi	r18, 0x04	; 4
    1a32:	b9 f4       	brne	.+46     	; 0x1a62 <twi_transmit+0x3a>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    1a34:	60 93 35 02 	sts	0x0235, r22
  for(i = 0; i < length; ++i){
    1a38:	66 23       	and	r22, r22
    1a3a:	a9 f0       	breq	.+42     	; 0x1a66 <twi_transmit+0x3e>
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	a7 e3       	ldi	r26, 0x37	; 55
    1a40:	b2 e0       	ldi	r27, 0x02	; 2
    1a42:	61 50       	subi	r22, 0x01	; 1
    1a44:	26 2f       	mov	r18, r22
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	2f 5f       	subi	r18, 0xFF	; 255
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	28 0f       	add	r18, r24
    1a4e:	39 1f       	adc	r19, r25
    twi_txBuffer[i] = data[i];
    1a50:	91 91       	ld	r25, Z+
    1a52:	9d 93       	st	X+, r25
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    1a54:	e2 17       	cp	r30, r18
    1a56:	f3 07       	cpc	r31, r19
    1a58:	d9 f7       	brne	.-10     	; 0x1a50 <twi_transmit+0x28>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	08 95       	ret
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    1a66:	80 e0       	ldi	r24, 0x00	; 0
}
    1a68:	08 95       	ret

00001a6a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1a6a:	85 ed       	ldi	r24, 0xD5	; 213
    1a6c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1a70:	ec eb       	ldi	r30, 0xBC	; 188
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	84 fd       	sbrc	r24, 4
    1a78:	fd cf       	rjmp	.-6      	; 0x1a74 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1a7a:	10 92 80 02 	sts	0x0280, r1
    1a7e:	08 95       	ret

00001a80 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1a80:	85 ec       	ldi	r24, 0xC5	; 197
    1a82:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    1a86:	10 92 80 02 	sts	0x0280, r1
    1a8a:	08 95       	ret

00001a8c <__vector_24>:
}

ISR(TWI_vect)
{
    1a8c:	1f 92       	push	r1
    1a8e:	0f 92       	push	r0
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	0f 92       	push	r0
    1a94:	11 24       	eor	r1, r1
    1a96:	2f 93       	push	r18
    1a98:	3f 93       	push	r19
    1a9a:	4f 93       	push	r20
    1a9c:	5f 93       	push	r21
    1a9e:	6f 93       	push	r22
    1aa0:	7f 93       	push	r23
    1aa2:	8f 93       	push	r24
    1aa4:	9f 93       	push	r25
    1aa6:	af 93       	push	r26
    1aa8:	bf 93       	push	r27
    1aaa:	ef 93       	push	r30
    1aac:	ff 93       	push	r31
  switch(TW_STATUS){
    1aae:	80 91 b9 00 	lds	r24, 0x00B9
    1ab2:	e8 2f       	mov	r30, r24
    1ab4:	e8 7f       	andi	r30, 0xF8	; 248
    1ab6:	8e 2f       	mov	r24, r30
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	89 3c       	cpi	r24, 0xC9	; 201
    1abc:	91 05       	cpc	r25, r1
    1abe:	08 f0       	brcs	.+2      	; 0x1ac2 <__vector_24+0x36>
    1ac0:	f7 c0       	rjmp	.+494    	; 0x1cb0 <__vector_24+0x224>
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	e9 5b       	subi	r30, 0xB9	; 185
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1acc:	80 91 7f 02 	lds	r24, 0x027F
    1ad0:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ad4:	85 ec       	ldi	r24, 0xC5	; 197
    1ad6:	80 93 bc 00 	sts	0x00BC, r24
    1ada:	ea c0       	rjmp	.+468    	; 0x1cb0 <__vector_24+0x224>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1adc:	90 91 58 02 	lds	r25, 0x0258
    1ae0:	80 91 57 02 	lds	r24, 0x0257
    1ae4:	98 17       	cp	r25, r24
    1ae6:	80 f4       	brcc	.+32     	; 0x1b08 <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1ae8:	e0 91 58 02 	lds	r30, 0x0258
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	8e 0f       	add	r24, r30
    1af0:	80 93 58 02 	sts	0x0258, r24
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	e7 5a       	subi	r30, 0xA7	; 167
    1af8:	fd 4f       	sbci	r31, 0xFD	; 253
    1afa:	80 81       	ld	r24, Z
    1afc:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1b00:	85 ec       	ldi	r24, 0xC5	; 197
    1b02:	80 93 bc 00 	sts	0x00BC, r24
    1b06:	d4 c0       	rjmp	.+424    	; 0x1cb0 <__vector_24+0x224>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    1b08:	80 91 7e 02 	lds	r24, 0x027E
    1b0c:	88 23       	and	r24, r24
    1b0e:	19 f0       	breq	.+6      	; 0x1b16 <__vector_24+0x8a>
          twi_stop();
    1b10:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <twi_stop>
    1b14:	cd c0       	rjmp	.+410    	; 0x1cb0 <__vector_24+0x224>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	80 93 7d 02 	sts	0x027D, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1b1c:	84 ea       	ldi	r24, 0xA4	; 164
    1b1e:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    1b22:	10 92 80 02 	sts	0x0280, r1
    1b26:	c4 c0       	rjmp	.+392    	; 0x1cb0 <__vector_24+0x224>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    1b28:	80 e2       	ldi	r24, 0x20	; 32
    1b2a:	80 93 13 02 	sts	0x0213, r24
      twi_stop();
    1b2e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <twi_stop>
      break;
    1b32:	be c0       	rjmp	.+380    	; 0x1cb0 <__vector_24+0x224>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1b34:	80 e3       	ldi	r24, 0x30	; 48
    1b36:	80 93 13 02 	sts	0x0213, r24
      twi_stop();
    1b3a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <twi_stop>
      break;
    1b3e:	b8 c0       	rjmp	.+368    	; 0x1cb0 <__vector_24+0x224>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1b40:	88 e3       	ldi	r24, 0x38	; 56
    1b42:	80 93 13 02 	sts	0x0213, r24
      twi_releaseBus();
    1b46:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <twi_releaseBus>
      break;
    1b4a:	b2 c0       	rjmp	.+356    	; 0x1cb0 <__vector_24+0x224>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1b4c:	e0 91 58 02 	lds	r30, 0x0258
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	8e 0f       	add	r24, r30
    1b54:	80 93 58 02 	sts	0x0258, r24
    1b58:	80 91 bb 00 	lds	r24, 0x00BB
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	e7 5a       	subi	r30, 0xA7	; 167
    1b60:	fd 4f       	sbci	r31, 0xFD	; 253
    1b62:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1b64:	90 91 58 02 	lds	r25, 0x0258
    1b68:	80 91 57 02 	lds	r24, 0x0257
    1b6c:	98 17       	cp	r25, r24
    1b6e:	20 f4       	brcc	.+8      	; 0x1b78 <__vector_24+0xec>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1b70:	85 ec       	ldi	r24, 0xC5	; 197
    1b72:	80 93 bc 00 	sts	0x00BC, r24
    1b76:	9c c0       	rjmp	.+312    	; 0x1cb0 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1b78:	85 e8       	ldi	r24, 0x85	; 133
    1b7a:	80 93 bc 00 	sts	0x00BC, r24
    1b7e:	98 c0       	rjmp	.+304    	; 0x1cb0 <__vector_24+0x224>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1b80:	e0 91 58 02 	lds	r30, 0x0258
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	8e 0f       	add	r24, r30
    1b88:	80 93 58 02 	sts	0x0258, r24
    1b8c:	80 91 bb 00 	lds	r24, 0x00BB
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	e7 5a       	subi	r30, 0xA7	; 167
    1b94:	fd 4f       	sbci	r31, 0xFD	; 253
    1b96:	80 83       	st	Z, r24
	if (twi_sendStop)
    1b98:	80 91 7e 02 	lds	r24, 0x027E
    1b9c:	88 23       	and	r24, r24
    1b9e:	19 f0       	breq	.+6      	; 0x1ba6 <__vector_24+0x11a>
          twi_stop();
    1ba0:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <twi_stop>
    1ba4:	85 c0       	rjmp	.+266    	; 0x1cb0 <__vector_24+0x224>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	80 93 7d 02 	sts	0x027D, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1bac:	84 ea       	ldi	r24, 0xA4	; 164
    1bae:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    1bb2:	10 92 80 02 	sts	0x0280, r1
    1bb6:	7c c0       	rjmp	.+248    	; 0x1cb0 <__vector_24+0x224>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    1bb8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <twi_stop>
      break;
    1bbc:	79 c0       	rjmp	.+242    	; 0x1cb0 <__vector_24+0x224>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1bbe:	83 e0       	ldi	r24, 0x03	; 3
    1bc0:	80 93 80 02 	sts	0x0280, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1bc4:	10 92 14 02 	sts	0x0214, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1bc8:	85 ec       	ldi	r24, 0xC5	; 197
    1bca:	80 93 bc 00 	sts	0x00BC, r24
    1bce:	70 c0       	rjmp	.+224    	; 0x1cb0 <__vector_24+0x224>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1bd0:	80 91 14 02 	lds	r24, 0x0214
    1bd4:	80 32       	cpi	r24, 0x20	; 32
    1bd6:	80 f4       	brcc	.+32     	; 0x1bf8 <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1bd8:	e0 91 14 02 	lds	r30, 0x0214
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	8e 0f       	add	r24, r30
    1be0:	80 93 14 02 	sts	0x0214, r24
    1be4:	80 91 bb 00 	lds	r24, 0x00BB
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	eb 5e       	subi	r30, 0xEB	; 235
    1bec:	fd 4f       	sbci	r31, 0xFD	; 253
    1bee:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1bf0:	85 ec       	ldi	r24, 0xC5	; 197
    1bf2:	80 93 bc 00 	sts	0x00BC, r24
    1bf6:	5c c0       	rjmp	.+184    	; 0x1cb0 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1bf8:	85 e8       	ldi	r24, 0x85	; 133
    1bfa:	80 93 bc 00 	sts	0x00BC, r24
    1bfe:	58 c0       	rjmp	.+176    	; 0x1cb0 <__vector_24+0x224>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1c00:	80 91 14 02 	lds	r24, 0x0214
    1c04:	80 32       	cpi	r24, 0x20	; 32
    1c06:	30 f4       	brcc	.+12     	; 0x1c14 <__vector_24+0x188>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1c08:	e0 91 14 02 	lds	r30, 0x0214
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	eb 5e       	subi	r30, 0xEB	; 235
    1c10:	fd 4f       	sbci	r31, 0xFD	; 253
    1c12:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    1c14:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1c18:	60 91 14 02 	lds	r22, 0x0214
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	e0 91 79 02 	lds	r30, 0x0279
    1c22:	f0 91 7a 02 	lds	r31, 0x027A
    1c26:	85 e1       	ldi	r24, 0x15	; 21
    1c28:	92 e0       	ldi	r25, 0x02	; 2
    1c2a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1c2c:	10 92 14 02 	sts	0x0214, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1c30:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <twi_releaseBus>
      break;
    1c34:	3d c0       	rjmp	.+122    	; 0x1cb0 <__vector_24+0x224>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1c36:	85 e8       	ldi	r24, 0x85	; 133
    1c38:	80 93 bc 00 	sts	0x00BC, r24
    1c3c:	39 c0       	rjmp	.+114    	; 0x1cb0 <__vector_24+0x224>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1c3e:	84 e0       	ldi	r24, 0x04	; 4
    1c40:	80 93 80 02 	sts	0x0280, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1c44:	10 92 36 02 	sts	0x0236, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1c48:	10 92 35 02 	sts	0x0235, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1c4c:	e0 91 7b 02 	lds	r30, 0x027B
    1c50:	f0 91 7c 02 	lds	r31, 0x027C
    1c54:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1c56:	80 91 35 02 	lds	r24, 0x0235
    1c5a:	81 11       	cpse	r24, r1
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <__vector_24+0x1dc>
        twi_txBufferLength = 1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	80 93 35 02 	sts	0x0235, r24
        twi_txBuffer[0] = 0x00;
    1c64:	10 92 37 02 	sts	0x0237, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1c68:	e0 91 36 02 	lds	r30, 0x0236
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	8e 0f       	add	r24, r30
    1c70:	80 93 36 02 	sts	0x0236, r24
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	e9 5c       	subi	r30, 0xC9	; 201
    1c78:	fd 4f       	sbci	r31, 0xFD	; 253
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1c80:	90 91 36 02 	lds	r25, 0x0236
    1c84:	80 91 35 02 	lds	r24, 0x0235
    1c88:	98 17       	cp	r25, r24
    1c8a:	20 f4       	brcc	.+8      	; 0x1c94 <__vector_24+0x208>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1c8c:	85 ec       	ldi	r24, 0xC5	; 197
    1c8e:	80 93 bc 00 	sts	0x00BC, r24
    1c92:	0e c0       	rjmp	.+28     	; 0x1cb0 <__vector_24+0x224>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1c94:	85 e8       	ldi	r24, 0x85	; 133
    1c96:	80 93 bc 00 	sts	0x00BC, r24
    1c9a:	0a c0       	rjmp	.+20     	; 0x1cb0 <__vector_24+0x224>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1c9c:	85 ec       	ldi	r24, 0xC5	; 197
    1c9e:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1ca2:	10 92 80 02 	sts	0x0280, r1
      break;
    1ca6:	04 c0       	rjmp	.+8      	; 0x1cb0 <__vector_24+0x224>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1ca8:	10 92 13 02 	sts	0x0213, r1
      twi_stop();
    1cac:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <twi_stop>
      break;
  }
}
    1cb0:	ff 91       	pop	r31
    1cb2:	ef 91       	pop	r30
    1cb4:	bf 91       	pop	r27
    1cb6:	af 91       	pop	r26
    1cb8:	9f 91       	pop	r25
    1cba:	8f 91       	pop	r24
    1cbc:	7f 91       	pop	r23
    1cbe:	6f 91       	pop	r22
    1cc0:	5f 91       	pop	r21
    1cc2:	4f 91       	pop	r20
    1cc4:	3f 91       	pop	r19
    1cc6:	2f 91       	pop	r18
    1cc8:	0f 90       	pop	r0
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	0f 90       	pop	r0
    1cce:	1f 90       	pop	r1
    1cd0:	18 95       	reti

00001cd2 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1cd2:	82 30       	cpi	r24, 0x02	; 2
    1cd4:	00 f5       	brcc	.+64     	; 0x1d16 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    1cd6:	e8 2f       	mov	r30, r24
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	ee 0f       	add	r30, r30
    1cdc:	ff 1f       	adc	r31, r31
    1cde:	ef 57       	subi	r30, 0x7F	; 127
    1ce0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ce2:	71 83       	std	Z+1, r23	; 0x01
    1ce4:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1ce6:	88 23       	and	r24, r24
    1ce8:	19 f0       	breq	.+6      	; 0x1cf0 <attachInterrupt+0x1e>
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	49 f0       	breq	.+18     	; 0x1d00 <attachInterrupt+0x2e>
    1cee:	08 95       	ret
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1cf0:	e9 e6       	ldi	r30, 0x69	; 105
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8c 7f       	andi	r24, 0xFC	; 252
    1cf8:	48 2b       	or	r20, r24
    1cfa:	40 83       	st	Z, r20
      EIMSK |= (1 << INT0);
    1cfc:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    1cfe:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1d00:	e9 e6       	ldi	r30, 0x69	; 105
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	44 0f       	add	r20, r20
    1d08:	55 1f       	adc	r21, r21
    1d0a:	44 0f       	add	r20, r20
    1d0c:	55 1f       	adc	r21, r21
    1d0e:	83 7f       	andi	r24, 0xF3	; 243
    1d10:	48 2b       	or	r20, r24
    1d12:	40 83       	st	Z, r20
      EIMSK |= (1 << INT1);
    1d14:	e9 9a       	sbi	0x1d, 1	; 29
    1d16:	08 95       	ret

00001d18 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    1d18:	1f 92       	push	r1
    1d1a:	0f 92       	push	r0
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	0f 92       	push	r0
    1d20:	11 24       	eor	r1, r1
    1d22:	2f 93       	push	r18
    1d24:	3f 93       	push	r19
    1d26:	4f 93       	push	r20
    1d28:	5f 93       	push	r21
    1d2a:	6f 93       	push	r22
    1d2c:	7f 93       	push	r23
    1d2e:	8f 93       	push	r24
    1d30:	9f 93       	push	r25
    1d32:	af 93       	push	r26
    1d34:	bf 93       	push	r27
    1d36:	ef 93       	push	r30
    1d38:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    1d3a:	80 91 81 02 	lds	r24, 0x0281
    1d3e:	90 91 82 02 	lds	r25, 0x0282
    1d42:	89 2b       	or	r24, r25
    1d44:	29 f0       	breq	.+10     	; 0x1d50 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    1d46:	e0 91 81 02 	lds	r30, 0x0281
    1d4a:	f0 91 82 02 	lds	r31, 0x0282
    1d4e:	09 95       	icall
}
    1d50:	ff 91       	pop	r31
    1d52:	ef 91       	pop	r30
    1d54:	bf 91       	pop	r27
    1d56:	af 91       	pop	r26
    1d58:	9f 91       	pop	r25
    1d5a:	8f 91       	pop	r24
    1d5c:	7f 91       	pop	r23
    1d5e:	6f 91       	pop	r22
    1d60:	5f 91       	pop	r21
    1d62:	4f 91       	pop	r20
    1d64:	3f 91       	pop	r19
    1d66:	2f 91       	pop	r18
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	0f 90       	pop	r0
    1d6e:	1f 90       	pop	r1
    1d70:	18 95       	reti

00001d72 <__vector_2>:

ISR(INT1_vect) {
    1d72:	1f 92       	push	r1
    1d74:	0f 92       	push	r0
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	0f 92       	push	r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	2f 93       	push	r18
    1d7e:	3f 93       	push	r19
    1d80:	4f 93       	push	r20
    1d82:	5f 93       	push	r21
    1d84:	6f 93       	push	r22
    1d86:	7f 93       	push	r23
    1d88:	8f 93       	push	r24
    1d8a:	9f 93       	push	r25
    1d8c:	af 93       	push	r26
    1d8e:	bf 93       	push	r27
    1d90:	ef 93       	push	r30
    1d92:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    1d94:	80 91 83 02 	lds	r24, 0x0283
    1d98:	90 91 84 02 	lds	r25, 0x0284
    1d9c:	89 2b       	or	r24, r25
    1d9e:	29 f0       	breq	.+10     	; 0x1daa <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    1da0:	e0 91 83 02 	lds	r30, 0x0283
    1da4:	f0 91 84 02 	lds	r31, 0x0284
    1da8:	09 95       	icall
}
    1daa:	ff 91       	pop	r31
    1dac:	ef 91       	pop	r30
    1dae:	bf 91       	pop	r27
    1db0:	af 91       	pop	r26
    1db2:	9f 91       	pop	r25
    1db4:	8f 91       	pop	r24
    1db6:	7f 91       	pop	r23
    1db8:	6f 91       	pop	r22
    1dba:	5f 91       	pop	r21
    1dbc:	4f 91       	pop	r20
    1dbe:	3f 91       	pop	r19
    1dc0:	2f 91       	pop	r18
    1dc2:	0f 90       	pop	r0
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	0f 90       	pop	r0
    1dc8:	1f 90       	pop	r1
    1dca:	18 95       	reti

00001dcc <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    1dcc:	80 91 b5 02 	lds	r24, 0x02B5
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	20 91 b6 02 	lds	r18, 0x02B6
}
    1dd6:	82 1b       	sub	r24, r18
    1dd8:	91 09       	sbc	r25, r1
    1dda:	08 95       	ret

00001ddc <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1ddc:	90 91 b6 02 	lds	r25, 0x02B6
    1de0:	80 91 b5 02 	lds	r24, 0x02B5
    1de4:	98 17       	cp	r25, r24
    1de6:	50 f4       	brcc	.+20     	; 0x1dfc <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    1de8:	e9 2f       	mov	r30, r25
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	e9 54       	subi	r30, 0x49	; 73
    1dee:	fd 4f       	sbci	r31, 0xFD	; 253
    1df0:	20 81       	ld	r18, Z
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    1df4:	9f 5f       	subi	r25, 0xFF	; 255
    1df6:	90 93 b6 02 	sts	0x02B6, r25
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    1dfc:	2f ef       	ldi	r18, 0xFF	; 255
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    1e00:	c9 01       	movw	r24, r18
    1e02:	08 95       	ret

00001e04 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    1e04:	e0 91 b6 02 	lds	r30, 0x02B6
    1e08:	80 91 b5 02 	lds	r24, 0x02B5
    1e0c:	e8 17       	cp	r30, r24
    1e0e:	30 f4       	brcc	.+12     	; 0x1e1c <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	e9 54       	subi	r30, 0x49	; 73
    1e14:	fd 4f       	sbci	r31, 0xFD	; 253
    1e16:	80 81       	ld	r24, Z
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    1e1c:	8f ef       	ldi	r24, 0xFF	; 255
    1e1e:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    1e20:	08 95       	ret

00001e22 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    1e22:	08 95       	ret

00001e24 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1e24:	cf 92       	push	r12
    1e26:	df 92       	push	r13
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	8c 01       	movw	r16, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	6a 01       	movw	r12, r20
  if(transmitting){
    1e3a:	20 91 91 02 	lds	r18, 0x0291
    1e3e:	22 23       	and	r18, r18
    1e40:	a1 f0       	breq	.+40     	; 0x1e6a <_ZN7TwoWire5writeEPKhj+0x46>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1e42:	41 15       	cp	r20, r1
    1e44:	51 05       	cpc	r21, r1
    1e46:	a1 f0       	breq	.+40     	; 0x1e70 <_ZN7TwoWire5writeEPKhj+0x4c>
    1e48:	eb 01       	movw	r28, r22
    1e4a:	7b 01       	movw	r14, r22
    1e4c:	e4 0e       	add	r14, r20
    1e4e:	f5 1e       	adc	r15, r21
      write(data[i]);
    1e50:	69 91       	ld	r22, Y+
    1e52:	d8 01       	movw	r26, r16
    1e54:	ed 91       	ld	r30, X+
    1e56:	fc 91       	ld	r31, X
    1e58:	01 90       	ld	r0, Z+
    1e5a:	f0 81       	ld	r31, Z
    1e5c:	e0 2d       	mov	r30, r0
    1e5e:	c8 01       	movw	r24, r16
    1e60:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1e62:	ce 15       	cp	r28, r14
    1e64:	df 05       	cpc	r29, r15
    1e66:	a1 f7       	brne	.-24     	; 0x1e50 <_ZN7TwoWire5writeEPKhj+0x2c>
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    1e6a:	64 2f       	mov	r22, r20
    1e6c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <twi_transmit>
  }
  return quantity;
}
    1e70:	c6 01       	movw	r24, r12
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	df 90       	pop	r13
    1e80:	cf 90       	pop	r12
    1e82:	08 95       	ret

00001e84 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	1f 92       	push	r1
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	fc 01       	movw	r30, r24
    1e90:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    1e92:	90 91 91 02 	lds	r25, 0x0291
    1e96:	99 23       	and	r25, r25
    1e98:	d9 f0       	breq	.+54     	; 0x1ed0 <_ZN7TwoWire5writeEh+0x4c>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    1e9a:	90 91 92 02 	lds	r25, 0x0292
    1e9e:	90 32       	cpi	r25, 0x20	; 32
    1ea0:	38 f0       	brcs	.+14     	; 0x1eb0 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	93 83       	std	Z+3, r25	; 0x03
    1ea8:	82 83       	std	Z+2, r24	; 0x02
      setWriteError();
      return 0;
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	17 c0       	rjmp	.+46     	; 0x1ede <_ZN7TwoWire5writeEh+0x5a>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    1eb0:	80 91 93 02 	lds	r24, 0x0293
    1eb4:	e8 2f       	mov	r30, r24
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	ec 56       	subi	r30, 0x6C	; 108
    1eba:	fd 4f       	sbci	r31, 0xFD	; 253
    1ebc:	99 81       	ldd	r25, Y+1	; 0x01
    1ebe:	90 83       	st	Z, r25
    ++txBufferIndex;
    1ec0:	8f 5f       	subi	r24, 0xFF	; 255
    1ec2:	80 93 93 02 	sts	0x0293, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    1ec6:	80 93 92 02 	sts	0x0292, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	07 c0       	rjmp	.+14     	; 0x1ede <_ZN7TwoWire5writeEh+0x5a>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    1ed0:	61 e0       	ldi	r22, 0x01	; 1
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <twi_transmit>
  }
  return 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
}
    1ede:	0f 90       	pop	r0
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	08 95       	ret

00001ee6 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1ee6:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    1ee8:	13 82       	std	Z+3, r1	; 0x03
    1eea:	12 82       	std	Z+2, r1	; 0x02
    1eec:	88 ee       	ldi	r24, 0xE8	; 232
    1eee:	93 e0       	ldi	r25, 0x03	; 3
    1ef0:	a0 e0       	ldi	r26, 0x00	; 0
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	84 83       	std	Z+4, r24	; 0x04
    1ef6:	95 83       	std	Z+5, r25	; 0x05
    1ef8:	a6 83       	std	Z+6, r26	; 0x06
    1efa:	b7 83       	std	Z+7, r27	; 0x07
    1efc:	83 e4       	ldi	r24, 0x43	; 67
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	91 83       	std	Z+1, r25	; 0x01
    1f02:	80 83       	st	Z, r24
    1f04:	08 95       	ret

00001f06 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    1f06:	10 92 b6 02 	sts	0x02B6, r1
  rxBufferLength = 0;
    1f0a:	10 92 b5 02 	sts	0x02B5, r1

  txBufferIndex = 0;
    1f0e:	10 92 93 02 	sts	0x0293, r1
  txBufferLength = 0;
    1f12:	10 92 92 02 	sts	0x0292, r1

  twi_init();
    1f16:	0e 94 4d 0c 	call	0x189a	; 0x189a <twi_init>
    1f1a:	08 95       	ret

00001f1c <_ZN7TwoWire11requestFromEhhh>:
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
    1f1c:	86 2f       	mov	r24, r22
    1f1e:	41 32       	cpi	r20, 0x21	; 33
    1f20:	08 f0       	brcs	.+2      	; 0x1f24 <_ZN7TwoWire11requestFromEhhh+0x8>
    1f22:	40 e2       	ldi	r20, 0x20	; 32
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    1f24:	67 eb       	ldi	r22, 0xB7	; 183
    1f26:	72 e0       	ldi	r23, 0x02	; 2
    1f28:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    1f2c:	10 92 b6 02 	sts	0x02B6, r1
  rxBufferLength = read;
    1f30:	80 93 b5 02 	sts	0x02B5, r24

  return read;
}
    1f34:	08 95       	ret

00001f36 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    1f36:	21 e0       	ldi	r18, 0x01	; 1
    1f38:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN7TwoWire11requestFromEhhh>
}
    1f3c:	08 95       	ret

00001f3e <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	80 93 91 02 	sts	0x0291, r24
  // set address of targeted slave
  txAddress = address;
    1f44:	60 93 b4 02 	sts	0x02B4, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1f48:	10 92 93 02 	sts	0x0293, r1
  txBufferLength = 0;
    1f4c:	10 92 92 02 	sts	0x0292, r1
    1f50:	08 95       	ret

00001f52 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    1f52:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_ZN7TwoWire17beginTransmissionEh>
    1f56:	08 95       	ret

00001f58 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    1f58:	0f 93       	push	r16
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    1f5a:	06 2f       	mov	r16, r22
    1f5c:	21 e0       	ldi	r18, 0x01	; 1
    1f5e:	40 91 92 02 	lds	r20, 0x0292
    1f62:	64 e9       	ldi	r22, 0x94	; 148
    1f64:	72 e0       	ldi	r23, 0x02	; 2
    1f66:	80 91 b4 02 	lds	r24, 0x02B4
    1f6a:	0e 94 b7 0c 	call	0x196e	; 0x196e <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1f6e:	10 92 93 02 	sts	0x0293, r1
  txBufferLength = 0;
    1f72:	10 92 92 02 	sts	0x0292, r1
  // indicate that we are done transmitting
  transmitting = 0;
    1f76:	10 92 91 02 	sts	0x0291, r1
  return ret;
}
    1f7a:	0f 91       	pop	r16
    1f7c:	08 95       	ret

00001f7e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    1f7e:	61 e0       	ldi	r22, 0x01	; 1
    1f80:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN7TwoWire15endTransmissionEh>
}
    1f84:	08 95       	ret

00001f86 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1f86:	85 e8       	ldi	r24, 0x85	; 133
    1f88:	92 e0       	ldi	r25, 0x02	; 2
    1f8a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN7TwoWireC1Ev>
    1f8e:	08 95       	ret

00001f90 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1f90:	1f 92       	push	r1
    1f92:	0f 92       	push	r0
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	0f 92       	push	r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	2f 93       	push	r18
    1f9c:	3f 93       	push	r19
    1f9e:	8f 93       	push	r24
    1fa0:	9f 93       	push	r25
    1fa2:	af 93       	push	r26
    1fa4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1fa6:	80 91 d8 02 	lds	r24, 0x02D8
    1faa:	90 91 d9 02 	lds	r25, 0x02D9
    1fae:	a0 91 da 02 	lds	r26, 0x02DA
    1fb2:	b0 91 db 02 	lds	r27, 0x02DB
	unsigned char f = timer0_fract;
    1fb6:	30 91 d7 02 	lds	r19, 0x02D7

	m += MILLIS_INC;
	f += FRACT_INC;
    1fba:	23 e0       	ldi	r18, 0x03	; 3
    1fbc:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1fbe:	2d 37       	cpi	r18, 0x7D	; 125
    1fc0:	20 f4       	brcc	.+8      	; 0x1fca <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	a1 1d       	adc	r26, r1
    1fc6:	b1 1d       	adc	r27, r1
    1fc8:	05 c0       	rjmp	.+10     	; 0x1fd4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1fca:	26 e8       	ldi	r18, 0x86	; 134
    1fcc:	23 0f       	add	r18, r19
		m += 1;
    1fce:	02 96       	adiw	r24, 0x02	; 2
    1fd0:	a1 1d       	adc	r26, r1
    1fd2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1fd4:	20 93 d7 02 	sts	0x02D7, r18
	timer0_millis = m;
    1fd8:	80 93 d8 02 	sts	0x02D8, r24
    1fdc:	90 93 d9 02 	sts	0x02D9, r25
    1fe0:	a0 93 da 02 	sts	0x02DA, r26
    1fe4:	b0 93 db 02 	sts	0x02DB, r27
	timer0_overflow_count++;
    1fe8:	80 91 dc 02 	lds	r24, 0x02DC
    1fec:	90 91 dd 02 	lds	r25, 0x02DD
    1ff0:	a0 91 de 02 	lds	r26, 0x02DE
    1ff4:	b0 91 df 02 	lds	r27, 0x02DF
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	a1 1d       	adc	r26, r1
    1ffc:	b1 1d       	adc	r27, r1
    1ffe:	80 93 dc 02 	sts	0x02DC, r24
    2002:	90 93 dd 02 	sts	0x02DD, r25
    2006:	a0 93 de 02 	sts	0x02DE, r26
    200a:	b0 93 df 02 	sts	0x02DF, r27
}
    200e:	bf 91       	pop	r27
    2010:	af 91       	pop	r26
    2012:	9f 91       	pop	r25
    2014:	8f 91       	pop	r24
    2016:	3f 91       	pop	r19
    2018:	2f 91       	pop	r18
    201a:	0f 90       	pop	r0
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	0f 90       	pop	r0
    2020:	1f 90       	pop	r1
    2022:	18 95       	reti

00002024 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2024:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2026:	f8 94       	cli
	m = timer0_overflow_count;
    2028:	80 91 dc 02 	lds	r24, 0x02DC
    202c:	90 91 dd 02 	lds	r25, 0x02DD
    2030:	a0 91 de 02 	lds	r26, 0x02DE
    2034:	b0 91 df 02 	lds	r27, 0x02DF
#if defined(TCNT0)
	t = TCNT0;
    2038:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    203a:	a8 9b       	sbis	0x15, 0	; 21
    203c:	05 c0       	rjmp	.+10     	; 0x2048 <micros+0x24>
    203e:	2f 3f       	cpi	r18, 0xFF	; 255
    2040:	19 f0       	breq	.+6      	; 0x2048 <micros+0x24>
		m++;
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	a1 1d       	adc	r26, r1
    2046:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2048:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    204a:	ba 2f       	mov	r27, r26
    204c:	a9 2f       	mov	r26, r25
    204e:	98 2f       	mov	r25, r24
    2050:	88 27       	eor	r24, r24
    2052:	82 0f       	add	r24, r18
    2054:	91 1d       	adc	r25, r1
    2056:	a1 1d       	adc	r26, r1
    2058:	b1 1d       	adc	r27, r1
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	66 0f       	add	r22, r22
    2060:	77 1f       	adc	r23, r23
    2062:	88 1f       	adc	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	66 0f       	add	r22, r22
    2068:	77 1f       	adc	r23, r23
    206a:	88 1f       	adc	r24, r24
    206c:	99 1f       	adc	r25, r25
}
    206e:	08 95       	ret

00002070 <delay>:

void delay(unsigned long ms)
{
    2070:	cf 92       	push	r12
    2072:	df 92       	push	r13
    2074:	ef 92       	push	r14
    2076:	ff 92       	push	r15
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	6b 01       	movw	r12, r22
    207e:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    2080:	0e 94 12 10 	call	0x2024	; 0x2024 <micros>
    2084:	eb 01       	movw	r28, r22

	while (ms > 0) {
    2086:	c1 14       	cp	r12, r1
    2088:	d1 04       	cpc	r13, r1
    208a:	e1 04       	cpc	r14, r1
    208c:	f1 04       	cpc	r15, r1
    208e:	a9 f0       	breq	.+42     	; 0x20ba <delay+0x4a>
		yield();
    2090:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    2094:	0e 94 12 10 	call	0x2024	; 0x2024 <micros>
    2098:	6c 1b       	sub	r22, r28
    209a:	7d 0b       	sbc	r23, r29
    209c:	68 3e       	cpi	r22, 0xE8	; 232
    209e:	73 40       	sbci	r23, 0x03	; 3
    20a0:	38 f0       	brcs	.+14     	; 0x20b0 <delay+0x40>
			ms--;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	c8 1a       	sub	r12, r24
    20a6:	d1 08       	sbc	r13, r1
    20a8:	e1 08       	sbc	r14, r1
    20aa:	f1 08       	sbc	r15, r1
			start += 1000;
    20ac:	c8 51       	subi	r28, 0x18	; 24
    20ae:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    20b0:	c1 14       	cp	r12, r1
    20b2:	d1 04       	cpc	r13, r1
    20b4:	e1 04       	cpc	r14, r1
    20b6:	f1 04       	cpc	r15, r1
    20b8:	59 f7       	brne	.-42     	; 0x2090 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    20ba:	df 91       	pop	r29
    20bc:	cf 91       	pop	r28
    20be:	ff 90       	pop	r15
    20c0:	ef 90       	pop	r14
    20c2:	df 90       	pop	r13
    20c4:	cf 90       	pop	r12
    20c6:	08 95       	ret

000020c8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    20c8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    20ca:	84 b5       	in	r24, 0x24	; 36
    20cc:	82 60       	ori	r24, 0x02	; 2
    20ce:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    20d0:	84 b5       	in	r24, 0x24	; 36
    20d2:	81 60       	ori	r24, 0x01	; 1
    20d4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    20d6:	85 b5       	in	r24, 0x25	; 37
    20d8:	82 60       	ori	r24, 0x02	; 2
    20da:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    20dc:	85 b5       	in	r24, 0x25	; 37
    20de:	81 60       	ori	r24, 0x01	; 1
    20e0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    20e2:	ee e6       	ldi	r30, 0x6E	; 110
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	81 60       	ori	r24, 0x01	; 1
    20ea:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    20ec:	e1 e8       	ldi	r30, 0x81	; 129
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    20f2:	80 81       	ld	r24, Z
    20f4:	82 60       	ori	r24, 0x02	; 2
    20f6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    20f8:	80 81       	ld	r24, Z
    20fa:	81 60       	ori	r24, 0x01	; 1
    20fc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    20fe:	e0 e8       	ldi	r30, 0x80	; 128
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	81 60       	ori	r24, 0x01	; 1
    2106:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2108:	e1 eb       	ldi	r30, 0xB1	; 177
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	84 60       	ori	r24, 0x04	; 4
    2110:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2112:	e0 eb       	ldi	r30, 0xB0	; 176
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	81 60       	ori	r24, 0x01	; 1
    211a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    211c:	ea e7       	ldi	r30, 0x7A	; 122
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	84 60       	ori	r24, 0x04	; 4
    2124:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2126:	80 81       	ld	r24, Z
    2128:	82 60       	ori	r24, 0x02	; 2
    212a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    212c:	80 81       	ld	r24, Z
    212e:	81 60       	ori	r24, 0x01	; 1
    2130:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2132:	80 81       	ld	r24, Z
    2134:	80 68       	ori	r24, 0x80	; 128
    2136:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2138:	10 92 c1 00 	sts	0x00C1, r1
    213c:	08 95       	ret

0000213e <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    213e:	8e 30       	cpi	r24, 0x0E	; 14
    2140:	08 f0       	brcs	.+2      	; 0x2144 <analogRead+0x6>
    2142:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2144:	87 70       	andi	r24, 0x07	; 7
    2146:	90 91 11 01 	lds	r25, 0x0111
    214a:	40 e4       	ldi	r20, 0x40	; 64
    214c:	94 9f       	mul	r25, r20
    214e:	90 01       	movw	r18, r0
    2150:	11 24       	eor	r1, r1
    2152:	28 2b       	or	r18, r24
    2154:	20 93 7c 00 	sts	0x007C, r18
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2158:	ea e7       	ldi	r30, 0x7A	; 122
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	80 64       	ori	r24, 0x40	; 64
    2160:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2162:	80 81       	ld	r24, Z
    2164:	86 fd       	sbrc	r24, 6
    2166:	fd cf       	rjmp	.-6      	; 0x2162 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2168:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    216c:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2170:	90 e0       	ldi	r25, 0x00	; 0
}
    2172:	92 2b       	or	r25, r18
    2174:	08 95       	ret

00002176 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2176:	83 30       	cpi	r24, 0x03	; 3
    2178:	69 f0       	breq	.+26     	; 0x2194 <turnOffPWM+0x1e>
    217a:	28 f4       	brcc	.+10     	; 0x2186 <turnOffPWM+0x10>
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	b1 f0       	breq	.+44     	; 0x21ac <turnOffPWM+0x36>
    2180:	82 30       	cpi	r24, 0x02	; 2
    2182:	c1 f0       	breq	.+48     	; 0x21b4 <turnOffPWM+0x3e>
    2184:	08 95       	ret
    2186:	87 30       	cpi	r24, 0x07	; 7
    2188:	c9 f0       	breq	.+50     	; 0x21bc <turnOffPWM+0x46>
    218a:	88 30       	cpi	r24, 0x08	; 8
    218c:	e9 f0       	breq	.+58     	; 0x21c8 <turnOffPWM+0x52>
    218e:	84 30       	cpi	r24, 0x04	; 4
    2190:	01 f5       	brne	.+64     	; 0x21d2 <turnOffPWM+0x5c>
    2192:	06 c0       	rjmp	.+12     	; 0x21a0 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2194:	e0 e8       	ldi	r30, 0x80	; 128
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	8f 77       	andi	r24, 0x7F	; 127
    219c:	80 83       	st	Z, r24
    219e:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    21a0:	e0 e8       	ldi	r30, 0x80	; 128
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	8f 7d       	andi	r24, 0xDF	; 223
    21a8:	80 83       	st	Z, r24
    21aa:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    21ac:	84 b5       	in	r24, 0x24	; 36
    21ae:	8f 77       	andi	r24, 0x7F	; 127
    21b0:	84 bd       	out	0x24, r24	; 36
    21b2:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    21b4:	84 b5       	in	r24, 0x24	; 36
    21b6:	8f 7d       	andi	r24, 0xDF	; 223
    21b8:	84 bd       	out	0x24, r24	; 36
    21ba:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    21bc:	e0 eb       	ldi	r30, 0xB0	; 176
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	8f 77       	andi	r24, 0x7F	; 127
    21c4:	80 83       	st	Z, r24
    21c6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    21c8:	e0 eb       	ldi	r30, 0xB0	; 176
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	8f 7d       	andi	r24, 0xDF	; 223
    21d0:	80 83       	st	Z, r24
    21d2:	08 95       	ret

000021d4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	fc 01       	movw	r30, r24
    21dc:	eb 53       	subi	r30, 0x3B	; 59
    21de:	fd 4f       	sbci	r31, 0xFD	; 253
    21e0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    21e2:	fc 01       	movw	r30, r24
    21e4:	e7 52       	subi	r30, 0x27	; 39
    21e6:	fd 4f       	sbci	r31, 0xFD	; 253
    21e8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    21ea:	88 23       	and	r24, r24
    21ec:	79 f1       	breq	.+94     	; 0x224c <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	fc 01       	movw	r30, r24
    21f6:	ef 5f       	subi	r30, 0xFF	; 255
    21f8:	fc 4f       	sbci	r31, 0xFC	; 252
    21fa:	a5 91       	lpm	r26, Z+
    21fc:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    21fe:	fc 01       	movw	r30, r24
    2200:	e9 50       	subi	r30, 0x09	; 9
    2202:	fd 4f       	sbci	r31, 0xFD	; 253
    2204:	c5 91       	lpm	r28, Z+
    2206:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    2208:	61 11       	cpse	r22, r1
    220a:	0c c0       	rjmp	.+24     	; 0x2224 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    220c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    220e:	f8 94       	cli
		*reg &= ~bit;
    2210:	8c 91       	ld	r24, X
    2212:	e2 2f       	mov	r30, r18
    2214:	e0 95       	com	r30
    2216:	8e 23       	and	r24, r30
    2218:	8c 93       	st	X, r24
		*out &= ~bit;
    221a:	28 81       	ld	r18, Y
    221c:	e2 23       	and	r30, r18
    221e:	e8 83       	st	Y, r30
		SREG = oldSREG;
    2220:	9f bf       	out	0x3f, r25	; 63
    2222:	14 c0       	rjmp	.+40     	; 0x224c <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    2224:	62 30       	cpi	r22, 0x02	; 2
    2226:	61 f4       	brne	.+24     	; 0x2240 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    2228:	9f b7       	in	r25, 0x3f	; 63
                cli();
    222a:	f8 94       	cli
		*reg &= ~bit;
    222c:	3c 91       	ld	r19, X
    222e:	82 2f       	mov	r24, r18
    2230:	80 95       	com	r24
    2232:	83 23       	and	r24, r19
    2234:	8c 93       	st	X, r24
		*out |= bit;
    2236:	e8 81       	ld	r30, Y
    2238:	e2 2b       	or	r30, r18
    223a:	e8 83       	st	Y, r30
		SREG = oldSREG;
    223c:	9f bf       	out	0x3f, r25	; 63
    223e:	06 c0       	rjmp	.+12     	; 0x224c <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    2240:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2242:	f8 94       	cli
		*reg |= bit;
    2244:	ec 91       	ld	r30, X
    2246:	e2 2b       	or	r30, r18
    2248:	ec 93       	st	X, r30
		SREG = oldSREG;
    224a:	8f bf       	out	0x3f, r24	; 63
	}
}
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
    2250:	08 95       	ret

00002252 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2252:	1f 93       	push	r17
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	f9 01       	movw	r30, r18
    225e:	ef 54       	subi	r30, 0x4F	; 79
    2260:	fd 4f       	sbci	r31, 0xFD	; 253
    2262:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2264:	f9 01       	movw	r30, r18
    2266:	eb 53       	subi	r30, 0x3B	; 59
    2268:	fd 4f       	sbci	r31, 0xFD	; 253
    226a:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    226c:	f9 01       	movw	r30, r18
    226e:	e7 52       	subi	r30, 0x27	; 39
    2270:	fd 4f       	sbci	r31, 0xFD	; 253
    2272:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2274:	cc 23       	and	r28, r28
    2276:	d1 f0       	breq	.+52     	; 0x22ac <digitalWrite+0x5a>
    2278:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    227a:	81 11       	cpse	r24, r1
    227c:	0e 94 bb 10 	call	0x2176	; 0x2176 <turnOffPWM>

	out = portOutputRegister(port);
    2280:	ec 2f       	mov	r30, r28
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	e9 50       	subi	r30, 0x09	; 9
    228a:	fd 4f       	sbci	r31, 0xFD	; 253
    228c:	a5 91       	lpm	r26, Z+
    228e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2290:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2292:	f8 94       	cli

	if (val == LOW) {
    2294:	d1 11       	cpse	r29, r1
    2296:	06 c0       	rjmp	.+12     	; 0x22a4 <digitalWrite+0x52>
		*out &= ~bit;
    2298:	9c 91       	ld	r25, X
    229a:	e1 2f       	mov	r30, r17
    229c:	e0 95       	com	r30
    229e:	e9 23       	and	r30, r25
    22a0:	ec 93       	st	X, r30
    22a2:	03 c0       	rjmp	.+6      	; 0x22aa <digitalWrite+0x58>
	} else {
		*out |= bit;
    22a4:	ec 91       	ld	r30, X
    22a6:	e1 2b       	or	r30, r17
    22a8:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    22aa:	8f bf       	out	0x3f, r24	; 63
}
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	1f 91       	pop	r17
    22b2:	08 95       	ret

000022b4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	f9 01       	movw	r30, r18
    22be:	ef 54       	subi	r30, 0x4F	; 79
    22c0:	fd 4f       	sbci	r31, 0xFD	; 253
    22c2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    22c4:	f9 01       	movw	r30, r18
    22c6:	eb 53       	subi	r30, 0x3B	; 59
    22c8:	fd 4f       	sbci	r31, 0xFD	; 253
    22ca:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    22cc:	f9 01       	movw	r30, r18
    22ce:	e7 52       	subi	r30, 0x27	; 39
    22d0:	fd 4f       	sbci	r31, 0xFD	; 253
    22d2:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    22d4:	cc 23       	and	r28, r28
    22d6:	91 f0       	breq	.+36     	; 0x22fc <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    22d8:	81 11       	cpse	r24, r1
    22da:	0e 94 bb 10 	call	0x2176	; 0x2176 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    22de:	ec 2f       	mov	r30, r28
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	ee 0f       	add	r30, r30
    22e4:	ff 1f       	adc	r31, r31
    22e6:	e3 51       	subi	r30, 0x13	; 19
    22e8:	fd 4f       	sbci	r31, 0xFD	; 253
    22ea:	a5 91       	lpm	r26, Z+
    22ec:	b4 91       	lpm	r27, Z
    22ee:	ec 91       	ld	r30, X
    22f0:	ed 23       	and	r30, r29
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	21 f4       	brne	.+8      	; 0x2300 <digitalRead+0x4c>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	08 95       	ret

00002306 <__subsf3>:
    2306:	50 58       	subi	r21, 0x80	; 128

00002308 <__addsf3>:
    2308:	bb 27       	eor	r27, r27
    230a:	aa 27       	eor	r26, r26
    230c:	0e 94 9b 11 	call	0x2336	; 0x2336 <__addsf3x>
    2310:	0c 94 15 13 	jmp	0x262a	; 0x262a <__fp_round>
    2314:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscA>
    2318:	38 f0       	brcs	.+14     	; 0x2328 <__addsf3+0x20>
    231a:	0e 94 0e 13 	call	0x261c	; 0x261c <__fp_pscB>
    231e:	20 f0       	brcs	.+8      	; 0x2328 <__addsf3+0x20>
    2320:	39 f4       	brne	.+14     	; 0x2330 <__addsf3+0x28>
    2322:	9f 3f       	cpi	r25, 0xFF	; 255
    2324:	19 f4       	brne	.+6      	; 0x232c <__addsf3+0x24>
    2326:	26 f4       	brtc	.+8      	; 0x2330 <__addsf3+0x28>
    2328:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__fp_nan>
    232c:	0e f4       	brtc	.+2      	; 0x2330 <__addsf3+0x28>
    232e:	e0 95       	com	r30
    2330:	e7 fb       	bst	r30, 7
    2332:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__fp_inf>

00002336 <__addsf3x>:
    2336:	e9 2f       	mov	r30, r25
    2338:	0e 94 26 13 	call	0x264c	; 0x264c <__fp_split3>
    233c:	58 f3       	brcs	.-42     	; 0x2314 <__addsf3+0xc>
    233e:	ba 17       	cp	r27, r26
    2340:	62 07       	cpc	r22, r18
    2342:	73 07       	cpc	r23, r19
    2344:	84 07       	cpc	r24, r20
    2346:	95 07       	cpc	r25, r21
    2348:	20 f0       	brcs	.+8      	; 0x2352 <__addsf3x+0x1c>
    234a:	79 f4       	brne	.+30     	; 0x236a <__addsf3x+0x34>
    234c:	a6 f5       	brtc	.+104    	; 0x23b6 <__addsf3x+0x80>
    234e:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__fp_zero>
    2352:	0e f4       	brtc	.+2      	; 0x2356 <__addsf3x+0x20>
    2354:	e0 95       	com	r30
    2356:	0b 2e       	mov	r0, r27
    2358:	ba 2f       	mov	r27, r26
    235a:	a0 2d       	mov	r26, r0
    235c:	0b 01       	movw	r0, r22
    235e:	b9 01       	movw	r22, r18
    2360:	90 01       	movw	r18, r0
    2362:	0c 01       	movw	r0, r24
    2364:	ca 01       	movw	r24, r20
    2366:	a0 01       	movw	r20, r0
    2368:	11 24       	eor	r1, r1
    236a:	ff 27       	eor	r31, r31
    236c:	59 1b       	sub	r21, r25
    236e:	99 f0       	breq	.+38     	; 0x2396 <__addsf3x+0x60>
    2370:	59 3f       	cpi	r21, 0xF9	; 249
    2372:	50 f4       	brcc	.+20     	; 0x2388 <__addsf3x+0x52>
    2374:	50 3e       	cpi	r21, 0xE0	; 224
    2376:	68 f1       	brcs	.+90     	; 0x23d2 <__addsf3x+0x9c>
    2378:	1a 16       	cp	r1, r26
    237a:	f0 40       	sbci	r31, 0x00	; 0
    237c:	a2 2f       	mov	r26, r18
    237e:	23 2f       	mov	r18, r19
    2380:	34 2f       	mov	r19, r20
    2382:	44 27       	eor	r20, r20
    2384:	58 5f       	subi	r21, 0xF8	; 248
    2386:	f3 cf       	rjmp	.-26     	; 0x236e <__addsf3x+0x38>
    2388:	46 95       	lsr	r20
    238a:	37 95       	ror	r19
    238c:	27 95       	ror	r18
    238e:	a7 95       	ror	r26
    2390:	f0 40       	sbci	r31, 0x00	; 0
    2392:	53 95       	inc	r21
    2394:	c9 f7       	brne	.-14     	; 0x2388 <__addsf3x+0x52>
    2396:	7e f4       	brtc	.+30     	; 0x23b6 <__addsf3x+0x80>
    2398:	1f 16       	cp	r1, r31
    239a:	ba 0b       	sbc	r27, r26
    239c:	62 0b       	sbc	r22, r18
    239e:	73 0b       	sbc	r23, r19
    23a0:	84 0b       	sbc	r24, r20
    23a2:	ba f0       	brmi	.+46     	; 0x23d2 <__addsf3x+0x9c>
    23a4:	91 50       	subi	r25, 0x01	; 1
    23a6:	a1 f0       	breq	.+40     	; 0x23d0 <__addsf3x+0x9a>
    23a8:	ff 0f       	add	r31, r31
    23aa:	bb 1f       	adc	r27, r27
    23ac:	66 1f       	adc	r22, r22
    23ae:	77 1f       	adc	r23, r23
    23b0:	88 1f       	adc	r24, r24
    23b2:	c2 f7       	brpl	.-16     	; 0x23a4 <__addsf3x+0x6e>
    23b4:	0e c0       	rjmp	.+28     	; 0x23d2 <__addsf3x+0x9c>
    23b6:	ba 0f       	add	r27, r26
    23b8:	62 1f       	adc	r22, r18
    23ba:	73 1f       	adc	r23, r19
    23bc:	84 1f       	adc	r24, r20
    23be:	48 f4       	brcc	.+18     	; 0x23d2 <__addsf3x+0x9c>
    23c0:	87 95       	ror	r24
    23c2:	77 95       	ror	r23
    23c4:	67 95       	ror	r22
    23c6:	b7 95       	ror	r27
    23c8:	f7 95       	ror	r31
    23ca:	9e 3f       	cpi	r25, 0xFE	; 254
    23cc:	08 f0       	brcs	.+2      	; 0x23d0 <__addsf3x+0x9a>
    23ce:	b0 cf       	rjmp	.-160    	; 0x2330 <__addsf3+0x28>
    23d0:	93 95       	inc	r25
    23d2:	88 0f       	add	r24, r24
    23d4:	08 f0       	brcs	.+2      	; 0x23d8 <__addsf3x+0xa2>
    23d6:	99 27       	eor	r25, r25
    23d8:	ee 0f       	add	r30, r30
    23da:	97 95       	ror	r25
    23dc:	87 95       	ror	r24
    23de:	08 95       	ret

000023e0 <__cmpsf2>:
    23e0:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fp_cmp>
    23e4:	08 f4       	brcc	.+2      	; 0x23e8 <__cmpsf2+0x8>
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	08 95       	ret

000023ea <__divsf3>:
    23ea:	0e 94 09 12 	call	0x2412	; 0x2412 <__divsf3x>
    23ee:	0c 94 15 13 	jmp	0x262a	; 0x262a <__fp_round>
    23f2:	0e 94 0e 13 	call	0x261c	; 0x261c <__fp_pscB>
    23f6:	58 f0       	brcs	.+22     	; 0x240e <__divsf3+0x24>
    23f8:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscA>
    23fc:	40 f0       	brcs	.+16     	; 0x240e <__divsf3+0x24>
    23fe:	29 f4       	brne	.+10     	; 0x240a <__divsf3+0x20>
    2400:	5f 3f       	cpi	r21, 0xFF	; 255
    2402:	29 f0       	breq	.+10     	; 0x240e <__divsf3+0x24>
    2404:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__fp_inf>
    2408:	51 11       	cpse	r21, r1
    240a:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__fp_szero>
    240e:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__fp_nan>

00002412 <__divsf3x>:
    2412:	0e 94 26 13 	call	0x264c	; 0x264c <__fp_split3>
    2416:	68 f3       	brcs	.-38     	; 0x23f2 <__divsf3+0x8>

00002418 <__divsf3_pse>:
    2418:	99 23       	and	r25, r25
    241a:	b1 f3       	breq	.-20     	; 0x2408 <__divsf3+0x1e>
    241c:	55 23       	and	r21, r21
    241e:	91 f3       	breq	.-28     	; 0x2404 <__divsf3+0x1a>
    2420:	95 1b       	sub	r25, r21
    2422:	55 0b       	sbc	r21, r21
    2424:	bb 27       	eor	r27, r27
    2426:	aa 27       	eor	r26, r26
    2428:	62 17       	cp	r22, r18
    242a:	73 07       	cpc	r23, r19
    242c:	84 07       	cpc	r24, r20
    242e:	38 f0       	brcs	.+14     	; 0x243e <__divsf3_pse+0x26>
    2430:	9f 5f       	subi	r25, 0xFF	; 255
    2432:	5f 4f       	sbci	r21, 0xFF	; 255
    2434:	22 0f       	add	r18, r18
    2436:	33 1f       	adc	r19, r19
    2438:	44 1f       	adc	r20, r20
    243a:	aa 1f       	adc	r26, r26
    243c:	a9 f3       	breq	.-22     	; 0x2428 <__divsf3_pse+0x10>
    243e:	35 d0       	rcall	.+106    	; 0x24aa <__divsf3_pse+0x92>
    2440:	0e 2e       	mov	r0, r30
    2442:	3a f0       	brmi	.+14     	; 0x2452 <__divsf3_pse+0x3a>
    2444:	e0 e8       	ldi	r30, 0x80	; 128
    2446:	32 d0       	rcall	.+100    	; 0x24ac <__divsf3_pse+0x94>
    2448:	91 50       	subi	r25, 0x01	; 1
    244a:	50 40       	sbci	r21, 0x00	; 0
    244c:	e6 95       	lsr	r30
    244e:	00 1c       	adc	r0, r0
    2450:	ca f7       	brpl	.-14     	; 0x2444 <__divsf3_pse+0x2c>
    2452:	2b d0       	rcall	.+86     	; 0x24aa <__divsf3_pse+0x92>
    2454:	fe 2f       	mov	r31, r30
    2456:	29 d0       	rcall	.+82     	; 0x24aa <__divsf3_pse+0x92>
    2458:	66 0f       	add	r22, r22
    245a:	77 1f       	adc	r23, r23
    245c:	88 1f       	adc	r24, r24
    245e:	bb 1f       	adc	r27, r27
    2460:	26 17       	cp	r18, r22
    2462:	37 07       	cpc	r19, r23
    2464:	48 07       	cpc	r20, r24
    2466:	ab 07       	cpc	r26, r27
    2468:	b0 e8       	ldi	r27, 0x80	; 128
    246a:	09 f0       	breq	.+2      	; 0x246e <__divsf3_pse+0x56>
    246c:	bb 0b       	sbc	r27, r27
    246e:	80 2d       	mov	r24, r0
    2470:	bf 01       	movw	r22, r30
    2472:	ff 27       	eor	r31, r31
    2474:	93 58       	subi	r25, 0x83	; 131
    2476:	5f 4f       	sbci	r21, 0xFF	; 255
    2478:	3a f0       	brmi	.+14     	; 0x2488 <__divsf3_pse+0x70>
    247a:	9e 3f       	cpi	r25, 0xFE	; 254
    247c:	51 05       	cpc	r21, r1
    247e:	78 f0       	brcs	.+30     	; 0x249e <__divsf3_pse+0x86>
    2480:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__fp_inf>
    2484:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__fp_szero>
    2488:	5f 3f       	cpi	r21, 0xFF	; 255
    248a:	e4 f3       	brlt	.-8      	; 0x2484 <__divsf3_pse+0x6c>
    248c:	98 3e       	cpi	r25, 0xE8	; 232
    248e:	d4 f3       	brlt	.-12     	; 0x2484 <__divsf3_pse+0x6c>
    2490:	86 95       	lsr	r24
    2492:	77 95       	ror	r23
    2494:	67 95       	ror	r22
    2496:	b7 95       	ror	r27
    2498:	f7 95       	ror	r31
    249a:	9f 5f       	subi	r25, 0xFF	; 255
    249c:	c9 f7       	brne	.-14     	; 0x2490 <__divsf3_pse+0x78>
    249e:	88 0f       	add	r24, r24
    24a0:	91 1d       	adc	r25, r1
    24a2:	96 95       	lsr	r25
    24a4:	87 95       	ror	r24
    24a6:	97 f9       	bld	r25, 7
    24a8:	08 95       	ret
    24aa:	e1 e0       	ldi	r30, 0x01	; 1
    24ac:	66 0f       	add	r22, r22
    24ae:	77 1f       	adc	r23, r23
    24b0:	88 1f       	adc	r24, r24
    24b2:	bb 1f       	adc	r27, r27
    24b4:	62 17       	cp	r22, r18
    24b6:	73 07       	cpc	r23, r19
    24b8:	84 07       	cpc	r24, r20
    24ba:	ba 07       	cpc	r27, r26
    24bc:	20 f0       	brcs	.+8      	; 0x24c6 <__divsf3_pse+0xae>
    24be:	62 1b       	sub	r22, r18
    24c0:	73 0b       	sbc	r23, r19
    24c2:	84 0b       	sbc	r24, r20
    24c4:	ba 0b       	sbc	r27, r26
    24c6:	ee 1f       	adc	r30, r30
    24c8:	88 f7       	brcc	.-30     	; 0x24ac <__divsf3_pse+0x94>
    24ca:	e0 95       	com	r30
    24cc:	08 95       	ret

000024ce <__fixsfsi>:
    24ce:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__fixunssfsi>
    24d2:	68 94       	set
    24d4:	b1 11       	cpse	r27, r1
    24d6:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__fp_szero>
    24da:	08 95       	ret

000024dc <__fixunssfsi>:
    24dc:	0e 94 2e 13 	call	0x265c	; 0x265c <__fp_splitA>
    24e0:	88 f0       	brcs	.+34     	; 0x2504 <__fixunssfsi+0x28>
    24e2:	9f 57       	subi	r25, 0x7F	; 127
    24e4:	98 f0       	brcs	.+38     	; 0x250c <__fixunssfsi+0x30>
    24e6:	b9 2f       	mov	r27, r25
    24e8:	99 27       	eor	r25, r25
    24ea:	b7 51       	subi	r27, 0x17	; 23
    24ec:	b0 f0       	brcs	.+44     	; 0x251a <__fixunssfsi+0x3e>
    24ee:	e1 f0       	breq	.+56     	; 0x2528 <__fixunssfsi+0x4c>
    24f0:	66 0f       	add	r22, r22
    24f2:	77 1f       	adc	r23, r23
    24f4:	88 1f       	adc	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	1a f0       	brmi	.+6      	; 0x2500 <__fixunssfsi+0x24>
    24fa:	ba 95       	dec	r27
    24fc:	c9 f7       	brne	.-14     	; 0x24f0 <__fixunssfsi+0x14>
    24fe:	14 c0       	rjmp	.+40     	; 0x2528 <__fixunssfsi+0x4c>
    2500:	b1 30       	cpi	r27, 0x01	; 1
    2502:	91 f0       	breq	.+36     	; 0x2528 <__fixunssfsi+0x4c>
    2504:	0e 94 48 13 	call	0x2690	; 0x2690 <__fp_zero>
    2508:	b1 e0       	ldi	r27, 0x01	; 1
    250a:	08 95       	ret
    250c:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__fp_zero>
    2510:	67 2f       	mov	r22, r23
    2512:	78 2f       	mov	r23, r24
    2514:	88 27       	eor	r24, r24
    2516:	b8 5f       	subi	r27, 0xF8	; 248
    2518:	39 f0       	breq	.+14     	; 0x2528 <__fixunssfsi+0x4c>
    251a:	b9 3f       	cpi	r27, 0xF9	; 249
    251c:	cc f3       	brlt	.-14     	; 0x2510 <__fixunssfsi+0x34>
    251e:	86 95       	lsr	r24
    2520:	77 95       	ror	r23
    2522:	67 95       	ror	r22
    2524:	b3 95       	inc	r27
    2526:	d9 f7       	brne	.-10     	; 0x251e <__fixunssfsi+0x42>
    2528:	3e f4       	brtc	.+14     	; 0x2538 <__fixunssfsi+0x5c>
    252a:	90 95       	com	r25
    252c:	80 95       	com	r24
    252e:	70 95       	com	r23
    2530:	61 95       	neg	r22
    2532:	7f 4f       	sbci	r23, 0xFF	; 255
    2534:	8f 4f       	sbci	r24, 0xFF	; 255
    2536:	9f 4f       	sbci	r25, 0xFF	; 255
    2538:	08 95       	ret

0000253a <__floatunsisf>:
    253a:	e8 94       	clt
    253c:	09 c0       	rjmp	.+18     	; 0x2550 <__floatsisf+0x12>

0000253e <__floatsisf>:
    253e:	97 fb       	bst	r25, 7
    2540:	3e f4       	brtc	.+14     	; 0x2550 <__floatsisf+0x12>
    2542:	90 95       	com	r25
    2544:	80 95       	com	r24
    2546:	70 95       	com	r23
    2548:	61 95       	neg	r22
    254a:	7f 4f       	sbci	r23, 0xFF	; 255
    254c:	8f 4f       	sbci	r24, 0xFF	; 255
    254e:	9f 4f       	sbci	r25, 0xFF	; 255
    2550:	99 23       	and	r25, r25
    2552:	a9 f0       	breq	.+42     	; 0x257e <__floatsisf+0x40>
    2554:	f9 2f       	mov	r31, r25
    2556:	96 e9       	ldi	r25, 0x96	; 150
    2558:	bb 27       	eor	r27, r27
    255a:	93 95       	inc	r25
    255c:	f6 95       	lsr	r31
    255e:	87 95       	ror	r24
    2560:	77 95       	ror	r23
    2562:	67 95       	ror	r22
    2564:	b7 95       	ror	r27
    2566:	f1 11       	cpse	r31, r1
    2568:	f8 cf       	rjmp	.-16     	; 0x255a <__floatsisf+0x1c>
    256a:	fa f4       	brpl	.+62     	; 0x25aa <__floatsisf+0x6c>
    256c:	bb 0f       	add	r27, r27
    256e:	11 f4       	brne	.+4      	; 0x2574 <__floatsisf+0x36>
    2570:	60 ff       	sbrs	r22, 0
    2572:	1b c0       	rjmp	.+54     	; 0x25aa <__floatsisf+0x6c>
    2574:	6f 5f       	subi	r22, 0xFF	; 255
    2576:	7f 4f       	sbci	r23, 0xFF	; 255
    2578:	8f 4f       	sbci	r24, 0xFF	; 255
    257a:	9f 4f       	sbci	r25, 0xFF	; 255
    257c:	16 c0       	rjmp	.+44     	; 0x25aa <__floatsisf+0x6c>
    257e:	88 23       	and	r24, r24
    2580:	11 f0       	breq	.+4      	; 0x2586 <__floatsisf+0x48>
    2582:	96 e9       	ldi	r25, 0x96	; 150
    2584:	11 c0       	rjmp	.+34     	; 0x25a8 <__floatsisf+0x6a>
    2586:	77 23       	and	r23, r23
    2588:	21 f0       	breq	.+8      	; 0x2592 <__floatsisf+0x54>
    258a:	9e e8       	ldi	r25, 0x8E	; 142
    258c:	87 2f       	mov	r24, r23
    258e:	76 2f       	mov	r23, r22
    2590:	05 c0       	rjmp	.+10     	; 0x259c <__floatsisf+0x5e>
    2592:	66 23       	and	r22, r22
    2594:	71 f0       	breq	.+28     	; 0x25b2 <__floatsisf+0x74>
    2596:	96 e8       	ldi	r25, 0x86	; 134
    2598:	86 2f       	mov	r24, r22
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	2a f0       	brmi	.+10     	; 0x25aa <__floatsisf+0x6c>
    25a0:	9a 95       	dec	r25
    25a2:	66 0f       	add	r22, r22
    25a4:	77 1f       	adc	r23, r23
    25a6:	88 1f       	adc	r24, r24
    25a8:	da f7       	brpl	.-10     	; 0x25a0 <__floatsisf+0x62>
    25aa:	88 0f       	add	r24, r24
    25ac:	96 95       	lsr	r25
    25ae:	87 95       	ror	r24
    25b0:	97 f9       	bld	r25, 7
    25b2:	08 95       	ret

000025b4 <__fp_cmp>:
    25b4:	99 0f       	add	r25, r25
    25b6:	00 08       	sbc	r0, r0
    25b8:	55 0f       	add	r21, r21
    25ba:	aa 0b       	sbc	r26, r26
    25bc:	e0 e8       	ldi	r30, 0x80	; 128
    25be:	fe ef       	ldi	r31, 0xFE	; 254
    25c0:	16 16       	cp	r1, r22
    25c2:	17 06       	cpc	r1, r23
    25c4:	e8 07       	cpc	r30, r24
    25c6:	f9 07       	cpc	r31, r25
    25c8:	c0 f0       	brcs	.+48     	; 0x25fa <__fp_cmp+0x46>
    25ca:	12 16       	cp	r1, r18
    25cc:	13 06       	cpc	r1, r19
    25ce:	e4 07       	cpc	r30, r20
    25d0:	f5 07       	cpc	r31, r21
    25d2:	98 f0       	brcs	.+38     	; 0x25fa <__fp_cmp+0x46>
    25d4:	62 1b       	sub	r22, r18
    25d6:	73 0b       	sbc	r23, r19
    25d8:	84 0b       	sbc	r24, r20
    25da:	95 0b       	sbc	r25, r21
    25dc:	39 f4       	brne	.+14     	; 0x25ec <__fp_cmp+0x38>
    25de:	0a 26       	eor	r0, r26
    25e0:	61 f0       	breq	.+24     	; 0x25fa <__fp_cmp+0x46>
    25e2:	23 2b       	or	r18, r19
    25e4:	24 2b       	or	r18, r20
    25e6:	25 2b       	or	r18, r21
    25e8:	21 f4       	brne	.+8      	; 0x25f2 <__fp_cmp+0x3e>
    25ea:	08 95       	ret
    25ec:	0a 26       	eor	r0, r26
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <__fp_cmp+0x3e>
    25f0:	a1 40       	sbci	r26, 0x01	; 1
    25f2:	a6 95       	lsr	r26
    25f4:	8f ef       	ldi	r24, 0xFF	; 255
    25f6:	81 1d       	adc	r24, r1
    25f8:	81 1d       	adc	r24, r1
    25fa:	08 95       	ret

000025fc <__fp_inf>:
    25fc:	97 f9       	bld	r25, 7
    25fe:	9f 67       	ori	r25, 0x7F	; 127
    2600:	80 e8       	ldi	r24, 0x80	; 128
    2602:	70 e0       	ldi	r23, 0x00	; 0
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	08 95       	ret

00002608 <__fp_nan>:
    2608:	9f ef       	ldi	r25, 0xFF	; 255
    260a:	80 ec       	ldi	r24, 0xC0	; 192
    260c:	08 95       	ret

0000260e <__fp_pscA>:
    260e:	00 24       	eor	r0, r0
    2610:	0a 94       	dec	r0
    2612:	16 16       	cp	r1, r22
    2614:	17 06       	cpc	r1, r23
    2616:	18 06       	cpc	r1, r24
    2618:	09 06       	cpc	r0, r25
    261a:	08 95       	ret

0000261c <__fp_pscB>:
    261c:	00 24       	eor	r0, r0
    261e:	0a 94       	dec	r0
    2620:	12 16       	cp	r1, r18
    2622:	13 06       	cpc	r1, r19
    2624:	14 06       	cpc	r1, r20
    2626:	05 06       	cpc	r0, r21
    2628:	08 95       	ret

0000262a <__fp_round>:
    262a:	09 2e       	mov	r0, r25
    262c:	03 94       	inc	r0
    262e:	00 0c       	add	r0, r0
    2630:	11 f4       	brne	.+4      	; 0x2636 <__fp_round+0xc>
    2632:	88 23       	and	r24, r24
    2634:	52 f0       	brmi	.+20     	; 0x264a <__fp_round+0x20>
    2636:	bb 0f       	add	r27, r27
    2638:	40 f4       	brcc	.+16     	; 0x264a <__fp_round+0x20>
    263a:	bf 2b       	or	r27, r31
    263c:	11 f4       	brne	.+4      	; 0x2642 <__fp_round+0x18>
    263e:	60 ff       	sbrs	r22, 0
    2640:	04 c0       	rjmp	.+8      	; 0x264a <__fp_round+0x20>
    2642:	6f 5f       	subi	r22, 0xFF	; 255
    2644:	7f 4f       	sbci	r23, 0xFF	; 255
    2646:	8f 4f       	sbci	r24, 0xFF	; 255
    2648:	9f 4f       	sbci	r25, 0xFF	; 255
    264a:	08 95       	ret

0000264c <__fp_split3>:
    264c:	57 fd       	sbrc	r21, 7
    264e:	90 58       	subi	r25, 0x80	; 128
    2650:	44 0f       	add	r20, r20
    2652:	55 1f       	adc	r21, r21
    2654:	59 f0       	breq	.+22     	; 0x266c <__fp_splitA+0x10>
    2656:	5f 3f       	cpi	r21, 0xFF	; 255
    2658:	71 f0       	breq	.+28     	; 0x2676 <__fp_splitA+0x1a>
    265a:	47 95       	ror	r20

0000265c <__fp_splitA>:
    265c:	88 0f       	add	r24, r24
    265e:	97 fb       	bst	r25, 7
    2660:	99 1f       	adc	r25, r25
    2662:	61 f0       	breq	.+24     	; 0x267c <__fp_splitA+0x20>
    2664:	9f 3f       	cpi	r25, 0xFF	; 255
    2666:	79 f0       	breq	.+30     	; 0x2686 <__fp_splitA+0x2a>
    2668:	87 95       	ror	r24
    266a:	08 95       	ret
    266c:	12 16       	cp	r1, r18
    266e:	13 06       	cpc	r1, r19
    2670:	14 06       	cpc	r1, r20
    2672:	55 1f       	adc	r21, r21
    2674:	f2 cf       	rjmp	.-28     	; 0x265a <__fp_split3+0xe>
    2676:	46 95       	lsr	r20
    2678:	f1 df       	rcall	.-30     	; 0x265c <__fp_splitA>
    267a:	08 c0       	rjmp	.+16     	; 0x268c <__fp_splitA+0x30>
    267c:	16 16       	cp	r1, r22
    267e:	17 06       	cpc	r1, r23
    2680:	18 06       	cpc	r1, r24
    2682:	99 1f       	adc	r25, r25
    2684:	f1 cf       	rjmp	.-30     	; 0x2668 <__fp_splitA+0xc>
    2686:	86 95       	lsr	r24
    2688:	71 05       	cpc	r23, r1
    268a:	61 05       	cpc	r22, r1
    268c:	08 94       	sec
    268e:	08 95       	ret

00002690 <__fp_zero>:
    2690:	e8 94       	clt

00002692 <__fp_szero>:
    2692:	bb 27       	eor	r27, r27
    2694:	66 27       	eor	r22, r22
    2696:	77 27       	eor	r23, r23
    2698:	cb 01       	movw	r24, r22
    269a:	97 f9       	bld	r25, 7
    269c:	08 95       	ret

0000269e <__gesf2>:
    269e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fp_cmp>
    26a2:	08 f4       	brcc	.+2      	; 0x26a6 <__gesf2+0x8>
    26a4:	8f ef       	ldi	r24, 0xFF	; 255
    26a6:	08 95       	ret

000026a8 <__mulsf3>:
    26a8:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3x>
    26ac:	0c 94 15 13 	jmp	0x262a	; 0x262a <__fp_round>
    26b0:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscA>
    26b4:	38 f0       	brcs	.+14     	; 0x26c4 <__mulsf3+0x1c>
    26b6:	0e 94 0e 13 	call	0x261c	; 0x261c <__fp_pscB>
    26ba:	20 f0       	brcs	.+8      	; 0x26c4 <__mulsf3+0x1c>
    26bc:	95 23       	and	r25, r21
    26be:	11 f0       	breq	.+4      	; 0x26c4 <__mulsf3+0x1c>
    26c0:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__fp_inf>
    26c4:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__fp_nan>
    26c8:	11 24       	eor	r1, r1
    26ca:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__fp_szero>

000026ce <__mulsf3x>:
    26ce:	0e 94 26 13 	call	0x264c	; 0x264c <__fp_split3>
    26d2:	70 f3       	brcs	.-36     	; 0x26b0 <__mulsf3+0x8>

000026d4 <__mulsf3_pse>:
    26d4:	95 9f       	mul	r25, r21
    26d6:	c1 f3       	breq	.-16     	; 0x26c8 <__mulsf3+0x20>
    26d8:	95 0f       	add	r25, r21
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	55 1f       	adc	r21, r21
    26de:	62 9f       	mul	r22, r18
    26e0:	f0 01       	movw	r30, r0
    26e2:	72 9f       	mul	r23, r18
    26e4:	bb 27       	eor	r27, r27
    26e6:	f0 0d       	add	r31, r0
    26e8:	b1 1d       	adc	r27, r1
    26ea:	63 9f       	mul	r22, r19
    26ec:	aa 27       	eor	r26, r26
    26ee:	f0 0d       	add	r31, r0
    26f0:	b1 1d       	adc	r27, r1
    26f2:	aa 1f       	adc	r26, r26
    26f4:	64 9f       	mul	r22, r20
    26f6:	66 27       	eor	r22, r22
    26f8:	b0 0d       	add	r27, r0
    26fa:	a1 1d       	adc	r26, r1
    26fc:	66 1f       	adc	r22, r22
    26fe:	82 9f       	mul	r24, r18
    2700:	22 27       	eor	r18, r18
    2702:	b0 0d       	add	r27, r0
    2704:	a1 1d       	adc	r26, r1
    2706:	62 1f       	adc	r22, r18
    2708:	73 9f       	mul	r23, r19
    270a:	b0 0d       	add	r27, r0
    270c:	a1 1d       	adc	r26, r1
    270e:	62 1f       	adc	r22, r18
    2710:	83 9f       	mul	r24, r19
    2712:	a0 0d       	add	r26, r0
    2714:	61 1d       	adc	r22, r1
    2716:	22 1f       	adc	r18, r18
    2718:	74 9f       	mul	r23, r20
    271a:	33 27       	eor	r19, r19
    271c:	a0 0d       	add	r26, r0
    271e:	61 1d       	adc	r22, r1
    2720:	23 1f       	adc	r18, r19
    2722:	84 9f       	mul	r24, r20
    2724:	60 0d       	add	r22, r0
    2726:	21 1d       	adc	r18, r1
    2728:	82 2f       	mov	r24, r18
    272a:	76 2f       	mov	r23, r22
    272c:	6a 2f       	mov	r22, r26
    272e:	11 24       	eor	r1, r1
    2730:	9f 57       	subi	r25, 0x7F	; 127
    2732:	50 40       	sbci	r21, 0x00	; 0
    2734:	9a f0       	brmi	.+38     	; 0x275c <__mulsf3_pse+0x88>
    2736:	f1 f0       	breq	.+60     	; 0x2774 <__mulsf3_pse+0xa0>
    2738:	88 23       	and	r24, r24
    273a:	4a f0       	brmi	.+18     	; 0x274e <__mulsf3_pse+0x7a>
    273c:	ee 0f       	add	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	bb 1f       	adc	r27, r27
    2742:	66 1f       	adc	r22, r22
    2744:	77 1f       	adc	r23, r23
    2746:	88 1f       	adc	r24, r24
    2748:	91 50       	subi	r25, 0x01	; 1
    274a:	50 40       	sbci	r21, 0x00	; 0
    274c:	a9 f7       	brne	.-22     	; 0x2738 <__mulsf3_pse+0x64>
    274e:	9e 3f       	cpi	r25, 0xFE	; 254
    2750:	51 05       	cpc	r21, r1
    2752:	80 f0       	brcs	.+32     	; 0x2774 <__mulsf3_pse+0xa0>
    2754:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__fp_inf>
    2758:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__fp_szero>
    275c:	5f 3f       	cpi	r21, 0xFF	; 255
    275e:	e4 f3       	brlt	.-8      	; 0x2758 <__mulsf3_pse+0x84>
    2760:	98 3e       	cpi	r25, 0xE8	; 232
    2762:	d4 f3       	brlt	.-12     	; 0x2758 <__mulsf3_pse+0x84>
    2764:	86 95       	lsr	r24
    2766:	77 95       	ror	r23
    2768:	67 95       	ror	r22
    276a:	b7 95       	ror	r27
    276c:	f7 95       	ror	r31
    276e:	e7 95       	ror	r30
    2770:	9f 5f       	subi	r25, 0xFF	; 255
    2772:	c1 f7       	brne	.-16     	; 0x2764 <__mulsf3_pse+0x90>
    2774:	fe 2b       	or	r31, r30
    2776:	88 0f       	add	r24, r24
    2778:	91 1d       	adc	r25, r1
    277a:	96 95       	lsr	r25
    277c:	87 95       	ror	r24
    277e:	97 f9       	bld	r25, 7
    2780:	08 95       	ret

00002782 <__unordsf2>:
    2782:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fp_cmp>
    2786:	88 0b       	sbc	r24, r24
    2788:	99 0b       	sbc	r25, r25
    278a:	08 95       	ret

0000278c <__divmodhi4>:
    278c:	97 fb       	bst	r25, 7
    278e:	07 2e       	mov	r0, r23
    2790:	16 f4       	brtc	.+4      	; 0x2796 <__divmodhi4+0xa>
    2792:	00 94       	com	r0
    2794:	07 d0       	rcall	.+14     	; 0x27a4 <__divmodhi4_neg1>
    2796:	77 fd       	sbrc	r23, 7
    2798:	09 d0       	rcall	.+18     	; 0x27ac <__divmodhi4_neg2>
    279a:	0e 94 02 14 	call	0x2804	; 0x2804 <__udivmodhi4>
    279e:	07 fc       	sbrc	r0, 7
    27a0:	05 d0       	rcall	.+10     	; 0x27ac <__divmodhi4_neg2>
    27a2:	3e f4       	brtc	.+14     	; 0x27b2 <__divmodhi4_exit>

000027a4 <__divmodhi4_neg1>:
    27a4:	90 95       	com	r25
    27a6:	81 95       	neg	r24
    27a8:	9f 4f       	sbci	r25, 0xFF	; 255
    27aa:	08 95       	ret

000027ac <__divmodhi4_neg2>:
    27ac:	70 95       	com	r23
    27ae:	61 95       	neg	r22
    27b0:	7f 4f       	sbci	r23, 0xFF	; 255

000027b2 <__divmodhi4_exit>:
    27b2:	08 95       	ret

000027b4 <__udivmodsi4>:
    27b4:	a1 e2       	ldi	r26, 0x21	; 33
    27b6:	1a 2e       	mov	r1, r26
    27b8:	aa 1b       	sub	r26, r26
    27ba:	bb 1b       	sub	r27, r27
    27bc:	fd 01       	movw	r30, r26
    27be:	0d c0       	rjmp	.+26     	; 0x27da <__udivmodsi4_ep>

000027c0 <__udivmodsi4_loop>:
    27c0:	aa 1f       	adc	r26, r26
    27c2:	bb 1f       	adc	r27, r27
    27c4:	ee 1f       	adc	r30, r30
    27c6:	ff 1f       	adc	r31, r31
    27c8:	a2 17       	cp	r26, r18
    27ca:	b3 07       	cpc	r27, r19
    27cc:	e4 07       	cpc	r30, r20
    27ce:	f5 07       	cpc	r31, r21
    27d0:	20 f0       	brcs	.+8      	; 0x27da <__udivmodsi4_ep>
    27d2:	a2 1b       	sub	r26, r18
    27d4:	b3 0b       	sbc	r27, r19
    27d6:	e4 0b       	sbc	r30, r20
    27d8:	f5 0b       	sbc	r31, r21

000027da <__udivmodsi4_ep>:
    27da:	66 1f       	adc	r22, r22
    27dc:	77 1f       	adc	r23, r23
    27de:	88 1f       	adc	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	1a 94       	dec	r1
    27e4:	69 f7       	brne	.-38     	; 0x27c0 <__udivmodsi4_loop>
    27e6:	60 95       	com	r22
    27e8:	70 95       	com	r23
    27ea:	80 95       	com	r24
    27ec:	90 95       	com	r25
    27ee:	9b 01       	movw	r18, r22
    27f0:	ac 01       	movw	r20, r24
    27f2:	bd 01       	movw	r22, r26
    27f4:	cf 01       	movw	r24, r30
    27f6:	08 95       	ret

000027f8 <__tablejump2__>:
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	05 90       	lpm	r0, Z+
    27fe:	f4 91       	lpm	r31, Z
    2800:	e0 2d       	mov	r30, r0
    2802:	09 94       	ijmp

00002804 <__udivmodhi4>:
    2804:	aa 1b       	sub	r26, r26
    2806:	bb 1b       	sub	r27, r27
    2808:	51 e1       	ldi	r21, 0x11	; 17
    280a:	07 c0       	rjmp	.+14     	; 0x281a <__udivmodhi4_ep>

0000280c <__udivmodhi4_loop>:
    280c:	aa 1f       	adc	r26, r26
    280e:	bb 1f       	adc	r27, r27
    2810:	a6 17       	cp	r26, r22
    2812:	b7 07       	cpc	r27, r23
    2814:	10 f0       	brcs	.+4      	; 0x281a <__udivmodhi4_ep>
    2816:	a6 1b       	sub	r26, r22
    2818:	b7 0b       	sbc	r27, r23

0000281a <__udivmodhi4_ep>:
    281a:	88 1f       	adc	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	5a 95       	dec	r21
    2820:	a9 f7       	brne	.-22     	; 0x280c <__udivmodhi4_loop>
    2822:	80 95       	com	r24
    2824:	90 95       	com	r25
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	08 95       	ret

0000282c <memcpy_P>:
    282c:	fb 01       	movw	r30, r22
    282e:	dc 01       	movw	r26, r24
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <memcpy_P+0xa>
    2832:	05 90       	lpm	r0, Z+
    2834:	0d 92       	st	X+, r0
    2836:	41 50       	subi	r20, 0x01	; 1
    2838:	50 40       	sbci	r21, 0x00	; 0
    283a:	d8 f7       	brcc	.-10     	; 0x2832 <memcpy_P+0x6>
    283c:	08 95       	ret

0000283e <_exit>:
    283e:	f8 94       	cli

00002840 <__stop_program>:
    2840:	ff cf       	rjmp	.-2      	; 0x2840 <__stop_program>
